/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2024-09-27 08:02:43.429166
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[0]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKcos(j[3]);
x9=IKsin(j[3]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.09465)*x4);
x13=((0.39225)*x2);
x14=((1.0)*x0);
x15=((0.09465)*x2);
x16=((1.0)*x5);
x17=((1.0)*x4);
x18=((1.0)*x2);
x19=(x0*x1);
x20=(x3*x4);
x21=((-1.0)*x9);
x22=(x1*x5);
x23=(x2*x3);
x24=((-1.0)*x8);
x25=(x1*x4);
x26=(x14*x20);
x27=(x16*x20);
x28=(((x1*x18))+(((-1.0)*x17*x3)));
x29=((((-1.0)*x18*x3))+(((-1.0)*x1*x17)));
x30=(x29*x9);
x31=((((-1.0)*x1*x14*x2))+x26);
x32=(x27+(((-1.0)*x1*x16*x2)));
x33=(x14*(((((-1.0)*x23))+(((-1.0)*x25)))));
x34=(x16*(((((-1.0)*x23))+(((-1.0)*x25)))));
x35=(x31*x9);
x36=(x34*x8);
x37=(x33*x8);
x38=(((x8*((x25+x23))))+((x28*x9)));
x39=(x38*x7);
x40=(((x33*x9))+((x8*((((x19*x2))+(((-1.0)*x26)))))));
x41=(((x34*x9))+((x8*(((((-1.0)*x27))+((x2*x22)))))));
x42=(x41*x7);
x43=(((x5*x6))+((x40*x7)));
eerot[0]=((((-1.0)*x16*x7))+((x40*x6)));
eerot[1]=(((x11*((x37+x35))))+((x10*x43)));
eerot[2]=(((x11*x43))+((x10*(((((-1.0)*x37))+(((-1.0)*x35)))))));
IkReal x44=(x0*x3);
eetrans[0]=((((0.10915)*x5))+(((-1.0)*x13*x19))+(((0.39225)*x0*x20))+((x8*((((x15*x44))+((x12*x19))))))+(((-0.425)*x19))+((x9*(((((-1.0)*x12*x44))+((x15*x19)))))));
eerot[3]=(((x0*x7))+((x41*x6)));
eerot[4]=(((x10*(((((-1.0)*x0*x6))+x42))))+((x11*((((x32*x9))+x36)))));
eerot[5]=(((x10*((((x21*x32))+((x24*x34))))))+((x11*(((((-1.0)*x14*x6))+x42)))));
IkReal x45=(x3*x5);
eetrans[1]=((((0.39225)*x20*x5))+(((-1.0)*x13*x22))+(((-0.10915)*x0))+((x9*(((((-1.0)*x12*x45))+((x15*x22))))))+((x8*((((x15*x45))+((x12*x22))))))+(((-0.425)*x22)));
eerot[6]=(x38*x6);
eerot[7]=(((x10*x39))+((x11*((x30+((x28*x8)))))));
eerot[8]=(((x10*((((x21*x29))+((x24*x28))))))+((x11*x39)));
eetrans[2]=((0.089159)+((x9*((((x1*x12))+((x15*x3))))))+(((-0.425)*x3))+((x8*(((((-1.0)*x1*x15))+((x12*x3))))))+(((-0.39225)*x25))+(((-1.0)*x13*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=((-1.0)*r02);
new_r02=((-1.0)*r00);
new_px=px;
new_r10=r11;
new_r11=((-1.0)*r12);
new_r12=((-1.0)*r10);
new_py=py;
new_r20=r21;
new_r21=((-1.0)*r22);
new_r22=((-1.0)*r20);
new_pz=((-0.089159)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x46=((1.0)*px);
IkReal x47=((1.0)*pz);
IkReal x48=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x48))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x47)));
rxp0_2=((((-1.0)*r10*x46))+((py*r00)));
rxp1_0=((((-1.0)*r21*x48))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x47)));
rxp1_2=((((-1.0)*r11*x46))+((py*r01)));
rxp2_0=((((-1.0)*r22*x48))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x47))+((px*r22)));
rxp2_2=((((-1.0)*r12*x46))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x49=((0.1893)*npx);
IkReal x50=((0.1893)*npy);
IkReal x51=((0.09465)*r22);
IkReal x52=((0.09465)*r21);
IkReal x53=((-0.09465)*r20);
IkReal x54=((-1.0)*r20);
IkReal x55=((-1.0)*rxp0_2);
IkReal x56=((-0.09465)*r21);
IkReal x57=((-1.0)*r21);
IkReal x58=((-1.0)*rxp1_2);
IkReal x59=((-1.0)*npx);
IkReal x60=((-1.0)*r22);
IkReal x61=((-1.0)*npz);
matrixinvcoeffs[0]=x53;
matrixinvcoeffs[1]=x49;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x54;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x55;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x53;
matrixinvcoeffs[19]=x49;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x54;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x55;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x56;
matrixinvcoeffs[33]=x50;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x57;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x58;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x56;
matrixinvcoeffs[51]=x50;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x57;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x58;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x60;
matrixinvcoeffs[76]=x51;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x61;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x51;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x58;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x56;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x58;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x52;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x54;
matrixinvcoeffs[133]=x59;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x54;
matrixinvcoeffs[151]=x59;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x53;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x60;
matrixinvcoeffs[165]=x61;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x51;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x60;
matrixinvcoeffs[183]=x61;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x57;
matrixinvcoeffs[204]=x52;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x58;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x52;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x59;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x53;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x54;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x53;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x55;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x62=pz*pz;
IkReal x63=pp*pp;
IkReal x64=((0.1893)*pz);
IkReal x65=((1.7)*pz);
IkReal x66=(gclwh15_9*npx);
IkReal x67=(gclwh6_11*r21);
IkReal x68=(pp*r22);
IkReal x69=((0.00702803935125)*r21);
IkReal x70=(gclwh5_9*npz);
IkReal x71=(gclwh8_11*r20);
IkReal x72=(npy*pz);
IkReal x73=((3.60823078949063e-5)*r22);
IkReal x74=(gclwh14_3*rxp0_2);
IkReal x75=((0.000977833645875)*r20);
IkReal x76=(npz*pz);
IkReal x77=((0.000977833645875)*r21);
IkReal x78=(gclwh10_12*r22);
IkReal x79=(gclwh10_2*rxp2_2);
IkReal x80=((0.00076243651125)*rxp1_2);
IkReal x81=((0.00600991575645741)*r20);
IkReal x82=((0.154705425)*rxp1_2);
IkReal x83=((0.017917245)*r21);
IkReal x84=(gclwh6_11*rxp1_2);
IkReal x85=((0.3786)*rxp1_2);
IkReal x86=(gclwh7_0*rxp1_2);
IkReal x87=((0.7572)*rxp1_2);
IkReal x88=((0.154705425)*rxp2_2);
IkReal x89=((2.0)*gclwh11_10);
IkReal x90=(gclwh12_8*r21);
IkReal x91=((0.81725)*pp);
IkReal x92=(pp*pz);
IkReal x93=(gclwh14_2*r20);
IkReal x94=(pp*r21);
IkReal x95=((2.0)*gclwh4_11);
IkReal x96=(gclwh8_12*r20);
IkReal x97=(npx*pz);
IkReal x98=(gclwh14_8*rxp0_2);
IkReal x99=((0.1893)*rxp2_2);
IkReal x100=(gclwh5_9*rxp2_2);
IkReal x101=((0.020662095)*rxp1_2);
IkReal x102=((0.007321434238125)*r21);
IkReal x103=((1.6345)*pz);
IkReal x104=((0.0089586225)*pz);
IkReal x105=(gclwh13_0*r21);
IkReal x106=(gclwh5_9*r22);
IkReal x107=(gclwh11_10*r22);
IkReal x108=(gclwh11_13*r22);
IkReal x109=((1.0)*r21);
IkReal x110=((0.3786)*rxp0_2);
IkReal x111=(gclwh14_14*rxp0_2);
IkReal x112=(pp*r20);
IkReal x113=((0.00195566729175)*r22);
IkReal x114=(gclwh15_10*rxp0_2);
IkReal x115=(gclwh14_8*r20);
IkReal x116=(gclwh12_8*rxp1_2);
IkReal x117=((2.0)*gclwh9_10);
IkReal x118=((2.0)*gclwh15_10);
IkReal x119=(gclwh5_15*rxp2_2);
IkReal x120=((2.0)*gclwh13_10);
IkReal x121=((0.00702803935125)*r20);
IkReal x122=(gclwh13_9*r21);
IkReal x123=(gclwh5_0*r22);
IkReal x124=((0.01464286847625)*r20);
IkReal x125=(gclwh15_1*r20);
IkReal x126=((0.000977833645875)*r22);
IkReal x127=((0.0089586225)*r20);
IkReal x128=((2.0)*gclwh10_11);
IkReal x129=(gclwh5_10*r22);
IkReal x130=((2.0)*pp);
IkReal x131=(gclwh15_9*r20);
IkReal x132=(gclwh1_3*r20);
IkReal x133=((0.00195566729175)*r20);
IkReal x134=(gclwh4_3*rxp2_2);
IkReal x135=((0.2183)*gclwh13_15);
IkReal x136=((2.0)*gclwh7_10);
IkReal x137=(gclwh15_0*r20);
IkReal x138=(gclwh9_0*r20);
IkReal x139=(gclwh15_15*rxp0_2);
IkReal x140=(gclwh2_1*r21);
IkReal x141=((4.0)*gclwh11_10);
IkReal x142=((0.30941085)*rxp0_2);
IkReal x143=(gclwh9_0*rxp0_2);
IkReal x144=(gclwh5_10*rxp2_2);
IkReal x145=((0.2183)*gclwh12_14);
IkReal x146=((0.2183)*gclwh14_14);
IkReal x147=(gclwh4_2*rxp2_2);
IkReal x148=((0.03275)*pp);
IkReal x149=((0.006199575)*rxp1_2);
IkReal x150=(gclwh12_2*rxp1_2);
IkReal x151=(gclwh5_0*rxp2_2);
IkReal x152=((3.60823078949063e-5)*r21);
IkReal x153=(gclwh14_11*rxp0_2);
IkReal x154=((0.020662095)*rxp0_2);
IkReal x155=(gclwh14_8*npx);
IkReal x156=((4.0)*gclwh9_10);
IkReal x157=((0.00195566729175)*r21);
IkReal x158=(gclwh8_12*rxp0_2);
IkReal x159=((0.01464286847625)*r21);
IkReal x160=((0.3786)*rxp2_2);
IkReal x161=((0.01464286847625)*r22);
IkReal x162=(gclwh7_13*r21);
IkReal x163=((4.0)*gclwh7_10);
IkReal x164=(gclwh13_0*rxp1_2);
IkReal x165=((0.1893)*rxp1_2);
IkReal x166=(gclwh6_2*r21);
IkReal x167=(gclwh5_1*rxp2_2);
IkReal x168=(gclwh8_2*rxp0_2);
IkReal x169=(gclwh9_10*r20);
IkReal x170=((4.0)*pp);
IkReal x171=(gclwh15_1*rxp0_2);
IkReal x172=(gclwh9_13*r20);
IkReal x173=((0.0089586225)*r21);
IkReal x174=(gclwh0_0*r20);
IkReal x175=(gclwh10_11*r22);
IkReal x176=((2.0)*gclwh12_11);
IkReal x177=((0.0655)*pz);
IkReal x178=((0.006199575)*rxp2_2);
IkReal x179=(gclwh12_14*rxp1_2);
IkReal x180=(gclwh15_0*rxp0_2);
IkReal x181=((2.0)*npx);
IkReal x182=(gclwh9_13*rxp0_2);
IkReal x183=((1.0)*pp);
IkReal x184=((4.0)*gclwh10_11);
IkReal x185=(gclwh15_9*rxp0_2);
IkReal x186=((3.60823078949063e-5)*r20);
IkReal x187=((0.00702803935125)*r22);
IkReal x188=(gclwh8_2*r20);
IkReal x189=((0.2183)*gclwh5_15);
IkReal x190=(gclwh10_2*r22);
IkReal x191=(gclwh5_1*r22);
IkReal x192=(gclwh13_9*rxp1_2);
IkReal x193=((2.0)*gclwh5_10);
IkReal x194=((0.020662095)*rxp2_2);
IkReal x195=(gclwh4_8*r22);
IkReal x196=((0.017917245)*r20);
IkReal x197=(gclwh7_0*r21);
IkReal x198=((0.00600991575645741)*r21);
IkReal x199=(gclwh11_0*r22);
IkReal x200=(gclwh6_12*r21);
IkReal x201=((0.2183)*gclwh15_15);
IkReal x202=(gclwh11_0*rxp2_2);
IkReal x203=((0.2183)*gclwh4_14);
IkReal x204=(gclwh4_14*rxp2_2);
IkReal x205=(gclwh6_2*rxp1_2);
IkReal x206=((0.1893)*rxp0_2);
IkReal x207=(gclwh4_8*rxp2_2);
IkReal x208=((0.12699240901125)*rxp1_2);
IkReal x209=(gclwh14_2*rxp0_2);
IkReal x210=(gclwh4_3*r22);
IkReal x211=((0.1893)*pp);
IkReal x212=(gclwh13_15*rxp1_2);
IkReal x213=(gclwh1_2*r20);
IkReal x214=((2.0)*gclwh14_11);
IkReal x215=(gclwh4_11*r22);
IkReal x216=((0.020662095)*x111);
IkReal x217=(gclwh6_5*x77);
IkReal x218=(gclwh8_5*x75);
IkReal x219=(gclwh12_14*x101);
IkReal x220=(gclwh10_5*x126);
IkReal x221=(gclwh4_14*x194);
IkReal x222=((0.0089586225)*x67);
IkReal x223=(gclwh12_11*x165);
IkReal x224=((0.017917245)*x116);
IkReal x225=((0.017917245)*x207);
IkReal x226=(gclwh4_11*x99);
IkReal x227=((0.0089586225)*x71);
IkReal x228=((0.1893)*x153);
IkReal x229=((0.0089586225)*x175);
IkReal x230=((0.017917245)*x98);
IkReal x231=((0.017917245)*x100);
IkReal x232=((0.0089586225)*x107);
IkReal x233=((0.1893)*x114);
IkReal x234=((0.017917245)*x192);
IkReal x235=(gclwh9_10*x127);
IkReal x236=((0.017917245)*x185);
IkReal x237=(gclwh13_10*x165);
IkReal x238=(gclwh7_10*x173);
IkReal x239=(gclwh5_10*x99);
IkReal x240=((0.020662095)*x139);
IkReal x241=(gclwh7_7*x77);
IkReal x242=(gclwh9_7*x75);
IkReal x243=(gclwh13_15*x101);
IkReal x244=((0.020662095)*x119);
IkReal x245=(gclwh11_7*x126);
IkReal x246=(gclwh10_5*x194);
IkReal x247=(gclwh8_5*x154);
IkReal x248=(gclwh14_14*x75);
IkReal x249=(gclwh6_5*x101);
IkReal x250=(gclwh4_14*x126);
IkReal x251=(gclwh12_14*x77);
IkReal x252=(gclwh8_11*x206);
IkReal x253=((0.000847933619625)*x90);
IkReal x254=(gclwh12_11*x173);
IkReal x255=(gclwh10_11*x99);
IkReal x256=((0.0089586225)*x215);
IkReal x257=((0.000847933619625)*x195);
IkReal x258=((0.1893)*x84);
IkReal x259=(gclwh14_11*x127);
IkReal x260=((0.000847933619625)*x115);
IkReal x261=(gclwh9_10*x206);
IkReal x262=(gclwh13_10*x173);
IkReal x263=(gclwh11_10*x99);
IkReal x264=((0.000847933619625)*x131);
IkReal x265=((0.0089586225)*x129);
IkReal x266=((0.000847933619625)*x106);
IkReal x267=(gclwh7_10*x165);
IkReal x268=((0.000847933619625)*x122);
IkReal x269=(gclwh15_10*x127);
IkReal x270=(gclwh5_15*x126);
IkReal x271=(gclwh7_7*x101);
IkReal x272=(gclwh13_15*x77);
IkReal x273=(gclwh15_15*x75);
IkReal x274=(gclwh9_7*x154);
IkReal x275=(gclwh11_7*x194);
IkReal x276=((0.017917245)*x175);
IkReal x277=(gclwh14_11*x110);
IkReal x278=((0.017917245)*x71);
IkReal x279=((0.04132419)*x111);
IkReal x280=((0.04132419)*x179);
IkReal x281=((0.04132419)*x204);
IkReal x282=(gclwh4_11*x160);
IkReal x283=((0.017917245)*x67);
IkReal x284=(gclwh12_11*x85);
IkReal x285=((0.04132419)*x119);
IkReal x286=((0.04132419)*x212);
IkReal x287=((0.04132419)*x139);
IkReal x288=((0.017917245)*x169);
IkReal x289=(gclwh15_10*x110);
IkReal x290=((0.017917245)*x107);
IkReal x291=(gclwh7_10*x83);
IkReal x292=((0.3786)*x144);
IkReal x293=(gclwh13_10*x85);
IkReal x294=((0.3786)*x84);
IkReal x295=(gclwh14_11*x196);
IkReal x296=(gclwh14_14*x133);
IkReal x297=(gclwh4_14*x113);
IkReal x298=(gclwh12_14*x157);
IkReal x299=(gclwh14_8*x112);
IkReal x300=((2.0)*x62);
IkReal x301=((1.0)*x63);
IkReal x302=(r21*x63);
IkReal x303=((0.2183)*gclwh10_5*x76);
IkReal x304=((0.2183)*gclwh8_5*x97);
IkReal x305=((0.10915)*gclwh6_5*x94);
IkReal x306=((0.2183)*gclwh6_5*x72);
IkReal x307=((0.10915)*gclwh8_5*x112);
IkReal x308=((0.10915)*gclwh10_5*x68);
IkReal x309=(gclwh12_3*pp*x165);
IkReal x310=(x128*x76);
IkReal x311=(x104*x188);
IkReal x312=((2.0)*gclwh8_11*x97);
IkReal x313=(gclwh10_2*pz*x68);
IkReal x314=(x209*x64);
IkReal x315=(x188*x92);
IkReal x316=(gclwh4_3*pp*x99);
IkReal x317=(x104*x190);
IkReal x318=(x150*x64);
IkReal x319=((2.0)*gclwh6_11*x72);
IkReal x320=(x147*x64);
IkReal x321=(x211*x74);
IkReal x322=(x104*x166);
IkReal x323=(gclwh13_1*pp*x165);
IkReal x324=(x104*x199);
IkReal x325=(x104*x138);
IkReal x326=(gclwh5_1*pp*x99);
IkReal x327=(x180*x64);
IkReal x328=(gclwh11_0*pz*x68);
IkReal x329=(x136*x72);
IkReal x330=(x138*x92);
IkReal x331=(x76*x89);
IkReal x332=(x171*x211);
IkReal x333=(x117*x97);
IkReal x334=(x104*x197);
IkReal x335=(x164*x64);
IkReal x336=(x151*x64);
IkReal x337=((0.10915)*gclwh7_7*x94);
IkReal x338=((0.2183)*gclwh9_7*x97);
IkReal x339=((0.2183)*gclwh11_7*x76);
IkReal x340=((0.10915)*gclwh9_7*x112);
IkReal x341=((0.2183)*gclwh7_7*x72);
IkReal x342=((0.10915)*gclwh11_7*x68);
IkReal x343=((0.10915)*gclwh14_14*x112);
IkReal x344=(x203*x76);
IkReal x345=(x145*x72);
IkReal x346=((0.10915)*gclwh12_14*x94);
IkReal x347=(x146*x97);
IkReal x348=((0.10915)*gclwh4_14*x68);
IkReal x349=((0.09465)*gclwh4_8*x68);
IkReal x350=(x92*x93);
IkReal x351=(gclwh12_3*x302);
IkReal x352=(x205*x64);
IkReal x353=(gclwh3_3*x302);
IkReal x354=(x132*x63);
IkReal x355=(gclwh3_2*r21*x104);
IkReal x356=(x214*x97);
IkReal x357=(x155*x64);
IkReal x358=(x104*x93);
IkReal x359=((0.09465)*pp*x90);
IkReal x360=(x210*x63);
IkReal x361=(x104*x213);
IkReal x362=(x168*x64);
IkReal x363=(x76*x95);
IkReal x364=(gclwh4_2*r22*x104);
IkReal x365=(gclwh4_8*npz*x64);
IkReal x366=(gclwh12_2*r21*x104);
IkReal x367=(x64*x79);
IkReal x368=((0.09465)*x299);
IkReal x369=(x176*x72);
IkReal x370=(gclwh12_8*npy*x64);
IkReal x371=(x125*x63);
IkReal x372=(x64*x70);
IkReal x373=(gclwh5_0*pz*x68);
IkReal x374=(gclwh13_9*npy*x64);
IkReal x375=(x104*x123);
IkReal x376=(x105*x92);
IkReal x377=((0.09465)*gclwh15_9*x112);
IkReal x378=(x118*x97);
IkReal x379=(x104*x105);
IkReal x380=(x140*x63);
IkReal x381=(gclwh2_0*r21*x104);
IkReal x382=(x143*x64);
IkReal x383=(x202*x64);
IkReal x384=(gclwh0_1*r20*x63);
IkReal x385=(x104*x174);
IkReal x386=((0.09465)*gclwh5_9*x68);
IkReal x387=(x64*x86);
IkReal x388=((0.09465)*gclwh13_9*x94);
IkReal x389=(x104*x137);
IkReal x390=(x64*x66);
IkReal x391=(x193*x76);
IkReal x392=(x120*x72);
IkReal x393=((0.10915)*gclwh13_15*x94);
IkReal x394=((0.10915)*gclwh5_15*x68);
IkReal x395=(x201*x97);
IkReal x396=((0.10915)*gclwh15_15*x112);
IkReal x397=(x189*x76);
IkReal x398=(x135*x72);
IkReal x399=(x130*x71);
IkReal x400=(x128*x68);
IkReal x401=((4.0)*gclwh6_11*x72);
IkReal x402=((4.0)*gclwh8_11*x97);
IkReal x403=(x130*x67);
IkReal x404=(x184*x76);
IkReal x405=(x68*x89);
IkReal x406=(x163*x72);
IkReal x407=(x112*x117);
IkReal x408=(x136*x94);
IkReal x409=(x156*x97);
IkReal x410=(x141*x76);
IkReal x411=(x112*x214);
IkReal x412=((4.0)*gclwh12_11*x72);
IkReal x413=((4.0)*gclwh4_11*x76);
IkReal x414=(x112*x146);
IkReal x415=((0.4366)*gclwh12_14*x72);
IkReal x416=((0.4366)*gclwh4_14*x76);
IkReal x417=(x145*x94);
IkReal x418=((0.4366)*gclwh14_14*x97);
IkReal x419=(x203*x68);
IkReal x420=(gclwh6_2*npy*x300);
IkReal x421=(gclwh6_2*x109*x92);
IkReal x422=(gclwh10_2*npz*x300);
IkReal x423=(gclwh8_2*x181*x62);
IkReal x424=(gclwh7_0*npy*x300);
IkReal x425=(gclwh9_0*x181*x62);
IkReal x426=(gclwh11_0*npz*x300);
IkReal x427=(gclwh7_0*x109*x92);
IkReal x428=(gclwh12_2*npy*x300);
IkReal x429=(gclwh3_2*npy*x300);
IkReal x430=(gclwh1_2*x181*x62);
IkReal x431=(gclwh14_3*x181*x92);
IkReal x432=(gclwh4_2*npz*x300);
IkReal x433=(gclwh4_3*x130*x76);
IkReal x434=(gclwh12_2*x109*x92);
IkReal x435=((1.0)*x213*x92);
IkReal x436=(gclwh3_3*x130*x72);
IkReal x437=((1.0)*gclwh4_2*pz*x68);
IkReal x438=(gclwh1_3*x181*x92);
IkReal x439=(gclwh3_2*x109*x92);
IkReal x440=(gclwh12_3*x130*x72);
IkReal x441=(gclwh14_2*x181*x62);
IkReal x442=(gclwh14_3*r20*x301);
IkReal x443=(gclwh0_0*x181*x62);
IkReal x444=(gclwh2_0*npy*x300);
IkReal x445=(gclwh5_1*x130*x76);
IkReal x446=(gclwh13_1*x130*x72);
IkReal x447=(gclwh15_0*x181*x62);
IkReal x448=(gclwh2_1*x130*x72);
IkReal x449=(gclwh0_1*x181*x92);
IkReal x450=(gclwh5_0*npz*x300);
IkReal x451=(gclwh13_0*npy*x300);
IkReal x452=((1.0)*x174*x92);
IkReal x453=((1.0)*x137*x92);
IkReal x454=(gclwh2_0*x109*x92);
IkReal x455=(gclwh13_1*x109*x63);
IkReal x456=(x191*x301);
IkReal x457=(gclwh15_1*x181*x92);
IkReal x458=(x281+x280);
IkReal x459=(x286+x285);
IkReal x460=(x247+x246);
IkReal x461=(x219+x221);
IkReal x462=(x243+x244);
IkReal x463=(x274+x275);
IkReal x464=(x319+x229+x228+x227);
IkReal x465=(x329+x232+x233+x235);
IkReal x466=(x391+x392+x267+x269);
IkReal x467=(x369+x363+x258+x259);
IkReal x468=(x296+x416+x414+x415);
IkReal x469=(x304+x305+x303+x217);
IkReal x470=(x343+x344+x345+x248);
IkReal x471=(x397+x396+x398+x273);
IkReal x472=(x339+x338+x337+x241);
IkReal x473=(x378+x265+x261+x263+x262);
IkReal x474=(x356+x254+x255+x256+x252);
IkReal x475=(x310+x312+x223+x222+x226);
IkReal x476=(x333+x331+x238+x239+x237);
IkReal x477=(x346+x347+x348+x250+x251);
IkReal x478=(x395+x394+x393+x272+x270);
IkReal x479=(x342+x340+x341+x242+x245);
IkReal x480=(x298+x297+x417+x418+x419);
IkReal x481=(x294+x295+x412+x413+x411);
IkReal x482=(x308+x306+x307+x218+x220);
IkReal x483=(x284+x283+x282+x403+x402+x404);
IkReal x484=(x291+x292+x293+x409+x408+x410);
IkReal x485=(x290+x289+x288+x405+x407+x406);
IkReal x486=(x399+x276+x277+x278+x401+x400);
IkReal x487=(((x68*x95))+((x176*x94))+((gclwh12_11*x83))+(((0.017917245)*x215))+((gclwh10_11*x160))+(((4.0)*gclwh14_11*x97))+((gclwh8_11*x110)));
IkReal x488=(x320+x321+x322+x318+x230+x423+x422+x421);
IkReal x489=(x332+x336+x335+x334+x236+x427+x426+x425);
IkReal x490=(x309+x315+x314+x317+x316+x311+x313+x225+x224+x420);
IkReal x491=(x330+x324+x325+x326+x327+x323+x328+x231+x234+x424);
IkReal x492=(x386+x387+x388+x389+x390+x266+x268+x449+x448+x456+x457+x454+x455+x452+x453+x450+x451);
IkReal x493=(x351+x350+x353+x352+x355+x354+x357+x359+x358+x349+x360+x361+x257+x253+x429+x428+x430+x431+x432+x64);
IkReal x494=(x370+x368+x362+x364+x365+x366+x367+x260+x438+x439+x433+x434+x435+x436+x437+x441+x440+x442);
IkReal x495=(x384+x385+x382+x383+x380+x381+x379+x377+x376+x375+x374+x373+x372+x371+x264+x445+x444+x447+x446+x443+x64);
op[0]=((((1.6345)*gclwh10_12*x76))+(((0.154705425)*x98))+(((-1.0)*x482))+((gclwh6_12*x102))+(((-1.0)*x91*x96))+(((-0.007321434238125)*x96))+(((-1.6345)*gclwh6_12*x72))+(((-1.0)*gclwh4_8*x88))+x469+x461+((x200*x91))+(((-0.81725)*gclwh10_12*x68))+(((-1.0)*x216))+(((1.6345)*gclwh8_12*x97))+(((-0.007321434238125)*x78))+(((-1.0)*gclwh12_8*x82)));
op[1]=((((-1.0)*x488))+(((-1.0)*gclwh12_3*x208))+(((-1.0)*x475))+(((-0.12699240901125)*x134))+x490+x464+(((-1.0)*x183*x67))+((pp*x71))+(((0.12699240901125)*x74))+((gclwh10_11*x68)));
op[2]=((-0.17125635)+(((-1.0)*x483))+x486);
op[3]=(((gclwh8_2*x121))+((gclwh10_2*x187))+(((-0.160905)*x98))+(((0.7845)*gclwh8_2*x112))+(((-1.0)*gclwh6_2*x69))+(((-0.7845)*gclwh6_2*x94))+(((0.160905)*x207))+(((-0.14850585)*x147))+(((-0.14850585)*x150))+(((-1.569)*gclwh10_2*x76))+(((0.7845)*gclwh10_2*x68))+(((0.160905)*x116))+(((-1.0)*x458))+x279+(((-1.569)*gclwh8_2*x97))+(((0.14850585)*x209))+(((1.569)*gclwh6_2*x72)));
op[4]=((((-0.000293394886875)*x78))+(((-0.0655)*gclwh6_12*x72))+(((-1.0)*x482))+(((0.03275)*gclwh6_12*x94))+(((-1.0)*x461))+(((-0.03275)*gclwh10_12*x68))+(((-0.000293394886875)*x96))+((gclwh4_8*x178))+x216+x469+(((0.0655)*gclwh10_12*x76))+(((0.0655)*gclwh8_12*x97))+(((0.006199575)*x116))+(((0.000293394886875)*x200))+(((-0.006199575)*x98))+(((-1.0)*x148*x96)));
op[5]=(((pp*x67))+(((-1.0)*x488))+(((-1.0)*x183*x71))+(((-1.0)*x464))+x490+x475+(((-1.0)*gclwh12_3*x80))+(((-0.00076243651125)*x134))+(((0.00076243651125)*x74))+(((-1.0)*gclwh10_11*x68)));
op[6]=((((0.12699240901125)*x171))+(((-1.0)*x489))+(((-1.0)*gclwh9_10*x112))+((gclwh7_10*x94))+(((-1.0)*gclwh13_1*x208))+(((-1.0)*gclwh11_10*x68))+(((-1.0)*x465))+x491+x476+(((-0.12699240901125)*x167)));
op[7]=(((gclwh7_13*x102))+((x162*x91))+(((-1.0)*gclwh13_9*x82))+(((0.154705425)*x185))+(((-1.0)*x479))+(((-1.0)*gclwh5_9*x88))+x462+x472+(((-1.0)*x172*x91))+(((1.6345)*gclwh9_13*x97))+(((-0.007321434238125)*x108))+(((-1.0)*x240))+(((-0.007321434238125)*x172))+(((1.6345)*gclwh11_13*x76))+(((-1.6345)*gclwh7_13*x72))+(((-0.81725)*gclwh11_13*x68)));
op[8]=((((-0.160905)*x192))+(((0.160905)*x185))+(((-0.160905)*x100))+(((0.14850585)*x180))+(((1.569)*gclwh7_0*x72))+(((-1.0)*gclwh7_0*x69))+(((0.7845)*gclwh11_0*x68))+(((-0.14850585)*x151))+(((-0.14850585)*x164))+((gclwh9_0*x121))+x459+(((-1.569)*gclwh11_0*x76))+(((-1.569)*gclwh9_0*x97))+(((-1.0)*x287))+(((-0.7845)*gclwh7_0*x94))+((gclwh11_0*x187))+(((0.7845)*gclwh9_0*x112)));
op[9]=((-0.17125635)+(((-1.0)*x484))+x485);
op[10]=((((-1.0)*x489))+(((-1.0)*gclwh7_10*x94))+(((-1.0)*x476))+x491+x465+(((0.00076243651125)*x171))+((gclwh9_10*x112))+(((-0.00076243651125)*x167))+(((-1.0)*gclwh13_1*x80))+((gclwh11_10*x68)));
op[11]=((((0.000293394886875)*x162))+(((-0.03275)*gclwh9_13*x112))+(((0.03275)*gclwh7_13*x94))+(((-0.006199575)*x185))+(((-0.0655)*gclwh7_13*x72))+(((-1.0)*x479))+(((-1.0)*x462))+(((-0.000293394886875)*x108))+((gclwh13_9*x149))+(((0.0655)*gclwh11_13*x76))+(((-0.03275)*gclwh11_13*x68))+x240+x472+(((0.0655)*gclwh9_13*x97))+(((-0.000293394886875)*x172))+(((0.006199575)*x100)));
op[12]=((((1.6345)*gclwh4_8*x76))+(((1.6345)*gclwh12_8*x72))+(((-1.6345)*gclwh14_8*x97))+(((-1.0)*x90*x91))+(((-0.007321434238125)*x90))+(((-1.0)*x470))+(((0.154705425)*x158))+((gclwh10_12*x88))+x460+x477+(((-0.81725)*gclwh4_8*x68))+((x115*x91))+(((-1.0)*x249))+(((0.007321434238125)*x115))+(((-1.0)*gclwh6_12*x82))+(((-0.007321434238125)*x195)));
op[13]=((-0.679811285)+(((1.341705325)*gclwh12_3*x72))+(((-1.0)*x494))+(((1.341705325)*gclwh4_3*x76))+(((-1.0)*gclwh12_3*x198))+(((-0.66189404)*gclwh4_3*x68))+(((-0.66189404)*gclwh12_3*x94))+(((-1.0)*x474))+((gclwh3_3*x198))+(((-0.679811285)*gclwh1_3*x112))+(((-0.679811285)*gclwh3_3*x94))+(((1.341705325)*gclwh3_3*x72))+(((-1.0)*gclwh4_11*x68))+(((1.341705325)*gclwh1_3*x97))+x493+x467+((gclwh1_3*x81))+((gclwh14_3*x81))+(((-1.341705325)*gclwh14_3*x97))+((gclwh14_11*x112))+(((-1.0)*gclwh12_11*x94))+(((-0.00600991575645741)*x210))+(((0.66189404)*gclwh14_3*x112)));
op[14]=((-0.07735732)+(((-1.0)*x487))+x481);
op[15]=((((-1.0)*gclwh4_2*x187))+(((-0.14850585)*x79))+(((1.569)*gclwh3_2*x72))+(((0.7845)*pp*x93))+(((-1.0)*x480))+(((-0.7845)*gclwh12_2*x94))+(((-0.007614829125)*x115))+(((1.569)*gclwh12_2*x72))+(((-0.14850585)*x168))+(((0.00702803935125)*x93))+(((0.85)*pp*x90))+(((0.007614829125)*x90))+x468+(((0.007614829125)*x195))+(((-1.0)*gclwh12_2*x69))+(((-0.85)*x299))+((gclwh3_2*x69))+(((-0.7845)*gclwh1_2*x112))+(((0.85)*gclwh4_8*x68))+(((1.569)*gclwh4_2*x76))+((x155*x65))+(((-0.7845)*gclwh3_2*x94))+(((-1.569)*gclwh14_2*x97))+(((1.569)*gclwh1_2*x97))+(((-1.0)*gclwh12_8*npy*x65))+((gclwh1_2*x121))+(((-1.0)*gclwh4_8*npz*x65))+(((0.14850585)*x205))+(((-0.7845)*gclwh4_2*x68)));
op[16]=((((0.0655)*gclwh14_8*x97))+(((-1.0)*gclwh6_12*x149))+(((0.03275)*gclwh4_8*x68))+((x148*x90))+(((-0.0655)*gclwh12_8*x72))+(((-0.0655)*gclwh4_8*x76))+(((-1.0)*x477))+(((-0.000293394886875)*x115))+(((0.000293394886875)*x90))+x460+x470+(((0.006199575)*x158))+((gclwh10_12*x178))+(((-1.0)*x249))+(((-0.03275)*x299))+(((0.000293394886875)*x195)));
op[17]=((0.012986285)+(((-0.00493096)*gclwh14_3*x112))+(((-1.0)*gclwh14_11*x112))+(((0.008055325)*gclwh3_3*x72))+(((-1.0)*x494))+((gclwh4_11*x68))+(((0.00493096)*gclwh4_3*x68))+(((-1.0)*x467))+(((-0.012986285)*gclwh3_3*x94))+(((0.008055325)*gclwh12_3*x72))+x493+x474+(((0.008055325)*gclwh4_3*x76))+(((-0.008055325)*gclwh14_3*x97))+((gclwh3_3*x152))+(((0.00493096)*gclwh12_3*x94))+(((3.60823078949063e-5)*x132))+(((-1.0)*gclwh4_3*x73))+(((-0.012986285)*gclwh1_3*x112))+((gclwh12_11*x94))+((gclwh14_3*x186))+(((-1.0)*gclwh12_3*x152))+(((0.008055325)*gclwh1_3*x97)));
op[18]=((0.679811285)+(((0.66189404)*gclwh5_1*x68))+(((-1.0)*x492))+(((1.341705325)*gclwh0_1*x97))+(((0.00600991575645741)*x191))+(((-0.66189404)*gclwh15_1*x112))+(((0.00600991575645741)*x140))+(((-1.0)*gclwh15_1*x81))+(((-0.679811285)*gclwh0_1*x112))+(((-1.341705325)*gclwh5_1*x76))+(((-1.0)*x473))+(((-1.341705325)*gclwh13_1*x72))+(((-1.0)*gclwh13_10*x94))+((gclwh0_1*x81))+((gclwh15_10*x112))+(((-1.0)*gclwh5_10*x68))+x495+x466+(((0.66189404)*gclwh13_1*x94))+(((1.341705325)*gclwh2_1*x72))+(((-0.679811285)*gclwh2_1*x94))+(((1.341705325)*gclwh15_1*x97))+((gclwh13_1*x198)));
op[19]=((((-1.0)*x478))+(((-1.0)*x463))+(((-1.0)*gclwh11_13*x88))+(((-0.154705425)*x182))+x271+x471+(((-0.007321434238125)*x131))+((x103*x66))+(((-1.6345)*gclwh13_9*x72))+(((0.007321434238125)*x106))+((gclwh7_13*x82))+(((0.81725)*gclwh5_9*x68))+((gclwh13_9*x102))+((x122*x91))+(((-1.0)*x131*x91))+(((-1.0)*x103*x70)));
op[20]=((((-0.7845)*gclwh15_0*x112))+((gclwh15_15*x133))+(((-0.85)*gclwh15_9*x112))+((gclwh0_0*x121))+(((0.007614829125)*x106))+(((-0.007614829125)*x131))+((gclwh2_0*x69))+(((-0.14850585)*x86))+(((-0.7845)*gclwh2_0*x94))+(((0.4366)*gclwh13_15*x72))+(((0.007614829125)*x122))+(((-1.569)*gclwh5_0*x76))+(((0.7845)*gclwh5_0*x68))+((gclwh13_0*x69))+(((1.569)*gclwh15_0*x97))+(((0.14850585)*x143))+(((-0.7845)*gclwh0_0*x112))+(((-1.0)*gclwh15_0*x121))+(((1.569)*gclwh2_0*x72))+(((-1.0)*x189*x68))+(((1.569)*gclwh0_0*x97))+((x112*x201))+(((-1.0)*gclwh5_15*x113))+(((0.85)*gclwh5_9*x68))+(((0.4366)*gclwh5_15*x76))+(((-1.0)*gclwh13_15*x157))+(((0.85)*gclwh13_9*x94))+(((-0.4366)*gclwh15_15*x97))+(((0.00702803935125)*x123))+(((0.14850585)*x202))+(((-1.0)*gclwh13_9*npy*x65))+(((0.7845)*gclwh13_0*x94))+(((-1.569)*gclwh13_0*x72))+(((-1.0)*x135*x94))+((x65*x66))+(((-1.0)*x65*x70)));
op[21]=((-0.07735732)+(((-1.0)*x112*x118))+(((4.0)*gclwh15_10*x97))+((gclwh11_10*x160))+((x193*x68))+(((-4.0)*gclwh13_10*x72))+(((-1.0)*gclwh15_10*x196))+((gclwh9_10*x110))+(((0.017917245)*x129))+((x120*x94))+((gclwh13_10*x83))+(((-4.0)*gclwh5_10*x76))+(((-1.0)*gclwh7_10*x85)));
op[22]=((-0.012986285)+((gclwh5_1*x73))+(((0.008055325)*gclwh2_1*x72))+(((3.60823078949063e-5)*x140))+(((-1.0)*x492))+(((-1.0)*gclwh15_10*x112))+(((-0.00493096)*gclwh5_1*x68))+(((-0.012986285)*gclwh2_1*x94))+(((-0.008055325)*gclwh5_1*x76))+(((0.008055325)*gclwh15_1*x97))+(((-1.0)*x466))+(((-0.012986285)*gclwh0_1*x112))+x495+x473+((gclwh0_1*x186))+(((0.00493096)*gclwh15_1*x112))+(((-0.00493096)*gclwh13_1*x94))+(((0.008055325)*gclwh0_1*x97))+((gclwh13_10*x94))+((gclwh5_10*x68))+(((-3.60823078949063e-5)*x125))+(((-0.008055325)*gclwh13_1*x72))+((gclwh13_1*x152)));
op[23]=((((0.0655)*gclwh13_9*x72))+(((-0.006199575)*x182))+(((0.03275)*gclwh15_9*x112))+(((-0.03275)*gclwh13_9*x94))+(((-0.000293394886875)*x122))+((gclwh7_13*x149))+(((-0.03275)*gclwh5_9*x68))+(((-1.0)*x471))+(((0.000293394886875)*x131))+(((-1.0)*x463))+(((-0.000293394886875)*x106))+x271+x478+(((-1.0)*gclwh11_13*x178))+(((-1.0)*x177*x66))+((x177*x70)));
op[24]=((-0.35681135)+(((-1.0)*x483))+x486);
op[25]=((((-3.269)*gclwh8_2*x97))+((gclwh8_2*x124))+((gclwh10_2*x161))+(((-1.0)*gclwh6_2*x159))+(((3.269)*gclwh6_2*x72))+(((-3.269)*gclwh10_2*x76))+(((-1.0)*x458))+(((-0.30941085)*x150))+x279+((gclwh14_2*x142))+(((-0.30941085)*x147))+(((-1.6345)*gclwh6_2*x94))+(((1.6345)*gclwh8_2*x112))+(((1.6345)*gclwh10_2*x68)));
op[26]=((((1.569)*pp*x96))+(((0.08264838)*x111))+(((1.569)*gclwh10_12*x68))+(((-3.138)*gclwh10_12*x76))+(((0.0140560787025)*x78))+(((-0.0140560787025)*x200))+(((-1.569)*gclwh6_12*x94))+(((-0.08264838)*x179))+(((0.0140560787025)*x96))+(((-0.08264838)*x204))+(((3.138)*gclwh6_12*x72))+(((-3.138)*gclwh8_12*x97)));
op[27]=((((-0.03583449)*x71))+(((0.03583449)*x67))+(((8.0)*gclwh10_11*x76))+(((0.7572)*gclwh4_11*rxp2_2))+(((-0.03583449)*x175))+((x170*x67))+(((8.0)*gclwh8_11*x97))+(((-0.7572)*x153))+(((-1.0)*x170*x71))+((gclwh12_11*x87))+(((-8.0)*gclwh6_11*x72))+(((-1.0)*x184*x68)));
op[28]=((-0.01429865)+(((-1.0)*x486))+x483);
op[29]=((((-0.00058678977375)*x166))+(((-0.131)*gclwh8_2*x97))+(((0.00058678977375)*x190))+(((0.00058678977375)*x188))+(((0.0655)*gclwh8_2*x112))+x458+(((-0.0655)*gclwh6_2*x94))+(((-1.0)*x279))+(((0.131)*gclwh6_2*x72))+(((-0.131)*gclwh10_2*x76))+(((0.01239915)*x209))+(((-0.01239915)*x150))+(((0.0655)*gclwh10_2*x68))+(((-0.01239915)*x147)));
op[30]=((((-3.269)*gclwh9_0*x97))+(((-1.6345)*gclwh7_0*x94))+(((-0.30941085)*x164))+(((3.269)*gclwh7_0*x72))+(((-0.30941085)*x151))+(((1.6345)*gclwh9_0*x112))+((gclwh9_0*x124))+x459+(((-1.0)*gclwh7_0*x159))+(((-3.269)*gclwh11_0*x76))+(((1.6345)*gclwh11_0*x68))+((gclwh15_0*x142))+(((-1.0)*x287))+((gclwh11_0*x161)));
op[31]=((-0.35681135)+(((-1.0)*x484))+x485);
op[32]=((((-1.0)*x163*x94))+((x141*x68))+(((0.03583449)*x169))+(((-1.0)*gclwh13_10*x87))+(((-0.03583449)*gclwh7_10*r21))+((x112*x156))+(((0.03583449)*x107))+(((-8.0)*gclwh11_10*x76))+(((8.0)*gclwh7_10*x72))+(((-0.7572)*x144))+(((0.7572)*x114))+(((-8.0)*gclwh9_10*x97)));
op[33]=((((-0.0140560787025)*x162))+(((-3.138)*gclwh11_13*x76))+(((-0.08264838)*x119))+(((1.569)*gclwh9_13*x112))+(((0.0140560787025)*x108))+(((-0.08264838)*x212))+(((0.08264838)*x139))+(((1.569)*gclwh11_13*x68))+(((3.138)*gclwh7_13*x72))+(((0.0140560787025)*x172))+(((-1.569)*gclwh7_13*x94))+(((-3.138)*gclwh9_13*x97)));
op[34]=((((-0.0655)*gclwh7_0*x94))+(((-0.00058678977375)*x197))+(((0.00058678977375)*x199))+(((0.131)*gclwh7_0*x72))+(((0.00058678977375)*x138))+(((-1.0)*x459))+x287+(((0.0655)*gclwh11_0*x68))+(((-0.131)*gclwh11_0*x76))+(((0.0655)*gclwh9_0*x112))+(((-0.131)*gclwh9_0*x97))+(((-0.01239915)*x164))+(((-0.01239915)*x151))+(((0.01239915)*x180)));
op[35]=((-0.01429865)+(((-1.0)*x485))+x484);
op[36]=((1.31196768)+(((-1.0)*x487))+x481);
op[37]=((((-1.6345)*gclwh3_2*x94))+(((3.269)*gclwh12_2*x72))+(((-1.0)*gclwh12_2*x159))+(((0.30941085)*x205))+(((-1.0)*x480))+(((-1.0)*gclwh4_2*x161))+(((-3.269)*gclwh14_2*x97))+(((-1.6345)*gclwh1_2*x112))+(((0.01464286847625)*x93))+(((3.269)*gclwh1_2*x97))+x468+(((-1.6345)*gclwh12_2*x94))+(((3.269)*gclwh3_2*x72))+((gclwh3_2*x159))+((gclwh1_2*x124))+(((-1.0)*gclwh8_2*x142))+(((-1.6345)*gclwh4_2*x68))+(((1.6345)*pp*x93))+(((3.269)*gclwh4_2*x76))+(((-0.30941085)*x79)));
IkReal x496=pz*pz;
IkReal x497=pp*pp;
IkReal x498=((0.1893)*pz);
IkReal x499=((1.7)*pz);
IkReal x500=(gclwh15_9*npx);
IkReal x501=(pp*r21);
IkReal x502=(pp*r22);
IkReal x503=((0.00702803935125)*r21);
IkReal x504=(gclwh5_9*npz);
IkReal x505=(pp*r20);
IkReal x506=(npy*pz);
IkReal x507=((4.0)*gclwh12_11);
IkReal x508=((3.60823078949063e-5)*r22);
IkReal x509=(gclwh14_3*rxp0_2);
IkReal x510=((0.000977833645875)*r20);
IkReal x511=(npz*pz);
IkReal x512=((0.000977833645875)*r21);
IkReal x513=(gclwh10_2*rxp2_2);
IkReal x514=((0.00076243651125)*rxp1_2);
IkReal x515=((0.00600991575645741)*r20);
IkReal x516=((0.154705425)*rxp1_2);
IkReal x517=((0.4366)*gclwh5_15);
IkReal x518=(gclwh6_11*rxp1_2);
IkReal x519=(gclwh7_0*rxp1_2);
IkReal x520=((0.154705425)*rxp2_2);
IkReal x521=((2.0)*gclwh11_10);
IkReal x522=((0.2970117)*rxp1_2);
IkReal x523=((0.017917245)*r21);
IkReal x524=(gclwh14_2*pz);
IkReal x525=(gclwh12_8*r21);
IkReal x526=(gclwh14_2*rxp0_2);
IkReal x527=((2.0)*gclwh4_11);
IkReal x528=((0.007321434238125)*r20);
IkReal x529=(npx*pz);
IkReal x530=((0.4366)*gclwh15_15);
IkReal x531=(gclwh10_11*rxp2_2);
IkReal x532=(gclwh5_9*rxp2_2);
IkReal x533=((0.020662095)*rxp1_2);
IkReal x534=((0.007321434238125)*r21);
IkReal x535=(gclwh0_0*r20);
IkReal x536=((0.0089586225)*r21);
IkReal x537=(gclwh13_0*pz);
IkReal x538=((1.6345)*pz);
IkReal x539=((0.007321434238125)*r22);
IkReal x540=((1.0)*pz);
IkReal x541=(gclwh14_14*rxp0_2);
IkReal x542=(gclwh4_14*r22);
IkReal x543=((0.1893)*rxp0_2);
IkReal x544=((0.00058678977375)*r22);
IkReal x545=(gclwh12_8*rxp1_2);
IkReal x546=((2.0)*gclwh9_10);
IkReal x547=((0.1893)*rxp2_2);
IkReal x548=((2.0)*gclwh15_10);
IkReal x549=((4.0)*gclwh14_11);
IkReal x550=(gclwh5_15*rxp2_2);
IkReal x551=((0.020662095)*rxp0_2);
IkReal x552=((2.0)*gclwh13_10);
IkReal x553=((0.3786)*rxp1_2);
IkReal x554=(gclwh9_0*r20);
IkReal x555=(gclwh13_9*r21);
IkReal x556=(gclwh15_1*r20);
IkReal x557=((0.000977833645875)*r22);
IkReal x558=((0.006199575)*rxp0_2);
IkReal x559=(gclwh6_2*rxp1_2);
IkReal x560=((0.0089586225)*r20);
IkReal x561=((2.0)*gclwh10_11);
IkReal x562=((2.0)*pp);
IkReal x563=((0.00058678977375)*r21);
IkReal x564=(gclwh1_3*r20);
IkReal x565=(gclwh14_14*r20);
IkReal x566=(gclwh9_0*rxp0_2);
IkReal x567=(gclwh4_3*rxp2_2);
IkReal x568=(gclwh5_0*r22);
IkReal x569=((0.03583449)*r20);
IkReal x570=((0.00058678977375)*r20);
IkReal x571=((0.2183)*gclwh13_15);
IkReal x572=((2.0)*gclwh7_10);
IkReal x573=(gclwh2_1*r21);
IkReal x574=((4.0)*gclwh15_10);
IkReal x575=((0.0089586225)*pz);
IkReal x576=((0.2183)*gclwh12_14);
IkReal x577=((0.2183)*gclwh14_14);
IkReal x578=(gclwh11_0*rxp2_2);
IkReal x579=(gclwh8_2*rxp0_2);
IkReal x580=((0.3786)*rxp2_2);
IkReal x581=(gclwh12_2*rxp1_2);
IkReal x582=(gclwh5_0*rxp2_2);
IkReal x583=((3.60823078949063e-5)*r21);
IkReal x584=(gclwh15_9*r20);
IkReal x585=((0.3786)*rxp0_2);
IkReal x586=((0.006199575)*rxp1_2);
IkReal x587=(gclwh14_8*npx);
IkReal x588=(gclwh13_15*r21);
IkReal x589=((0.017917245)*r20);
IkReal x590=(gclwh5_15*r22);
IkReal x591=((0.000293394886875)*r21);
IkReal x592=(gclwh13_0*rxp1_2);
IkReal x593=(gclwh7_10*rxp1_2);
IkReal x594=((0.000293394886875)*r22);
IkReal x595=(gclwh5_1*rxp2_2);
IkReal x596=((0.154705425)*rxp0_2);
IkReal x597=((0.4366)*gclwh13_15);
IkReal x598=((0.0089586225)*r22);
IkReal x599=((0.2970117)*rxp2_2);
IkReal x600=(gclwh5_9*r22);
IkReal x601=((0.7572)*rxp0_2);
IkReal x602=((4.0)*gclwh4_11);
IkReal x603=(gclwh15_1*rxp0_2);
IkReal x604=((0.000293394886875)*r20);
IkReal x605=((2.0)*gclwh6_11);
IkReal x606=((0.4366)*gclwh12_14);
IkReal x607=((0.017917245)*r22);
IkReal x608=(gclwh15_0*r20);
IkReal x609=(gclwh15_15*r20);
IkReal x610=((2.0)*gclwh12_11);
IkReal x611=(gclwh14_8*rxp0_2);
IkReal x612=((0.0655)*pz);
IkReal x613=((0.006199575)*rxp2_2);
IkReal x614=((0.04132419)*rxp1_2);
IkReal x615=((0.4366)*gclwh4_14);
IkReal x616=(gclwh15_0*rxp0_2);
IkReal x617=(gclwh14_8*r20);
IkReal x618=((0.03583449)*r22);
IkReal x619=((2.0)*gclwh8_11);
IkReal x620=((4.0)*gclwh13_10);
IkReal x621=(gclwh15_9*rxp0_2);
IkReal x622=((3.60823078949063e-5)*r20);
IkReal x623=((0.00702803935125)*r22);
IkReal x624=((0.2183)*gclwh5_15);
IkReal x625=(gclwh5_1*r22);
IkReal x626=((4.0)*gclwh5_10);
IkReal x627=(gclwh13_9*rxp1_2);
IkReal x628=((2.0)*gclwh5_10);
IkReal x629=((0.4366)*gclwh14_14);
IkReal x630=((0.020662095)*rxp2_2);
IkReal x631=(gclwh4_8*r22);
IkReal x632=(gclwh4_2*rxp2_2);
IkReal x633=((0.00600991575645741)*r21);
IkReal x634=((0.2183)*gclwh15_15);
IkReal x635=((0.2183)*gclwh4_14);
IkReal x636=((0.00702803935125)*r20);
IkReal x637=(gclwh12_14*r21);
IkReal x638=(gclwh4_8*rxp2_2);
IkReal x639=((0.2970117)*rxp0_2);
IkReal x640=(gclwh8_2*pz);
IkReal x641=(gclwh13_1*rxp1_2);
IkReal x642=((0.1893)*pp);
IkReal x643=(gclwh12_3*rxp1_2);
IkReal x644=((0.01464286847625)*r21);
IkReal x645=((0.1893)*rxp1_2);
IkReal x646=(gclwh4_3*r22);
IkReal x647=((2.0)*gclwh14_11);
IkReal x648=((0.03583449)*r21);
IkReal x649=((0.00195566729175)*x588);
IkReal x650=((0.00195566729175)*x590);
IkReal x651=((0.00195566729175)*x609);
IkReal x652=(gclwh15_10*x589);
IkReal x653=(gclwh7_10*x553);
IkReal x654=(gclwh5_10*x607);
IkReal x655=(gclwh9_10*x585);
IkReal x656=(gclwh13_10*x523);
IkReal x657=(gclwh11_10*x580);
IkReal x658=(gclwh12_14*x533);
IkReal x659=(gclwh6_5*x512);
IkReal x660=(gclwh4_14*x630);
IkReal x661=(gclwh8_5*x510);
IkReal x662=((0.020662095)*x541);
IkReal x663=(gclwh10_5*x557);
IkReal x664=((0.017917245)*x545);
IkReal x665=(gclwh8_11*x560);
IkReal x666=(gclwh14_11*x543);
IkReal x667=((0.017917245)*x638);
IkReal x668=(gclwh10_11*x598);
IkReal x669=(gclwh6_11*x536);
IkReal x670=(gclwh12_11*x645);
IkReal x671=(gclwh4_11*x547);
IkReal x672=((0.017917245)*x611);
IkReal x673=((0.017917245)*x532);
IkReal x674=(gclwh13_10*x645);
IkReal x675=(gclwh7_10*x536);
IkReal x676=(gclwh5_10*x547);
IkReal x677=((0.017917245)*x627);
IkReal x678=((0.017917245)*x621);
IkReal x679=(gclwh11_10*x598);
IkReal x680=(gclwh15_10*x543);
IkReal x681=(gclwh9_10*x560);
IkReal x682=(gclwh13_15*x533);
IkReal x683=((0.020662095)*x550);
IkReal x684=(gclwh7_7*x512);
IkReal x685=(gclwh9_7*x510);
IkReal x686=(gclwh15_15*x551);
IkReal x687=(gclwh11_7*x557);
IkReal x688=(gclwh12_11*x523);
IkReal x689=((0.3786)*x531);
IkReal x690=(gclwh4_11*x607);
IkReal x691=(gclwh8_11*x585);
IkReal x692=((0.00195566729175)*x542);
IkReal x693=((0.00195566729175)*x637);
IkReal x694=((0.00195566729175)*x565);
IkReal x695=((0.000977833645875)*x542);
IkReal x696=(gclwh10_5*x630);
IkReal x697=(gclwh12_14*x512);
IkReal x698=(gclwh8_5*x551);
IkReal x699=(gclwh6_5*x533);
IkReal x700=(gclwh14_14*x510);
IkReal x701=((0.000847933619625)*x525);
IkReal x702=((0.1893)*x518);
IkReal x703=(gclwh14_11*x560);
IkReal x704=((0.000847933619625)*x631);
IkReal x705=(gclwh8_11*x543);
IkReal x706=(gclwh12_11*x536);
IkReal x707=((0.1893)*x531);
IkReal x708=(gclwh4_11*x598);
IkReal x709=((0.000847933619625)*x617);
IkReal x710=((0.1893)*x593);
IkReal x711=(gclwh15_10*x560);
IkReal x712=((0.000847933619625)*x584);
IkReal x713=((0.000847933619625)*x600);
IkReal x714=(gclwh9_10*x543);
IkReal x715=(gclwh13_10*x536);
IkReal x716=((0.000847933619625)*x555);
IkReal x717=(gclwh11_10*x547);
IkReal x718=(gclwh5_10*x598);
IkReal x719=(gclwh15_15*x510);
IkReal x720=(gclwh7_7*x533);
IkReal x721=(gclwh5_15*x557);
IkReal x722=(gclwh9_7*x551);
IkReal x723=(gclwh11_7*x630);
IkReal x724=(gclwh13_15*x512);
IkReal x725=((2.0)*x496);
IkReal x726=(r21*x497);
IkReal x727=((1.0)*x497);
IkReal x728=(x501*x571);
IkReal x729=(x529*x530);
IkReal x730=(x502*x624);
IkReal x731=(x506*x597);
IkReal x732=(x505*x634);
IkReal x733=(x511*x517);
IkReal x734=(x505*x548);
IkReal x735=(x511*x626);
IkReal x736=(x506*x620);
IkReal x737=(x501*x552);
IkReal x738=(x529*x574);
IkReal x739=(x502*x628);
IkReal x740=((0.2183)*gclwh10_5*x511);
IkReal x741=((0.2183)*gclwh8_5*x529);
IkReal x742=((0.10915)*gclwh6_5*x501);
IkReal x743=((0.2183)*gclwh6_5*x506);
IkReal x744=((0.10915)*gclwh8_5*x505);
IkReal x745=((0.10915)*gclwh10_5*x502);
IkReal x746=(x642*x643);
IkReal x747=(x506*x605);
IkReal x748=(x560*x640);
IkReal x749=(gclwh10_2*pz*x502);
IkReal x750=(x498*x526);
IkReal x751=(x505*x640);
IkReal x752=(gclwh4_3*pp*x547);
IkReal x753=(gclwh10_2*r22*x575);
IkReal x754=(x498*x581);
IkReal x755=(x511*x561);
IkReal x756=(x498*x632);
IkReal x757=(x509*x642);
IkReal x758=(x529*x619);
IkReal x759=(gclwh6_2*pz*x536);
IkReal x760=(x641*x642);
IkReal x761=(x511*x521);
IkReal x762=(x529*x546);
IkReal x763=(gclwh11_0*r22*x575);
IkReal x764=(x554*x575);
IkReal x765=(gclwh5_1*pp*x547);
IkReal x766=(x498*x616);
IkReal x767=(gclwh11_0*pz*x502);
IkReal x768=(gclwh9_0*pz*x505);
IkReal x769=(gclwh15_1*pp*x543);
IkReal x770=(gclwh7_0*pz*x536);
IkReal x771=(x498*x592);
IkReal x772=(x498*x582);
IkReal x773=(x506*x572);
IkReal x774=((0.10915)*gclwh7_7*x501);
IkReal x775=((0.2183)*gclwh9_7*x529);
IkReal x776=((0.2183)*gclwh11_7*x511);
IkReal x777=((0.10915)*gclwh9_7*x505);
IkReal x778=((0.2183)*gclwh7_7*x506);
IkReal x779=((0.10915)*gclwh11_7*x502);
IkReal x780=(x502*x527);
IkReal x781=(x501*x610);
IkReal x782=(x529*x549);
IkReal x783=(x501*x576);
IkReal x784=(x529*x629);
IkReal x785=(x502*x635);
IkReal x786=(x505*x577);
IkReal x787=(x506*x606);
IkReal x788=(x511*x615);
IkReal x789=((0.10915)*gclwh12_14*x501);
IkReal x790=(x529*x577);
IkReal x791=((0.10915)*gclwh4_14*x502);
IkReal x792=((0.10915)*gclwh14_14*x505);
IkReal x793=(x511*x635);
IkReal x794=(x506*x576);
IkReal x795=((0.09465)*gclwh4_8*x502);
IkReal x796=(x505*x524);
IkReal x797=(gclwh12_3*x726);
IkReal x798=(x511*x527);
IkReal x799=(x498*x559);
IkReal x800=(gclwh3_3*x726);
IkReal x801=(x497*x564);
IkReal x802=(gclwh3_2*pz*x536);
IkReal x803=(x498*x587);
IkReal x804=(x524*x560);
IkReal x805=((0.09465)*gclwh12_8*x501);
IkReal x806=(x497*x646);
IkReal x807=(gclwh1_2*pz*x560);
IkReal x808=(x506*x610);
IkReal x809=(x498*x579);
IkReal x810=(gclwh4_2*r22*x575);
IkReal x811=(gclwh4_8*npz*x498);
IkReal x812=(gclwh12_2*pz*x536);
IkReal x813=(x498*x513);
IkReal x814=(x529*x647);
IkReal x815=((0.09465)*gclwh14_8*x505);
IkReal x816=(gclwh12_8*npy*x498);
IkReal x817=(x497*x556);
IkReal x818=(x498*x504);
IkReal x819=(gclwh5_0*pz*x502);
IkReal x820=(gclwh13_9*npy*x498);
IkReal x821=(x568*x575);
IkReal x822=(x501*x537);
IkReal x823=((0.09465)*gclwh15_9*x505);
IkReal x824=(x536*x537);
IkReal x825=(x497*x573);
IkReal x826=(x511*x628);
IkReal x827=(gclwh2_0*pz*x536);
IkReal x828=(x498*x566);
IkReal x829=(x506*x552);
IkReal x830=(x498*x578);
IkReal x831=(gclwh0_1*r20*x497);
IkReal x832=(x535*x575);
IkReal x833=((0.09465)*gclwh5_9*x502);
IkReal x834=(x498*x519);
IkReal x835=((0.09465)*gclwh13_9*x501);
IkReal x836=(gclwh15_0*pz*x560);
IkReal x837=(x498*x500);
IkReal x838=(x529*x548);
IkReal x839=((0.10915)*gclwh15_15*x505);
IkReal x840=(x511*x624);
IkReal x841=(x506*x571);
IkReal x842=((0.10915)*gclwh13_15*x501);
IkReal x843=((0.10915)*gclwh5_15*x502);
IkReal x844=(x529*x634);
IkReal x845=(gclwh6_2*npy*x725);
IkReal x846=(gclwh6_2*x501*x540);
IkReal x847=(gclwh10_2*npz*x725);
IkReal x848=(gclwh8_2*npx*x725);
IkReal x849=(gclwh7_0*npy*x725);
IkReal x850=(gclwh9_0*npx*x725);
IkReal x851=(gclwh11_0*npz*x725);
IkReal x852=(gclwh7_0*x501*x540);
IkReal x853=(gclwh12_2*npy*x725);
IkReal x854=(gclwh3_2*npy*x725);
IkReal x855=(gclwh1_2*npx*x725);
IkReal x856=(gclwh14_3*x529*x562);
IkReal x857=(gclwh4_2*npz*x725);
IkReal x858=(gclwh4_3*x511*x562);
IkReal x859=(gclwh12_2*x501*x540);
IkReal x860=(gclwh1_2*x505*x540);
IkReal x861=(gclwh3_3*x506*x562);
IkReal x862=(gclwh4_2*x502*x540);
IkReal x863=(gclwh1_3*x529*x562);
IkReal x864=(gclwh3_2*x501*x540);
IkReal x865=(gclwh12_3*x506*x562);
IkReal x866=(gclwh14_2*npx*x725);
IkReal x867=(gclwh14_3*r20*x727);
IkReal x868=(gclwh0_0*npx*x725);
IkReal x869=(gclwh2_0*npy*x725);
IkReal x870=(gclwh5_1*x511*x562);
IkReal x871=(gclwh13_1*x506*x562);
IkReal x872=(gclwh15_0*npx*x725);
IkReal x873=(gclwh2_1*x506*x562);
IkReal x874=(gclwh0_1*x529*x562);
IkReal x875=(gclwh5_0*npz*x725);
IkReal x876=(gclwh13_0*npy*x725);
IkReal x877=(gclwh0_0*x505*x540);
IkReal x878=(gclwh15_0*x505*x540);
IkReal x879=(gclwh2_0*x501*x540);
IkReal x880=((1.0)*gclwh13_1*x726);
IkReal x881=(x625*x727);
IkReal x882=(gclwh15_1*x529*x562);
IkReal x883=(x658+x660);
IkReal x884=(x696+x698);
IkReal x885=(x683+x682);
IkReal x886=(x722+x723);
IkReal x887=(x679+x681+x680+x773);
IkReal x888=(x668+x665+x666+x747);
IkReal x889=(x702+x703+x798+x808);
IkReal x890=(x711+x710+x829+x826);
IkReal x891=(x651+x733+x732+x731);
IkReal x892=(x659+x742+x740+x741);
IkReal x893=(x700+x793+x792+x794);
IkReal x894=(x694+x786+x787+x788);
IkReal x895=(x684+x776+x775+x774);
IkReal x896=(x719+x839+x841+x840);
IkReal x897=(x718+x715+x714+x717+x838);
IkReal x898=(x708+x706+x707+x705+x814);
IkReal x899=(x676+x674+x675+x761+x762);
IkReal x900=(x669+x670+x671+x755+x758);
IkReal x901=(((gclwh14_11*x589))+((x505*x647))+(((0.3786)*x518))+((x506*x507))+((x511*x602)));
IkReal x902=(x692+x693+x783+x784+x785);
IkReal x903=(x652+x653+x736+x735+x734);
IkReal x904=(x695+x697+x791+x790+x789);
IkReal x905=(x721+x724+x843+x842+x844);
IkReal x906=(x661+x663+x744+x745+x743);
IkReal x907=(x649+x650+x730+x728+x729);
IkReal x908=(x687+x685+x777+x779+x778);
IkReal x909=(x654+x655+x656+x657+x737+x739+x738);
IkReal x910=(x689+x688+x690+x691+x782+x780+x781);
IkReal x911=(x678+x772+x771+x770+x769+x852+x850+x851);
IkReal x912=(x672+x754+x757+x756+x759+x847+x846+x848);
IkReal x913=(x673+x677+x768+x764+x765+x766+x767+x760+x763+x849);
IkReal x914=(x664+x667+x751+x750+x753+x752+x746+x748+x749+x845);
IkReal x915=(x713+x716+x878+x879+x873+x874+x875+x876+x877+x881+x880+x882+x834+x835+x836+x837+x833);
IkReal x916=(x498+x701+x704+x795+x797+x796+x799+x853+x856+x857+x854+x855+x805+x804+x807+x806+x801+x800+x803+x802);
IkReal x917=(x709+x858+x859+x867+x866+x865+x864+x863+x862+x861+x860+x816+x815+x812+x813+x810+x811+x809);
IkReal x918=(x498+x712+x869+x868+x870+x871+x872+x818+x819+x817+x828+x823+x822+x821+x820+x827+x825+x824+x830+x831+x832);
op[38]=((((0.8732)*gclwh4_14*x511))+(((-0.0039113345835)*x637))+((x505*x629))+(((0.0039113345835)*x565))+(((-1.0)*x502*x615))+(((0.8732)*gclwh12_14*x506))+(((-1.0)*x501*x606))+(((-1.0)*gclwh8_12*x639))+(((-1.0)*gclwh10_12*x599))+(((-0.8732)*gclwh14_14*x529))+(((-0.0039113345835)*x542))+((gclwh6_12*x522)));
op[39]=((-0.05940486)+((gclwh8_11*x601))+(((-8.0)*gclwh4_11*x511))+((x502*x602))+(((0.7572)*x531))+(((-1.0)*x505*x549))+((x501*x507))+(((-0.7572)*x518))+((gclwh12_11*x648))+(((-8.0)*gclwh12_11*x506))+(((-1.0)*gclwh14_11*x569))+((gclwh4_11*x618))+(((8.0)*gclwh14_11*x529)));
op[40]=((0.02168232)+(((-1.0)*x901))+x910);
op[41]=(((gclwh3_2*x563))+(((-0.01239915)*x579))+(((-0.131)*npx*x524))+(((-1.0)*gclwh12_2*x563))+((gclwh1_2*x570))+((gclwh14_2*x570))+(((-0.0655)*gclwh1_2*x505))+(((-1.0)*x894))+(((0.01239915)*x559))+(((0.131)*gclwh4_2*x511))+(((0.0655)*gclwh14_2*x505))+(((-0.0655)*gclwh12_2*x501))+(((0.131)*gclwh12_2*x506))+(((0.131)*gclwh1_2*x529))+(((-0.0655)*gclwh4_2*x502))+x902+(((-0.0655)*gclwh3_2*x501))+(((-0.01239915)*x513))+(((0.131)*gclwh3_2*x506))+(((-1.0)*gclwh4_2*x544)));
op[42]=((((-3.269)*gclwh13_0*x506))+(((-0.30941085)*x519))+(((-1.6345)*gclwh15_0*x505))+(((0.30941085)*x566))+(((3.269)*gclwh0_0*x529))+(((1.6345)*gclwh13_0*x501))+(((-1.0)*x907))+(((-1.6345)*gclwh0_0*x505))+(((0.30941085)*x578))+(((0.01464286847625)*x568))+((gclwh13_0*x644))+((gclwh2_0*x644))+(((-0.01464286847625)*x608))+(((0.01464286847625)*x535))+x891+(((3.269)*gclwh2_0*x506))+(((-1.6345)*gclwh2_0*x501))+(((3.269)*gclwh15_0*x529))+(((-3.269)*gclwh5_0*x511))+(((1.6345)*gclwh5_0*x502)));
op[43]=((1.31196768)+(((-1.0)*x903))+x909);
op[44]=((0.05940486)+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*gclwh15_10*x569))+(((-8.0)*gclwh13_10*x506))+((x501*x620))+(((-0.7572)*x593))+(((8.0)*gclwh15_10*x529))+((gclwh13_10*x648))+((x502*x626))+((gclwh5_10*x618))+((gclwh9_10*x601))+(((-1.0)*x505*x574))+(((-8.0)*gclwh5_10*x511)));
op[45]=(((x502*x517))+(((0.8732)*gclwh15_15*x529))+(((-1.0)*gclwh7_13*x522))+(((0.0039113345835)*x590))+((gclwh9_13*x639))+(((-0.8732)*gclwh13_15*x506))+(((-0.0039113345835)*x609))+(((-1.0)*x505*x530))+((x501*x597))+(((0.0039113345835)*x588))+((gclwh11_13*x599))+(((-0.8732)*gclwh5_15*x511)));
op[46]=((((0.131)*gclwh15_0*x529))+(((0.131)*gclwh2_0*x506))+(((-1.0)*gclwh15_0*x570))+(((-0.0655)*gclwh15_0*x505))+(((-0.0655)*gclwh0_0*x505))+(((-0.131)*gclwh5_0*x511))+(((0.00058678977375)*x535))+(((-0.131)*gclwh13_0*x506))+(((0.131)*gclwh0_0*x529))+((gclwh5_0*x544))+(((-1.0)*x891))+(((0.01239915)*x578))+((gclwh13_0*x563))+((gclwh2_0*x563))+(((-0.0655)*gclwh2_0*x501))+(((0.0655)*gclwh13_0*x501))+x907+(((0.0655)*gclwh5_0*x502))+(((-0.01239915)*x519))+(((0.01239915)*x566)));
op[47]=((0.02168232)+(((-1.0)*x909))+x903);
op[48]=(((gclwh10_12*x539))+(((-1.0)*gclwh4_8*x520))+(((-1.0)*gclwh12_8*x516))+((gclwh8_12*x528))+(((-1.6345)*gclwh10_12*x511))+(((-1.0)*x906))+(((0.81725)*gclwh8_12*x505))+(((-1.0)*x883))+((gclwh14_8*x596))+(((0.81725)*gclwh10_12*x502))+x662+(((1.6345)*gclwh6_12*x506))+(((-1.6345)*gclwh8_12*x529))+(((-1.0)*gclwh6_12*x534))+x892+(((-0.81725)*gclwh6_12*x501)));
op[49]=((((-1.0)*gclwh10_11*x502))+(((-1.0)*x912))+(((-0.12699240901125)*x567))+(((-1.0)*x888))+(((-0.12699240901125)*x643))+((gclwh6_11*x501))+(((0.12699240901125)*x509))+x914+x900+(((-1.0)*gclwh8_11*x505)));
op[50]=((0.17125635)+(((-1.0)*x505*x619))+(((4.0)*gclwh10_11*x511))+((x501*x605))+((gclwh12_11*x553))+((gclwh6_11*x523))+(((-1.0)*x502*x561))+(((4.0)*gclwh8_11*x529))+(((-4.0)*gclwh6_11*x506))+(((-1.0)*gclwh14_11*x585))+(((-1.0)*gclwh8_11*x589))+(((-1.0)*gclwh10_11*x607))+((gclwh4_11*x580)));
op[51]=((((0.14850585)*x581))+(((-0.160905)*x611))+(((-1.0)*gclwh8_2*x636))+(((0.160905)*x638))+(((-0.14850585)*x526))+((gclwh6_2*x503))+(((0.7845)*gclwh6_2*x501))+(((-1.0)*gclwh10_2*x623))+(((0.04132419)*gclwh4_14*rxp2_2))+(((0.160905)*x545))+(((-0.7845)*gclwh8_2*x505))+((gclwh12_14*x614))+(((0.14850585)*x632))+(((1.569)*gclwh10_2*x511))+(((-1.569)*gclwh6_2*x506))+(((-0.04132419)*x541))+(((1.569)*gclwh8_2*x529))+(((-0.7845)*gclwh10_2*x502)));
op[52]=((((-0.0655)*gclwh10_12*x511))+(((-0.0655)*gclwh8_12*x529))+(((0.0655)*gclwh6_12*x506))+(((-0.03275)*gclwh6_12*x501))+(((-1.0)*x906))+((gclwh4_8*x613))+(((0.03275)*gclwh8_12*x505))+((gclwh10_12*x594))+(((-1.0)*gclwh6_12*x591))+(((-1.0)*x662))+(((0.006199575)*x545))+(((0.03275)*gclwh10_12*x502))+(((-1.0)*gclwh14_8*x558))+x883+x892+((gclwh8_12*x604)));
op[53]=(((gclwh8_11*x505))+(((-1.0)*gclwh6_11*x501))+(((0.00076243651125)*x509))+(((-1.0)*x900))+(((-1.0)*x912))+((gclwh10_11*x502))+(((-0.00076243651125)*x567))+x888+x914+(((-1.0)*gclwh12_3*x514)));
op[54]=(((gclwh11_10*x502))+((gclwh9_10*x505))+(((-1.0)*x899))+(((-1.0)*x911))+(((-0.12699240901125)*x595))+(((-1.0)*gclwh7_10*x501))+(((-0.12699240901125)*x641))+(((0.12699240901125)*x603))+x887+x913);
op[55]=((((-1.0)*gclwh13_9*x516))+(((-1.6345)*gclwh9_13*x529))+(((0.81725)*gclwh11_13*x502))+(((0.81725)*gclwh9_13*x505))+(((-1.0)*x908))+(((-1.0)*gclwh5_9*x520))+(((-1.0)*gclwh7_13*x534))+(((-1.6345)*gclwh11_13*x511))+(((-1.0)*x885))+(((-0.81725)*gclwh7_13*x501))+((gclwh11_13*x539))+(((1.6345)*gclwh7_13*x506))+x686+((gclwh15_9*x596))+x895+((gclwh9_13*x528)));
op[56]=((((-1.0)*gclwh13_15*x614))+(((-0.7845)*gclwh11_0*x502))+(((0.14850585)*x582))+(((-0.04132419)*x550))+(((-0.00702803935125)*x554))+(((-1.569)*gclwh7_0*x506))+(((-1.0)*gclwh11_0*x623))+((gclwh7_0*x503))+(((0.160905)*x621))+(((-0.14850585)*x616))+(((1.569)*gclwh9_0*x529))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-0.160905)*x627))+(((0.7845)*gclwh7_0*x501))+(((0.14850585)*x592))+(((-0.160905)*x532))+(((-0.7845)*gclwh9_0*x505))+(((1.569)*gclwh11_0*x511)));
op[57]=((0.17125635)+((gclwh5_10*x580))+((gclwh13_10*x553))+(((-1.0)*gclwh9_10*x589))+(((-1.0)*gclwh11_10*x607))+(((-1.0)*gclwh15_10*x585))+(((-1.0)*x505*x546))+(((-1.0)*x502*x521))+(((4.0)*gclwh11_10*x511))+((gclwh7_10*x523))+(((-4.0)*gclwh7_10*x506))+((x501*x572))+(((4.0)*gclwh9_10*x529)));
op[58]=((((-1.0)*gclwh11_10*x502))+((gclwh7_10*x501))+(((-1.0)*x911))+(((-1.0)*x887))+(((-1.0)*gclwh13_1*x514))+(((-1.0)*gclwh9_10*x505))+(((0.00076243651125)*x603))+x899+x913+(((-0.00076243651125)*x595)));
op[59]=((((-0.0655)*gclwh9_13*x529))+(((0.03275)*gclwh9_13*x505))+(((-1.0)*x686))+(((-0.03275)*gclwh7_13*x501))+(((-1.0)*x908))+(((-0.0655)*gclwh11_13*x511))+(((-1.0)*gclwh15_9*x558))+(((0.0655)*gclwh7_13*x506))+(((0.006199575)*x532))+(((-1.0)*gclwh7_13*x591))+x885+x895+((gclwh9_13*x604))+((gclwh13_9*x586))+((gclwh11_13*x594))+(((0.03275)*gclwh11_13*x502)));
op[60]=((((-1.0)*gclwh4_8*x539))+(((1.6345)*gclwh12_8*x506))+(((-1.0)*x904))+((gclwh6_12*x516))+(((-0.81725)*gclwh4_8*x502))+(((-0.007321434238125)*x525))+(((-1.0)*gclwh8_12*x596))+(((-0.81725)*gclwh12_8*x501))+((gclwh14_8*x528))+(((-1.0)*x699))+(((0.81725)*gclwh14_8*x505))+(((1.6345)*gclwh4_8*x511))+x884+x893+(((-1.0)*gclwh10_12*x520))+(((-1.6345)*gclwh14_8*x529)));
op[61]=((0.679811285)+((gclwh3_3*x633))+(((-0.66189404)*gclwh12_3*x501))+(((-1.0)*gclwh14_11*x505))+(((-0.00600991575645741)*x646))+(((1.341705325)*gclwh12_3*x506))+(((-1.0)*x917))+((gclwh14_3*x515))+(((-1.0)*x889))+(((0.66189404)*gclwh14_3*x505))+(((-0.66189404)*gclwh4_3*x502))+(((1.341705325)*gclwh3_3*x506))+((gclwh12_11*x501))+x898+(((-0.679811285)*gclwh3_3*x501))+(((-1.0)*gclwh12_3*x633))+(((1.341705325)*gclwh1_3*x529))+(((-1.341705325)*gclwh14_3*x529))+(((1.341705325)*gclwh4_3*x511))+(((-0.679811285)*gclwh1_3*x505))+x916+((gclwh4_11*x502))+((gclwh1_3*x515)));
op[62]=((0.07735732)+(((-1.0)*x901))+x910);
op[63]=((((-1.569)*gclwh1_2*x529))+(((-1.0)*gclwh4_8*npz*x499))+(((-1.569)*gclwh12_2*x506))+(((-0.85)*gclwh14_8*x505))+(((0.7845)*gclwh12_2*x501))+(((0.85)*gclwh4_8*x502))+(((-1.569)*gclwh4_2*x511))+(((-1.0)*gclwh1_2*x636))+(((0.14850585)*x513))+(((-1.0)*x894))+(((0.7845)*gclwh3_2*x501))+(((0.14850585)*x579))+(((-0.14850585)*x559))+(((-0.7845)*gclwh14_2*x505))+((gclwh12_2*x503))+(((0.85)*gclwh12_8*x501))+(((1.569)*npx*x524))+(((0.007614829125)*x525))+(((0.7845)*gclwh1_2*x505))+(((-0.007614829125)*x617))+(((-1.0)*gclwh12_8*npy*x499))+(((0.7845)*gclwh4_2*x502))+x902+(((0.007614829125)*x631))+((x499*x587))+(((-1.0)*gclwh14_2*x636))+(((-1.0)*gclwh3_2*x503))+((gclwh4_2*x623))+(((-1.569)*gclwh3_2*x506)));
op[64]=((((0.0655)*gclwh14_8*x529))+(((-1.0)*gclwh14_8*x604))+(((-0.0655)*gclwh4_8*x511))+(((0.000293394886875)*x525))+(((-1.0)*x893))+(((0.03275)*gclwh12_8*x501))+((gclwh4_8*x594))+(((-0.0655)*gclwh12_8*x506))+(((-1.0)*gclwh8_12*x558))+((gclwh6_12*x586))+(((-1.0)*x699))+x884+(((-0.03275)*gclwh14_8*x505))+(((-1.0)*gclwh10_12*x613))+x904+(((0.03275)*gclwh4_8*x502)));
op[65]=((-0.012986285)+(((0.008055325)*gclwh3_3*x506))+(((3.60823078949063e-5)*x564))+(((-1.0)*gclwh12_11*x501))+(((0.00493096)*gclwh12_3*x501))+((gclwh14_11*x505))+(((-1.0)*x898))+((gclwh3_3*x583))+(((-1.0)*x917))+(((-1.0)*gclwh12_3*x583))+(((-1.0)*gclwh4_11*x502))+(((-0.008055325)*gclwh14_3*x529))+(((0.008055325)*gclwh12_3*x506))+(((0.008055325)*gclwh1_3*x529))+(((-0.00493096)*gclwh14_3*x505))+(((0.00493096)*gclwh4_3*x502))+(((-1.0)*gclwh4_3*x508))+x889+(((0.008055325)*gclwh4_3*x511))+(((-0.012986285)*gclwh3_3*x501))+x916+((gclwh14_3*x622))+(((-0.012986285)*gclwh1_3*x505)));
op[66]=((-0.679811285)+((gclwh0_1*x515))+((gclwh13_1*x633))+(((-1.0)*gclwh15_1*x515))+(((1.341705325)*gclwh15_1*x529))+(((1.341705325)*gclwh0_1*x529))+(((-1.0)*x890))+(((-1.0)*gclwh15_10*x505))+(((-1.0)*x915))+(((-0.679811285)*gclwh0_1*x505))+(((0.00600991575645741)*x573))+(((-0.66189404)*gclwh15_1*x505))+(((-1.341705325)*gclwh13_1*x506))+((gclwh5_10*x502))+(((-0.679811285)*gclwh2_1*x501))+(((0.66189404)*gclwh13_1*x501))+(((-1.341705325)*gclwh5_1*x511))+x897+((gclwh13_10*x501))+x918+(((0.66189404)*gclwh5_1*x502))+(((0.00600991575645741)*x625))+(((1.341705325)*gclwh2_1*x506)));
op[67]=(((x500*x538))+(((-1.0)*x504*x538))+(((0.81725)*gclwh13_9*x501))+((gclwh9_13*x596))+(((-1.0)*x896))+(((-1.0)*x886))+((gclwh13_9*x534))+(((0.81725)*gclwh5_9*x502))+(((-1.0)*gclwh15_9*x528))+((gclwh11_13*x520))+x720+(((-0.81725)*gclwh15_9*x505))+((gclwh5_9*x539))+x905+(((-1.6345)*gclwh13_9*x506))+(((-1.0)*gclwh7_13*x516)));
op[68]=((((-1.0)*gclwh13_0*x503))+(((0.85)*gclwh13_9*x501))+(((-0.14850585)*x566))+(((-0.85)*gclwh15_9*x505))+(((-1.0)*x499*x504))+(((-1.569)*gclwh0_0*x529))+(((-1.0)*gclwh13_9*npy*x499))+(((-1.569)*gclwh2_0*x506))+(((0.7845)*gclwh2_0*x501))+(((0.14850585)*x519))+(((-1.0)*x891))+(((-0.7845)*gclwh5_0*x502))+(((1.569)*gclwh5_0*x511))+(((0.007614829125)*x600))+(((0.00702803935125)*x608))+(((-0.00702803935125)*x568))+(((-0.14850585)*x578))+(((0.85)*gclwh5_9*x502))+(((0.007614829125)*x555))+(((-0.7845)*gclwh13_0*x501))+(((0.7845)*gclwh15_0*x505))+(((-1.569)*gclwh15_0*x529))+(((-0.007614829125)*x584))+(((-1.0)*gclwh2_0*x503))+(((1.569)*gclwh13_0*x506))+(((0.7845)*gclwh0_0*x505))+((x499*x500))+x907+(((-0.00702803935125)*x535)));
op[69]=((0.07735732)+(((-1.0)*x909))+x903);
op[70]=((0.012986285)+((gclwh5_1*x508))+((gclwh0_1*x622))+((gclwh13_1*x583))+(((-1.0)*gclwh5_10*x502))+(((0.008055325)*gclwh0_1*x529))+(((-1.0)*x897))+(((-1.0)*x915))+(((-0.00493096)*gclwh13_1*x501))+(((3.60823078949063e-5)*x573))+(((0.00493096)*gclwh15_1*x505))+(((-0.012986285)*gclwh0_1*x505))+(((0.008055325)*gclwh2_1*x506))+(((-0.008055325)*gclwh5_1*x511))+(((-3.60823078949063e-5)*x556))+(((0.008055325)*gclwh15_1*x529))+(((-0.00493096)*gclwh5_1*x502))+x890+(((-1.0)*gclwh13_10*x501))+(((-0.012986285)*gclwh2_1*x501))+x918+(((-0.008055325)*gclwh13_1*x506))+((gclwh15_10*x505)));
op[71]=((((-1.0)*gclwh7_13*x586))+((gclwh9_13*x558))+(((0.0655)*gclwh13_9*x506))+((x504*x612))+((gclwh11_13*x613))+(((-1.0)*x905))+(((-1.0)*x886))+(((-0.03275)*gclwh13_9*x501))+(((0.03275)*gclwh15_9*x505))+(((-1.0)*gclwh5_9*x594))+(((0.000293394886875)*x584))+x720+x896+(((-0.000293394886875)*x555))+(((-1.0)*x500*x612))+(((-0.03275)*gclwh5_9*x502)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x919=htj1*htj1;
CheckValue<IkReal> x920=IKPowWithIntegerCheck(((1.0)+x919),-1);
if(!x920.valid){
continue;
}
cj1array[numsolutions]=((x920.value)*(((1.0)+(((-1.0)*x919)))));
CheckValue<IkReal> x921=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x921.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x921.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x922=htj2*htj2;
CheckValue<IkReal> x923=IKPowWithIntegerCheck(((1.0)+x922),-1);
if(!x923.valid){
continue;
}
cj2array[numsolutions]=((x923.value)*(((1.0)+(((-1.0)*x922)))));
CheckValue<IkReal> x924=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x924.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x924.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x925=htj3*htj3;
CheckValue<IkReal> x926=IKPowWithIntegerCheck(((1.0)+x925),-1);
if(!x926.valid){
continue;
}
cj3array[numsolutions]=((x926.value)*(((1.0)+(((-1.0)*x925)))));
CheckValue<IkReal> x927=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x927.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x927.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x928=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x928);
rxp1_0=(pz*r11);
rxp1_1=(r01*x928);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x929=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x929);
rxp1_0=(pz*r11);
rxp1_1=(r01*x929);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x930=IKPowWithIntegerCheck(r22,-1);
if(!x930.valid){
continue;
}
CheckValue<IkReal> x931=IKPowWithIntegerCheck(sj3,-1);
if(!x931.valid){
continue;
}
sj4array[0]=((x930.value)*(x931.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x932=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x932);
rxp1_0=(pz*r11);
rxp1_1=(r01*x932);
IkReal x933=((16.0)*sj4);
IkReal x934=(cj1*cj2);
IkReal x935=((4.0)*sj3);
IkReal x936=((8.0)*sj4);
IkReal x937=((4.0)*cj4);
IkReal x938=(sj1*sj2);
IkReal x939=((4.0)*sj4);
IkReal x940=(cj3*r02);
IkReal x941=((16.0)*sj3);
IkReal x942=((8.0)*sj3);
IkReal x943=((12.0)*cj4);
IkReal x944=((12.0)*sj4);
IkReal x945=(cj3*r12);
IkReal x946=(r11*x935);
IkReal x947=(r01*x935);
IkReal x948=(r01*x938);
IkReal x949=(cj3*cj4*r01);
IkReal x950=(cj3*cj4*r11);
IkReal x951=(cj3*r10*x937);
IkReal x952=(x944*x945);
IkReal x953=(cj3*r00*x937);
IkReal x954=(x940*x944);
IkReal x955=(r00*x938*x939);
IkReal x956=(r02*x938*x943);
IkReal x957=(r00*x934*x939);
IkReal x958=(r02*x934*x943);
IkReal x959=(r10*x938*x939);
IkReal x960=(r12*x934*x943);
IkReal x961=(r12*x938*x943);
IkReal x962=(r10*x934*x939);
IkReal x963=(x957+x946);
IkReal x964=(x959+x947);
IkReal x965=(x955+x951);
IkReal x966=(x958+x952);
IkReal x967=(x962+x953);
IkReal x968=(x961+x954);
j5eval[0]=((((0.5)*(IKabs((((r01*x933*x934))+(((-1.0)*x933*x948))+(((-16.0)*x950))+(((-1.0)*r10*x941)))))))+(((0.5)*(IKabs((x960+x967+(((-1.0)*x964))+(((-1.0)*x968)))))))+(((0.5)*(IKabs((x960+x964+(((-1.0)*x967))+(((-1.0)*x968)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x937*x938))+(((-1.0)*x939*x940))+((r12*x934*x937))+x964+(((-1.0)*x967)))))))+(((0.5)*(IKabs((x963+x956+(((-1.0)*x965))+(((-1.0)*x966)))))))+(IKabs(((((-1.0)*r00*x942))+(((-1.0)*r11*x934*x936))+(((-8.0)*x949))+((r11*x936*x938)))))+(((0.5)*(IKabs(((((-1.0)*r02*x934*x937))+((r02*x937*x938))+(((-1.0)*x939*x945))+x963+(((-1.0)*x965)))))))+(IKabs((((r01*x934*x936))+(((-8.0)*x950))+(((-1.0)*r10*x942))+(((-1.0)*x936*x948)))))+(((0.5)*(IKabs((x965+x956+(((-1.0)*x966))+(((-1.0)*x963)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x933*x934))+(((-1.0)*r00*x941))+((r11*x933*x938))+(((-16.0)*x949))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x969=(r10*sj3);
IkReal x970=(r01*sj4);
IkReal x971=(cj1*cj2);
IkReal x972=(cj3*cj4);
IkReal x973=(sj1*sj2);
IkReal x974=(cj4*r02);
IkReal x975=((4.0)*r11*sj3);
IkReal x976=(cj3*r12*sj4);
IkReal x977=((4.0)*r00*sj4);
IkReal x978=((4.0)*r10*x972);
IkReal x979=((12.0)*x976);
IkReal x980=((4.0)*x976);
IkReal x981=(x971*x977);
IkReal x982=(x973*x977);
IkReal x983=((12.0)*x973*x974);
IkReal x984=((12.0)*x971*x974);
IkReal x985=((4.0)*x973*x974);
IkReal x986=((4.0)*x971*x974);
IkReal x987=(x981+x975);
IkReal x988=(x982+x978);
IkReal x989=(x986+x980);
IkReal x990=(x984+x979);
IkReal x991=((((-8.0)*x969))+(((8.0)*x970*x971))+(((-8.0)*x970*x973))+(((-8.0)*r11*x972)));
op[0]=((((-1.0)*x989))+(((-1.0)*x988))+x985+x987);
op[1]=x991;
op[2]=((((-1.0)*x988))+(((-1.0)*x990))+x987+x983);
op[3]=((((-16.0)*r11*x972))+(((-16.0)*x970*x973))+(((16.0)*x970*x971))+(((-16.0)*x969)));
op[4]=((((-1.0)*x987))+(((-1.0)*x990))+x988+x983);
op[5]=x991;
op[6]=((((-1.0)*x989))+(((-1.0)*x987))+x988+x985);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x992=(cj1*cj2);
IkReal x993=((4.0)*cj4);
IkReal x994=(sj1*sj2);
IkReal x995=((4.0)*sj4);
IkReal x996=(r00*sj3);
IkReal x997=(cj3*r02);
IkReal x998=((4.0)*r01*sj3);
IkReal x999=((16.0)*r11*sj4);
IkReal x1000=(cj3*cj4*r01);
IkReal x1001=((12.0)*cj4*r12);
IkReal x1002=((8.0)*r11*sj4);
IkReal x1003=(cj3*r00*x993);
IkReal x1004=((12.0)*sj4*x997);
IkReal x1005=(x995*x997);
IkReal x1006=(r10*x992*x995);
IkReal x1007=(r10*x994*x995);
IkReal x1008=(x1001*x992);
IkReal x1009=(x1001*x994);
IkReal x1010=(r12*x992*x993);
IkReal x1011=(r12*x993*x994);
IkReal x1012=(x1007+x998);
IkReal x1013=(x1006+x1003);
IkReal x1014=(x1011+x1005);
IkReal x1015=(x1009+x1004);
IkReal x1016=((((-1.0)*x1002*x992))+(((-8.0)*x1000))+((x1002*x994))+(((-8.0)*x996)));
j5evalpoly[0]=(x1010+x1013+(((htj5*htj5)*((x1013+x1008+(((-1.0)*x1015))+(((-1.0)*x1012))))))+(((-1.0)*x1014))+(((-1.0)*x1012))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1010+x1012+(((-1.0)*x1014))+(((-1.0)*x1013))))))+(((htj5*htj5*htj5*htj5)*((x1012+x1008+(((-1.0)*x1015))+(((-1.0)*x1013))))))+((x1016*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*x1000))+((x994*x999))+(((-1.0)*x992*x999))+(((-16.0)*x996))))))+((htj5*x1016)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1017=(cj5*sj4);
IkReal x1018=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1018))+((r00*x1017))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1018))+(((-1.0)*r10*x1017))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1018))+((r00*x1017))+((cj4*r02))))+IKsqr((((r11*x1018))+(((-1.0)*r10*x1017))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1018))+((r00*x1017))+((cj4*r02))), (((r11*x1018))+(((-1.0)*r10*x1017))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1019=IKsin(j0);
IkReal x1020=IKcos(j0);
IkReal x1021=(r02*sj4);
IkReal x1022=((1.0)*sj3);
IkReal x1023=(r12*sj4);
IkReal x1024=(cj3*cj4);
IkReal x1025=((1.0)*cj5);
IkReal x1026=(r11*sj5);
IkReal x1027=(cj5*r01);
IkReal x1028=(r01*sj5);
IkReal x1029=(r00*sj5);
IkReal x1030=((0.39225)*cj2);
IkReal x1031=(cj5*r11);
IkReal x1032=((1.0)*sj2);
IkReal x1033=(r10*sj5);
IkReal x1034=((1.0)*cj4);
IkReal x1035=((0.39225)*sj1*sj2);
IkReal x1036=(cj1*x1019);
IkReal x1037=(cj4*cj5*sj3);
IkReal x1038=(cj1*x1020);
IkReal x1039=(sj1*x1020);
IkReal x1040=(sj1*x1019);
evalcond[0]=(x1019+(((-1.0)*r00*sj4*x1025))+((sj4*x1028))+(((-1.0)*r02*x1034)));
evalcond[1]=((((-1.0)*x1020))+((sj4*x1026))+(((-1.0)*r12*x1034))+(((-1.0)*r10*sj4*x1025)));
evalcond[2]=(((x1020*x1035))+(((0.10915)*x1019))+(((-1.0)*px))+(((-1.0)*x1030*x1038))+(((-0.425)*x1038))+(((-0.09465)*x1027))+(((-0.09465)*x1029)));
evalcond[3]=((((-0.10915)*x1020))+(((-1.0)*py))+(((-1.0)*x1030*x1036))+((x1019*x1035))+(((-0.425)*x1036))+(((-0.09465)*x1033))+(((-0.09465)*x1031)));
evalcond[4]=(((cj2*x1039))+((r00*x1037))+(((-1.0)*x1021*x1022))+(((-1.0)*cj4*x1022*x1028))+((sj2*x1038))+((cj3*x1027))+((cj3*x1029)));
evalcond[5]=(((cj2*x1038))+(((-1.0)*x1032*x1039))+(((-1.0)*r00*x1024*x1025))+((x1024*x1028))+((sj3*x1027))+((sj3*x1029))+((cj3*x1021)));
evalcond[6]=(((r10*x1037))+((cj3*x1033))+((cj3*x1031))+(((-1.0)*x1022*x1023))+(((-1.0)*cj4*x1022*x1026))+((sj2*x1036))+((cj2*x1040)));
evalcond[7]=((((-1.0)*x1032*x1040))+((cj2*x1036))+((sj3*x1033))+((sj3*x1031))+(((-1.0)*r10*x1024*x1025))+((x1024*x1026))+((cj3*x1023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1041=IKPowWithIntegerCheck(cj3,-1);
if(!x1041.valid){
continue;
}
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(r22,-1);
if(!x1042.valid){
continue;
}
sj4array[0]=((-1.0)*(x1041.value)*(x1042.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1043=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1043);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1043);
IkReal x1044=((16.0)*sj4);
IkReal x1045=(cj1*cj2);
IkReal x1046=((4.0)*sj3);
IkReal x1047=((8.0)*sj4);
IkReal x1048=((4.0)*cj4);
IkReal x1049=(sj1*sj2);
IkReal x1050=((4.0)*sj4);
IkReal x1051=(cj3*r02);
IkReal x1052=((16.0)*sj3);
IkReal x1053=((8.0)*sj3);
IkReal x1054=((12.0)*cj4);
IkReal x1055=((12.0)*sj4);
IkReal x1056=(cj3*r12);
IkReal x1057=(r11*x1046);
IkReal x1058=(r01*x1046);
IkReal x1059=(r01*x1049);
IkReal x1060=(cj3*cj4*r01);
IkReal x1061=(cj3*cj4*r11);
IkReal x1062=(cj3*r10*x1048);
IkReal x1063=(x1055*x1056);
IkReal x1064=(cj3*r00*x1048);
IkReal x1065=(x1051*x1055);
IkReal x1066=(r00*x1049*x1050);
IkReal x1067=(r02*x1049*x1054);
IkReal x1068=(r00*x1045*x1050);
IkReal x1069=(r02*x1045*x1054);
IkReal x1070=(r10*x1049*x1050);
IkReal x1071=(r12*x1045*x1054);
IkReal x1072=(r12*x1049*x1054);
IkReal x1073=(r10*x1045*x1050);
IkReal x1074=(x1057+x1068);
IkReal x1075=(x1058+x1070);
IkReal x1076=(x1062+x1066);
IkReal x1077=(x1069+x1063);
IkReal x1078=(x1073+x1064);
IkReal x1079=(x1072+x1065);
j5eval[0]=((((0.5)*(IKabs((x1075+x1071+(((-1.0)*x1079))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs((x1074+x1067+(((-1.0)*x1077))+(((-1.0)*x1076)))))))+(((0.5)*(IKabs((x1074+(((-1.0)*r02*x1045*x1048))+(((-1.0)*x1076))+(((-1.0)*x1050*x1056))+((r02*x1048*x1049)))))))+(IKabs(((((-1.0)*r10*x1053))+((r01*x1045*x1047))+(((-1.0)*x1047*x1059))+(((-8.0)*x1061)))))+(((0.5)*(IKabs(((((-1.0)*r10*x1052))+(((-1.0)*x1044*x1059))+((r01*x1044*x1045))+(((-16.0)*x1061)))))))+(((0.5)*(IKabs((x1078+x1071+(((-1.0)*x1075))+(((-1.0)*x1079)))))))+(IKabs(((((-1.0)*r00*x1053))+(((-1.0)*r11*x1045*x1047))+((r11*x1047*x1049))+(((-8.0)*x1060)))))+(((0.5)*(IKabs((x1076+x1067+(((-1.0)*x1074))+(((-1.0)*x1077)))))))+(((0.5)*(IKabs((x1075+((r12*x1045*x1048))+(((-1.0)*r12*x1048*x1049))+(((-1.0)*x1078))+(((-1.0)*x1050*x1051)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x1052))+((r11*x1044*x1049))+(((-16.0)*x1060))+(((-1.0)*r11*x1044*x1045))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1080=(r10*sj3);
IkReal x1081=(r01*sj4);
IkReal x1082=(cj1*cj2);
IkReal x1083=(cj3*cj4);
IkReal x1084=(sj1*sj2);
IkReal x1085=(cj4*r02);
IkReal x1086=((4.0)*r11*sj3);
IkReal x1087=(cj3*r12*sj4);
IkReal x1088=((4.0)*r00*sj4);
IkReal x1089=((4.0)*r10*x1083);
IkReal x1090=((12.0)*x1087);
IkReal x1091=((4.0)*x1087);
IkReal x1092=(x1082*x1088);
IkReal x1093=(x1084*x1088);
IkReal x1094=((12.0)*x1084*x1085);
IkReal x1095=((12.0)*x1082*x1085);
IkReal x1096=((4.0)*x1084*x1085);
IkReal x1097=((4.0)*x1082*x1085);
IkReal x1098=(x1092+x1086);
IkReal x1099=(x1093+x1089);
IkReal x1100=(x1097+x1091);
IkReal x1101=(x1095+x1090);
IkReal x1102=((((-8.0)*x1081*x1084))+(((-8.0)*r11*x1083))+(((8.0)*x1081*x1082))+(((-8.0)*x1080)));
op[0]=(x1096+x1098+(((-1.0)*x1099))+(((-1.0)*x1100)));
op[1]=x1102;
op[2]=(x1094+x1098+(((-1.0)*x1099))+(((-1.0)*x1101)));
op[3]=((((-16.0)*x1081*x1084))+(((-16.0)*x1080))+(((16.0)*x1081*x1082))+(((-16.0)*r11*x1083)));
op[4]=(x1094+x1099+(((-1.0)*x1098))+(((-1.0)*x1101)));
op[5]=x1102;
op[6]=(x1096+x1099+(((-1.0)*x1098))+(((-1.0)*x1100)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1103=(cj1*cj2);
IkReal x1104=((4.0)*cj4);
IkReal x1105=(sj1*sj2);
IkReal x1106=((4.0)*sj4);
IkReal x1107=(r00*sj3);
IkReal x1108=(cj3*r02);
IkReal x1109=((4.0)*r01*sj3);
IkReal x1110=((16.0)*r11*sj4);
IkReal x1111=(cj3*cj4*r01);
IkReal x1112=((12.0)*cj4*r12);
IkReal x1113=((8.0)*r11*sj4);
IkReal x1114=(cj3*r00*x1104);
IkReal x1115=((12.0)*sj4*x1108);
IkReal x1116=(x1106*x1108);
IkReal x1117=(r10*x1103*x1106);
IkReal x1118=(r10*x1105*x1106);
IkReal x1119=(x1103*x1112);
IkReal x1120=(x1105*x1112);
IkReal x1121=(r12*x1103*x1104);
IkReal x1122=(r12*x1104*x1105);
IkReal x1123=(x1109+x1118);
IkReal x1124=(x1114+x1117);
IkReal x1125=(x1116+x1122);
IkReal x1126=(x1115+x1120);
IkReal x1127=((((-1.0)*x1103*x1113))+((x1105*x1113))+(((-8.0)*x1107))+(((-8.0)*x1111)));
j5evalpoly[0]=(((htj5*x1127))+x1121+x1124+(((htj5*htj5)*((x1119+x1124+(((-1.0)*x1126))+(((-1.0)*x1123))))))+(((htj5*htj5*htj5)*(((((-1.0)*x1103*x1110))+((x1105*x1110))+(((-16.0)*x1111))+(((-16.0)*x1107))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1121+x1123+(((-1.0)*x1125))+(((-1.0)*x1124))))))+(((-1.0)*x1125))+(((-1.0)*x1123))+((x1127*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x1119+x1123+(((-1.0)*x1126))+(((-1.0)*x1124)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1128=(cj5*sj4);
IkReal x1129=(sj4*sj5);
if( IKabs((((r00*x1128))+(((-1.0)*r01*x1129))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1128))+((r11*x1129))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1128))+(((-1.0)*r01*x1129))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1128))+((r11*x1129))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1128))+(((-1.0)*r01*x1129))+((cj4*r02))), ((((-1.0)*r10*x1128))+((r11*x1129))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1130=IKsin(j0);
IkReal x1131=IKcos(j0);
IkReal x1132=(r02*sj4);
IkReal x1133=((1.0)*sj3);
IkReal x1134=(r12*sj4);
IkReal x1135=(cj3*cj4);
IkReal x1136=((1.0)*cj5);
IkReal x1137=(r11*sj5);
IkReal x1138=(cj5*r01);
IkReal x1139=(r01*sj5);
IkReal x1140=(r00*sj5);
IkReal x1141=((0.39225)*cj2);
IkReal x1142=(cj5*r11);
IkReal x1143=((1.0)*sj2);
IkReal x1144=(r10*sj5);
IkReal x1145=((1.0)*cj4);
IkReal x1146=((0.39225)*sj1*sj2);
IkReal x1147=(cj1*x1130);
IkReal x1148=(cj4*cj5*sj3);
IkReal x1149=(cj1*x1131);
IkReal x1150=(sj1*x1131);
IkReal x1151=(sj1*x1130);
evalcond[0]=(x1130+((sj4*x1139))+(((-1.0)*r02*x1145))+(((-1.0)*r00*sj4*x1136)));
evalcond[1]=(((sj4*x1137))+(((-1.0)*x1131))+(((-1.0)*r12*x1145))+(((-1.0)*r10*sj4*x1136)));
evalcond[2]=((((-0.09465)*x1138))+(((-1.0)*x1141*x1149))+(((0.10915)*x1130))+((x1131*x1146))+(((-1.0)*px))+(((-0.425)*x1149))+(((-0.09465)*x1140)));
evalcond[3]=((((-1.0)*x1141*x1147))+((x1130*x1146))+(((-1.0)*py))+(((-0.10915)*x1131))+(((-0.425)*x1147))+(((-0.09465)*x1144))+(((-0.09465)*x1142)));
evalcond[4]=(((cj3*x1138))+((cj2*x1150))+((cj3*x1140))+((sj2*x1149))+(((-1.0)*x1132*x1133))+(((-1.0)*cj4*x1133*x1139))+((r00*x1148)));
evalcond[5]=(((cj3*x1132))+(((-1.0)*r00*x1135*x1136))+((cj2*x1149))+(((-1.0)*x1143*x1150))+((x1135*x1139))+((sj3*x1140))+((sj3*x1138)));
evalcond[6]=(((cj2*x1151))+((cj3*x1144))+((cj3*x1142))+((sj2*x1147))+(((-1.0)*cj4*x1133*x1137))+((r10*x1148))+(((-1.0)*x1133*x1134)));
evalcond[7]=(((cj3*x1134))+((cj2*x1147))+(((-1.0)*x1143*x1151))+((x1135*x1137))+(((-1.0)*r10*x1135*x1136))+((sj3*x1142))+((sj3*x1144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1152=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1152);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1152);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1153=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1153);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1153);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1154=IKPowWithIntegerCheck(r22,-1);
if(!x1154.valid){
continue;
}
CheckValue<IkReal> x1155=IKPowWithIntegerCheck(sj3,-1);
if(!x1155.valid){
continue;
}
sj4array[0]=((x1154.value)*(x1155.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1156=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1156);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1156);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1157=((4.0)*r01);
IkReal x1158=((16.0)*r00);
IkReal x1159=(cj3*sj2);
IkReal x1160=((8.0)*r00);
IkReal x1161=(cj2*cj3);
IkReal x1162=(cj4*r01);
IkReal x1163=((16.0)*cj1);
IkReal x1164=((8.0)*sj1);
IkReal x1165=((16.0)*sj1);
IkReal x1166=((8.0)*cj1);
IkReal x1167=(cj2*sj3);
IkReal x1168=(sj2*sj3);
IkReal x1169=(sj1*x1167);
IkReal x1170=((4.0)*cj4*r00);
IkReal x1171=(cj1*x1168);
IkReal x1172=(((sj1*x1157*x1159))+((x1157*x1169))+((x1157*x1171))+((sj1*x1168*x1170)));
IkReal x1173=(((cj1*x1167*x1170))+((cj1*x1157*x1161))+((sj1*x1161*x1170))+((cj1*x1159*x1170)));
IkReal x1174=(x1172+(((-1.0)*x1173)));
IkReal x1175=(((cj1*x1160*x1161))+(((-1.0)*sj1*x1159*x1160))+(((-1.0)*x1161*x1162*x1164))+((x1162*x1164*x1168))+(((-1.0)*x1159*x1162*x1166))+(((-1.0)*x1160*x1169))+(((-1.0)*x1160*x1171))+(((-1.0)*x1162*x1166*x1167)));
IkReal x1176=(x1173+(((-1.0)*x1172)));
op[0]=x1174;
op[1]=x1175;
op[2]=x1174;
op[3]=((((-1.0)*x1158*x1171))+(((-1.0)*x1158*x1169))+(((-1.0)*x1162*x1163*x1167))+(((-1.0)*x1161*x1162*x1165))+((x1162*x1165*x1168))+(((-1.0)*x1159*x1162*x1163))+(((-1.0)*sj1*x1158*x1159))+((cj1*x1158*x1161)));
op[4]=x1176;
op[5]=x1175;
op[6]=x1176;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1177=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1177))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1177))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1177))+((cj5*r00*sj4))))+IKsqr(((((-1.0)*cj5*r10*x1177))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1177))+((cj5*r00*sj4))), ((((-1.0)*cj5*r10*x1177))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1178=IKcos(j0);
IkReal x1179=IKsin(j0);
IkReal x1180=((1.0)*cj3);
IkReal x1181=(r11*sj5);
IkReal x1182=(cj5*r01);
IkReal x1183=(cj1*cj2);
IkReal x1184=(cj5*r11);
IkReal x1185=(r01*sj5);
IkReal x1186=(cj3*cj4);
IkReal x1187=(r00*sj5);
IkReal x1188=(r10*sj5);
IkReal x1189=(cj4*cj5*r00);
IkReal x1190=(cj4*cj5*r10);
IkReal x1191=((1.0)*cj4*sj3);
IkReal x1192=(cj1*x1179);
IkReal x1193=(cj1*x1178);
IkReal x1194=(sj1*x1178);
IkReal x1195=((1.0)*cj5*sj4);
IkReal x1196=(sj1*sj2*x1179);
evalcond[0]=((((-1.0)*r00*x1195))+x1179+((sj4*x1185)));
evalcond[1]=(((sj4*x1181))+(((-1.0)*r10*x1195))+(((-1.0)*x1178)));
evalcond[2]=(((sj2*x1193))+((sj3*x1189))+(((-1.0)*x1185*x1191))+((cj3*x1187))+((cj3*x1182))+((cj2*x1194)));
evalcond[3]=((((-1.0)*x1181*x1191))+((sj2*x1192))+((sj3*x1190))+((cj3*x1188))+((cj3*x1184))+((cj2*sj1*x1179)));
evalcond[4]=(((x1178*x1183))+((x1185*x1186))+(((-1.0)*sj2*x1194))+(((-1.0)*x1180*x1189))+((sj3*x1187))+((sj3*x1182)));
evalcond[5]=(((x1179*x1183))+((sj3*x1184))+((sj3*x1188))+((x1181*x1186))+(((-1.0)*x1180*x1190))+(((-1.0)*x1196)));
evalcond[6]=((((-0.09465)*x1187))+(((-0.09465)*x1182))+(((0.39225)*sj2*x1194))+(((0.10915)*x1179))+(((-0.425)*x1193))+(((-1.0)*px))+(((-0.39225)*x1178*x1183)));
evalcond[7]=((((-0.09465)*x1188))+(((-0.09465)*x1184))+(((0.39225)*x1196))+(((-0.10915)*x1178))+(((-0.39225)*x1179*x1183))+(((-0.425)*x1192))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1197=IKPowWithIntegerCheck(cj3,-1);
if(!x1197.valid){
continue;
}
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(r22,-1);
if(!x1198.valid){
continue;
}
sj4array[0]=((-1.0)*(x1197.value)*(x1198.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1199=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1199);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1199);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1200=((4.0)*r01);
IkReal x1201=((16.0)*r00);
IkReal x1202=(cj3*sj2);
IkReal x1203=((8.0)*r00);
IkReal x1204=(cj2*cj3);
IkReal x1205=(cj4*r01);
IkReal x1206=((16.0)*cj1);
IkReal x1207=((8.0)*sj1);
IkReal x1208=((16.0)*sj1);
IkReal x1209=((8.0)*cj1);
IkReal x1210=(cj2*sj3);
IkReal x1211=(sj2*sj3);
IkReal x1212=(sj1*x1210);
IkReal x1213=((4.0)*cj4*r00);
IkReal x1214=(cj1*x1211);
IkReal x1215=(((sj1*x1211*x1213))+((x1200*x1214))+((x1200*x1212))+((sj1*x1200*x1202)));
IkReal x1216=(((cj1*x1210*x1213))+((cj1*x1202*x1213))+((sj1*x1204*x1213))+((cj1*x1200*x1204)));
IkReal x1217=(x1215+(((-1.0)*x1216)));
IkReal x1218=((((-1.0)*x1203*x1214))+(((-1.0)*x1203*x1212))+((x1205*x1207*x1211))+(((-1.0)*x1205*x1209*x1210))+(((-1.0)*sj1*x1202*x1203))+(((-1.0)*x1202*x1205*x1209))+((cj1*x1203*x1204))+(((-1.0)*x1204*x1205*x1207)));
IkReal x1219=(x1216+(((-1.0)*x1215)));
op[0]=x1217;
op[1]=x1218;
op[2]=x1217;
op[3]=(((cj1*x1201*x1204))+(((-1.0)*x1201*x1214))+(((-1.0)*x1201*x1212))+(((-1.0)*sj1*x1201*x1202))+(((-1.0)*x1202*x1205*x1206))+((x1205*x1208*x1211))+(((-1.0)*x1204*x1205*x1208))+(((-1.0)*x1205*x1206*x1210)));
op[4]=x1219;
op[5]=x1218;
op[6]=x1219;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1220=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1220))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1220))))+IKsqr(((((-1.0)*cj5*r10*x1220))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1220))), ((((-1.0)*cj5*r10*x1220))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1221=IKcos(j0);
IkReal x1222=IKsin(j0);
IkReal x1223=((1.0)*cj3);
IkReal x1224=(r11*sj5);
IkReal x1225=(cj5*r01);
IkReal x1226=(cj1*cj2);
IkReal x1227=(cj5*r11);
IkReal x1228=(r01*sj5);
IkReal x1229=(cj3*cj4);
IkReal x1230=(r00*sj5);
IkReal x1231=(r10*sj5);
IkReal x1232=(cj4*cj5*r00);
IkReal x1233=(cj4*cj5*r10);
IkReal x1234=((1.0)*cj4*sj3);
IkReal x1235=(cj1*x1222);
IkReal x1236=(cj1*x1221);
IkReal x1237=(sj1*x1221);
IkReal x1238=((1.0)*cj5*sj4);
IkReal x1239=(sj1*sj2*x1222);
evalcond[0]=((((-1.0)*r00*x1238))+x1222+((sj4*x1228)));
evalcond[1]=((((-1.0)*x1221))+((sj4*x1224))+(((-1.0)*r10*x1238)));
evalcond[2]=(((cj3*x1230))+((cj3*x1225))+((cj2*x1237))+((sj3*x1232))+((sj2*x1236))+(((-1.0)*x1228*x1234)));
evalcond[3]=(((cj3*x1231))+((cj3*x1227))+((sj3*x1233))+(((-1.0)*x1224*x1234))+((sj2*x1235))+((cj2*sj1*x1222)));
evalcond[4]=((((-1.0)*x1223*x1232))+((sj3*x1230))+((sj3*x1225))+(((-1.0)*sj2*x1237))+((x1221*x1226))+((x1228*x1229)));
evalcond[5]=((((-1.0)*x1223*x1233))+(((-1.0)*x1239))+((sj3*x1231))+((sj3*x1227))+((x1224*x1229))+((x1222*x1226)));
evalcond[6]=((((0.39225)*sj2*x1237))+(((-0.425)*x1236))+(((-1.0)*px))+(((-0.09465)*x1230))+(((-0.09465)*x1225))+(((-0.39225)*x1221*x1226))+(((0.10915)*x1222)));
evalcond[7]=((((-0.425)*x1235))+(((-1.0)*py))+(((-0.09465)*x1231))+(((-0.09465)*x1227))+(((-0.39225)*x1222*x1226))+(((0.39225)*x1239))+(((-0.10915)*x1221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1242 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1242.valid){
continue;
}
IkReal x1240=((1.0)*(x1242.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1243=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1243.valid){
continue;
}
if( (((-1.0)*(x1243.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1243.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1241=((-1.0)*(IKasin(((-1.0)*(x1243.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1240))+(((-1.0)*x1241)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1240))+(((1.0)*x1241)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1244=cj5*cj5;
IkReal x1245=r21*r21;
IkReal x1246=(sj3*x1244);
IkReal x1247=(((sj3*(r22*r22)))+(((-1.0)*x1245*x1246))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1245))+((x1246*(r20*r20))));
j4eval[0]=x1247;
j4eval[1]=IKsign(x1247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1248=cj5*cj5;
IkReal x1249=r21*r21;
IkReal x1250=((1.0)*cj3);
IkReal x1251=(cj3*x1248);
IkReal x1252=((((-1.0)*x1249*x1250))+(((-1.0)*x1248*x1250*(r20*r20)))+(((-1.0)*x1250*(r22*r22)))+((x1249*x1251))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1252;
j4eval[1]=IKsign(x1252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1253=cj2*cj2;
IkReal x1254=cj1*cj1;
IkReal x1255=(cj1*sj1*sj2);
IkReal x1256=(cj2*x1254);
IkReal x1257=(x1253*x1254);
j0eval[0]=((-6.19369221392727)+(((5.74856797255738)*x1253))+(((-12.4570625281677)*x1256))+(((12.4570625281677)*x1255))+(((-11.4971359451148)*x1257))+(((-1.0)*x1254))+(((11.4971359451148)*cj2*x1255)));
j0eval[1]=IKsign(((-66309514.0)+(((-133365000.0)*x1256))+(((-10705975.0)*x1254))+(((-123088050.0)*x1257))+(((133365000.0)*x1255))+(((123088050.0)*cj2*x1255))+(((61544025.0)*x1253))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1258=((1.0)*cj5);
IkReal x1259=((1.0)*sj5);
IkReal x1260=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1260;
j0eval[1]=IKsign(x1260);
j0eval[2]=((IKabs(((((-1.0)*r11*x1258))+(((-1.0)*r10*x1259)))))+(IKabs(((((-1.0)*r00*x1259))+(((-1.0)*r01*x1258))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1261=cj5*cj5;
IkReal x1262=r21*r21;
IkReal x1263=(sj1*sj2);
IkReal x1264=(r21*sj5);
IkReal x1265=(cj5*r20);
IkReal x1266=(cj1*cj2);
IkReal x1267=(x1262+(r22*r22)+((x1261*(r20*r20)))+(((-2.0)*x1264*x1265))+(((-1.0)*x1261*x1262)));
j4eval[0]=x1267;
j4eval[1]=IKsign(x1267);
j4eval[2]=((IKabs(((((-1.0)*x1264*x1266))+((x1263*x1264))+(((-1.0)*x1263*x1265))+((x1265*x1266)))))+(IKabs((((r22*x1263))+(((-1.0)*r22*x1266))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1268=(cj1*cj2);
IkReal x1269=(cj5*r01);
IkReal x1270=(sj1*sj2);
IkReal x1271=(r00*sj5);
IkReal x1272=((20000.0)*px);
IkReal x1273=((8500.0)*cj1);
CheckValue<IkReal> x1274=IKPowWithIntegerCheck(((((-2183.0)*x1270))+(((2183.0)*x1268))),-1);
if(!x1274.valid){
continue;
}
CheckValue<IkReal> x1275=IKPowWithIntegerCheck((x1268+(((-1.0)*x1270))),-1);
if(!x1275.valid){
continue;
}
if( IKabs(((x1274.value)*(((((5952.0)*x1269*x1270))+(((5952.0)*x1270*x1271))+(((-1.0)*x1270*x1272))+(((-1.0)*x1271*x1273))+(((-1.0)*x1269*x1273))+((x1268*x1272))+(((-5952.0)*x1268*x1271))+(((-5952.0)*x1268*x1269)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1275.value)*(((((-1.0)*x1271))+(((-1.0)*x1269)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1274.value)*(((((5952.0)*x1269*x1270))+(((5952.0)*x1270*x1271))+(((-1.0)*x1270*x1272))+(((-1.0)*x1271*x1273))+(((-1.0)*x1269*x1273))+((x1268*x1272))+(((-5952.0)*x1268*x1271))+(((-5952.0)*x1268*x1269))))))+IKsqr(((x1275.value)*(((((-1.0)*x1271))+(((-1.0)*x1269))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1274.value)*(((((5952.0)*x1269*x1270))+(((5952.0)*x1270*x1271))+(((-1.0)*x1270*x1272))+(((-1.0)*x1271*x1273))+(((-1.0)*x1269*x1273))+((x1268*x1272))+(((-5952.0)*x1268*x1271))+(((-5952.0)*x1268*x1269))))), ((x1275.value)*(((((-1.0)*x1271))+(((-1.0)*x1269))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1276=IKcos(j0);
IkReal x1277=IKsin(j0);
IkReal x1278=(cj5*r01);
IkReal x1279=(cj1*cj2);
IkReal x1280=(sj1*sj2);
IkReal x1281=((0.425)*cj1);
IkReal x1282=(r00*sj5);
IkReal x1283=(cj5*r11);
IkReal x1284=(r10*sj5);
IkReal x1285=((0.39225)*x1276);
IkReal x1286=(x1277*x1280);
evalcond[0]=(((x1276*x1279))+x1278+x1282+(((-1.0)*x1276*x1280)));
evalcond[1]=((((-1.0)*x1286))+x1284+x1283+((x1277*x1279)));
evalcond[2]=((((-0.09465)*x1278))+(((-1.0)*x1276*x1281))+(((0.10915)*x1277))+(((-0.09465)*x1282))+(((-1.0)*px))+((x1280*x1285))+(((-1.0)*x1279*x1285)));
evalcond[3]=((((0.39225)*x1286))+(((-0.10915)*x1276))+(((-0.09465)*x1284))+(((-0.09465)*x1283))+(((-1.0)*x1277*x1281))+(((-1.0)*py))+(((-0.39225)*x1277*x1279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1287=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1287;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1288=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1288;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1289=((1.0)*cj5);
IkReal x1290=((((-1.0)*r21*x1289))+(((-1.0)*r20*sj5)));
j4eval[0]=x1290;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r10*sj0*x1289))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1289))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1291=((1.0)*cj5);
CheckValue<IkReal> x1292 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1291))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1292.valid){
continue;
}
CheckValue<IkReal> x1293=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1291))+(((-1.0)*r20*sj5)))),-1);
if(!x1293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1292.value)+(((1.5707963267949)*(x1293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1294=IKsin(j4);
IkReal x1295=IKcos(j4);
IkReal x1296=(cj5*r10);
IkReal x1297=(cj2*sj1);
IkReal x1298=(r01*sj5);
IkReal x1299=(cj5*r00);
IkReal x1300=(cj5*r20);
IkReal x1301=(cj1*sj2);
IkReal x1302=((1.0)*x1295);
IkReal x1303=((1.0)*x1294);
IkReal x1304=(sj5*x1294);
evalcond[0]=((((-1.0)*r22*x1302))+(((-1.0)*x1300*x1303))+((r21*x1304)));
evalcond[1]=(sj0+(((-1.0)*x1299*x1303))+((x1294*x1298))+(((-1.0)*r02*x1302)));
evalcond[2]=((((-1.0)*x1296*x1303))+((r11*x1304))+(((-1.0)*r12*x1302))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1303))+((x1295*x1300))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1302)));
evalcond[4]=(((x1295*x1299))+(((-1.0)*r02*x1303))+(((-1.0)*x1298*x1302))+((cj0*x1297))+((cj0*x1301)));
evalcond[5]=(((x1295*x1296))+((sj0*x1297))+(((-1.0)*r12*x1303))+(((-1.0)*r11*sj5*x1302))+((sj0*x1301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1305=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1305.valid){
continue;
}
CheckValue<IkReal> x1306 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1305.value)))+(x1306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1307=IKsin(j4);
IkReal x1308=IKcos(j4);
IkReal x1309=(cj5*r10);
IkReal x1310=(cj2*sj1);
IkReal x1311=(r01*sj5);
IkReal x1312=(cj5*r00);
IkReal x1313=(cj5*r20);
IkReal x1314=(cj1*sj2);
IkReal x1315=((1.0)*x1308);
IkReal x1316=((1.0)*x1307);
IkReal x1317=(sj5*x1307);
evalcond[0]=((((-1.0)*x1313*x1316))+(((-1.0)*r22*x1315))+((r21*x1317)));
evalcond[1]=(sj0+((x1307*x1311))+(((-1.0)*r02*x1315))+(((-1.0)*x1312*x1316)));
evalcond[2]=(((r11*x1317))+(((-1.0)*r12*x1315))+(((-1.0)*cj0))+(((-1.0)*x1309*x1316)));
evalcond[3]=((((-1.0)*r22*x1316))+((x1308*x1313))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1315)));
evalcond[4]=((((-1.0)*x1311*x1315))+((x1308*x1312))+(((-1.0)*r02*x1316))+((cj0*x1314))+((cj0*x1310)));
evalcond[5]=(((x1308*x1309))+(((-1.0)*r12*x1316))+(((-1.0)*r11*sj5*x1315))+((sj0*x1314))+((sj0*x1310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1318=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1318.valid){
continue;
}
CheckValue<IkReal> x1319 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1318.value)))+(x1319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1320=IKsin(j4);
IkReal x1321=IKcos(j4);
IkReal x1322=(cj5*r10);
IkReal x1323=(cj2*sj1);
IkReal x1324=(r01*sj5);
IkReal x1325=(cj5*r00);
IkReal x1326=(cj5*r20);
IkReal x1327=(cj1*sj2);
IkReal x1328=((1.0)*x1321);
IkReal x1329=((1.0)*x1320);
IkReal x1330=(sj5*x1320);
evalcond[0]=((((-1.0)*r22*x1328))+(((-1.0)*x1326*x1329))+((r21*x1330)));
evalcond[1]=(sj0+((x1320*x1324))+(((-1.0)*r02*x1328))+(((-1.0)*x1325*x1329)));
evalcond[2]=(((r11*x1330))+(((-1.0)*x1322*x1329))+(((-1.0)*r12*x1328))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1329))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1328))+((x1321*x1326)));
evalcond[4]=((((-1.0)*x1324*x1328))+(((-1.0)*r02*x1329))+((x1321*x1325))+((cj0*x1323))+((cj0*x1327)));
evalcond[5]=((((-1.0)*r12*x1329))+(((-1.0)*r11*sj5*x1328))+((x1321*x1322))+((sj0*x1323))+((sj0*x1327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1331=cj5*cj5;
IkReal x1332=r21*r21;
IkReal x1333=(sj1*sj2);
IkReal x1334=(r21*sj5);
IkReal x1335=(cj1*cj2);
IkReal x1336=(cj5*r20);
CheckValue<IkReal> x1337 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1335))+((r22*x1333)))),IkReal(((((-1.0)*x1333*x1336))+((x1335*x1336))+((x1333*x1334))+(((-1.0)*x1334*x1335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1337.valid){
continue;
}
CheckValue<IkReal> x1338=IKPowWithIntegerCheck(IKsign((x1332+(((-2.0)*x1334*x1336))+(r22*r22)+((x1331*(r20*r20)))+(((-1.0)*x1331*x1332)))),-1);
if(!x1338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1337.value)+(((1.5707963267949)*(x1338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1339=IKsin(j4);
IkReal x1340=IKcos(j4);
IkReal x1341=(r21*sj5);
IkReal x1342=(cj5*r20);
IkReal x1343=((1.0)*x1340);
IkReal x1344=((1.0)*x1339);
evalcond[0]=(((x1339*x1341))+(((-1.0)*r22*x1343))+(((-1.0)*x1342*x1344)));
evalcond[1]=((((-1.0)*x1341*x1343))+((x1340*x1342))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1345=(cj5*sj4);
IkReal x1346=(sj4*sj5);
if( IKabs((((r00*x1345))+(((-1.0)*r01*x1346))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1345))+((r11*x1346))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1345))+(((-1.0)*r01*x1346))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1345))+((r11*x1346))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1345))+(((-1.0)*r01*x1346))+((cj4*r02))), ((((-1.0)*r10*x1345))+((r11*x1346))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1347=IKcos(j0);
IkReal x1348=IKsin(j0);
IkReal x1349=(cj4*cj5);
IkReal x1350=(cj5*r01);
IkReal x1351=(r11*sj5);
IkReal x1352=(cj1*cj2);
IkReal x1353=((1.0)*sj4);
IkReal x1354=(r00*sj5);
IkReal x1355=(cj5*r11);
IkReal x1356=((1.0)*cj4);
IkReal x1357=(r01*sj5);
IkReal x1358=(r10*sj5);
IkReal x1359=(sj1*x1347);
IkReal x1360=(cj1*x1348);
IkReal x1361=(cj1*x1347);
IkReal x1362=(sj1*sj2*x1348);
evalcond[0]=(x1348+((sj4*x1357))+(((-1.0)*r02*x1356))+(((-1.0)*cj5*r00*x1353)));
evalcond[1]=((((-1.0)*r12*x1356))+((sj4*x1351))+(((-1.0)*cj5*r10*x1353))+(((-1.0)*x1347)));
evalcond[2]=(x1350+x1354+(((-1.0)*sj2*x1359))+((x1347*x1352)));
evalcond[3]=(x1358+x1355+(((-1.0)*x1362))+((x1348*x1352)));
evalcond[4]=((((-1.0)*r02*x1353))+(((-1.0)*x1356*x1357))+((r00*x1349))+((sj2*x1361))+((cj2*x1359)));
evalcond[5]=((((-1.0)*r12*x1353))+((cj2*sj1*x1348))+((sj2*x1360))+(((-1.0)*x1351*x1356))+((r10*x1349)));
evalcond[6]=((((-0.425)*x1361))+(((0.39225)*sj2*x1359))+(((-0.09465)*x1354))+(((-0.09465)*x1350))+(((-1.0)*px))+(((-0.39225)*x1347*x1352))+(((0.10915)*x1348)));
evalcond[7]=((((0.39225)*x1362))+(((-0.425)*x1360))+(((-0.09465)*x1358))+(((-0.09465)*x1355))+(((-1.0)*py))+(((-0.10915)*x1347))+(((-0.39225)*x1348*x1352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1363=((1.0)*cj5);
IkReal x1364=((1.0)*sj5);
CheckValue<IkReal> x1365 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1363))+(((-1.0)*r10*x1364)))),IkReal(((((-1.0)*r01*x1363))+(((-1.0)*r00*x1364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1365.valid){
continue;
}
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1366.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1365.value)+(((1.5707963267949)*(x1366.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1367=IKcos(j0);
IkReal x1368=IKsin(j0);
IkReal x1369=(cj5*r01);
IkReal x1370=(cj1*cj2);
IkReal x1371=(sj1*sj2);
IkReal x1372=((0.425)*cj1);
IkReal x1373=(r00*sj5);
IkReal x1374=(cj5*r11);
IkReal x1375=(r10*sj5);
IkReal x1376=((0.39225)*x1367);
IkReal x1377=(x1368*x1371);
evalcond[0]=(x1369+x1373+((x1367*x1370))+(((-1.0)*x1367*x1371)));
evalcond[1]=(x1375+x1374+(((-1.0)*x1377))+((x1368*x1370)));
evalcond[2]=((((0.10915)*x1368))+(((-1.0)*x1370*x1376))+(((-1.0)*px))+(((-0.09465)*x1369))+((x1371*x1376))+(((-0.09465)*x1373))+(((-1.0)*x1367*x1372)));
evalcond[3]=((((0.39225)*x1377))+(((-1.0)*py))+(((-0.10915)*x1367))+(((-0.09465)*x1374))+(((-0.09465)*x1375))+(((-1.0)*x1368*x1372))+(((-0.39225)*x1368*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1378=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1378;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1379=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1379;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1380=((1.0)*cj5);
IkReal x1381=((((-1.0)*r21*x1380))+(((-1.0)*r20*sj5)));
j4eval[0]=x1381;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1380))+(((-1.0)*r10*sj0*x1380))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1382=((1.0)*cj5);
CheckValue<IkReal> x1383 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1382))+(((-1.0)*r10*sj0*x1382))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1383.valid){
continue;
}
CheckValue<IkReal> x1384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1382))+(((-1.0)*r20*sj5)))),-1);
if(!x1384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1383.value)+(((1.5707963267949)*(x1384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1385=IKsin(j4);
IkReal x1386=IKcos(j4);
IkReal x1387=(cj5*r10);
IkReal x1388=(cj2*sj1);
IkReal x1389=(r01*sj5);
IkReal x1390=(cj5*r00);
IkReal x1391=(cj5*r20);
IkReal x1392=(cj1*sj2);
IkReal x1393=((1.0)*x1386);
IkReal x1394=((1.0)*x1385);
IkReal x1395=(sj5*x1385);
evalcond[0]=((((-1.0)*x1391*x1394))+((r21*x1395))+(((-1.0)*r22*x1393)));
evalcond[1]=(sj0+(((-1.0)*r02*x1393))+(((-1.0)*x1390*x1394))+((x1385*x1389)));
evalcond[2]=((((-1.0)*r12*x1393))+((r11*x1395))+(((-1.0)*x1387*x1394))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x1393))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1386*x1391))+(((-1.0)*r22*x1394)));
evalcond[4]=((((-1.0)*r02*x1394))+(((-1.0)*x1389*x1393))+((cj0*x1392))+((cj0*x1388))+((x1386*x1390)));
evalcond[5]=((((-1.0)*r12*x1394))+(((-1.0)*r11*sj5*x1393))+((sj0*x1392))+((sj0*x1388))+((x1386*x1387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1396=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1396.valid){
continue;
}
CheckValue<IkReal> x1397 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1396.value)))+(x1397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1398=IKsin(j4);
IkReal x1399=IKcos(j4);
IkReal x1400=(cj5*r10);
IkReal x1401=(cj2*sj1);
IkReal x1402=(r01*sj5);
IkReal x1403=(cj5*r00);
IkReal x1404=(cj5*r20);
IkReal x1405=(cj1*sj2);
IkReal x1406=((1.0)*x1399);
IkReal x1407=((1.0)*x1398);
IkReal x1408=(sj5*x1398);
evalcond[0]=((((-1.0)*r22*x1406))+((r21*x1408))+(((-1.0)*x1404*x1407)));
evalcond[1]=(sj0+(((-1.0)*r02*x1406))+((x1398*x1402))+(((-1.0)*x1403*x1407)));
evalcond[2]=((((-1.0)*r12*x1406))+((r11*x1408))+(((-1.0)*x1400*x1407))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1407))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1399*x1404))+(((-1.0)*r21*sj5*x1406)));
evalcond[4]=(((cj0*x1401))+((cj0*x1405))+(((-1.0)*r02*x1407))+(((-1.0)*x1402*x1406))+((x1399*x1403)));
evalcond[5]=((((-1.0)*r12*x1407))+(((-1.0)*r11*sj5*x1406))+((sj0*x1401))+((sj0*x1405))+((x1399*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1409=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1409.valid){
continue;
}
CheckValue<IkReal> x1410 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1409.value)))+(x1410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1411=IKsin(j4);
IkReal x1412=IKcos(j4);
IkReal x1413=(cj5*r10);
IkReal x1414=(cj2*sj1);
IkReal x1415=(r01*sj5);
IkReal x1416=(cj5*r00);
IkReal x1417=(cj5*r20);
IkReal x1418=(cj1*sj2);
IkReal x1419=((1.0)*x1412);
IkReal x1420=((1.0)*x1411);
IkReal x1421=(sj5*x1411);
evalcond[0]=(((r21*x1421))+(((-1.0)*r22*x1419))+(((-1.0)*x1417*x1420)));
evalcond[1]=(sj0+(((-1.0)*x1416*x1420))+(((-1.0)*r02*x1419))+((x1411*x1415)));
evalcond[2]=(((r11*x1421))+(((-1.0)*r12*x1419))+(((-1.0)*x1413*x1420))+(((-1.0)*cj0)));
evalcond[3]=(((x1412*x1417))+(((-1.0)*r21*sj5*x1419))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1420)));
evalcond[4]=((((-1.0)*x1415*x1419))+((x1412*x1416))+((cj0*x1418))+((cj0*x1414))+(((-1.0)*r02*x1420)));
evalcond[5]=(((x1412*x1413))+(((-1.0)*r11*sj5*x1419))+(((-1.0)*r12*x1420))+((sj0*x1418))+((sj0*x1414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1422=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1422;
j0eval[1]=IKsign(x1422);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1423=r21*r21;
IkReal x1424=cj5*cj5;
IkReal x1425=(sj1*sj2);
IkReal x1426=(r21*sj5);
IkReal x1427=(cj5*r20);
IkReal x1428=(cj1*cj2);
IkReal x1429=(((x1423*x1424))+(((-1.0)*x1424*(r20*r20)))+(((-1.0)*x1423))+(((-1.0)*(r22*r22)))+(((2.0)*x1426*x1427)));
j4eval[0]=x1429;
j4eval[1]=((IKabs((((x1425*x1426))+(((-1.0)*x1425*x1427))+(((-1.0)*x1426*x1428))+((x1427*x1428)))))+(IKabs((((r22*x1425))+(((-1.0)*r22*x1428))))));
j4eval[2]=IKsign(x1429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1430=(r00*sj5);
IkReal x1431=(cj5*r01);
IkReal x1432=(sj1*sj2);
IkReal x1433=(cj1*cj2);
IkReal x1434=((20000.0)*px);
IkReal x1435=((8500.0)*cj1);
IkReal x1436=((9738.0)*x1433);
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(((((2183.0)*x1433))+(((-2183.0)*x1432))),-1);
if(!x1437.valid){
continue;
}
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(((((-1.0)*x1432))+x1433),-1);
if(!x1438.valid){
continue;
}
if( IKabs(((x1437.value)*((((x1430*x1436))+((x1430*x1435))+((x1433*x1434))+(((-9738.0)*x1431*x1432))+(((-9738.0)*x1430*x1432))+(((-1.0)*x1432*x1434))+((x1431*x1436))+((x1431*x1435)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1438.value)*((x1430+x1431)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1437.value)*((((x1430*x1436))+((x1430*x1435))+((x1433*x1434))+(((-9738.0)*x1431*x1432))+(((-9738.0)*x1430*x1432))+(((-1.0)*x1432*x1434))+((x1431*x1436))+((x1431*x1435))))))+IKsqr(((x1438.value)*((x1430+x1431))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1437.value)*((((x1430*x1436))+((x1430*x1435))+((x1433*x1434))+(((-9738.0)*x1431*x1432))+(((-9738.0)*x1430*x1432))+(((-1.0)*x1432*x1434))+((x1431*x1436))+((x1431*x1435))))), ((x1438.value)*((x1430+x1431))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1439=IKcos(j0);
IkReal x1440=IKsin(j0);
IkReal x1441=(cj1*cj2);
IkReal x1442=(cj5*r11);
IkReal x1443=(sj1*sj2);
IkReal x1444=(cj5*r01);
IkReal x1445=((1.0)*sj5);
IkReal x1446=((0.09465)*sj5);
IkReal x1447=((0.425)*cj1);
IkReal x1448=((0.39225)*x1439);
IkReal x1449=(x1440*x1443);
evalcond[0]=(((x1439*x1441))+(((-1.0)*r00*x1445))+(((-1.0)*x1444))+(((-1.0)*x1439*x1443)));
evalcond[1]=(((x1440*x1441))+(((-1.0)*x1449))+(((-1.0)*x1442))+(((-1.0)*r10*x1445)));
evalcond[2]=(((x1443*x1448))+(((-1.0)*r00*x1446))+(((-0.09465)*x1444))+(((-1.0)*x1439*x1447))+(((-1.0)*x1441*x1448))+(((-1.0)*px))+(((0.10915)*x1440)));
evalcond[3]=((((-0.09465)*x1442))+(((-0.10915)*x1439))+(((-1.0)*r10*x1446))+(((0.39225)*x1449))+(((-1.0)*py))+(((-0.39225)*x1440*x1441))+(((-1.0)*x1440*x1447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1450=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1450;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1450);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1451=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1451;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1452=((1.0)*cj5);
IkReal x1453=((((-1.0)*r21*x1452))+(((-1.0)*r20*sj5)));
j4eval[0]=x1453;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1452))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1452)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1454=((1.0)*cj5);
CheckValue<IkReal> x1455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1454))+(((-1.0)*r20*sj5)))),-1);
if(!x1455.valid){
continue;
}
CheckValue<IkReal> x1456 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1454))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1455.value)))+(x1456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1457=IKsin(j4);
IkReal x1458=IKcos(j4);
IkReal x1459=(cj5*r00);
IkReal x1460=(cj5*r10);
IkReal x1461=(cj2*sj1);
IkReal x1462=(r21*sj5);
IkReal x1463=(cj5*r20);
IkReal x1464=(cj1*sj2);
IkReal x1465=((1.0)*x1458);
IkReal x1466=((1.0)*x1457);
IkReal x1467=(sj5*x1457);
IkReal x1468=(sj5*x1458);
evalcond[0]=((((-1.0)*r22*x1465))+(((-1.0)*x1463*x1466))+((x1457*x1462)));
evalcond[1]=(sj0+(((-1.0)*r02*x1465))+(((-1.0)*x1459*x1466))+((r01*x1467)));
evalcond[2]=((((-1.0)*x1460*x1466))+((r11*x1467))+(((-1.0)*r12*x1465))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x1458*x1462))+(((-1.0)*x1463*x1465))+((r22*x1457)));
evalcond[4]=(((cj0*x1464))+((cj0*x1461))+(((-1.0)*x1459*x1465))+((r01*x1468))+((r02*x1457)));
evalcond[5]=(((r12*x1457))+(((-1.0)*x1460*x1465))+((sj0*x1464))+((sj0*x1461))+((r11*x1468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1469=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1469.valid){
continue;
}
CheckValue<IkReal> x1470 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1469.value)))+(x1470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1471=IKsin(j4);
IkReal x1472=IKcos(j4);
IkReal x1473=(cj5*r00);
IkReal x1474=(cj5*r10);
IkReal x1475=(cj2*sj1);
IkReal x1476=(r21*sj5);
IkReal x1477=(cj5*r20);
IkReal x1478=(cj1*sj2);
IkReal x1479=((1.0)*x1472);
IkReal x1480=((1.0)*x1471);
IkReal x1481=(sj5*x1471);
IkReal x1482=(sj5*x1472);
evalcond[0]=((((-1.0)*r22*x1479))+((x1471*x1476))+(((-1.0)*x1477*x1480)));
evalcond[1]=(sj0+((r01*x1481))+(((-1.0)*r02*x1479))+(((-1.0)*x1473*x1480)));
evalcond[2]=((((-1.0)*r12*x1479))+((r11*x1481))+(((-1.0)*x1474*x1480))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x1471))+(((-1.0)*cj1*cj2))+(((-1.0)*x1477*x1479))+((sj1*sj2))+((x1472*x1476)));
evalcond[4]=(((r01*x1482))+((r02*x1471))+((cj0*x1478))+((cj0*x1475))+(((-1.0)*x1473*x1479)));
evalcond[5]=(((r12*x1471))+((sj0*x1475))+((sj0*x1478))+(((-1.0)*x1474*x1479))+((r11*x1482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1483=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1483.valid){
continue;
}
CheckValue<IkReal> x1484 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1483.value)))+(x1484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1485=IKsin(j4);
IkReal x1486=IKcos(j4);
IkReal x1487=(cj5*r00);
IkReal x1488=(cj5*r10);
IkReal x1489=(cj2*sj1);
IkReal x1490=(r21*sj5);
IkReal x1491=(cj5*r20);
IkReal x1492=(cj1*sj2);
IkReal x1493=((1.0)*x1486);
IkReal x1494=((1.0)*x1485);
IkReal x1495=(sj5*x1485);
IkReal x1496=(sj5*x1486);
evalcond[0]=(((x1485*x1490))+(((-1.0)*x1491*x1494))+(((-1.0)*r22*x1493)));
evalcond[1]=(sj0+(((-1.0)*x1487*x1494))+((r01*x1495))+(((-1.0)*r02*x1493)));
evalcond[2]=((((-1.0)*r12*x1493))+((r11*x1495))+(((-1.0)*x1488*x1494))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x1486*x1490))+(((-1.0)*x1491*x1493))+((r22*x1485)));
evalcond[4]=((((-1.0)*x1487*x1493))+((r01*x1496))+((cj0*x1489))+((cj0*x1492))+((r02*x1485)));
evalcond[5]=(((sj0*x1489))+((sj0*x1492))+((r12*x1485))+((r11*x1496))+(((-1.0)*x1488*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1497=r21*r21;
IkReal x1498=cj5*cj5;
IkReal x1499=(sj1*sj2);
IkReal x1500=(r21*sj5);
IkReal x1501=(cj1*cj2);
IkReal x1502=(cj5*r20);
CheckValue<IkReal> x1503 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1501))+((r22*x1499)))),IkReal((((x1499*x1500))+(((-1.0)*x1500*x1501))+((x1501*x1502))+(((-1.0)*x1499*x1502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1503.valid){
continue;
}
CheckValue<IkReal> x1504=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1498*(r20*r20)))+(((-1.0)*x1497))+((x1497*x1498))+(((2.0)*x1500*x1502))+(((-1.0)*(r22*r22))))),-1);
if(!x1504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1503.value)+(((1.5707963267949)*(x1504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1505=IKsin(j4);
IkReal x1506=IKcos(j4);
IkReal x1507=(r21*sj5);
IkReal x1508=(cj5*r20);
IkReal x1509=((1.0)*x1506);
evalcond[0]=((((-1.0)*r22*x1509))+(((-1.0)*x1505*x1508))+((x1505*x1507)));
evalcond[1]=(((x1506*x1507))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1505))+(((-1.0)*x1508*x1509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1510=(cj5*sj4);
IkReal x1511=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1511))+((r00*x1510))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1511))+(((-1.0)*r10*x1510))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1511))+((r00*x1510))+((cj4*r02))))+IKsqr((((r11*x1511))+(((-1.0)*r10*x1510))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1511))+((r00*x1510))+((cj4*r02))), (((r11*x1511))+(((-1.0)*r10*x1510))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1512=IKcos(j0);
IkReal x1513=IKsin(j0);
IkReal x1514=(r11*sj5);
IkReal x1515=(cj1*cj2);
IkReal x1516=(cj5*r11);
IkReal x1517=((1.0)*r00);
IkReal x1518=(cj4*cj5);
IkReal x1519=(cj5*r01);
IkReal x1520=((1.0)*r10);
IkReal x1521=((0.09465)*sj5);
IkReal x1522=(cj5*sj4);
IkReal x1523=((1.0)*cj4);
IkReal x1524=(r01*sj5);
IkReal x1525=(sj1*x1512);
IkReal x1526=(cj1*x1513);
IkReal x1527=(cj1*x1512);
IkReal x1528=(sj1*sj2*x1513);
evalcond[0]=((((-1.0)*r02*x1523))+x1513+((sj4*x1524))+(((-1.0)*x1517*x1522)));
evalcond[1]=((((-1.0)*r12*x1523))+(((-1.0)*x1512))+((sj4*x1514))+(((-1.0)*x1520*x1522)));
evalcond[2]=((((-1.0)*sj5*x1517))+(((-1.0)*x1519))+(((-1.0)*sj2*x1525))+((x1512*x1515)));
evalcond[3]=((((-1.0)*sj5*x1520))+((x1513*x1515))+(((-1.0)*x1516))+(((-1.0)*x1528)));
evalcond[4]=(((sj2*x1527))+((cj2*x1525))+((r02*sj4))+(((-1.0)*x1517*x1518))+((cj4*x1524)));
evalcond[5]=(((cj2*sj1*x1513))+((sj2*x1526))+(((-1.0)*x1518*x1520))+((cj4*x1514))+((r12*sj4)));
evalcond[6]=((((0.10915)*x1513))+(((-1.0)*r00*x1521))+(((-0.39225)*x1512*x1515))+(((-1.0)*px))+(((0.39225)*sj2*x1525))+(((-0.425)*x1527))+(((-0.09465)*x1519)));
evalcond[7]=((((-0.39225)*x1513*x1515))+(((-1.0)*py))+(((-0.10915)*x1512))+(((-1.0)*r10*x1521))+(((-0.425)*x1526))+(((-0.09465)*x1516))+(((0.39225)*x1528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1529=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1529.valid){
continue;
}
CheckValue<IkReal> x1530 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1530.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1529.value)))+(x1530.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1531=IKcos(j0);
IkReal x1532=IKsin(j0);
IkReal x1533=(cj1*cj2);
IkReal x1534=(cj5*r11);
IkReal x1535=(sj1*sj2);
IkReal x1536=(cj5*r01);
IkReal x1537=((1.0)*sj5);
IkReal x1538=((0.09465)*sj5);
IkReal x1539=((0.425)*cj1);
IkReal x1540=((0.39225)*x1531);
IkReal x1541=(x1532*x1535);
evalcond[0]=((((-1.0)*x1536))+(((-1.0)*x1531*x1535))+(((-1.0)*r00*x1537))+((x1531*x1533)));
evalcond[1]=((((-1.0)*x1541))+(((-1.0)*x1534))+((x1532*x1533))+(((-1.0)*r10*x1537)));
evalcond[2]=((((-1.0)*r00*x1538))+(((-1.0)*x1531*x1539))+(((-1.0)*px))+(((-1.0)*x1533*x1540))+(((-0.09465)*x1536))+((x1535*x1540))+(((0.10915)*x1532)));
evalcond[3]=((((0.39225)*x1541))+(((-0.39225)*x1532*x1533))+(((-1.0)*x1532*x1539))+(((-1.0)*py))+(((-0.10915)*x1531))+(((-1.0)*r10*x1538))+(((-0.09465)*x1534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1542=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1542;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1543=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1543;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1544=((1.0)*cj5);
IkReal x1545=((((-1.0)*r21*x1544))+(((-1.0)*r20*sj5)));
j4eval[0]=x1545;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1544))+(((-1.0)*r10*sj0*x1544))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1546=((1.0)*cj5);
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1546))+(((-1.0)*r10*sj0*x1546))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
CheckValue<IkReal> x1548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1546))+(((-1.0)*r20*sj5)))),-1);
if(!x1548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1547.value)+(((1.5707963267949)*(x1548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1549=IKsin(j4);
IkReal x1550=IKcos(j4);
IkReal x1551=(cj5*r00);
IkReal x1552=(cj5*r10);
IkReal x1553=(cj2*sj1);
IkReal x1554=(r21*sj5);
IkReal x1555=(cj5*r20);
IkReal x1556=(cj1*sj2);
IkReal x1557=((1.0)*x1550);
IkReal x1558=((1.0)*x1549);
IkReal x1559=(sj5*x1549);
IkReal x1560=(sj5*x1550);
evalcond[0]=((((-1.0)*r22*x1557))+(((-1.0)*x1555*x1558))+((x1549*x1554)));
evalcond[1]=(((r01*x1559))+sj0+(((-1.0)*r02*x1557))+(((-1.0)*x1551*x1558)));
evalcond[2]=((((-1.0)*x1552*x1558))+((r11*x1559))+(((-1.0)*r12*x1557))+(((-1.0)*cj0)));
evalcond[3]=(((x1550*x1554))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1555*x1557))+((r22*x1549)));
evalcond[4]=(((r02*x1549))+((cj0*x1553))+((cj0*x1556))+(((-1.0)*x1551*x1557))+((r01*x1560)));
evalcond[5]=((((-1.0)*x1552*x1557))+((r12*x1549))+((r11*x1560))+((sj0*x1553))+((sj0*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1561=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1561.valid){
continue;
}
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1561.value)))+(x1562.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1563=IKsin(j4);
IkReal x1564=IKcos(j4);
IkReal x1565=(cj5*r00);
IkReal x1566=(cj5*r10);
IkReal x1567=(cj2*sj1);
IkReal x1568=(r21*sj5);
IkReal x1569=(cj5*r20);
IkReal x1570=(cj1*sj2);
IkReal x1571=((1.0)*x1564);
IkReal x1572=((1.0)*x1563);
IkReal x1573=(sj5*x1563);
IkReal x1574=(sj5*x1564);
evalcond[0]=((((-1.0)*r22*x1571))+(((-1.0)*x1569*x1572))+((x1563*x1568)));
evalcond[1]=((((-1.0)*x1565*x1572))+(((-1.0)*r02*x1571))+sj0+((r01*x1573)));
evalcond[2]=((((-1.0)*x1566*x1572))+((r11*x1573))+(((-1.0)*r12*x1571))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1569*x1571))+((r22*x1563))+((x1564*x1568)));
evalcond[4]=((((-1.0)*x1565*x1571))+((cj0*x1570))+((cj0*x1567))+((r02*x1563))+((r01*x1574)));
evalcond[5]=((((-1.0)*x1566*x1571))+((r12*x1563))+((sj0*x1570))+((sj0*x1567))+((r11*x1574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1575.valid){
continue;
}
CheckValue<IkReal> x1576 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1575.value)))+(x1576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1577=IKsin(j4);
IkReal x1578=IKcos(j4);
IkReal x1579=(cj5*r00);
IkReal x1580=(cj5*r10);
IkReal x1581=(cj2*sj1);
IkReal x1582=(r21*sj5);
IkReal x1583=(cj5*r20);
IkReal x1584=(cj1*sj2);
IkReal x1585=((1.0)*x1578);
IkReal x1586=((1.0)*x1577);
IkReal x1587=(sj5*x1577);
IkReal x1588=(sj5*x1578);
evalcond[0]=((((-1.0)*r22*x1585))+((x1577*x1582))+(((-1.0)*x1583*x1586)));
evalcond[1]=(((r01*x1587))+sj0+(((-1.0)*r02*x1585))+(((-1.0)*x1579*x1586)));
evalcond[2]=((((-1.0)*x1580*x1586))+((r11*x1587))+(((-1.0)*r12*x1585))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1577))+((x1578*x1582))+(((-1.0)*x1583*x1585)));
evalcond[4]=(((r01*x1588))+(((-1.0)*x1579*x1585))+((r02*x1577))+((cj0*x1584))+((cj0*x1581)));
evalcond[5]=((((-1.0)*x1580*x1585))+((r12*x1577))+((r11*x1588))+((sj0*x1584))+((sj0*x1581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1589=((1.0)*cj5);
IkReal x1590=((1.0)*sj5);
IkReal x1591=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1591;
j0eval[1]=((IKabs(((((-1.0)*r00*x1590))+(((-1.0)*r01*x1589)))))+(IKabs(((((-1.0)*r11*x1589))+(((-1.0)*r10*x1590))))));
j0eval[2]=IKsign(x1591);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1592=r21*r21;
IkReal x1593=cj5*cj5;
IkReal x1594=(cj2*sj1);
IkReal x1595=(cj1*sj2);
IkReal x1596=(r21*sj5);
IkReal x1597=((1.0)*cj5*r20);
IkReal x1598=((((2.0)*cj5*r20*x1596))+((x1592*x1593))+(((-1.0)*(r22*r22)))+(((-1.0)*x1592))+(((-1.0)*x1593*(r20*r20))));
j4eval[0]=x1598;
j4eval[1]=((IKabs((((x1594*x1596))+(((-1.0)*x1594*x1597))+(((-1.0)*x1595*x1597))+((x1595*x1596)))))+(IKabs((((r22*x1595))+((r22*x1594))))));
j4eval[2]=IKsign(x1598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1599=cj1*cj1;
IkReal x1600=(cj2*sj2);
IkReal x1601=(cj1*sj1);
j0eval[0]=((((-2.0)*x1601*(cj2*cj2)))+x1601+x1600+(((-1.08349267049076)*cj2*x1601))+(((-2.0)*x1599*x1600))+(((-1.08349267049076)*sj2*x1599)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1602=cj1*cj1;
IkReal x1603=(cj1*sj1);
IkReal x1604=(r00*sj5);
IkReal x1605=(cj1*sj2);
IkReal x1606=(r10*sj5);
IkReal x1607=(cj5*r11);
IkReal x1608=((20000.0)*py);
IkReal x1609=(cj2*sj1);
IkReal x1610=(cj5*r01);
IkReal x1611=((1893.0)*x1609);
IkReal x1612=(sj2*x1602);
CheckValue<IkReal> x1613=IKPowWithIntegerCheck(((((-15690.0)*x1603*(cj2*cj2)))+(((-8500.0)*x1612))+(((-15690.0)*cj2*x1612))+(((7845.0)*x1603))+(((7845.0)*cj2*sj2))+(((-8500.0)*cj2*x1603))),-1);
if(!x1613.valid){
continue;
}
CheckValue<IkReal> x1614=IKPowWithIntegerCheck((x1609+x1605),-1);
if(!x1614.valid){
continue;
}
if( IKabs(((x1613.value)*(((((1893.0)*x1605*x1607))+(((1893.0)*x1605*x1606))+((x1608*x1609))+(((-2183.0)*x1604))+(((-2183.0)*x1610))+((x1607*x1611))+((x1606*x1611))+((x1605*x1608)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1614.value)*(((((-1.0)*x1610))+(((-1.0)*x1604)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1613.value)*(((((1893.0)*x1605*x1607))+(((1893.0)*x1605*x1606))+((x1608*x1609))+(((-2183.0)*x1604))+(((-2183.0)*x1610))+((x1607*x1611))+((x1606*x1611))+((x1605*x1608))))))+IKsqr(((x1614.value)*(((((-1.0)*x1610))+(((-1.0)*x1604))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1613.value)*(((((1893.0)*x1605*x1607))+(((1893.0)*x1605*x1606))+((x1608*x1609))+(((-2183.0)*x1604))+(((-2183.0)*x1610))+((x1607*x1611))+((x1606*x1611))+((x1605*x1608))))), ((x1614.value)*(((((-1.0)*x1610))+(((-1.0)*x1604))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1615=IKcos(j0);
IkReal x1616=IKsin(j0);
IkReal x1617=(cj5*r01);
IkReal x1618=(cj2*sj1);
IkReal x1619=(r00*sj5);
IkReal x1620=(cj5*r11);
IkReal x1621=((0.39225)*cj2);
IkReal x1622=(r10*sj5);
IkReal x1623=((0.39225)*sj1*sj2);
IkReal x1624=(cj1*x1615);
IkReal x1625=(cj1*x1616);
evalcond[0]=(((sj2*x1624))+x1619+x1617+((x1615*x1618)));
evalcond[1]=(((sj2*x1625))+x1622+x1620+((x1616*x1618)));
evalcond[2]=((((0.10915)*x1616))+(((-1.0)*px))+((x1615*x1623))+(((-1.0)*x1621*x1624))+(((-0.09465)*x1619))+(((-0.09465)*x1617))+(((-0.425)*x1624)));
evalcond[3]=((((-0.10915)*x1615))+(((-1.0)*py))+(((-0.09465)*x1622))+(((-0.09465)*x1620))+(((-1.0)*x1621*x1625))+((x1616*x1623))+(((-0.425)*x1625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1626=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1626;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1627=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1627;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1628=((1.0)*cj5);
IkReal x1629=((((-1.0)*r21*x1628))+(((-1.0)*r20*sj5)));
j4eval[0]=x1629;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1628))+(((-1.0)*r10*sj0*x1628))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1629);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1630=((1.0)*cj5);
CheckValue<IkReal> x1631 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1630))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1631.valid){
continue;
}
CheckValue<IkReal> x1632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1630))+(((-1.0)*r20*sj5)))),-1);
if(!x1632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1631.value)+(((1.5707963267949)*(x1632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1633=IKsin(j4);
IkReal x1634=IKcos(j4);
IkReal x1635=(cj5*r00);
IkReal x1636=(cj1*cj2);
IkReal x1637=(cj5*r10);
IkReal x1638=(r21*sj5);
IkReal x1639=(cj5*r20);
IkReal x1640=((1.0)*x1634);
IkReal x1641=((1.0)*x1633);
IkReal x1642=(sj5*x1633);
IkReal x1643=(sj5*x1634);
IkReal x1644=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1640))+(((-1.0)*x1639*x1641))+((x1633*x1638)));
evalcond[1]=(sj0+(((-1.0)*x1635*x1641))+((r01*x1642))+(((-1.0)*r02*x1640)));
evalcond[2]=(((r11*x1642))+(((-1.0)*r12*x1640))+(((-1.0)*x1637*x1641))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1639*x1640))+((x1634*x1638))+((r22*x1633)));
evalcond[4]=(((r02*x1633))+(((-1.0)*x1635*x1640))+((r01*x1643))+((cj0*x1636))+(((-1.0)*cj0*x1644)));
evalcond[5]=(((r11*x1643))+((sj0*x1636))+((r12*x1633))+(((-1.0)*x1637*x1640))+(((-1.0)*sj0*x1644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1645=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1645.valid){
continue;
}
CheckValue<IkReal> x1646 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1645.value)))+(x1646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1647=IKsin(j4);
IkReal x1648=IKcos(j4);
IkReal x1649=(cj5*r00);
IkReal x1650=(cj1*cj2);
IkReal x1651=(cj5*r10);
IkReal x1652=(r21*sj5);
IkReal x1653=(cj5*r20);
IkReal x1654=((1.0)*x1648);
IkReal x1655=((1.0)*x1647);
IkReal x1656=(sj5*x1647);
IkReal x1657=(sj5*x1648);
IkReal x1658=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1654))+((x1647*x1652))+(((-1.0)*x1653*x1655)));
evalcond[1]=(sj0+((r01*x1656))+(((-1.0)*x1649*x1655))+(((-1.0)*r02*x1654)));
evalcond[2]=(((r11*x1656))+(((-1.0)*r12*x1654))+(((-1.0)*x1651*x1655))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x1648*x1652))+((cj1*sj2))+(((-1.0)*x1653*x1654))+((r22*x1647)));
evalcond[4]=(((r02*x1647))+((r01*x1657))+((cj0*x1650))+(((-1.0)*x1649*x1654))+(((-1.0)*cj0*x1658)));
evalcond[5]=(((sj0*x1650))+((r11*x1657))+((r12*x1647))+(((-1.0)*sj0*x1658))+(((-1.0)*x1651*x1654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1659=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1659.valid){
continue;
}
CheckValue<IkReal> x1660 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1659.value)))+(x1660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1661=IKsin(j4);
IkReal x1662=IKcos(j4);
IkReal x1663=(cj5*r00);
IkReal x1664=(cj1*cj2);
IkReal x1665=(cj5*r10);
IkReal x1666=(r21*sj5);
IkReal x1667=(cj5*r20);
IkReal x1668=((1.0)*x1662);
IkReal x1669=((1.0)*x1661);
IkReal x1670=(sj5*x1661);
IkReal x1671=(sj5*x1662);
IkReal x1672=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1667*x1669))+(((-1.0)*r22*x1668))+((x1661*x1666)));
evalcond[1]=(sj0+(((-1.0)*x1663*x1669))+(((-1.0)*r02*x1668))+((r01*x1670)));
evalcond[2]=((((-1.0)*r12*x1668))+((r11*x1670))+(((-1.0)*x1665*x1669))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x1667*x1668))+((cj1*sj2))+((x1662*x1666))+((r22*x1661)));
evalcond[4]=((((-1.0)*cj0*x1672))+((r02*x1661))+(((-1.0)*x1663*x1668))+((cj0*x1664))+((r01*x1671)));
evalcond[5]=(((sj0*x1664))+((r12*x1661))+(((-1.0)*sj0*x1672))+((r11*x1671))+(((-1.0)*x1665*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1673=r21*r21;
IkReal x1674=cj5*cj5;
IkReal x1675=(cj2*sj1);
IkReal x1676=(cj1*sj2);
IkReal x1677=(r21*sj5);
IkReal x1678=((1.0)*cj5*r20);
CheckValue<IkReal> x1679 = IKatan2WithCheck(IkReal((((r22*x1675))+((r22*x1676)))),IkReal((((x1676*x1677))+((x1675*x1677))+(((-1.0)*x1676*x1678))+(((-1.0)*x1675*x1678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1679.valid){
continue;
}
CheckValue<IkReal> x1680=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1674*(r20*r20)))+((x1673*x1674))+(((2.0)*cj5*r20*x1677))+(((-1.0)*(r22*r22)))+(((-1.0)*x1673)))),-1);
if(!x1680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1679.value)+(((1.5707963267949)*(x1680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1681=IKsin(j4);
IkReal x1682=IKcos(j4);
IkReal x1683=(r21*sj5);
IkReal x1684=(cj5*r20);
IkReal x1685=((1.0)*x1682);
evalcond[0]=(((x1681*x1683))+(((-1.0)*x1681*x1684))+(((-1.0)*r22*x1685)));
evalcond[1]=(((cj2*sj1))+((r22*x1681))+((cj1*sj2))+((x1682*x1683))+(((-1.0)*x1684*x1685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1686=(cj5*sj4);
IkReal x1687=(sj4*sj5);
if( IKabs((((r00*x1686))+(((-1.0)*r01*x1687))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1687))+(((-1.0)*r10*x1686))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1686))+(((-1.0)*r01*x1687))+((cj4*r02))))+IKsqr((((r11*x1687))+(((-1.0)*r10*x1686))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1686))+(((-1.0)*r01*x1687))+((cj4*r02))), (((r11*x1687))+(((-1.0)*r10*x1686))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1688=IKcos(j0);
IkReal x1689=IKsin(j0);
IkReal x1690=(cj5*r01);
IkReal x1691=(r11*sj5);
IkReal x1692=(cj1*cj2);
IkReal x1693=(r00*sj5);
IkReal x1694=(cj5*r11);
IkReal x1695=((1.0)*cj4);
IkReal x1696=(r01*sj5);
IkReal x1697=(r10*sj5);
IkReal x1698=(sj1*x1688);
IkReal x1699=(cj1*x1689);
IkReal x1700=(cj5*x1695);
IkReal x1701=(cj1*x1688);
IkReal x1702=((1.0)*cj5*sj4);
IkReal x1703=(sj1*sj2*x1689);
evalcond[0]=(x1689+(((-1.0)*r02*x1695))+((sj4*x1696))+(((-1.0)*r00*x1702)));
evalcond[1]=((((-1.0)*r12*x1695))+(((-1.0)*x1688))+(((-1.0)*r10*x1702))+((sj4*x1691)));
evalcond[2]=(x1693+x1690+((sj2*x1701))+((cj2*x1698)));
evalcond[3]=(((sj2*x1699))+x1697+x1694+((cj2*sj1*x1689)));
evalcond[4]=(((cj4*x1696))+((r02*sj4))+((x1688*x1692))+(((-1.0)*r00*x1700))+(((-1.0)*sj2*x1698)));
evalcond[5]=((((-1.0)*x1703))+((cj4*x1691))+(((-1.0)*r10*x1700))+((x1689*x1692))+((r12*sj4)));
evalcond[6]=((((-0.425)*x1701))+(((0.39225)*sj2*x1698))+(((0.10915)*x1689))+(((-1.0)*px))+(((-0.39225)*x1688*x1692))+(((-0.09465)*x1693))+(((-0.09465)*x1690)));
evalcond[7]=((((-0.39225)*x1689*x1692))+(((0.39225)*x1703))+(((-0.425)*x1699))+(((-1.0)*py))+(((-0.09465)*x1697))+(((-0.09465)*x1694))+(((-0.10915)*x1688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1704=((1.0)*cj5);
IkReal x1705=((1.0)*sj5);
CheckValue<IkReal> x1706=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1706.valid){
continue;
}
CheckValue<IkReal> x1707 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1705))+(((-1.0)*r11*x1704)))),IkReal(((((-1.0)*r01*x1704))+(((-1.0)*r00*x1705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1707.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1706.value)))+(x1707.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1708=IKcos(j0);
IkReal x1709=IKsin(j0);
IkReal x1710=(cj5*r01);
IkReal x1711=(cj2*sj1);
IkReal x1712=(r00*sj5);
IkReal x1713=(cj5*r11);
IkReal x1714=((0.39225)*cj2);
IkReal x1715=(r10*sj5);
IkReal x1716=((0.39225)*sj1*sj2);
IkReal x1717=(cj1*x1708);
IkReal x1718=(cj1*x1709);
evalcond[0]=(x1712+x1710+((sj2*x1717))+((x1708*x1711)));
evalcond[1]=(x1713+x1715+((x1709*x1711))+((sj2*x1718)));
evalcond[2]=((((-1.0)*x1714*x1717))+(((-0.425)*x1717))+(((-0.09465)*x1712))+(((-0.09465)*x1710))+(((-1.0)*px))+(((0.10915)*x1709))+((x1708*x1716)));
evalcond[3]=((((-1.0)*x1714*x1718))+(((-0.425)*x1718))+((x1709*x1716))+(((-0.10915)*x1708))+(((-0.09465)*x1713))+(((-0.09465)*x1715))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1719=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1719;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1720=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1720;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1720);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1721=((1.0)*cj5);
IkReal x1722=((((-1.0)*r21*x1721))+(((-1.0)*r20*sj5)));
j4eval[0]=x1722;
j4eval[1]=((IKabs(((((-1.0)*r10*sj0*x1721))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1721))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1723=((1.0)*cj5);
CheckValue<IkReal> x1724=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1723))+(((-1.0)*r20*sj5)))),-1);
if(!x1724.valid){
continue;
}
CheckValue<IkReal> x1725 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x1723))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1723))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1724.value)))+(x1725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1726=IKsin(j4);
IkReal x1727=IKcos(j4);
IkReal x1728=(cj5*r00);
IkReal x1729=(cj1*cj2);
IkReal x1730=(cj5*r10);
IkReal x1731=(r21*sj5);
IkReal x1732=(cj5*r20);
IkReal x1733=((1.0)*x1727);
IkReal x1734=((1.0)*x1726);
IkReal x1735=(sj5*x1726);
IkReal x1736=(sj5*x1727);
IkReal x1737=((1.0)*sj1*sj2);
evalcond[0]=(((x1726*x1731))+(((-1.0)*x1732*x1734))+(((-1.0)*r22*x1733)));
evalcond[1]=(((r01*x1735))+sj0+(((-1.0)*x1728*x1734))+(((-1.0)*r02*x1733)));
evalcond[2]=((((-1.0)*r12*x1733))+(((-1.0)*x1730*x1734))+((r11*x1735))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x1726))+((x1727*x1731))+(((-1.0)*x1732*x1733)));
evalcond[4]=(((r01*x1736))+((cj0*x1729))+(((-1.0)*x1728*x1733))+(((-1.0)*cj0*x1737))+((r02*x1726)));
evalcond[5]=((((-1.0)*sj0*x1737))+((sj0*x1729))+(((-1.0)*x1730*x1733))+((r11*x1736))+((r12*x1726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1738=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1738.valid){
continue;
}
CheckValue<IkReal> x1739 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1738.value)))+(x1739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1740=IKsin(j4);
IkReal x1741=IKcos(j4);
IkReal x1742=(cj5*r00);
IkReal x1743=(cj1*cj2);
IkReal x1744=(cj5*r10);
IkReal x1745=(r21*sj5);
IkReal x1746=(cj5*r20);
IkReal x1747=((1.0)*x1741);
IkReal x1748=((1.0)*x1740);
IkReal x1749=(sj5*x1740);
IkReal x1750=(sj5*x1741);
IkReal x1751=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1747))+(((-1.0)*x1746*x1748))+((x1740*x1745)));
evalcond[1]=(sj0+(((-1.0)*x1742*x1748))+((r01*x1749))+(((-1.0)*r02*x1747)));
evalcond[2]=((((-1.0)*r12*x1747))+(((-1.0)*x1744*x1748))+((r11*x1749))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x1740))+((cj1*sj2))+(((-1.0)*x1746*x1747))+((x1741*x1745)));
evalcond[4]=((((-1.0)*cj0*x1751))+((r02*x1740))+((r01*x1750))+((cj0*x1743))+(((-1.0)*x1742*x1747)));
evalcond[5]=(((r12*x1740))+(((-1.0)*sj0*x1751))+((sj0*x1743))+(((-1.0)*x1744*x1747))+((r11*x1750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1752=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1752.valid){
continue;
}
CheckValue<IkReal> x1753 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1752.value)))+(x1753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1754=IKsin(j4);
IkReal x1755=IKcos(j4);
IkReal x1756=(cj5*r00);
IkReal x1757=(cj1*cj2);
IkReal x1758=(cj5*r10);
IkReal x1759=(r21*sj5);
IkReal x1760=(cj5*r20);
IkReal x1761=((1.0)*x1755);
IkReal x1762=((1.0)*x1754);
IkReal x1763=(sj5*x1754);
IkReal x1764=(sj5*x1755);
IkReal x1765=((1.0)*sj1*sj2);
evalcond[0]=(((x1754*x1759))+(((-1.0)*x1760*x1762))+(((-1.0)*r22*x1761)));
evalcond[1]=(sj0+(((-1.0)*r02*x1761))+((r01*x1763))+(((-1.0)*x1756*x1762)));
evalcond[2]=(((r11*x1763))+(((-1.0)*r12*x1761))+(((-1.0)*x1758*x1762))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x1754))+(((-1.0)*x1760*x1761))+((x1755*x1759)));
evalcond[4]=(((r02*x1754))+((r01*x1764))+(((-1.0)*x1756*x1761))+(((-1.0)*cj0*x1765))+((cj0*x1757)));
evalcond[5]=(((r11*x1764))+((sj0*x1757))+(((-1.0)*x1758*x1761))+((r12*x1754))+(((-1.0)*sj0*x1765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1766=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1766;
j0eval[1]=IKsign(x1766);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1767=cj5*cj5;
IkReal x1768=r21*r21;
IkReal x1769=(cj2*sj1);
IkReal x1770=(cj1*sj2);
IkReal x1771=(r21*sj5);
IkReal x1772=((1.0)*cj5*r20);
IkReal x1773=(((x1767*(r20*r20)))+x1768+(r22*r22)+(((-2.0)*cj5*r20*x1771))+(((-1.0)*x1767*x1768)));
j4eval[0]=x1773;
j4eval[1]=IKsign(x1773);
j4eval[2]=((IKabs((((x1770*x1771))+(((-1.0)*x1770*x1772))+(((-1.0)*x1769*x1772))+((x1769*x1771)))))+(IKabs((((r22*x1770))+((r22*x1769))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1774=cj1*cj1;
IkReal x1775=(cj2*sj2);
IkReal x1776=(cj1*sj1);
j0eval[0]=((((-2.0)*x1776*(cj2*cj2)))+x1775+x1776+(((-1.08349267049076)*sj2*x1774))+(((-2.0)*x1774*x1775))+(((-1.08349267049076)*cj2*x1776)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1777=cj1*cj1;
IkReal x1778=(cj1*sj1);
IkReal x1779=(r00*sj5);
IkReal x1780=(cj1*sj2);
IkReal x1781=(r10*sj5);
IkReal x1782=(cj5*r11);
IkReal x1783=(cj5*r01);
IkReal x1784=((20000.0)*py);
IkReal x1785=(cj2*sj1);
IkReal x1786=((1893.0)*x1785);
IkReal x1787=(sj2*x1777);
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(((((-8500.0)*cj2*x1778))+(((7845.0)*x1778))+(((-15690.0)*x1778*(cj2*cj2)))+(((-8500.0)*x1787))+(((7845.0)*cj2*sj2))+(((-15690.0)*cj2*x1787))),-1);
if(!x1788.valid){
continue;
}
CheckValue<IkReal> x1789=IKPowWithIntegerCheck((x1780+x1785),-1);
if(!x1789.valid){
continue;
}
if( IKabs(((x1788.value)*((((x1782*x1786))+(((2183.0)*x1783))+(((1893.0)*x1780*x1782))+(((1893.0)*x1780*x1781))+((x1784*x1785))+(((2183.0)*x1779))+((x1780*x1784))+((x1781*x1786)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1789.value)*((x1783+x1779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1788.value)*((((x1782*x1786))+(((2183.0)*x1783))+(((1893.0)*x1780*x1782))+(((1893.0)*x1780*x1781))+((x1784*x1785))+(((2183.0)*x1779))+((x1780*x1784))+((x1781*x1786))))))+IKsqr(((x1789.value)*((x1783+x1779))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1788.value)*((((x1782*x1786))+(((2183.0)*x1783))+(((1893.0)*x1780*x1782))+(((1893.0)*x1780*x1781))+((x1784*x1785))+(((2183.0)*x1779))+((x1780*x1784))+((x1781*x1786))))), ((x1789.value)*((x1783+x1779))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1790=IKcos(j0);
IkReal x1791=IKsin(j0);
IkReal x1792=(cj5*r11);
IkReal x1793=(cj5*r01);
IkReal x1794=(cj2*sj1);
IkReal x1795=((1.0)*sj5);
IkReal x1796=((0.09465)*sj5);
IkReal x1797=((0.39225)*cj2);
IkReal x1798=((0.39225)*sj1*sj2);
IkReal x1799=(cj1*x1790);
IkReal x1800=(cj1*x1791);
evalcond[0]=(((sj2*x1799))+(((-1.0)*r00*x1795))+(((-1.0)*x1793))+((x1790*x1794)));
evalcond[1]=((((-1.0)*r10*x1795))+((sj2*x1800))+(((-1.0)*x1792))+((x1791*x1794)));
evalcond[2]=((((-1.0)*r00*x1796))+(((0.10915)*x1791))+(((-1.0)*px))+(((-0.425)*x1799))+(((-0.09465)*x1793))+((x1790*x1798))+(((-1.0)*x1797*x1799)));
evalcond[3]=((((-1.0)*r10*x1796))+(((-1.0)*x1797*x1800))+(((-0.425)*x1800))+(((-1.0)*py))+(((-0.09465)*x1792))+((x1791*x1798))+(((-0.10915)*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1801=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1801;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1802=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1802;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1803=((1.0)*cj5);
IkReal x1804=((((-1.0)*r21*x1803))+(((-1.0)*r20*sj5)));
j4eval[0]=x1804;
j4eval[1]=((IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1803))+(((-1.0)*r10*sj0*x1803)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1805=((1.0)*cj5);
CheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1805))+(((-1.0)*r10*sj0*x1805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
CheckValue<IkReal> x1807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1805))+(((-1.0)*r20*sj5)))),-1);
if(!x1807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1806.value)+(((1.5707963267949)*(x1807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1808=IKsin(j4);
IkReal x1809=IKcos(j4);
IkReal x1810=(cj1*cj2);
IkReal x1811=(cj5*r10);
IkReal x1812=(r01*sj5);
IkReal x1813=(cj5*r00);
IkReal x1814=(cj5*r20);
IkReal x1815=((1.0)*cj0);
IkReal x1816=(sj1*sj2);
IkReal x1817=((1.0)*x1809);
IkReal x1818=((1.0)*x1808);
IkReal x1819=(sj5*x1808);
evalcond[0]=((((-1.0)*x1814*x1818))+((r21*x1819))+(((-1.0)*r22*x1817)));
evalcond[1]=(sj0+(((-1.0)*x1813*x1818))+(((-1.0)*r02*x1817))+((x1808*x1812)));
evalcond[2]=((((-1.0)*x1815))+(((-1.0)*x1811*x1818))+(((-1.0)*r12*x1817))+((r11*x1819)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x1817))+((cj1*sj2))+((x1809*x1814))+(((-1.0)*r22*x1818)));
evalcond[4]=(((cj0*x1810))+(((-1.0)*x1812*x1817))+(((-1.0)*r02*x1818))+((x1809*x1813))+(((-1.0)*x1815*x1816)));
evalcond[5]=(((x1809*x1811))+(((-1.0)*r11*sj5*x1817))+(((-1.0)*r12*x1818))+((sj0*x1810))+(((-1.0)*sj0*x1816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1820=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1820.valid){
continue;
}
CheckValue<IkReal> x1821 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1820.value)))+(x1821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1822=IKsin(j4);
IkReal x1823=IKcos(j4);
IkReal x1824=(cj1*cj2);
IkReal x1825=(cj5*r10);
IkReal x1826=(r01*sj5);
IkReal x1827=(cj5*r00);
IkReal x1828=(cj5*r20);
IkReal x1829=((1.0)*cj0);
IkReal x1830=(sj1*sj2);
IkReal x1831=((1.0)*x1823);
IkReal x1832=((1.0)*x1822);
IkReal x1833=(sj5*x1822);
evalcond[0]=((((-1.0)*x1828*x1832))+((r21*x1833))+(((-1.0)*r22*x1831)));
evalcond[1]=(sj0+((x1822*x1826))+(((-1.0)*x1827*x1832))+(((-1.0)*r02*x1831)));
evalcond[2]=((((-1.0)*x1829))+(((-1.0)*x1825*x1832))+((r11*x1833))+(((-1.0)*r12*x1831)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1823*x1828))+(((-1.0)*r21*sj5*x1831))+(((-1.0)*r22*x1832)));
evalcond[4]=(((cj0*x1824))+((x1823*x1827))+(((-1.0)*x1826*x1831))+(((-1.0)*r02*x1832))+(((-1.0)*x1829*x1830)));
evalcond[5]=((((-1.0)*r11*sj5*x1831))+((x1823*x1825))+(((-1.0)*sj0*x1830))+((sj0*x1824))+(((-1.0)*r12*x1832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1834=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1834.valid){
continue;
}
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1834.value)))+(x1835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1836=IKsin(j4);
IkReal x1837=IKcos(j4);
IkReal x1838=(cj1*cj2);
IkReal x1839=(cj5*r10);
IkReal x1840=(r01*sj5);
IkReal x1841=(cj5*r00);
IkReal x1842=(cj5*r20);
IkReal x1843=((1.0)*cj0);
IkReal x1844=(sj1*sj2);
IkReal x1845=((1.0)*x1837);
IkReal x1846=((1.0)*x1836);
IkReal x1847=(sj5*x1836);
evalcond[0]=((((-1.0)*x1842*x1846))+(((-1.0)*r22*x1845))+((r21*x1847)));
evalcond[1]=(((x1836*x1840))+sj0+(((-1.0)*x1841*x1846))+(((-1.0)*r02*x1845)));
evalcond[2]=((((-1.0)*x1843))+(((-1.0)*x1839*x1846))+(((-1.0)*r12*x1845))+((r11*x1847)));
evalcond[3]=(((cj2*sj1))+((x1837*x1842))+(((-1.0)*r22*x1846))+((cj1*sj2))+(((-1.0)*r21*sj5*x1845)));
evalcond[4]=((((-1.0)*x1843*x1844))+((x1837*x1841))+(((-1.0)*r02*x1846))+((cj0*x1838))+(((-1.0)*x1840*x1845)));
evalcond[5]=(((sj0*x1838))+(((-1.0)*r11*sj5*x1845))+(((-1.0)*r12*x1846))+(((-1.0)*sj0*x1844))+((x1837*x1839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1848=cj5*cj5;
IkReal x1849=r21*r21;
IkReal x1850=(cj2*sj1);
IkReal x1851=(cj1*sj2);
IkReal x1852=(r21*sj5);
IkReal x1853=((1.0)*cj5*r20);
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal((((r22*x1850))+((r22*x1851)))),IkReal((((x1851*x1852))+((x1850*x1852))+(((-1.0)*x1851*x1853))+(((-1.0)*x1850*x1853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
CheckValue<IkReal> x1855=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x1848*x1849))+(((-2.0)*cj5*r20*x1852))+x1849+((x1848*(r20*r20))))),-1);
if(!x1855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1854.value)+(((1.5707963267949)*(x1855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1856=IKsin(j4);
IkReal x1857=IKcos(j4);
IkReal x1858=(r21*sj5);
IkReal x1859=(cj5*r20);
IkReal x1860=((1.0)*x1857);
IkReal x1861=((1.0)*x1856);
evalcond[0]=(((x1856*x1858))+(((-1.0)*x1859*x1861))+(((-1.0)*r22*x1860)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x1857*x1859))+(((-1.0)*x1858*x1860))+(((-1.0)*r22*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1862=(cj5*sj4);
IkReal x1863=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1863))+((r00*x1862))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1863))+(((-1.0)*r10*x1862))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1863))+((r00*x1862))+((cj4*r02))))+IKsqr((((r11*x1863))+(((-1.0)*r10*x1862))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1863))+((r00*x1862))+((cj4*r02))), (((r11*x1863))+(((-1.0)*r10*x1862))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1864=IKcos(j0);
IkReal x1865=IKsin(j0);
IkReal x1866=(cj4*cj5);
IkReal x1867=(r11*sj5);
IkReal x1868=(cj1*cj2);
IkReal x1869=(cj5*r11);
IkReal x1870=((1.0)*sj4);
IkReal x1871=(cj5*r01);
IkReal x1872=((1.0)*sj5);
IkReal x1873=((0.09465)*sj5);
IkReal x1874=((1.0)*cj4);
IkReal x1875=(sj1*x1864);
IkReal x1876=(cj1*x1865);
IkReal x1877=(cj1*x1864);
IkReal x1878=(sj1*sj2*x1865);
evalcond[0]=((((-1.0)*r02*x1874))+((r01*sj4*sj5))+x1865+(((-1.0)*cj5*r00*x1870)));
evalcond[1]=(((sj4*x1867))+(((-1.0)*cj5*r10*x1870))+(((-1.0)*r12*x1874))+(((-1.0)*x1864)));
evalcond[2]=(((sj2*x1877))+(((-1.0)*r00*x1872))+((cj2*x1875))+(((-1.0)*x1871)));
evalcond[3]=(((cj2*sj1*x1865))+((sj2*x1876))+(((-1.0)*r10*x1872))+(((-1.0)*x1869)));
evalcond[4]=(((x1864*x1868))+(((-1.0)*r02*x1870))+(((-1.0)*cj4*r01*x1872))+(((-1.0)*sj2*x1875))+((r00*x1866)));
evalcond[5]=((((-1.0)*x1867*x1874))+((x1865*x1868))+(((-1.0)*r12*x1870))+((r10*x1866))+(((-1.0)*x1878)));
evalcond[6]=((((-0.39225)*x1864*x1868))+(((0.39225)*sj2*x1875))+(((-1.0)*r00*x1873))+(((-0.09465)*x1871))+(((-1.0)*px))+(((-0.425)*x1877))+(((0.10915)*x1865)));
evalcond[7]=((((-0.10915)*x1864))+(((-1.0)*r10*x1873))+(((-1.0)*py))+(((-0.39225)*x1865*x1868))+(((-0.425)*x1876))+(((-0.09465)*x1869))+(((0.39225)*x1878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1879.valid){
continue;
}
CheckValue<IkReal> x1880 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1880.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1879.value)))+(x1880.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1881=IKcos(j0);
IkReal x1882=IKsin(j0);
IkReal x1883=(cj5*r11);
IkReal x1884=(cj5*r01);
IkReal x1885=(cj2*sj1);
IkReal x1886=((1.0)*sj5);
IkReal x1887=((0.09465)*sj5);
IkReal x1888=((0.39225)*cj2);
IkReal x1889=((0.39225)*sj1*sj2);
IkReal x1890=(cj1*x1881);
IkReal x1891=(cj1*x1882);
evalcond[0]=(((x1881*x1885))+((sj2*x1890))+(((-1.0)*x1884))+(((-1.0)*r00*x1886)));
evalcond[1]=(((sj2*x1891))+((x1882*x1885))+(((-1.0)*r10*x1886))+(((-1.0)*x1883)));
evalcond[2]=(((x1881*x1889))+(((-0.09465)*x1884))+(((0.10915)*x1882))+(((-1.0)*x1888*x1890))+(((-1.0)*px))+(((-1.0)*r00*x1887))+(((-0.425)*x1890)));
evalcond[3]=(((x1882*x1889))+(((-0.09465)*x1883))+(((-1.0)*x1888*x1891))+(((-1.0)*py))+(((-1.0)*r10*x1887))+(((-0.425)*x1891))+(((-0.10915)*x1881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1892=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1892;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1893=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1893;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1894=((1.0)*cj5);
IkReal x1895=((((-1.0)*r21*x1894))+(((-1.0)*r20*sj5)));
j4eval[0]=x1895;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1894))+(((-1.0)*cj0*r00*x1894))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1896=((1.0)*cj5);
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1896))+(((-1.0)*cj0*r00*x1896))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
CheckValue<IkReal> x1898=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1896))+(((-1.0)*r20*sj5)))),-1);
if(!x1898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1897.value)+(((1.5707963267949)*(x1898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1899=IKsin(j4);
IkReal x1900=IKcos(j4);
IkReal x1901=(cj1*cj2);
IkReal x1902=(cj5*r10);
IkReal x1903=(r01*sj5);
IkReal x1904=(cj5*r00);
IkReal x1905=(cj5*r20);
IkReal x1906=((1.0)*cj0);
IkReal x1907=(sj1*sj2);
IkReal x1908=((1.0)*x1900);
IkReal x1909=((1.0)*x1899);
IkReal x1910=(sj5*x1899);
evalcond[0]=((((-1.0)*r22*x1908))+(((-1.0)*x1905*x1909))+((r21*x1910)));
evalcond[1]=(sj0+(((-1.0)*x1904*x1909))+((x1899*x1903))+(((-1.0)*r02*x1908)));
evalcond[2]=((((-1.0)*x1902*x1909))+((r11*x1910))+(((-1.0)*r12*x1908))+(((-1.0)*x1906)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1909))+((x1900*x1905))+(((-1.0)*r21*sj5*x1908)));
evalcond[4]=((((-1.0)*x1903*x1908))+((x1900*x1904))+((cj0*x1901))+(((-1.0)*x1906*x1907))+(((-1.0)*r02*x1909)));
evalcond[5]=((((-1.0)*r11*sj5*x1908))+((x1900*x1902))+(((-1.0)*sj0*x1907))+((sj0*x1901))+(((-1.0)*r12*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1911=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1911.valid){
continue;
}
CheckValue<IkReal> x1912 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1911.value)))+(x1912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1913=IKsin(j4);
IkReal x1914=IKcos(j4);
IkReal x1915=(cj1*cj2);
IkReal x1916=(cj5*r10);
IkReal x1917=(r01*sj5);
IkReal x1918=(cj5*r00);
IkReal x1919=(cj5*r20);
IkReal x1920=((1.0)*cj0);
IkReal x1921=(sj1*sj2);
IkReal x1922=((1.0)*x1914);
IkReal x1923=((1.0)*x1913);
IkReal x1924=(sj5*x1913);
evalcond[0]=((((-1.0)*r22*x1922))+(((-1.0)*x1919*x1923))+((r21*x1924)));
evalcond[1]=(((x1913*x1917))+sj0+(((-1.0)*x1918*x1923))+(((-1.0)*r02*x1922)));
evalcond[2]=((((-1.0)*r12*x1922))+(((-1.0)*x1916*x1923))+(((-1.0)*x1920))+((r11*x1924)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1914*x1919))+(((-1.0)*r21*sj5*x1922))+(((-1.0)*r22*x1923)));
evalcond[4]=((((-1.0)*x1917*x1922))+((x1914*x1918))+(((-1.0)*r02*x1923))+((cj0*x1915))+(((-1.0)*x1920*x1921)));
evalcond[5]=((((-1.0)*r12*x1923))+((x1914*x1916))+(((-1.0)*r11*sj5*x1922))+((sj0*x1915))+(((-1.0)*sj0*x1921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1925=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1925.valid){
continue;
}
CheckValue<IkReal> x1926 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1925.value)))+(x1926.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1927=IKsin(j4);
IkReal x1928=IKcos(j4);
IkReal x1929=(cj1*cj2);
IkReal x1930=(cj5*r10);
IkReal x1931=(r01*sj5);
IkReal x1932=(cj5*r00);
IkReal x1933=(cj5*r20);
IkReal x1934=((1.0)*cj0);
IkReal x1935=(sj1*sj2);
IkReal x1936=((1.0)*x1928);
IkReal x1937=((1.0)*x1927);
IkReal x1938=(sj5*x1927);
evalcond[0]=((((-1.0)*x1933*x1937))+(((-1.0)*r22*x1936))+((r21*x1938)));
evalcond[1]=(sj0+(((-1.0)*x1932*x1937))+((x1927*x1931))+(((-1.0)*r02*x1936)));
evalcond[2]=((((-1.0)*x1930*x1937))+(((-1.0)*r12*x1936))+((r11*x1938))+(((-1.0)*x1934)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1937))+((x1928*x1933))+(((-1.0)*r21*sj5*x1936)));
evalcond[4]=(((cj0*x1929))+(((-1.0)*x1934*x1935))+(((-1.0)*x1931*x1936))+((x1928*x1932))+(((-1.0)*r02*x1937)));
evalcond[5]=((((-1.0)*r11*sj5*x1936))+(((-1.0)*sj0*x1935))+(((-1.0)*r12*x1937))+((x1928*x1930))+((sj0*x1929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1939=cj1*cj1;
IkReal x1940=cj2*cj2;
IkReal x1941=(sj1*sj2);
IkReal x1942=((156900000.0)*py);
IkReal x1943=(cj1*cj5);
IkReal x1944=((14850585.0)*cj2);
IkReal x1945=(r00*sj5);
IkReal x1946=((16090500.0)*cj1);
IkReal x1947=((4132419.0)*cj5);
IkReal x1948=(r10*sj5);
IkReal x1949=((170000000.0)*cj1);
IkReal x1950=((156900000.0)*px);
IkReal x1951=(cj1*cj2);
IkReal x1952=((14850585.0)*cj5);
CheckValue<IkReal> x1953=IKPowWithIntegerCheck(IKsign(((-66309514.0)+(((61544025.0)*x1940))+(((-10705975.0)*x1939))+(((133365000.0)*cj1*x1941))+(((-133365000.0)*cj2*x1939))+(((-123088050.0)*x1939*x1940))+(((123088050.0)*x1941*x1951)))),-1);
if(!x1953.valid){
continue;
}
CheckValue<IkReal> x1954 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+(((-1.0)*r11*x1941*x1952))+((cj1*x1944*x1948))+((x1946*x1948))+((py*x1949))+(((-14850585.0)*x1941*x1948))+(((-4132419.0)*x1945))+(((-1.0)*r01*x1947))+(((-1.0)*x1941*x1942))+((x1942*x1951))+((r11*x1943*x1944))+(((16090500.0)*r11*x1943)))),IkReal((((x1945*x1946))+((r11*x1947))+(((43660000.0)*py))+(((-1.0)*r01*x1941*x1952))+((cj1*x1944*x1945))+((x1950*x1951))+((px*x1949))+(((-14850585.0)*x1941*x1945))+(((16090500.0)*r01*x1943))+(((-1.0)*x1941*x1950))+((r01*x1943*x1944))+(((4132419.0)*x1948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1954.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1953.value)))+(x1954.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1955=IKcos(j0);
IkReal x1956=IKsin(j0);
IkReal x1957=((0.425)*cj1);
IkReal x1958=(sj1*sj2);
IkReal x1959=(cj1*cj2);
IkReal x1960=((0.09465)*cj5);
IkReal x1961=((0.09465)*sj5);
IkReal x1962=((0.39225)*x1956);
IkReal x1963=((0.39225)*x1955);
evalcond[0]=((((-1.0)*x1959*x1963))+((x1958*x1963))+(((-1.0)*r00*x1961))+(((-1.0)*px))+(((-1.0)*r01*x1960))+(((0.10915)*x1956))+(((-1.0)*x1955*x1957)));
evalcond[1]=((((-1.0)*x1959*x1962))+((x1958*x1962))+(((-0.10915)*x1955))+(((-1.0)*py))+(((-1.0)*r10*x1961))+(((-1.0)*r11*x1960))+(((-1.0)*x1956*x1957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1964=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1964;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1965=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1965;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1966=((1.0)*cj5);
IkReal x1967=((((-1.0)*r21*x1966))+(((-1.0)*r20*sj5)));
j4eval[0]=x1967;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1966))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1966)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1968=((-1.0)*r20);
IkReal x1970 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1970)==0){
continue;
}
IkReal x1969=pow(x1970,-0.5);
CheckValue<IkReal> x1971 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1968),IKFAST_ATAN2_MAGTHRESH);
if(!x1971.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1971.value));
IkReal gconst1=(r21*x1969);
IkReal gconst2=(x1968*x1969);
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1972.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1973=((-1.0)*r20);
IkReal x1974=x1969;
CheckValue<IkReal> x1976 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1973),IKFAST_ATAN2_MAGTHRESH);
if(!x1976.valid){
continue;
}
IkReal x1975=((-1.0)*(x1976.value));
sj5=gconst1;
cj5=gconst2;
j5=x1975;
IkReal gconst0=x1975;
IkReal gconst1=(r21*x1974);
IkReal gconst2=(x1973*x1974);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1977=((-1.0)*r20);
IkReal x1978=x1969;
CheckValue<IkReal> x1980 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1977),IKFAST_ATAN2_MAGTHRESH);
if(!x1980.valid){
continue;
}
IkReal x1979=((-1.0)*(x1980.value));
sj5=gconst1;
cj5=gconst2;
j5=x1979;
IkReal gconst0=x1979;
IkReal gconst1=(r21*x1978);
IkReal gconst2=(x1977*x1978);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1981=((-1.0)*r20);
IkReal x1982=x1969;
CheckValue<IkReal> x1984 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1981),IKFAST_ATAN2_MAGTHRESH);
if(!x1984.valid){
continue;
}
IkReal x1983=((-1.0)*(x1984.value));
sj5=gconst1;
cj5=gconst2;
j5=x1983;
IkReal gconst0=x1983;
IkReal gconst1=(r21*x1982);
IkReal gconst2=(x1981*x1982);
IkReal x1985=r22*r22;
CheckValue<IkReal> x1989=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1985))),-1);
if(!x1989.valid){
continue;
}
IkReal x1986=x1989.value;
IkReal x1987=(sj3*x1986);
IkReal x1988=(((sj3*x1985))+((x1987*(r21*r21*r21*r21)))+(((2.0)*x1987*(r20*r20)*(r21*r21)))+((x1987*(r20*r20*r20*r20))));
j4eval[0]=x1988;
j4eval[1]=IKsign(x1988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1990=gconst1*gconst1;
IkReal x1991=r21*r21;
IkReal x1992=gconst2*gconst2;
IkReal x1993=r20*r20;
IkReal x1994=(gconst2*r20);
IkReal x1995=(cj1*cj2);
IkReal x1996=(sj1*sj2);
IkReal x1997=(gconst1*r21);
IkReal x1998=(cj3*gconst2);
IkReal x1999=(cj3*r20);
CheckValue<IkReal> x2000=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x1994*x1997))+((sj3*x1990*x1991))+((sj3*x1992*x1993)))),-1);
if(!x2000.valid){
continue;
}
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal((((gconst1*r22*x1999))+((r21*r22*x1998))+(((-1.0)*r22*x1995))+((r22*x1996)))),IkReal((((x1996*x1997))+(((-1.0)*x1995*x1997))+((r21*x1990*x1999))+((gconst1*x1991*x1998))+((x1994*x1995))+(((-1.0)*gconst1*x1993*x1998))+(((-1.0)*r21*x1992*x1999))+(((-1.0)*x1994*x1996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2000.value)))+(x2001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2002=IKsin(j4);
IkReal x2003=IKcos(j4);
IkReal x2004=(gconst1*sj3);
IkReal x2005=(cj2*sj0);
IkReal x2006=(cj3*gconst1);
IkReal x2007=(sj1*sj2);
IkReal x2008=(cj3*gconst2);
IkReal x2009=(cj1*cj2);
IkReal x2010=(gconst2*sj3);
IkReal x2011=(cj2*sj1);
IkReal x2012=((1.0)*cj0);
IkReal x2013=(cj1*sj2);
IkReal x2014=((1.0)*x2003);
IkReal x2015=((1.0)*x2002);
IkReal x2016=(gconst1*x2002);
IkReal x2017=(cj3*x2002);
IkReal x2018=(x2003*x2010);
evalcond[0]=((((-1.0)*gconst2*r20*x2015))+((r21*x2016))+(((-1.0)*r22*x2014)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x2015))+((r01*x2016))+(((-1.0)*r02*x2014)));
evalcond[2]=((((-1.0)*x2012))+(((-1.0)*r12*x2014))+(((-1.0)*gconst2*r10*x2015))+((r11*x2016)));
evalcond[3]=(x2011+x2013+(((-1.0)*r20*x2008*x2014))+((r22*x2017))+((r21*x2003*x2006))+((r20*x2004))+((r21*x2010)));
evalcond[4]=(((r21*x2008))+((r20*x2018))+(((-1.0)*r22*sj3*x2015))+x2007+((r20*x2006))+(((-1.0)*x2009))+(((-1.0)*r21*x2004*x2014)));
evalcond[5]=((((-1.0)*r02*sj3*x2015))+((r01*x2008))+((r00*x2006))+((r00*x2018))+(((-1.0)*r01*x2004*x2014))+((cj0*x2013))+((cj0*x2011)));
evalcond[6]=(((r00*x2004))+(((-1.0)*x2007*x2012))+((r01*x2010))+((cj0*x2009))+((r02*x2017))+((r01*x2003*x2006))+(((-1.0)*r00*x2008*x2014)));
evalcond[7]=(((r11*x2008))+((sj0*x2013))+(((-1.0)*r12*sj3*x2015))+((r10*x2006))+((r10*x2018))+(((-1.0)*r11*x2004*x2014))+((sj1*x2005)));
evalcond[8]=(((r10*x2004))+(((-1.0)*r10*x2008*x2014))+(((-1.0)*sj0*x2007))+((r12*x2017))+((r11*x2010))+((r11*x2003*x2006))+((cj1*x2005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2019=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x2019.valid){
continue;
}
CheckValue<IkReal> x2020 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2019.value)))+(x2020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2021=IKsin(j4);
IkReal x2022=IKcos(j4);
IkReal x2023=(gconst1*sj3);
IkReal x2024=(cj2*sj0);
IkReal x2025=(cj3*gconst1);
IkReal x2026=(sj1*sj2);
IkReal x2027=(cj3*gconst2);
IkReal x2028=(cj1*cj2);
IkReal x2029=(gconst2*sj3);
IkReal x2030=(cj2*sj1);
IkReal x2031=((1.0)*cj0);
IkReal x2032=(cj1*sj2);
IkReal x2033=((1.0)*x2022);
IkReal x2034=((1.0)*x2021);
IkReal x2035=(gconst1*x2021);
IkReal x2036=(cj3*x2021);
IkReal x2037=(x2022*x2029);
evalcond[0]=(((r21*x2035))+(((-1.0)*r22*x2033))+(((-1.0)*gconst2*r20*x2034)));
evalcond[1]=(sj0+((r01*x2035))+(((-1.0)*gconst2*r00*x2034))+(((-1.0)*r02*x2033)));
evalcond[2]=((((-1.0)*gconst2*r10*x2034))+(((-1.0)*r12*x2033))+(((-1.0)*x2031))+((r11*x2035)));
evalcond[3]=(((r22*x2036))+x2032+x2030+((r21*x2022*x2025))+((r20*x2023))+((r21*x2029))+(((-1.0)*r20*x2027*x2033)));
evalcond[4]=((((-1.0)*r22*sj3*x2034))+x2026+(((-1.0)*r21*x2023*x2033))+(((-1.0)*x2028))+((r20*x2037))+((r20*x2025))+((r21*x2027)));
evalcond[5]=(((r01*x2027))+((r00*x2025))+((r00*x2037))+(((-1.0)*r01*x2023*x2033))+(((-1.0)*r02*sj3*x2034))+((cj0*x2032))+((cj0*x2030)));
evalcond[6]=(((r01*x2029))+((r00*x2023))+((r01*x2022*x2025))+((cj0*x2028))+((r02*x2036))+(((-1.0)*x2026*x2031))+(((-1.0)*r00*x2027*x2033)));
evalcond[7]=((((-1.0)*r12*sj3*x2034))+((r10*x2025))+((r10*x2037))+((r11*x2027))+((sj1*x2024))+((sj0*x2032))+(((-1.0)*r11*x2023*x2033)));
evalcond[8]=(((r10*x2023))+((r11*x2022*x2025))+((r11*x2029))+((r12*x2036))+(((-1.0)*sj0*x2026))+(((-1.0)*r10*x2027*x2033))+((cj1*x2024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2038=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x2038.valid){
continue;
}
CheckValue<IkReal> x2039 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2038.value)))+(x2039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2040=IKsin(j4);
IkReal x2041=IKcos(j4);
IkReal x2042=(gconst1*sj3);
IkReal x2043=(cj2*sj0);
IkReal x2044=(cj3*gconst1);
IkReal x2045=(sj1*sj2);
IkReal x2046=(cj3*gconst2);
IkReal x2047=(cj1*cj2);
IkReal x2048=(gconst2*sj3);
IkReal x2049=(cj2*sj1);
IkReal x2050=((1.0)*cj0);
IkReal x2051=(cj1*sj2);
IkReal x2052=((1.0)*x2041);
IkReal x2053=((1.0)*x2040);
IkReal x2054=(gconst1*x2040);
IkReal x2055=(cj3*x2040);
IkReal x2056=(x2041*x2048);
evalcond[0]=((((-1.0)*r22*x2052))+(((-1.0)*gconst2*r20*x2053))+((r21*x2054)));
evalcond[1]=(((r01*x2054))+sj0+(((-1.0)*r02*x2052))+(((-1.0)*gconst2*r00*x2053)));
evalcond[2]=((((-1.0)*gconst2*r10*x2053))+((r11*x2054))+(((-1.0)*r12*x2052))+(((-1.0)*x2050)));
evalcond[3]=(((r21*x2048))+((r22*x2055))+x2049+x2051+((r20*x2042))+(((-1.0)*r20*x2046*x2052))+((r21*x2041*x2044)));
evalcond[4]=(((r21*x2046))+x2045+((r20*x2044))+(((-1.0)*r21*x2042*x2052))+(((-1.0)*x2047))+(((-1.0)*r22*sj3*x2053))+((r20*x2056)));
evalcond[5]=(((cj0*x2049))+(((-1.0)*r02*sj3*x2053))+((cj0*x2051))+((r01*x2046))+((r00*x2044))+(((-1.0)*r01*x2042*x2052))+((r00*x2056)));
evalcond[6]=(((cj0*x2047))+(((-1.0)*x2045*x2050))+((r01*x2041*x2044))+((r02*x2055))+((r01*x2048))+((r00*x2042))+(((-1.0)*r00*x2046*x2052)));
evalcond[7]=(((r10*x2056))+(((-1.0)*r11*x2042*x2052))+((r11*x2046))+((sj0*x2051))+((sj1*x2043))+((r10*x2044))+(((-1.0)*r12*sj3*x2053)));
evalcond[8]=(((r12*x2055))+(((-1.0)*sj0*x2045))+((r11*x2048))+(((-1.0)*r10*x2046*x2052))+((r11*x2041*x2044))+((r10*x2042))+((cj1*x2043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2057=((-1.0)*r21);
IkReal x2059 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2059)==0){
continue;
}
IkReal x2058=pow(x2059,-0.5);
CheckValue<IkReal> x2060 = IKatan2WithCheck(IkReal(x2057),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2060.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2060.value))));
IkReal gconst4=(x2057*x2058);
IkReal gconst5=((1.0)*r20*x2058);
CheckValue<IkReal> x2061 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2061.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2061.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2062=((-1.0)*r21);
CheckValue<IkReal> x2065 = IKatan2WithCheck(IkReal(x2062),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2065.valid){
continue;
}
IkReal x2063=((1.0)*(x2065.value));
IkReal x2064=x2058;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2063)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2063)));
IkReal gconst4=(x2062*x2064);
IkReal gconst5=((1.0)*r20*x2064);
IkReal x2066=r22*r22;
IkReal x2067=((1.0)*x2066);
CheckValue<IkReal> x2071=IKPowWithIntegerCheck(((-1.0)+x2066),-1);
if(!x2071.valid){
continue;
}
IkReal x2068=x2071.value;
if((((1.0)+(((-1.0)*x2067)))) < -0.00001)
continue;
IkReal x2069=IKsqrt(((1.0)+(((-1.0)*x2067))));
IkReal x2070=(sj0*x2068*x2069);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2070+(((-1.0)*x2067*x2070))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2072=((-1.0)*r21);
CheckValue<IkReal> x2075 = IKatan2WithCheck(IkReal(x2072),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2075.valid){
continue;
}
IkReal x2073=((1.0)*(x2075.value));
IkReal x2074=x2058;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2073)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2073)));
IkReal gconst4=(x2072*x2074);
IkReal gconst5=((1.0)*r20*x2074);
IkReal x2076=r22*r22;
IkReal x2077=((1.0)*x2076);
CheckValue<IkReal> x2081=IKPowWithIntegerCheck(((-1.0)+x2076),-1);
if(!x2081.valid){
continue;
}
IkReal x2078=x2081.value;
if((((1.0)+(((-1.0)*x2077)))) < -0.00001)
continue;
IkReal x2079=IKsqrt(((1.0)+(((-1.0)*x2077))));
IkReal x2080=(cj0*x2078*x2079);
j4eval[0]=((IKabs((x2080+(((-1.0)*x2077*x2080)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2082=((-1.0)*r21);
CheckValue<IkReal> x2085 = IKatan2WithCheck(IkReal(x2082),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2085.valid){
continue;
}
IkReal x2083=((1.0)*(x2085.value));
IkReal x2084=x2058;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2083)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2083)));
IkReal gconst4=(x2082*x2084);
IkReal gconst5=((1.0)*r20*x2084);
IkReal x2086=r22*r22;
IkReal x2087=(cj0*r02);
IkReal x2088=(r12*sj0);
CheckValue<IkReal> x2092=IKPowWithIntegerCheck(((-1.0)+x2086),-1);
if(!x2092.valid){
continue;
}
IkReal x2089=x2092.value;
if((((1.0)+(((-1.0)*x2086)))) < -0.00001)
continue;
IkReal x2090=IKsqrt(((1.0)+(((-1.0)*x2086))));
IkReal x2091=((1.0)*r22*x2089*x2090);
j4eval[0]=0;
j4eval[1]=((IKabs((x2088+x2087)))+(IKabs(((((-1.0)*x2088*x2091))+(((-1.0)*x2087*x2091))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2093=((1.0)*gconst5);
CheckValue<IkReal> x2094=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2093))+(((-1.0)*gconst4*r20)))),-1);
if(!x2094.valid){
continue;
}
CheckValue<IkReal> x2095 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst4*r01))+(((-1.0)*cj0*r00*x2093))+((gconst4*r11*sj0))+(((-1.0)*r10*sj0*x2093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2094.value)))+(x2095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2096=IKsin(j4);
IkReal x2097=IKcos(j4);
IkReal x2098=(gconst4*r11);
IkReal x2099=(cj2*sj0);
IkReal x2100=(sj1*sj2);
IkReal x2101=(gconst4*sj3);
IkReal x2102=(gconst5*r10);
IkReal x2103=(cj1*cj2);
IkReal x2104=(gconst4*r01);
IkReal x2105=(cj2*sj1);
IkReal x2106=(gconst4*r21);
IkReal x2107=(gconst5*r00);
IkReal x2108=(gconst5*sj3);
IkReal x2109=(cj3*gconst5);
IkReal x2110=(cj3*gconst4);
IkReal x2111=(cj1*sj2);
IkReal x2112=((1.0)*cj0);
IkReal x2113=((1.0)*x2097);
IkReal x2114=((1.0)*x2096);
IkReal x2115=(cj3*x2096);
IkReal x2116=(cj3*x2097);
IkReal x2117=(x2097*x2108);
evalcond[0]=(((x2096*x2106))+(((-1.0)*r22*x2113))+(((-1.0)*gconst5*r20*x2114)));
evalcond[1]=((((-1.0)*x2107*x2114))+sj0+((x2096*x2104))+(((-1.0)*r02*x2113)));
evalcond[2]=((((-1.0)*x2102*x2114))+((x2096*x2098))+(((-1.0)*x2112))+(((-1.0)*r12*x2113)));
evalcond[3]=(((r20*x2101))+((r21*x2108))+x2111+x2105+((x2106*x2116))+(((-1.0)*r20*x2109*x2113))+((r22*x2115)));
evalcond[4]=(((r21*x2109))+x2100+((r20*x2117))+((r20*x2110))+(((-1.0)*r21*x2101*x2113))+(((-1.0)*x2103))+(((-1.0)*r22*sj3*x2114)));
evalcond[5]=(((cj0*x2105))+(((-1.0)*r02*sj3*x2114))+((sj3*x2097*x2107))+((r00*x2110))+((cj0*x2111))+(((-1.0)*r01*x2101*x2113))+((r01*x2109)));
evalcond[6]=((((-1.0)*cj3*x2107*x2113))+((cj0*x2103))+(((-1.0)*x2100*x2112))+((r00*x2101))+((r01*x2108))+((r02*x2115))+((x2104*x2116)));
evalcond[7]=(((sj0*x2111))+((sj1*x2099))+((r11*x2109))+((sj3*x2097*x2102))+(((-1.0)*sj3*x2098*x2113))+(((-1.0)*r12*sj3*x2114))+((r10*x2110)));
evalcond[8]=(((r12*x2115))+((cj1*x2099))+(((-1.0)*sj0*x2100))+((r11*x2108))+(((-1.0)*cj3*x2102*x2113))+((r10*x2101))+((x2098*x2116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2118=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x2118.valid){
continue;
}
CheckValue<IkReal> x2119 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2118.value)))+(x2119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2120=IKsin(j4);
IkReal x2121=IKcos(j4);
IkReal x2122=(gconst4*r11);
IkReal x2123=(cj2*sj0);
IkReal x2124=(sj1*sj2);
IkReal x2125=(gconst4*sj3);
IkReal x2126=(gconst5*r10);
IkReal x2127=(cj1*cj2);
IkReal x2128=(gconst4*r01);
IkReal x2129=(cj2*sj1);
IkReal x2130=(gconst4*r21);
IkReal x2131=(gconst5*r00);
IkReal x2132=(gconst5*sj3);
IkReal x2133=(cj3*gconst5);
IkReal x2134=(cj3*gconst4);
IkReal x2135=(cj1*sj2);
IkReal x2136=((1.0)*cj0);
IkReal x2137=((1.0)*x2121);
IkReal x2138=((1.0)*x2120);
IkReal x2139=(cj3*x2120);
IkReal x2140=(cj3*x2121);
IkReal x2141=(x2121*x2132);
evalcond[0]=(((x2120*x2130))+(((-1.0)*r22*x2137))+(((-1.0)*gconst5*r20*x2138)));
evalcond[1]=(sj0+((x2120*x2128))+(((-1.0)*x2131*x2138))+(((-1.0)*r02*x2137)));
evalcond[2]=((((-1.0)*x2136))+(((-1.0)*r12*x2137))+((x2120*x2122))+(((-1.0)*x2126*x2138)));
evalcond[3]=(((r21*x2132))+((x2130*x2140))+((r20*x2125))+x2129+x2135+(((-1.0)*r20*x2133*x2137))+((r22*x2139)));
evalcond[4]=(((r21*x2133))+((r20*x2141))+x2124+(((-1.0)*x2127))+(((-1.0)*r22*sj3*x2138))+(((-1.0)*r21*x2125*x2137))+((r20*x2134)));
evalcond[5]=((((-1.0)*r01*x2125*x2137))+((cj0*x2135))+((sj3*x2121*x2131))+((r01*x2133))+((r00*x2134))+(((-1.0)*r02*sj3*x2138))+((cj0*x2129)));
evalcond[6]=((((-1.0)*cj3*x2131*x2137))+((r02*x2139))+((x2128*x2140))+(((-1.0)*x2124*x2136))+((r01*x2132))+((r00*x2125))+((cj0*x2127)));
evalcond[7]=((((-1.0)*sj3*x2122*x2137))+((r11*x2133))+((sj1*x2123))+((r10*x2134))+((sj0*x2135))+((sj3*x2121*x2126))+(((-1.0)*r12*sj3*x2138)));
evalcond[8]=(((r12*x2139))+((x2122*x2140))+(((-1.0)*sj0*x2124))+((r10*x2125))+((r11*x2132))+((cj1*x2123))+(((-1.0)*cj3*x2126*x2137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2142=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x2142.valid){
continue;
}
CheckValue<IkReal> x2143 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2142.value)))+(x2143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2144=IKsin(j4);
IkReal x2145=IKcos(j4);
IkReal x2146=(gconst4*r11);
IkReal x2147=(cj2*sj0);
IkReal x2148=(sj1*sj2);
IkReal x2149=(gconst4*sj3);
IkReal x2150=(gconst5*r10);
IkReal x2151=(cj1*cj2);
IkReal x2152=(gconst4*r01);
IkReal x2153=(cj2*sj1);
IkReal x2154=(gconst4*r21);
IkReal x2155=(gconst5*r00);
IkReal x2156=(gconst5*sj3);
IkReal x2157=(cj3*gconst5);
IkReal x2158=(cj3*gconst4);
IkReal x2159=(cj1*sj2);
IkReal x2160=((1.0)*cj0);
IkReal x2161=((1.0)*x2145);
IkReal x2162=((1.0)*x2144);
IkReal x2163=(cj3*x2144);
IkReal x2164=(cj3*x2145);
IkReal x2165=(x2145*x2156);
evalcond[0]=(((x2144*x2154))+(((-1.0)*r22*x2161))+(((-1.0)*gconst5*r20*x2162)));
evalcond[1]=((((-1.0)*x2155*x2162))+sj0+((x2144*x2152))+(((-1.0)*r02*x2161)));
evalcond[2]=((((-1.0)*x2150*x2162))+((x2144*x2146))+(((-1.0)*x2160))+(((-1.0)*r12*x2161)));
evalcond[3]=(((r20*x2149))+x2153+x2159+(((-1.0)*r20*x2157*x2161))+((x2154*x2164))+((r22*x2163))+((r21*x2156)));
evalcond[4]=((((-1.0)*r22*sj3*x2162))+(((-1.0)*r21*x2149*x2161))+((r20*x2158))+x2148+((r20*x2165))+((r21*x2157))+(((-1.0)*x2151)));
evalcond[5]=(((sj3*x2145*x2155))+(((-1.0)*r02*sj3*x2162))+((cj0*x2153))+((cj0*x2159))+(((-1.0)*r01*x2149*x2161))+((r00*x2158))+((r01*x2157)));
evalcond[6]=((((-1.0)*cj3*x2155*x2161))+((cj0*x2151))+((r02*x2163))+((x2152*x2164))+((r00*x2149))+((r01*x2156))+(((-1.0)*x2148*x2160)));
evalcond[7]=(((sj3*x2145*x2150))+(((-1.0)*sj3*x2146*x2161))+(((-1.0)*r12*sj3*x2162))+((sj0*x2159))+((sj1*x2147))+((r10*x2158))+((r11*x2157)));
evalcond[8]=(((cj1*x2147))+((r12*x2163))+((x2146*x2164))+((r10*x2149))+(((-1.0)*cj3*x2150*x2161))+(((-1.0)*sj0*x2148))+((r11*x2156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2167 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2167)==0){
continue;
}
IkReal x2166=pow(x2167,-0.5);
CheckValue<IkReal> x2168 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2168.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2168.value));
IkReal gconst7=((-1.0)*r01*x2166);
IkReal gconst8=(r00*x2166);
CheckValue<IkReal> x2169 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2169.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2169.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2172 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2172.valid){
continue;
}
IkReal x2170=((-1.0)*(x2172.value));
IkReal x2171=x2166;
sj5=gconst7;
cj5=gconst8;
j5=x2170;
IkReal gconst6=x2170;
IkReal gconst7=((-1.0)*r01*x2171);
IkReal gconst8=(r00*x2171);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2173=((1.0)*gconst8);
CheckValue<IkReal> x2174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2173))+(((-1.0)*gconst7*r20)))),-1);
if(!x2174.valid){
continue;
}
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst7*r01))+((gconst7*r11*sj0))+(((-1.0)*cj0*r00*x2173))+(((-1.0)*r10*sj0*x2173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2174.value)))+(x2175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2176=IKsin(j4);
IkReal x2177=IKcos(j4);
IkReal x2178=(gconst7*sj3);
IkReal x2179=(cj3*gconst8);
IkReal x2180=(cj2*sj0);
IkReal x2181=(cj3*gconst7);
IkReal x2182=(sj1*sj2);
IkReal x2183=(cj1*cj2);
IkReal x2184=(cj2*sj1);
IkReal x2185=((1.0)*cj0);
IkReal x2186=(gconst8*sj3);
IkReal x2187=(cj1*sj2);
IkReal x2188=((1.0)*x2177);
IkReal x2189=((1.0)*x2176);
IkReal x2190=(cj3*x2176);
IkReal x2191=(gconst7*x2176);
IkReal x2192=(x2177*x2186);
evalcond[0]=((((-1.0)*r22*x2188))+((r21*x2191))+(((-1.0)*gconst8*r20*x2189)));
evalcond[1]=(sj0+(((-1.0)*gconst8*r00*x2189))+(((-1.0)*r02*x2188))+((r01*x2191)));
evalcond[2]=((((-1.0)*gconst8*r10*x2189))+(((-1.0)*x2185))+((r11*x2191))+(((-1.0)*r12*x2188)));
evalcond[3]=(((r22*x2190))+x2187+x2184+((r21*x2177*x2181))+((r21*x2186))+((r20*x2178))+(((-1.0)*r20*x2179*x2188)));
evalcond[4]=(((r21*x2179))+(((-1.0)*r22*sj3*x2189))+x2182+(((-1.0)*x2183))+((r20*x2181))+((r20*x2192))+(((-1.0)*r21*x2178*x2188)));
evalcond[5]=(((r01*x2179))+(((-1.0)*r02*sj3*x2189))+(((-1.0)*r01*x2178*x2188))+((cj0*x2187))+((cj0*x2184))+((r00*x2192))+((r00*x2181)));
evalcond[6]=(((r00*x2178))+((cj0*x2183))+((r01*x2177*x2181))+(((-1.0)*x2182*x2185))+((r02*x2190))+((r01*x2186))+(((-1.0)*r00*x2179*x2188)));
evalcond[7]=(((r11*x2179))+(((-1.0)*r12*sj3*x2189))+(((-1.0)*r11*x2178*x2188))+((sj0*x2187))+((sj1*x2180))+((r10*x2192))+((r10*x2181)));
evalcond[8]=((((-1.0)*r10*x2179*x2188))+((cj1*x2180))+((r11*x2177*x2181))+((r10*x2178))+((r12*x2190))+((r11*x2186))+(((-1.0)*sj0*x2182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
CheckValue<IkReal> x2194=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x2194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2193.value)+(((1.5707963267949)*(x2194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2195=IKsin(j4);
IkReal x2196=IKcos(j4);
IkReal x2197=(gconst7*sj3);
IkReal x2198=(cj3*gconst8);
IkReal x2199=(cj2*sj0);
IkReal x2200=(cj3*gconst7);
IkReal x2201=(sj1*sj2);
IkReal x2202=(cj1*cj2);
IkReal x2203=(cj2*sj1);
IkReal x2204=((1.0)*cj0);
IkReal x2205=(gconst8*sj3);
IkReal x2206=(cj1*sj2);
IkReal x2207=((1.0)*x2196);
IkReal x2208=((1.0)*x2195);
IkReal x2209=(cj3*x2195);
IkReal x2210=(gconst7*x2195);
IkReal x2211=(x2196*x2205);
evalcond[0]=((((-1.0)*gconst8*r20*x2208))+(((-1.0)*r22*x2207))+((r21*x2210)));
evalcond[1]=(((r01*x2210))+sj0+(((-1.0)*gconst8*r00*x2208))+(((-1.0)*r02*x2207)));
evalcond[2]=((((-1.0)*gconst8*r10*x2208))+(((-1.0)*x2204))+(((-1.0)*r12*x2207))+((r11*x2210)));
evalcond[3]=(((r21*x2196*x2200))+x2203+x2206+(((-1.0)*r20*x2198*x2207))+((r20*x2197))+((r22*x2209))+((r21*x2205)));
evalcond[4]=((((-1.0)*x2202))+((r20*x2211))+x2201+((r20*x2200))+(((-1.0)*r21*x2197*x2207))+((r21*x2198))+(((-1.0)*r22*sj3*x2208)));
evalcond[5]=(((r00*x2200))+((r00*x2211))+(((-1.0)*r01*x2197*x2207))+(((-1.0)*r02*sj3*x2208))+((cj0*x2206))+((cj0*x2203))+((r01*x2198)));
evalcond[6]=(((r02*x2209))+(((-1.0)*r00*x2198*x2207))+((r01*x2205))+((cj0*x2202))+(((-1.0)*x2201*x2204))+((r00*x2197))+((r01*x2196*x2200)));
evalcond[7]=((((-1.0)*r11*x2197*x2207))+((sj1*x2199))+(((-1.0)*r12*sj3*x2208))+((r10*x2200))+((r11*x2198))+((r10*x2211))+((sj0*x2206)));
evalcond[8]=(((cj1*x2199))+((r12*x2209))+((r11*x2205))+(((-1.0)*r10*x2198*x2207))+((r11*x2196*x2200))+((r10*x2197))+(((-1.0)*sj0*x2201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2213 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2213)==0){
continue;
}
IkReal x2212=pow(x2213,-0.5);
CheckValue<IkReal> x2214 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2214.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2214.value))));
IkReal gconst10=((1.0)*r01*x2212);
IkReal gconst11=((-1.0)*r00*x2212);
CheckValue<IkReal> x2215 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2215.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2215.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2218 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2218.valid){
continue;
}
IkReal x2216=((1.0)*(x2218.value));
IkReal x2217=x2212;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2216)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2216)));
IkReal gconst10=((1.0)*r01*x2217);
IkReal gconst11=((-1.0)*r00*x2217);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2221 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
IkReal x2219=((1.0)*(x2221.value));
IkReal x2220=x2212;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2219)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2219)));
IkReal gconst10=((1.0)*r01*x2220);
IkReal gconst11=((-1.0)*r00*x2220);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2224 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2224.valid){
continue;
}
IkReal x2222=((1.0)*(x2224.value));
IkReal x2223=x2212;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2222)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2222)));
IkReal gconst10=((1.0)*r01*x2223);
IkReal gconst11=((-1.0)*r00*x2223);
IkReal x2225=r02*r02;
IkReal x2226=(r12*sj0);
IkReal x2227=x2212;
IkReal x2228=(cj0*x2227);
j4eval[0]=((IKabs((x2226+((cj0*r02)))))+(IKabs((((x2225*x2228))+((r02*x2226*x2227))+(((-1.0)*x2228))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2229=((1.0)*gconst11);
CheckValue<IkReal> x2230 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2229))+(((-1.0)*cj0*r00*x2229))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2230.valid){
continue;
}
CheckValue<IkReal> x2231=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2229))+(((-1.0)*gconst10*r20)))),-1);
if(!x2231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2230.value)+(((1.5707963267949)*(x2231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2232=IKsin(j4);
IkReal x2233=IKcos(j4);
IkReal x2234=(gconst10*sj3);
IkReal x2235=(cj3*r10);
IkReal x2236=(gconst11*r20);
IkReal x2237=(gconst11*sj3);
IkReal x2238=(cj3*gconst11);
IkReal x2239=(sj1*sj2);
IkReal x2240=(cj1*cj2);
IkReal x2241=(cj2*sj1);
IkReal x2242=(cj1*sj2);
IkReal x2243=(cj3*gconst10);
IkReal x2244=((1.0)*cj0);
IkReal x2245=((1.0)*x2233);
IkReal x2246=((1.0)*x2232);
IkReal x2247=(cj3*x2232);
IkReal x2248=(gconst10*x2232);
IkReal x2249=(x2233*x2243);
evalcond[0]=((((-1.0)*r22*x2245))+(((-1.0)*x2236*x2246))+((r21*x2248)));
evalcond[1]=(sj0+(((-1.0)*r02*x2245))+(((-1.0)*gconst11*r00*x2246))+((r01*x2248)));
evalcond[2]=((((-1.0)*gconst11*r10*x2246))+((r11*x2248))+(((-1.0)*x2244))+(((-1.0)*r12*x2245)));
evalcond[3]=(x2241+x2242+((r21*x2237))+((r20*x2234))+((r21*x2249))+(((-1.0)*cj3*x2236*x2245))+((r22*x2247)));
evalcond[4]=(x2239+(((-1.0)*x2240))+((r21*x2238))+((r20*x2243))+(((-1.0)*r22*sj3*x2246))+((sj3*x2233*x2236))+(((-1.0)*r21*x2234*x2245)));
evalcond[5]=((((-1.0)*r01*x2234*x2245))+(((-1.0)*r02*sj3*x2246))+((r00*x2243))+((r00*x2233*x2237))+((r01*x2238))+((cj0*x2242))+((cj0*x2241)));
evalcond[6]=(((r01*x2249))+(((-1.0)*r00*x2238*x2245))+(((-1.0)*x2239*x2244))+((r01*x2237))+((r00*x2234))+((r02*x2247))+((cj0*x2240)));
evalcond[7]=((((-1.0)*r11*x2234*x2245))+(((-1.0)*r12*sj3*x2246))+((gconst10*x2235))+((sj0*x2242))+((sj0*x2241))+((r11*x2238))+((r10*x2233*x2237)));
evalcond[8]=(((r11*x2249))+((r10*x2234))+((sj0*x2240))+(((-1.0)*sj0*x2239))+(((-1.0)*gconst11*x2235*x2245))+((r11*x2237))+((r12*x2247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
CheckValue<IkReal> x2251=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x2251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2250.value)+(((1.5707963267949)*(x2251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2252=IKsin(j4);
IkReal x2253=IKcos(j4);
IkReal x2254=(gconst10*sj3);
IkReal x2255=(cj3*r10);
IkReal x2256=(gconst11*r20);
IkReal x2257=(gconst11*sj3);
IkReal x2258=(cj3*gconst11);
IkReal x2259=(sj1*sj2);
IkReal x2260=(cj1*cj2);
IkReal x2261=(cj2*sj1);
IkReal x2262=(cj1*sj2);
IkReal x2263=(cj3*gconst10);
IkReal x2264=((1.0)*cj0);
IkReal x2265=((1.0)*x2253);
IkReal x2266=((1.0)*x2252);
IkReal x2267=(cj3*x2252);
IkReal x2268=(gconst10*x2252);
IkReal x2269=(x2253*x2263);
evalcond[0]=((((-1.0)*x2256*x2266))+((r21*x2268))+(((-1.0)*r22*x2265)));
evalcond[1]=(((r01*x2268))+sj0+(((-1.0)*r02*x2265))+(((-1.0)*gconst11*r00*x2266)));
evalcond[2]=(((r11*x2268))+(((-1.0)*gconst11*r10*x2266))+(((-1.0)*x2264))+(((-1.0)*r12*x2265)));
evalcond[3]=(x2262+x2261+((r21*x2269))+((r22*x2267))+((r20*x2254))+((r21*x2257))+(((-1.0)*cj3*x2256*x2265)));
evalcond[4]=(((sj3*x2253*x2256))+x2259+(((-1.0)*r21*x2254*x2265))+((r20*x2263))+(((-1.0)*r22*sj3*x2266))+((r21*x2258))+(((-1.0)*x2260)));
evalcond[5]=(((r00*x2263))+(((-1.0)*r02*sj3*x2266))+((r00*x2253*x2257))+((cj0*x2262))+((cj0*x2261))+((r01*x2258))+(((-1.0)*r01*x2254*x2265)));
evalcond[6]=(((r01*x2269))+(((-1.0)*x2259*x2264))+((cj0*x2260))+((r02*x2267))+((r00*x2254))+((r01*x2257))+(((-1.0)*r00*x2258*x2265)));
evalcond[7]=((((-1.0)*r11*x2254*x2265))+((sj0*x2262))+((sj0*x2261))+(((-1.0)*r12*sj3*x2266))+((gconst10*x2255))+((r10*x2253*x2257))+((r11*x2258)));
evalcond[8]=(((r10*x2254))+((sj0*x2260))+(((-1.0)*gconst11*x2255*x2265))+((r11*x2269))+(((-1.0)*sj0*x2259))+((r12*x2267))+((r11*x2257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2270=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x2270.valid){
continue;
}
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2270.value)))+(x2271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2272=IKsin(j4);
IkReal x2273=IKcos(j4);
IkReal x2274=(gconst10*sj3);
IkReal x2275=(cj3*r10);
IkReal x2276=(gconst11*r20);
IkReal x2277=(gconst11*sj3);
IkReal x2278=(cj3*gconst11);
IkReal x2279=(sj1*sj2);
IkReal x2280=(cj1*cj2);
IkReal x2281=(cj2*sj1);
IkReal x2282=(cj1*sj2);
IkReal x2283=(cj3*gconst10);
IkReal x2284=((1.0)*cj0);
IkReal x2285=((1.0)*x2273);
IkReal x2286=((1.0)*x2272);
IkReal x2287=(cj3*x2272);
IkReal x2288=(gconst10*x2272);
IkReal x2289=(x2273*x2283);
evalcond[0]=((((-1.0)*x2276*x2286))+((r21*x2288))+(((-1.0)*r22*x2285)));
evalcond[1]=((((-1.0)*r02*x2285))+sj0+(((-1.0)*gconst11*r00*x2286))+((r01*x2288)));
evalcond[2]=(((r11*x2288))+(((-1.0)*x2284))+(((-1.0)*r12*x2285))+(((-1.0)*gconst11*r10*x2286)));
evalcond[3]=(((r21*x2277))+x2281+x2282+(((-1.0)*cj3*x2276*x2285))+((r21*x2289))+((r20*x2274))+((r22*x2287)));
evalcond[4]=((((-1.0)*r22*sj3*x2286))+((r21*x2278))+x2279+(((-1.0)*r21*x2274*x2285))+((r20*x2283))+(((-1.0)*x2280))+((sj3*x2273*x2276)));
evalcond[5]=(((cj0*x2282))+((cj0*x2281))+((r01*x2278))+(((-1.0)*r01*x2274*x2285))+((r00*x2273*x2277))+((r00*x2283))+(((-1.0)*r02*sj3*x2286)));
evalcond[6]=(((cj0*x2280))+((r01*x2277))+((r00*x2274))+(((-1.0)*r00*x2278*x2285))+(((-1.0)*x2279*x2284))+((r01*x2289))+((r02*x2287)));
evalcond[7]=(((gconst10*x2275))+(((-1.0)*r12*sj3*x2286))+(((-1.0)*r11*x2274*x2285))+((sj0*x2282))+((sj0*x2281))+((r11*x2278))+((r10*x2273*x2277)));
evalcond[8]=(((r11*x2289))+((r12*x2287))+((sj0*x2280))+((r10*x2274))+(((-1.0)*sj0*x2279))+((r11*x2277))+(((-1.0)*gconst11*x2275*x2285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2290=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2290;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2291=((1.0)*cj5);
IkReal x2292=((((-1.0)*r21*x2291))+(((-1.0)*r20*sj5)));
j4eval[0]=x2292;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2291)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2293=cj5*cj5;
IkReal x2294=(cj3*r01);
IkReal x2295=(cj5*sj5);
IkReal x2296=((1.0)*cj3);
IkReal x2297=(((r21*x2293*x2294))+(((-1.0)*r00*r20*x2293*x2296))+((cj3*r00*r21*x2295))+((r20*x2294*x2295))+(((-1.0)*r21*x2294))+(((-1.0)*r02*r22*x2296)));
j4eval[0]=x2297;
j4eval[1]=IKsign(x2297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2298=cj5*cj5;
IkReal x2299=(cj3*r20);
IkReal x2300=(r21*sj3);
IkReal x2301=((1.0)*cj3);
IkReal x2302=(r01*r21);
IkReal x2303=(r01*sj3);
IkReal x2304=(r00*sj5);
IkReal x2305=(cj5*r01*sj5);
IkReal x2306=((1.0)*x2298);
CheckValue<IkReal> x2307=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2301*x2302))+(((-1.0)*r02*r22*x2301))+((cj3*cj5*r21*x2304))+(((-1.0)*r00*x2299*x2306))+((cj3*x2298*x2302))+((x2299*x2305)))),-1);
if(!x2307.valid){
continue;
}
CheckValue<IkReal> x2308 = IKatan2WithCheck(IkReal((((cj5*r22*x2303))+((r22*sj3*x2304)))),IkReal((((x2300*x2305))+(((-1.0)*r00*x2300*x2306))+(((-1.0)*cj5*r20*sj3*x2304))+(((-1.0)*r20*x2303*x2306))+((r00*x2300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2307.value)))+(x2308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2309=IKsin(j4);
IkReal x2310=IKcos(j4);
IkReal x2311=(cj2*sj1);
IkReal x2312=(cj1*sj2);
IkReal x2313=(r11*sj5);
IkReal x2314=(cj5*r10);
IkReal x2315=(sj1*sj2);
IkReal x2316=(cj5*r01);
IkReal x2317=(cj5*r00);
IkReal x2318=(cj3*sj5);
IkReal x2319=(r21*sj5);
IkReal x2320=(cj1*cj2);
IkReal x2321=(cj5*sj3);
IkReal x2322=(sj3*sj5);
IkReal x2323=(r01*sj5);
IkReal x2324=(cj3*cj5);
IkReal x2325=(cj5*r20);
IkReal x2326=((1.0)*x2310);
IkReal x2327=((1.0)*x2309);
IkReal x2328=(cj3*x2310);
IkReal x2329=(sj3*x2310);
IkReal x2330=(cj3*x2309);
IkReal x2331=(x2312+x2311);
evalcond[0]=((((-1.0)*r22*x2326))+((x2309*x2319))+(((-1.0)*x2325*x2327)));
evalcond[1]=(((x2309*x2313))+(((-1.0)*r12*x2326))+(((-1.0)*x2314*x2327)));
evalcond[2]=((1.0)+((x2309*x2323))+(((-1.0)*x2317*x2327))+(((-1.0)*r02*x2326)));
evalcond[3]=((((-1.0)*cj3*x2317*x2326))+((r02*x2330))+((sj3*x2316))+((r01*x2310*x2318))+((r00*x2322)));
evalcond[4]=(((cj3*x2316))+((x2317*x2329))+(((-1.0)*r01*x2322*x2326))+((r00*x2318))+(((-1.0)*r02*sj3*x2327)));
evalcond[5]=(x2331+((r21*x2321))+((r22*x2330))+((r21*x2310*x2318))+(((-1.0)*r20*x2324*x2326))+((r20*x2322)));
evalcond[6]=(((r10*x2318))+x2331+((r11*x2324))+(((-1.0)*sj3*x2313*x2326))+((x2314*x2329))+(((-1.0)*r12*sj3*x2327)));
evalcond[7]=(((r10*x2322))+(((-1.0)*x2315))+x2320+((r12*x2330))+((r11*x2321))+((x2313*x2328))+(((-1.0)*cj3*x2314*x2326)));
evalcond[8]=(x2315+((r21*x2324))+(((-1.0)*sj3*x2319*x2326))+((r20*x2318))+(((-1.0)*r22*sj3*x2327))+((r20*x2310*x2321))+(((-1.0)*x2320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2332=((1.0)*cj5);
CheckValue<IkReal> x2333 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2332))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2333.valid){
continue;
}
CheckValue<IkReal> x2334=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2332))+(((-1.0)*r20*sj5)))),-1);
if(!x2334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2333.value)+(((1.5707963267949)*(x2334.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2335=IKsin(j4);
IkReal x2336=IKcos(j4);
IkReal x2337=(cj2*sj1);
IkReal x2338=(cj1*sj2);
IkReal x2339=(r11*sj5);
IkReal x2340=(cj5*r10);
IkReal x2341=(sj1*sj2);
IkReal x2342=(cj5*r01);
IkReal x2343=(cj5*r00);
IkReal x2344=(cj3*sj5);
IkReal x2345=(r21*sj5);
IkReal x2346=(cj1*cj2);
IkReal x2347=(cj5*sj3);
IkReal x2348=(sj3*sj5);
IkReal x2349=(r01*sj5);
IkReal x2350=(cj3*cj5);
IkReal x2351=(cj5*r20);
IkReal x2352=((1.0)*x2336);
IkReal x2353=((1.0)*x2335);
IkReal x2354=(cj3*x2336);
IkReal x2355=(sj3*x2336);
IkReal x2356=(cj3*x2335);
IkReal x2357=(x2337+x2338);
evalcond[0]=(((x2335*x2345))+(((-1.0)*r22*x2352))+(((-1.0)*x2351*x2353)));
evalcond[1]=((((-1.0)*x2340*x2353))+((x2335*x2339))+(((-1.0)*r12*x2352)));
evalcond[2]=((1.0)+((x2335*x2349))+(((-1.0)*x2343*x2353))+(((-1.0)*r02*x2352)));
evalcond[3]=(((r00*x2348))+(((-1.0)*cj3*x2343*x2352))+((r01*x2336*x2344))+((sj3*x2342))+((r02*x2356)));
evalcond[4]=(((r00*x2344))+((cj3*x2342))+((x2343*x2355))+(((-1.0)*r01*x2348*x2352))+(((-1.0)*r02*sj3*x2353)));
evalcond[5]=(x2357+((r22*x2356))+((r20*x2348))+((r21*x2347))+(((-1.0)*r20*x2350*x2352))+((r21*x2336*x2344)));
evalcond[6]=((((-1.0)*sj3*x2339*x2352))+((r10*x2344))+x2357+((x2340*x2355))+((r11*x2350))+(((-1.0)*r12*sj3*x2353)));
evalcond[7]=(((r10*x2348))+x2346+(((-1.0)*x2341))+((r12*x2356))+((r11*x2347))+((x2339*x2354))+(((-1.0)*cj3*x2340*x2352)));
evalcond[8]=(((r20*x2336*x2347))+x2341+(((-1.0)*x2346))+((r20*x2344))+(((-1.0)*r22*sj3*x2353))+((r21*x2350))+(((-1.0)*sj3*x2345*x2352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2358 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2358.valid){
continue;
}
CheckValue<IkReal> x2359=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2358.value)+(((1.5707963267949)*(x2359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2360=IKsin(j4);
IkReal x2361=IKcos(j4);
IkReal x2362=(cj2*sj1);
IkReal x2363=(cj1*sj2);
IkReal x2364=(r11*sj5);
IkReal x2365=(cj5*r10);
IkReal x2366=(sj1*sj2);
IkReal x2367=(cj5*r01);
IkReal x2368=(cj5*r00);
IkReal x2369=(cj3*sj5);
IkReal x2370=(r21*sj5);
IkReal x2371=(cj1*cj2);
IkReal x2372=(cj5*sj3);
IkReal x2373=(sj3*sj5);
IkReal x2374=(r01*sj5);
IkReal x2375=(cj3*cj5);
IkReal x2376=(cj5*r20);
IkReal x2377=((1.0)*x2361);
IkReal x2378=((1.0)*x2360);
IkReal x2379=(cj3*x2361);
IkReal x2380=(sj3*x2361);
IkReal x2381=(cj3*x2360);
IkReal x2382=(x2363+x2362);
evalcond[0]=(((x2360*x2370))+(((-1.0)*x2376*x2378))+(((-1.0)*r22*x2377)));
evalcond[1]=(((x2360*x2364))+(((-1.0)*x2365*x2378))+(((-1.0)*r12*x2377)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2377))+(((-1.0)*x2368*x2378))+((x2360*x2374)));
evalcond[3]=(((r01*x2361*x2369))+(((-1.0)*cj3*x2368*x2377))+((sj3*x2367))+((r02*x2381))+((r00*x2373)));
evalcond[4]=((((-1.0)*r01*x2373*x2377))+(((-1.0)*r02*sj3*x2378))+((x2368*x2380))+((cj3*x2367))+((r00*x2369)));
evalcond[5]=(((r20*x2373))+x2382+(((-1.0)*r20*x2375*x2377))+((r21*x2361*x2369))+((r22*x2381))+((r21*x2372)));
evalcond[6]=(x2382+(((-1.0)*r12*sj3*x2378))+((x2365*x2380))+((r10*x2369))+(((-1.0)*sj3*x2364*x2377))+((r11*x2375)));
evalcond[7]=(x2371+((x2364*x2379))+((r10*x2373))+(((-1.0)*x2366))+(((-1.0)*cj3*x2365*x2377))+((r12*x2381))+((r11*x2372)));
evalcond[8]=(((r20*x2369))+(((-1.0)*r22*sj3*x2378))+x2366+(((-1.0)*x2371))+(((-1.0)*sj3*x2370*x2377))+((r20*x2361*x2372))+((r21*x2375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2383=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2383;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2383);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2384=((1.0)*cj5);
IkReal x2385=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2384)));
j4eval[0]=x2385;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2384))))));
j4eval[2]=IKsign(x2385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2386=cj5*cj5;
IkReal x2387=(cj3*r01);
IkReal x2388=(cj5*sj5);
IkReal x2389=((1.0)*cj3);
IkReal x2390=(((r21*x2386*x2387))+(((-1.0)*r21*x2387))+(((-1.0)*r02*r22*x2389))+(((-1.0)*r00*r20*x2386*x2389))+((cj3*r00*r21*x2388))+((r20*x2387*x2388)));
j4eval[0]=x2390;
j4eval[1]=IKsign(x2390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2391=cj5*cj5;
IkReal x2392=(cj3*r20);
IkReal x2393=(r21*sj3);
IkReal x2394=((1.0)*cj3);
IkReal x2395=(r01*r21);
IkReal x2396=(r01*sj3);
IkReal x2397=(r00*sj5);
IkReal x2398=(cj5*r01*sj5);
IkReal x2399=((1.0)*x2391);
CheckValue<IkReal> x2400 = IKatan2WithCheck(IkReal((((cj5*r22*x2396))+((r22*sj3*x2397)))),IkReal((((r00*x2393))+((x2393*x2398))+(((-1.0)*cj5*r20*sj3*x2397))+(((-1.0)*r20*x2396*x2399))+(((-1.0)*r00*x2393*x2399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2400.valid){
continue;
}
CheckValue<IkReal> x2401=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2392*x2399))+((x2392*x2398))+((cj3*x2391*x2395))+((cj3*cj5*r21*x2397))+(((-1.0)*r02*r22*x2394))+(((-1.0)*x2394*x2395)))),-1);
if(!x2401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2400.value)+(((1.5707963267949)*(x2401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2402=IKsin(j4);
IkReal x2403=IKcos(j4);
IkReal x2404=(sj1*sj2);
IkReal x2405=(r11*sj5);
IkReal x2406=(cj5*r10);
IkReal x2407=(cj5*r01);
IkReal x2408=(cj5*r00);
IkReal x2409=((1.0)*cj1);
IkReal x2410=(cj3*sj5);
IkReal x2411=(r21*sj5);
IkReal x2412=(cj5*sj3);
IkReal x2413=(sj3*sj5);
IkReal x2414=(cj2*sj1);
IkReal x2415=(r01*sj5);
IkReal x2416=(cj3*cj5);
IkReal x2417=(cj5*r20);
IkReal x2418=(cj2*x2409);
IkReal x2419=((1.0)*x2403);
IkReal x2420=((1.0)*x2402);
IkReal x2421=(cj3*x2403);
IkReal x2422=(sj3*x2403);
IkReal x2423=(cj3*x2402);
evalcond[0]=(((x2402*x2411))+(((-1.0)*x2417*x2420))+(((-1.0)*r22*x2419)));
evalcond[1]=((((-1.0)*x2406*x2420))+(((-1.0)*r12*x2419))+((x2402*x2405)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x2419))+((x2402*x2415))+(((-1.0)*x2408*x2420)));
evalcond[3]=(((r00*x2413))+((sj3*x2407))+(((-1.0)*cj3*x2408*x2419))+((r01*x2403*x2410))+((r02*x2423)));
evalcond[4]=((((-1.0)*r02*sj3*x2420))+((r00*x2410))+((cj3*x2407))+(((-1.0)*r01*x2413*x2419))+((x2408*x2422)));
evalcond[5]=(((r22*x2423))+(((-1.0)*r20*x2416*x2419))+x2414+((r21*x2412))+((r21*x2403*x2410))+((cj1*sj2))+((r20*x2413)));
evalcond[6]=(x2404+((r11*x2412))+((r10*x2413))+((x2405*x2421))+(((-1.0)*x2418))+((r12*x2423))+(((-1.0)*cj3*x2406*x2419)));
evalcond[7]=(x2404+((r21*x2416))+(((-1.0)*sj3*x2411*x2419))+(((-1.0)*r22*sj3*x2420))+(((-1.0)*x2418))+((r20*x2410))+((r20*x2403*x2412)));
evalcond[8]=((((-1.0)*sj3*x2405*x2419))+((r11*x2416))+((r10*x2410))+(((-1.0)*x2414))+(((-1.0)*sj2*x2409))+((x2406*x2422))+(((-1.0)*r12*sj3*x2420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2424=((1.0)*cj5);
CheckValue<IkReal> x2425 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2425.valid){
continue;
}
CheckValue<IkReal> x2426=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2424)))),-1);
if(!x2426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2425.value)+(((1.5707963267949)*(x2426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2427=IKsin(j4);
IkReal x2428=IKcos(j4);
IkReal x2429=(sj1*sj2);
IkReal x2430=(r11*sj5);
IkReal x2431=(cj5*r10);
IkReal x2432=(cj5*r01);
IkReal x2433=(cj5*r00);
IkReal x2434=((1.0)*cj1);
IkReal x2435=(cj3*sj5);
IkReal x2436=(r21*sj5);
IkReal x2437=(cj5*sj3);
IkReal x2438=(sj3*sj5);
IkReal x2439=(cj2*sj1);
IkReal x2440=(r01*sj5);
IkReal x2441=(cj3*cj5);
IkReal x2442=(cj5*r20);
IkReal x2443=(cj2*x2434);
IkReal x2444=((1.0)*x2428);
IkReal x2445=((1.0)*x2427);
IkReal x2446=(cj3*x2428);
IkReal x2447=(sj3*x2428);
IkReal x2448=(cj3*x2427);
evalcond[0]=((((-1.0)*r22*x2444))+((x2427*x2436))+(((-1.0)*x2442*x2445)));
evalcond[1]=((((-1.0)*x2431*x2445))+(((-1.0)*r12*x2444))+((x2427*x2430)));
evalcond[2]=((-1.0)+((x2427*x2440))+(((-1.0)*x2433*x2445))+(((-1.0)*r02*x2444)));
evalcond[3]=(((r02*x2448))+((r00*x2438))+((sj3*x2432))+(((-1.0)*cj3*x2433*x2444))+((r01*x2428*x2435)));
evalcond[4]=(((x2433*x2447))+(((-1.0)*r01*x2438*x2444))+((r00*x2435))+(((-1.0)*r02*sj3*x2445))+((cj3*x2432)));
evalcond[5]=(x2439+((r22*x2448))+((r20*x2438))+((cj1*sj2))+((r21*x2428*x2435))+((r21*x2437))+(((-1.0)*r20*x2441*x2444)));
evalcond[6]=(x2429+((r11*x2437))+(((-1.0)*cj3*x2431*x2444))+((x2430*x2446))+((r12*x2448))+(((-1.0)*x2443))+((r10*x2438)));
evalcond[7]=(x2429+((r20*x2435))+(((-1.0)*r22*sj3*x2445))+(((-1.0)*sj3*x2436*x2444))+(((-1.0)*x2443))+((r20*x2428*x2437))+((r21*x2441)));
evalcond[8]=((((-1.0)*x2439))+((x2431*x2447))+(((-1.0)*sj2*x2434))+(((-1.0)*r12*sj3*x2445))+((r11*x2441))+(((-1.0)*sj3*x2430*x2444))+((r10*x2435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2449=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2449.valid){
continue;
}
CheckValue<IkReal> x2450 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2449.value)))+(x2450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2451=IKsin(j4);
IkReal x2452=IKcos(j4);
IkReal x2453=(sj1*sj2);
IkReal x2454=(r11*sj5);
IkReal x2455=(cj5*r10);
IkReal x2456=(cj5*r01);
IkReal x2457=(cj5*r00);
IkReal x2458=((1.0)*cj1);
IkReal x2459=(cj3*sj5);
IkReal x2460=(r21*sj5);
IkReal x2461=(cj5*sj3);
IkReal x2462=(sj3*sj5);
IkReal x2463=(cj2*sj1);
IkReal x2464=(r01*sj5);
IkReal x2465=(cj3*cj5);
IkReal x2466=(cj5*r20);
IkReal x2467=(cj2*x2458);
IkReal x2468=((1.0)*x2452);
IkReal x2469=((1.0)*x2451);
IkReal x2470=(cj3*x2452);
IkReal x2471=(sj3*x2452);
IkReal x2472=(cj3*x2451);
evalcond[0]=((((-1.0)*r22*x2468))+(((-1.0)*x2466*x2469))+((x2451*x2460)));
evalcond[1]=((((-1.0)*r12*x2468))+(((-1.0)*x2455*x2469))+((x2451*x2454)));
evalcond[2]=((-1.0)+(((-1.0)*x2457*x2469))+((x2451*x2464))+(((-1.0)*r02*x2468)));
evalcond[3]=((((-1.0)*cj3*x2457*x2468))+((sj3*x2456))+((r02*x2472))+((r01*x2452*x2459))+((r00*x2462)));
evalcond[4]=((((-1.0)*r01*x2462*x2468))+((cj3*x2456))+((x2457*x2471))+((r00*x2459))+(((-1.0)*r02*sj3*x2469)));
evalcond[5]=(x2463+((r20*x2462))+((cj1*sj2))+((r21*x2461))+(((-1.0)*r20*x2465*x2468))+((r22*x2472))+((r21*x2452*x2459)));
evalcond[6]=(((r12*x2472))+x2453+((x2454*x2470))+((r11*x2461))+(((-1.0)*x2467))+((r10*x2462))+(((-1.0)*cj3*x2455*x2468)));
evalcond[7]=(x2453+((r20*x2452*x2461))+((r21*x2465))+(((-1.0)*r22*sj3*x2469))+(((-1.0)*x2467))+((r20*x2459))+(((-1.0)*sj3*x2460*x2468)));
evalcond[8]=(((r10*x2459))+(((-1.0)*x2463))+((r11*x2465))+(((-1.0)*sj3*x2454*x2468))+((x2455*x2471))+(((-1.0)*r12*sj3*x2469))+(((-1.0)*sj2*x2458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2474 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2474)==0){
continue;
}
IkReal x2473=pow(x2474,-0.5);
CheckValue<IkReal> x2475 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2475.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2475.value));
IkReal gconst13=((-1.0)*r11*x2473);
IkReal gconst14=(r10*x2473);
CheckValue<IkReal> x2476 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2476.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2476.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2479 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2479.valid){
continue;
}
IkReal x2477=((-1.0)*(x2479.value));
IkReal x2478=x2473;
sj5=gconst13;
cj5=gconst14;
j5=x2477;
IkReal gconst12=x2477;
IkReal gconst13=((-1.0)*r11*x2478);
IkReal gconst14=(r10*x2478);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2480=((1.0)*gconst14);
CheckValue<IkReal> x2481=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2480))+(((-1.0)*gconst13*r20)))),-1);
if(!x2481.valid){
continue;
}
CheckValue<IkReal> x2482 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2480))+(((-1.0)*cj0*r00*x2480))+((cj0*gconst13*r01))+((gconst13*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2481.value)))+(x2482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2483=IKsin(j4);
IkReal x2484=IKcos(j4);
IkReal x2485=((1.0)*r22);
IkReal x2486=((1.0)*r12);
IkReal x2487=(cj2*sj0);
IkReal x2488=(gconst13*sj3);
IkReal x2489=(gconst13*r01);
IkReal x2490=(sj1*sj2);
IkReal x2491=(gconst14*sj3);
IkReal x2492=(cj1*cj2);
IkReal x2493=((1.0)*gconst14);
IkReal x2494=(cj3*gconst13);
IkReal x2495=(cj3*gconst14);
IkReal x2496=(cj2*sj1);
IkReal x2497=((1.0)*r02);
IkReal x2498=(cj1*sj2);
IkReal x2499=((1.0)*cj0);
IkReal x2500=(sj3*x2483);
IkReal x2501=(cj3*x2484);
IkReal x2502=(cj3*x2483);
IkReal x2503=(gconst13*x2483);
IkReal x2504=((1.0)*x2484);
evalcond[0]=((((-1.0)*r20*x2483*x2493))+((r21*x2503))+(((-1.0)*x2484*x2485)));
evalcond[1]=(sj0+((x2483*x2489))+(((-1.0)*r00*x2483*x2493))+(((-1.0)*x2484*x2497)));
evalcond[2]=((((-1.0)*x2499))+(((-1.0)*r10*x2483*x2493))+(((-1.0)*x2484*x2486))+((r11*x2503)));
evalcond[3]=(((r21*x2484*x2494))+x2498+x2496+((r22*x2502))+(((-1.0)*r20*x2493*x2501))+((r21*x2491))+((r20*x2488)));
evalcond[4]=(x2490+(((-1.0)*x2492))+((r20*x2484*x2491))+(((-1.0)*r21*x2488*x2504))+(((-1.0)*x2485*x2500))+((r21*x2495))+((r20*x2494)));
evalcond[5]=(((r00*x2494))+(((-1.0)*r01*x2488*x2504))+(((-1.0)*x2497*x2500))+((r00*x2484*x2491))+((cj0*x2496))+((cj0*x2498))+((r01*x2495)));
evalcond[6]=(((r02*x2502))+(((-1.0)*x2490*x2499))+((x2489*x2501))+((cj0*x2492))+(((-1.0)*r00*x2493*x2501))+((r01*x2491))+((r00*x2488)));
evalcond[7]=((((-1.0)*r11*x2488*x2504))+(((-1.0)*x2486*x2500))+((r11*x2495))+((r10*x2484*x2491))+((r10*x2494))+((sj1*x2487))+((sj0*x2498)));
evalcond[8]=(((r11*x2484*x2494))+((cj1*x2487))+((r12*x2502))+((r11*x2491))+(((-1.0)*r10*x2493*x2501))+(((-1.0)*sj0*x2490))+((r10*x2488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2505 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2505.valid){
continue;
}
CheckValue<IkReal> x2506=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x2506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2505.value)+(((1.5707963267949)*(x2506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2507=IKsin(j4);
IkReal x2508=IKcos(j4);
IkReal x2509=((1.0)*r22);
IkReal x2510=((1.0)*r12);
IkReal x2511=(cj2*sj0);
IkReal x2512=(gconst13*sj3);
IkReal x2513=(gconst13*r01);
IkReal x2514=(sj1*sj2);
IkReal x2515=(gconst14*sj3);
IkReal x2516=(cj1*cj2);
IkReal x2517=((1.0)*gconst14);
IkReal x2518=(cj3*gconst13);
IkReal x2519=(cj3*gconst14);
IkReal x2520=(cj2*sj1);
IkReal x2521=((1.0)*r02);
IkReal x2522=(cj1*sj2);
IkReal x2523=((1.0)*cj0);
IkReal x2524=(sj3*x2507);
IkReal x2525=(cj3*x2508);
IkReal x2526=(cj3*x2507);
IkReal x2527=(gconst13*x2507);
IkReal x2528=((1.0)*x2508);
evalcond[0]=((((-1.0)*x2508*x2509))+(((-1.0)*r20*x2507*x2517))+((r21*x2527)));
evalcond[1]=(sj0+(((-1.0)*r00*x2507*x2517))+((x2507*x2513))+(((-1.0)*x2508*x2521)));
evalcond[2]=((((-1.0)*x2508*x2510))+(((-1.0)*r10*x2507*x2517))+((r11*x2527))+(((-1.0)*x2523)));
evalcond[3]=((((-1.0)*r20*x2517*x2525))+((r22*x2526))+x2520+x2522+((r21*x2508*x2518))+((r21*x2515))+((r20*x2512)));
evalcond[4]=(x2514+(((-1.0)*x2509*x2524))+(((-1.0)*r21*x2512*x2528))+((r21*x2519))+(((-1.0)*x2516))+((r20*x2508*x2515))+((r20*x2518)));
evalcond[5]=((((-1.0)*r01*x2512*x2528))+((r01*x2519))+((cj0*x2520))+((cj0*x2522))+((r00*x2518))+(((-1.0)*x2521*x2524))+((r00*x2508*x2515)));
evalcond[6]=(((cj0*x2516))+((r02*x2526))+(((-1.0)*r00*x2517*x2525))+((r01*x2515))+((r00*x2512))+(((-1.0)*x2514*x2523))+((x2513*x2525)));
evalcond[7]=(((r10*x2508*x2515))+((r11*x2519))+((r10*x2518))+(((-1.0)*r11*x2512*x2528))+((sj1*x2511))+(((-1.0)*x2510*x2524))+((sj0*x2522)));
evalcond[8]=((((-1.0)*r10*x2517*x2525))+((r11*x2515))+((r10*x2512))+((r12*x2526))+((cj1*x2511))+(((-1.0)*sj0*x2514))+((r11*x2508*x2518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2530 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2530)==0){
continue;
}
IkReal x2529=pow(x2530,-0.5);
CheckValue<IkReal> x2531 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2531.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2531.value))));
IkReal gconst16=((1.0)*r11*x2529);
IkReal gconst17=((-1.0)*r10*x2529);
CheckValue<IkReal> x2532 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2532.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2532.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2535 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2535.valid){
continue;
}
IkReal x2533=((1.0)*(x2535.value));
IkReal x2534=x2529;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2533)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2533)));
IkReal gconst16=((1.0)*r11*x2534);
IkReal gconst17=((-1.0)*r10*x2534);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2538 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2538.valid){
continue;
}
IkReal x2536=((1.0)*(x2538.value));
IkReal x2537=x2529;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2536)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2536)));
IkReal gconst16=((1.0)*r11*x2537);
IkReal gconst17=((-1.0)*r10*x2537);
IkReal x2539=r12*r12;
IkReal x2540=(cj0*r02);
IkReal x2541=x2529;
IkReal x2542=(sj0*x2541);
j4eval[0]=((IKabs((((x2539*x2542))+(((-1.0)*x2542))+((r12*x2540*x2541)))))+(IKabs((x2540+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2545 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2545.valid){
continue;
}
IkReal x2543=((1.0)*(x2545.value));
IkReal x2544=x2529;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2543)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2543)));
IkReal gconst16=((1.0)*r11*x2544);
IkReal gconst17=((-1.0)*r10*x2544);
IkReal x2546=((1.0)*cj3);
CheckValue<IkReal> x2551=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x2551.valid){
continue;
}
IkReal x2547=x2551.value;
IkReal x2548=(cj3*x2547);
IkReal x2549=(x2546*x2547);
IkReal x2550=((((-1.0)*x2549*(r11*r11)*(r21*r21)))+(((-1.0)*x2546*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x2548))+(((-1.0)*x2549*(r10*r10)*(r20*r20))));
j4eval[0]=x2550;
j4eval[1]=IKsign(x2550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2552=r21*r21;
IkReal x2553=gconst16*gconst16;
IkReal x2554=r20*r20;
IkReal x2555=gconst17*gconst17;
IkReal x2556=(gconst16*r21);
IkReal x2557=(cj1*sj2);
IkReal x2558=(cj2*sj1);
IkReal x2559=(gconst17*r20);
IkReal x2560=(gconst16*sj3);
IkReal x2561=(r21*sj3);
IkReal x2562=((1.0)*cj3);
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2562*(r22*r22)))+(((-1.0)*x2554*x2555*x2562))+(((2.0)*cj3*x2556*x2559))+(((-1.0)*x2552*x2553*x2562)))),-1);
if(!x2563.valid){
continue;
}
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal((((r22*x2557))+((r22*x2558))+((gconst17*r22*x2561))+((r20*r22*x2560)))),IkReal((((r20*x2553*x2561))+(((-1.0)*x2558*x2559))+(((-1.0)*x2557*x2559))+((x2556*x2558))+((x2556*x2557))+(((-1.0)*gconst17*x2554*x2560))+(((-1.0)*r20*x2555*x2561))+((gconst17*x2552*x2560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2563.value)))+(x2564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2565=IKsin(j4);
IkReal x2566=IKcos(j4);
IkReal x2567=(cj3*gconst17);
IkReal x2568=(gconst16*r21);
IkReal x2569=(gconst17*sj3);
IkReal x2570=(gconst16*r20);
IkReal x2571=(sj1*sj2);
IkReal x2572=(cj1*cj2);
IkReal x2573=(gconst16*r10);
IkReal x2574=(cj2*sj1);
IkReal x2575=(gconst16*sj3);
IkReal x2576=(cj1*sj2);
IkReal x2577=((1.0)*cj0);
IkReal x2578=((1.0)*x2566);
IkReal x2579=(gconst16*x2565);
IkReal x2580=(cj3*x2566);
IkReal x2581=(cj3*x2565);
IkReal x2582=((1.0)*gconst17*x2565);
IkReal x2583=((1.0)*sj3*x2565);
evalcond[0]=((((-1.0)*r20*x2582))+((x2565*x2568))+(((-1.0)*r22*x2578)));
evalcond[1]=((((-1.0)*r00*x2582))+sj0+((r01*x2579))+(((-1.0)*r02*x2578)));
evalcond[2]=((((-1.0)*r12*x2578))+((r11*x2579))+(((-1.0)*x2577))+(((-1.0)*r10*x2582)));
evalcond[3]=(((r22*x2581))+x2576+x2574+(((-1.0)*r20*x2567*x2578))+((sj3*x2570))+((x2568*x2580))+((r21*x2569)));
evalcond[4]=(x2571+((cj3*x2570))+(((-1.0)*sj3*x2568*x2578))+(((-1.0)*x2572))+((r20*x2566*x2569))+((r21*x2567))+(((-1.0)*r22*x2583)));
evalcond[5]=(((r01*x2567))+((r00*x2566*x2569))+(((-1.0)*r02*x2583))+(((-1.0)*r01*x2575*x2578))+((cj0*x2574))+((cj0*x2576))+((cj3*gconst16*r00)));
evalcond[6]=((((-1.0)*x2571*x2577))+((r01*x2569))+((r00*x2575))+((gconst16*r01*x2580))+((cj0*x2572))+((r02*x2581))+(((-1.0)*r00*x2567*x2578)));
evalcond[7]=(((cj3*x2573))+((r10*x2566*x2569))+((r11*x2567))+(((-1.0)*r11*x2575*x2578))+((sj0*x2574))+((sj0*x2576))+(((-1.0)*r12*x2583)));
evalcond[8]=((((-1.0)*sj0*x2571))+((sj3*x2573))+((r12*x2581))+((gconst16*r11*x2580))+((r11*x2569))+((sj0*x2572))+(((-1.0)*r10*x2567*x2578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2584=((1.0)*gconst17);
CheckValue<IkReal> x2585=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x2584)))),-1);
if(!x2585.valid){
continue;
}
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x2584))+(((-1.0)*cj0*r00*x2584))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2585.value)))+(x2586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2587=IKsin(j4);
IkReal x2588=IKcos(j4);
IkReal x2589=(cj3*gconst17);
IkReal x2590=(gconst16*r21);
IkReal x2591=(gconst17*sj3);
IkReal x2592=(gconst16*r20);
IkReal x2593=(sj1*sj2);
IkReal x2594=(cj1*cj2);
IkReal x2595=(gconst16*r10);
IkReal x2596=(cj2*sj1);
IkReal x2597=(gconst16*sj3);
IkReal x2598=(cj1*sj2);
IkReal x2599=((1.0)*cj0);
IkReal x2600=((1.0)*x2588);
IkReal x2601=(gconst16*x2587);
IkReal x2602=(cj3*x2588);
IkReal x2603=(cj3*x2587);
IkReal x2604=((1.0)*gconst17*x2587);
IkReal x2605=((1.0)*sj3*x2587);
evalcond[0]=((((-1.0)*r22*x2600))+(((-1.0)*r20*x2604))+((x2587*x2590)));
evalcond[1]=(sj0+(((-1.0)*r02*x2600))+((r01*x2601))+(((-1.0)*r00*x2604)));
evalcond[2]=((((-1.0)*r10*x2604))+(((-1.0)*x2599))+(((-1.0)*r12*x2600))+((r11*x2601)));
evalcond[3]=(x2596+x2598+((sj3*x2592))+(((-1.0)*r20*x2589*x2600))+((x2590*x2602))+((r22*x2603))+((r21*x2591)));
evalcond[4]=(x2593+((cj3*x2592))+(((-1.0)*x2594))+(((-1.0)*r22*x2605))+((r20*x2588*x2591))+(((-1.0)*sj3*x2590*x2600))+((r21*x2589)));
evalcond[5]=(((r01*x2589))+((r00*x2588*x2591))+((cj0*x2598))+((cj0*x2596))+(((-1.0)*r01*x2597*x2600))+(((-1.0)*r02*x2605))+((cj3*gconst16*r00)));
evalcond[6]=(((gconst16*r01*x2602))+((r00*x2597))+((r01*x2591))+(((-1.0)*x2593*x2599))+(((-1.0)*r00*x2589*x2600))+((cj0*x2594))+((r02*x2603)));
evalcond[7]=(((cj3*x2595))+(((-1.0)*r11*x2597*x2600))+(((-1.0)*r12*x2605))+((r11*x2589))+((r10*x2588*x2591))+((sj0*x2596))+((sj0*x2598)));
evalcond[8]=((((-1.0)*r10*x2589*x2600))+((gconst16*r11*x2602))+((sj3*x2595))+(((-1.0)*sj0*x2593))+((r11*x2591))+((r12*x2603))+((sj0*x2594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2606=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x2606.valid){
continue;
}
CheckValue<IkReal> x2607 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2606.value)))+(x2607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2608=IKsin(j4);
IkReal x2609=IKcos(j4);
IkReal x2610=(cj3*gconst17);
IkReal x2611=(gconst16*r21);
IkReal x2612=(gconst17*sj3);
IkReal x2613=(gconst16*r20);
IkReal x2614=(sj1*sj2);
IkReal x2615=(cj1*cj2);
IkReal x2616=(gconst16*r10);
IkReal x2617=(cj2*sj1);
IkReal x2618=(gconst16*sj3);
IkReal x2619=(cj1*sj2);
IkReal x2620=((1.0)*cj0);
IkReal x2621=((1.0)*x2609);
IkReal x2622=(gconst16*x2608);
IkReal x2623=(cj3*x2609);
IkReal x2624=(cj3*x2608);
IkReal x2625=((1.0)*gconst17*x2608);
IkReal x2626=((1.0)*sj3*x2608);
evalcond[0]=((((-1.0)*r22*x2621))+((x2608*x2611))+(((-1.0)*r20*x2625)));
evalcond[1]=(((r01*x2622))+(((-1.0)*r00*x2625))+sj0+(((-1.0)*r02*x2621)));
evalcond[2]=((((-1.0)*r12*x2621))+(((-1.0)*r10*x2625))+((r11*x2622))+(((-1.0)*x2620)));
evalcond[3]=(((x2611*x2623))+(((-1.0)*r20*x2610*x2621))+((r22*x2624))+((r21*x2612))+x2617+x2619+((sj3*x2613)));
evalcond[4]=(((r20*x2609*x2612))+(((-1.0)*x2615))+((cj3*x2613))+(((-1.0)*sj3*x2611*x2621))+(((-1.0)*r22*x2626))+((r21*x2610))+x2614);
evalcond[5]=(((r01*x2610))+(((-1.0)*r01*x2618*x2621))+(((-1.0)*r02*x2626))+((r00*x2609*x2612))+((cj3*gconst16*r00))+((cj0*x2617))+((cj0*x2619)));
evalcond[6]=(((r00*x2618))+((r01*x2612))+((r02*x2624))+(((-1.0)*r00*x2610*x2621))+((gconst16*r01*x2623))+(((-1.0)*x2614*x2620))+((cj0*x2615)));
evalcond[7]=((((-1.0)*r12*x2626))+((cj3*x2616))+((r11*x2610))+((r10*x2609*x2612))+(((-1.0)*r11*x2618*x2621))+((sj0*x2617))+((sj0*x2619)));
evalcond[8]=(((gconst16*r11*x2623))+((r11*x2612))+((r12*x2624))+((sj0*x2615))+(((-1.0)*sj0*x2614))+(((-1.0)*r10*x2610*x2621))+((sj3*x2616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2627=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2627;
j4eval[1]=IKsign(x2627);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2628=((1.0)*cj5);
IkReal x2629=((((-1.0)*r21*x2628))+(((-1.0)*r20*sj5)));
j4eval[0]=x2629;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2628))+((r01*sj5))))));
j4eval[2]=IKsign(x2629);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2630=cj5*cj5;
IkReal x2631=(cj3*r21);
IkReal x2632=(cj5*sj5);
IkReal x2633=((1.0)*cj3);
IkReal x2634=((((-1.0)*r10*r20*x2630*x2633))+(((-1.0)*r11*x2631))+((r10*x2631*x2632))+((r11*x2630*x2631))+((cj3*r11*r20*x2632))+(((-1.0)*r12*r22*x2633)));
j4eval[0]=x2634;
j4eval[1]=IKsign(x2634);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2635=cj5*cj5;
IkReal x2636=((1.0)*cj3);
IkReal x2637=(r10*r21);
IkReal x2638=(cj5*sj5);
IkReal x2639=(r11*r21);
IkReal x2640=(r11*r20);
IkReal x2641=(r22*sj3);
IkReal x2642=(r10*r20);
IkReal x2643=((1.0)*sj3*x2635);
CheckValue<IkReal> x2644=IKPowWithIntegerCheck(IKsign((((cj3*x2635*x2639))+(((-1.0)*x2635*x2636*x2642))+((cj3*x2638*x2640))+(((-1.0)*x2636*x2639))+(((-1.0)*r12*r22*x2636))+((cj3*x2637*x2638)))),-1);
if(!x2644.valid){
continue;
}
CheckValue<IkReal> x2645 = IKatan2WithCheck(IkReal((((r10*sj5*x2641))+((cj5*r11*x2641)))),IkReal(((((-1.0)*x2637*x2643))+(((-1.0)*x2640*x2643))+((sj3*x2638*x2639))+((sj3*x2637))+(((-1.0)*sj3*x2638*x2642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2644.value)))+(x2645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2646=IKsin(j4);
IkReal x2647=IKcos(j4);
IkReal x2648=(cj2*sj1);
IkReal x2649=(cj1*sj2);
IkReal x2650=(cj5*sj3);
IkReal x2651=(cj5*r10);
IkReal x2652=(r00*sj5);
IkReal x2653=(sj1*sj2);
IkReal x2654=(r11*sj5);
IkReal x2655=(cj3*cj5);
IkReal x2656=(cj3*sj5);
IkReal x2657=(r21*sj5);
IkReal x2658=(cj1*cj2);
IkReal x2659=(sj3*sj5);
IkReal x2660=(r01*sj5);
IkReal x2661=((1.0)*x2647);
IkReal x2662=((1.0)*x2646);
IkReal x2663=(cj3*x2646);
IkReal x2664=(cj3*x2647);
IkReal x2665=(x2648+x2649);
evalcond[0]=((((-1.0)*cj5*r20*x2662))+((x2646*x2657))+(((-1.0)*r22*x2661)));
evalcond[1]=((((-1.0)*r02*x2661))+(((-1.0)*cj5*r00*x2662))+((x2646*x2660)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2661))+((x2646*x2654))+(((-1.0)*x2651*x2662)));
evalcond[3]=(((r11*x2650))+((r12*x2663))+((x2654*x2664))+(((-1.0)*cj3*x2651*x2661))+((r10*x2659)));
evalcond[4]=((((-1.0)*r12*sj3*x2662))+((r11*x2655))+(((-1.0)*sj3*x2654*x2661))+((r10*x2656))+((r10*x2647*x2650)));
evalcond[5]=(((r21*x2650))+(((-1.0)*r20*x2655*x2661))+((r22*x2663))+((r21*x2647*x2656))+x2665+((r20*x2659)));
evalcond[6]=((((-1.0)*r01*x2659*x2661))+((r00*x2647*x2650))+((r01*x2655))+((cj3*x2652))+x2665+(((-1.0)*r02*sj3*x2662)));
evalcond[7]=(((r01*x2647*x2656))+((r02*x2663))+(((-1.0)*r00*x2655*x2661))+((r01*x2650))+((sj3*x2652))+(((-1.0)*x2653))+x2658);
evalcond[8]=((((-1.0)*sj3*x2657*x2661))+((r21*x2655))+(((-1.0)*r22*sj3*x2662))+((r20*x2647*x2650))+(((-1.0)*x2658))+x2653+((r20*x2656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2666=((1.0)*cj5);
CheckValue<IkReal> x2667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2666))+(((-1.0)*r20*sj5)))),-1);
if(!x2667.valid){
continue;
}
CheckValue<IkReal> x2668 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2667.value)))+(x2668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2669=IKsin(j4);
IkReal x2670=IKcos(j4);
IkReal x2671=(cj2*sj1);
IkReal x2672=(cj1*sj2);
IkReal x2673=(cj5*sj3);
IkReal x2674=(cj5*r10);
IkReal x2675=(r00*sj5);
IkReal x2676=(sj1*sj2);
IkReal x2677=(r11*sj5);
IkReal x2678=(cj3*cj5);
IkReal x2679=(cj3*sj5);
IkReal x2680=(r21*sj5);
IkReal x2681=(cj1*cj2);
IkReal x2682=(sj3*sj5);
IkReal x2683=(r01*sj5);
IkReal x2684=((1.0)*x2670);
IkReal x2685=((1.0)*x2669);
IkReal x2686=(cj3*x2669);
IkReal x2687=(cj3*x2670);
IkReal x2688=(x2671+x2672);
evalcond[0]=((((-1.0)*cj5*r20*x2685))+(((-1.0)*r22*x2684))+((x2669*x2680)));
evalcond[1]=((((-1.0)*r02*x2684))+((x2669*x2683))+(((-1.0)*cj5*r00*x2685)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2684))+((x2669*x2677))+(((-1.0)*x2674*x2685)));
evalcond[3]=(((r10*x2682))+(((-1.0)*cj3*x2674*x2684))+((x2677*x2687))+((r12*x2686))+((r11*x2673)));
evalcond[4]=(((r10*x2679))+(((-1.0)*sj3*x2677*x2684))+((r10*x2670*x2673))+(((-1.0)*r12*sj3*x2685))+((r11*x2678)));
evalcond[5]=(((r21*x2670*x2679))+((r21*x2673))+((r22*x2686))+((r20*x2682))+(((-1.0)*r20*x2678*x2684))+x2688);
evalcond[6]=((((-1.0)*r02*sj3*x2685))+((cj3*x2675))+((r01*x2678))+((r00*x2670*x2673))+(((-1.0)*r01*x2682*x2684))+x2688);
evalcond[7]=(((r02*x2686))+(((-1.0)*x2676))+((r01*x2670*x2679))+((sj3*x2675))+(((-1.0)*r00*x2678*x2684))+((r01*x2673))+x2681);
evalcond[8]=(((r21*x2678))+(((-1.0)*r22*sj3*x2685))+((r20*x2670*x2673))+(((-1.0)*x2681))+(((-1.0)*sj3*x2680*x2684))+((r20*x2679))+x2676);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2689 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2689.valid){
continue;
}
CheckValue<IkReal> x2690=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2689.value)+(((1.5707963267949)*(x2690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2691=IKsin(j4);
IkReal x2692=IKcos(j4);
IkReal x2693=(cj2*sj1);
IkReal x2694=(cj1*sj2);
IkReal x2695=(cj5*sj3);
IkReal x2696=(cj5*r10);
IkReal x2697=(r00*sj5);
IkReal x2698=(sj1*sj2);
IkReal x2699=(r11*sj5);
IkReal x2700=(cj3*cj5);
IkReal x2701=(cj3*sj5);
IkReal x2702=(r21*sj5);
IkReal x2703=(cj1*cj2);
IkReal x2704=(sj3*sj5);
IkReal x2705=(r01*sj5);
IkReal x2706=((1.0)*x2692);
IkReal x2707=((1.0)*x2691);
IkReal x2708=(cj3*x2691);
IkReal x2709=(cj3*x2692);
IkReal x2710=(x2694+x2693);
evalcond[0]=((((-1.0)*r22*x2706))+(((-1.0)*cj5*r20*x2707))+((x2691*x2702)));
evalcond[1]=((((-1.0)*r02*x2706))+(((-1.0)*cj5*r00*x2707))+((x2691*x2705)));
evalcond[2]=((-1.0)+((x2691*x2699))+(((-1.0)*r12*x2706))+(((-1.0)*x2696*x2707)));
evalcond[3]=(((r12*x2708))+(((-1.0)*cj3*x2696*x2706))+((x2699*x2709))+((r10*x2704))+((r11*x2695)));
evalcond[4]=(((r11*x2700))+((r10*x2701))+(((-1.0)*r12*sj3*x2707))+((r10*x2692*x2695))+(((-1.0)*sj3*x2699*x2706)));
evalcond[5]=(x2710+((r22*x2708))+((r21*x2692*x2701))+((r20*x2704))+(((-1.0)*r20*x2700*x2706))+((r21*x2695)));
evalcond[6]=(x2710+((r01*x2700))+((r00*x2692*x2695))+(((-1.0)*r01*x2704*x2706))+(((-1.0)*r02*sj3*x2707))+((cj3*x2697)));
evalcond[7]=(x2703+((r01*x2692*x2701))+(((-1.0)*r00*x2700*x2706))+((r01*x2695))+((sj3*x2697))+(((-1.0)*x2698))+((r02*x2708)));
evalcond[8]=((((-1.0)*sj3*x2702*x2706))+((r20*x2701))+(((-1.0)*r22*sj3*x2707))+((r21*x2700))+((r20*x2692*x2695))+(((-1.0)*x2703))+x2698);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2711=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2711;
j4eval[1]=IKsign(x2711);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2712=((1.0)*cj5);
IkReal x2713=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2712)));
j4eval[0]=x2713;
j4eval[1]=((IKabs(((((-1.0)*r20*x2712))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2713);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2714=cj5*cj5;
IkReal x2715=(cj3*r21);
IkReal x2716=(cj5*sj5);
IkReal x2717=((1.0)*cj3);
IkReal x2718=(((r10*x2715*x2716))+((cj3*r11*r20*x2716))+(((-1.0)*r11*x2715))+((r11*x2714*x2715))+(((-1.0)*r10*r20*x2714*x2717))+(((-1.0)*r12*r22*x2717)));
j4eval[0]=x2718;
j4eval[1]=IKsign(x2718);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2719=cj5*cj5;
IkReal x2720=((1.0)*cj3);
IkReal x2721=(r10*r21);
IkReal x2722=(cj5*sj5);
IkReal x2723=(r11*r21);
IkReal x2724=(r11*r20);
IkReal x2725=(r22*sj3);
IkReal x2726=(r10*r20);
IkReal x2727=((1.0)*sj3*x2719);
CheckValue<IkReal> x2728 = IKatan2WithCheck(IkReal((((cj5*r11*x2725))+((r10*sj5*x2725)))),IkReal(((((-1.0)*x2724*x2727))+((sj3*x2722*x2723))+(((-1.0)*x2721*x2727))+(((-1.0)*sj3*x2722*x2726))+((sj3*x2721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2728.valid){
continue;
}
CheckValue<IkReal> x2729=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x2720))+(((-1.0)*x2719*x2720*x2726))+((cj3*x2721*x2722))+(((-1.0)*x2720*x2723))+((cj3*x2719*x2723))+((cj3*x2722*x2724)))),-1);
if(!x2729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2728.value)+(((1.5707963267949)*(x2729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2730=IKsin(j4);
IkReal x2731=IKcos(j4);
IkReal x2732=(sj1*sj2);
IkReal x2733=(cj5*sj3);
IkReal x2734=(cj5*r10);
IkReal x2735=(r00*sj5);
IkReal x2736=(r11*sj5);
IkReal x2737=(cj3*cj5);
IkReal x2738=((1.0)*cj1);
IkReal x2739=(cj3*sj5);
IkReal x2740=(r21*sj5);
IkReal x2741=(cj2*sj1);
IkReal x2742=(sj3*sj5);
IkReal x2743=(r01*sj5);
IkReal x2744=(cj2*x2738);
IkReal x2745=((1.0)*x2731);
IkReal x2746=((1.0)*x2730);
IkReal x2747=(cj3*x2730);
IkReal x2748=(cj3*x2731);
evalcond[0]=(((x2730*x2740))+(((-1.0)*cj5*r20*x2746))+(((-1.0)*r22*x2745)));
evalcond[1]=(((x2730*x2743))+(((-1.0)*cj5*r00*x2746))+(((-1.0)*r02*x2745)));
evalcond[2]=((1.0)+(((-1.0)*x2734*x2746))+((x2730*x2736))+(((-1.0)*r12*x2745)));
evalcond[3]=(((r12*x2747))+((r10*x2742))+((x2736*x2748))+((r11*x2733))+(((-1.0)*cj3*x2734*x2745)));
evalcond[4]=(((r10*x2731*x2733))+(((-1.0)*sj3*x2736*x2745))+((r10*x2739))+(((-1.0)*r12*sj3*x2746))+((r11*x2737)));
evalcond[5]=(x2741+((r22*x2747))+(((-1.0)*r20*x2737*x2745))+((cj1*sj2))+((r21*x2733))+((r20*x2742))+((r21*x2731*x2739)));
evalcond[6]=(x2732+((sj3*x2735))+(((-1.0)*r00*x2737*x2745))+((r01*x2733))+((r01*x2731*x2739))+(((-1.0)*x2744))+((r02*x2747)));
evalcond[7]=(x2732+((r20*x2731*x2733))+((r21*x2737))+(((-1.0)*sj3*x2740*x2745))+(((-1.0)*r22*sj3*x2746))+((r20*x2739))+(((-1.0)*x2744)));
evalcond[8]=((((-1.0)*sj2*x2738))+(((-1.0)*r01*x2742*x2745))+((r01*x2737))+(((-1.0)*r02*sj3*x2746))+((cj3*x2735))+((r00*x2731*x2733))+(((-1.0)*x2741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2749=((1.0)*cj5);
CheckValue<IkReal> x2750 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2750.valid){
continue;
}
CheckValue<IkReal> x2751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2749))+(((-1.0)*r00*sj5)))),-1);
if(!x2751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2750.value)+(((1.5707963267949)*(x2751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2752=IKsin(j4);
IkReal x2753=IKcos(j4);
IkReal x2754=(sj1*sj2);
IkReal x2755=(cj5*sj3);
IkReal x2756=(cj5*r10);
IkReal x2757=(r00*sj5);
IkReal x2758=(r11*sj5);
IkReal x2759=(cj3*cj5);
IkReal x2760=((1.0)*cj1);
IkReal x2761=(cj3*sj5);
IkReal x2762=(r21*sj5);
IkReal x2763=(cj2*sj1);
IkReal x2764=(sj3*sj5);
IkReal x2765=(r01*sj5);
IkReal x2766=(cj2*x2760);
IkReal x2767=((1.0)*x2753);
IkReal x2768=((1.0)*x2752);
IkReal x2769=(cj3*x2752);
IkReal x2770=(cj3*x2753);
evalcond[0]=((((-1.0)*cj5*r20*x2768))+((x2752*x2762))+(((-1.0)*r22*x2767)));
evalcond[1]=((((-1.0)*r02*x2767))+(((-1.0)*cj5*r00*x2768))+((x2752*x2765)));
evalcond[2]=((1.0)+((x2752*x2758))+(((-1.0)*r12*x2767))+(((-1.0)*x2756*x2768)));
evalcond[3]=(((x2758*x2770))+((r11*x2755))+((r12*x2769))+(((-1.0)*cj3*x2756*x2767))+((r10*x2764)));
evalcond[4]=(((r11*x2759))+((r10*x2761))+(((-1.0)*r12*sj3*x2768))+((r10*x2753*x2755))+(((-1.0)*sj3*x2758*x2767)));
evalcond[5]=(x2763+((r21*x2755))+((cj1*sj2))+((r20*x2764))+(((-1.0)*r20*x2759*x2767))+((r21*x2753*x2761))+((r22*x2769)));
evalcond[6]=(x2754+((sj3*x2757))+(((-1.0)*r00*x2759*x2767))+(((-1.0)*x2766))+((r01*x2755))+((r02*x2769))+((r01*x2753*x2761)));
evalcond[7]=(x2754+((r20*x2753*x2755))+((r21*x2759))+((r20*x2761))+(((-1.0)*x2766))+(((-1.0)*sj3*x2762*x2767))+(((-1.0)*r22*sj3*x2768)));
evalcond[8]=((((-1.0)*x2763))+((cj3*x2757))+((r01*x2759))+(((-1.0)*sj2*x2760))+(((-1.0)*r02*sj3*x2768))+(((-1.0)*r01*x2764*x2767))+((r00*x2753*x2755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2771=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2771.valid){
continue;
}
CheckValue<IkReal> x2772 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2771.value)))+(x2772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2773=IKsin(j4);
IkReal x2774=IKcos(j4);
IkReal x2775=(sj1*sj2);
IkReal x2776=(cj5*sj3);
IkReal x2777=(cj5*r10);
IkReal x2778=(r00*sj5);
IkReal x2779=(r11*sj5);
IkReal x2780=(cj3*cj5);
IkReal x2781=((1.0)*cj1);
IkReal x2782=(cj3*sj5);
IkReal x2783=(r21*sj5);
IkReal x2784=(cj2*sj1);
IkReal x2785=(sj3*sj5);
IkReal x2786=(r01*sj5);
IkReal x2787=(cj2*x2781);
IkReal x2788=((1.0)*x2774);
IkReal x2789=((1.0)*x2773);
IkReal x2790=(cj3*x2773);
IkReal x2791=(cj3*x2774);
evalcond[0]=(((x2773*x2783))+(((-1.0)*r22*x2788))+(((-1.0)*cj5*r20*x2789)));
evalcond[1]=(((x2773*x2786))+(((-1.0)*cj5*r00*x2789))+(((-1.0)*r02*x2788)));
evalcond[2]=((1.0)+(((-1.0)*r12*x2788))+(((-1.0)*x2777*x2789))+((x2773*x2779)));
evalcond[3]=(((x2779*x2791))+((r11*x2776))+((r12*x2790))+(((-1.0)*cj3*x2777*x2788))+((r10*x2785)));
evalcond[4]=(((r10*x2774*x2776))+((r11*x2780))+(((-1.0)*r12*sj3*x2789))+(((-1.0)*sj3*x2779*x2788))+((r10*x2782)));
evalcond[5]=(x2784+((r21*x2774*x2782))+((cj1*sj2))+(((-1.0)*r20*x2780*x2788))+((r22*x2790))+((r21*x2776))+((r20*x2785)));
evalcond[6]=((((-1.0)*x2787))+x2775+((r01*x2776))+(((-1.0)*r00*x2780*x2788))+((r02*x2790))+((r01*x2774*x2782))+((sj3*x2778)));
evalcond[7]=((((-1.0)*x2787))+x2775+((r21*x2780))+((r20*x2774*x2776))+(((-1.0)*r22*sj3*x2789))+((r20*x2782))+(((-1.0)*sj3*x2783*x2788)));
evalcond[8]=((((-1.0)*r02*sj3*x2789))+(((-1.0)*sj2*x2781))+(((-1.0)*r01*x2785*x2788))+((r01*x2780))+(((-1.0)*x2784))+((r00*x2774*x2776))+((cj3*x2778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2792=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2792);
rxp0_2=(py*r00);
rxp1_0=(r21*x2792);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2793=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2793);
rxp0_2=(py*r00);
rxp1_0=(r21*x2793);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x2794=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x2794)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2794)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2795=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2795);
rxp0_2=(py*r00);
rxp1_0=(r21*x2795);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2797=IKPowWithIntegerCheck(r12,-1);
if(!x2797.valid){
continue;
}
IkReal x2796=x2797.value;
CheckValue<IkReal> x2798=IKPowWithIntegerCheck(sj3,-1);
if(!x2798.valid){
continue;
}
if( IKabs((x2796*(x2798.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x2796)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2796*(x2798.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x2796))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2796*(x2798.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x2796));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2799=IKsin(j4);
IkReal x2800=IKcos(j4);
IkReal x2801=(cj2*sj0);
IkReal x2802=(sj1*sj2);
IkReal x2803=(cj5*sj3);
IkReal x2804=(cj3*cj5);
IkReal x2805=(cj1*cj2);
IkReal x2806=(r21*sj5);
IkReal x2807=(r00*sj5);
IkReal x2808=(cj2*sj1);
IkReal x2809=(r01*sj5);
IkReal x2810=(r20*sj5);
IkReal x2811=(cj1*sj2);
IkReal x2812=((1.0)*cj0);
IkReal x2813=((1.0)*x2799);
IkReal x2814=(r20*x2800);
IkReal x2815=(r00*x2800);
IkReal x2816=(cj3*x2800);
IkReal x2817=((1.0)*x2800);
evalcond[0]=((((-1.0)*r12*x2817))+(((-1.0)*x2812)));
evalcond[1]=(((x2799*x2806))+(((-1.0)*cj5*r20*x2813)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2813))+((x2799*x2809)));
evalcond[3]=(((sj1*x2801))+((sj0*x2811))+(((-1.0)*r12*sj3*x2813)));
evalcond[4]=(((cj3*r12*x2799))+((cj1*x2801))+(((-1.0)*sj0*x2802)));
evalcond[5]=((((-1.0)*x2804*x2814))+((r21*x2803))+x2808+x2811+((x2806*x2816))+((sj3*x2810)));
evalcond[6]=((((-1.0)*x2805))+((x2803*x2814))+((cj3*x2810))+((r21*x2804))+x2802+(((-1.0)*sj3*x2806*x2817)));
evalcond[7]=(((x2803*x2815))+((cj0*x2808))+(((-1.0)*sj3*x2809*x2817))+((cj3*x2807))+((cj0*x2811))+((r01*x2804)));
evalcond[8]=(((x2809*x2816))+(((-1.0)*x2804*x2815))+((sj3*x2807))+((cj0*x2805))+(((-1.0)*x2802*x2812))+((r01*x2803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2818=((1.0)*sj3);
IkReal x2819=((1.0)*cj5);
CheckValue<IkReal> x2820=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x2819))),-1);
if(!x2820.valid){
continue;
}
CheckValue<IkReal> x2821=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2819))),-1);
if(!x2821.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2820.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2821.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2818))+(((-1.0)*r20*sj5*x2818)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2820.value)))+IKsqr(((x2821.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2818))+(((-1.0)*r20*sj5*x2818))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2820.value)), ((x2821.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2818))+(((-1.0)*r20*sj5*x2818))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2822=IKsin(j4);
IkReal x2823=IKcos(j4);
IkReal x2824=(cj2*sj0);
IkReal x2825=(sj1*sj2);
IkReal x2826=(cj5*sj3);
IkReal x2827=(cj3*cj5);
IkReal x2828=(cj1*cj2);
IkReal x2829=(r21*sj5);
IkReal x2830=(r00*sj5);
IkReal x2831=(cj2*sj1);
IkReal x2832=(r01*sj5);
IkReal x2833=(r20*sj5);
IkReal x2834=(cj1*sj2);
IkReal x2835=((1.0)*cj0);
IkReal x2836=((1.0)*x2822);
IkReal x2837=(r20*x2823);
IkReal x2838=(r00*x2823);
IkReal x2839=(cj3*x2823);
IkReal x2840=((1.0)*x2823);
evalcond[0]=((((-1.0)*x2835))+(((-1.0)*r12*x2840)));
evalcond[1]=(((x2822*x2829))+(((-1.0)*cj5*r20*x2836)));
evalcond[2]=(sj0+((x2822*x2832))+(((-1.0)*cj5*r00*x2836)));
evalcond[3]=(((sj0*x2834))+((sj1*x2824))+(((-1.0)*r12*sj3*x2836)));
evalcond[4]=(((cj3*r12*x2822))+(((-1.0)*sj0*x2825))+((cj1*x2824)));
evalcond[5]=(((x2829*x2839))+((r21*x2826))+((sj3*x2833))+x2834+x2831+(((-1.0)*x2827*x2837)));
evalcond[6]=((((-1.0)*sj3*x2829*x2840))+(((-1.0)*x2828))+((r21*x2827))+((x2826*x2837))+x2825+((cj3*x2833)));
evalcond[7]=((((-1.0)*sj3*x2832*x2840))+((x2826*x2838))+((r01*x2827))+((cj0*x2834))+((cj0*x2831))+((cj3*x2830)));
evalcond[8]=((((-1.0)*x2825*x2835))+((sj3*x2830))+((r01*x2826))+(((-1.0)*x2827*x2838))+((x2832*x2839))+((cj0*x2828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2841=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2841.valid){
continue;
}
CheckValue<IkReal> x2842=IKPowWithIntegerCheck(r12,-1);
if(!x2842.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2841.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x2842.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2841.value)))+IKsqr(((-1.0)*cj0*(x2842.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2841.value)), ((-1.0)*cj0*(x2842.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2843=IKsin(j4);
IkReal x2844=IKcos(j4);
IkReal x2845=(cj2*sj0);
IkReal x2846=(sj1*sj2);
IkReal x2847=(cj5*sj3);
IkReal x2848=(cj3*cj5);
IkReal x2849=(cj1*cj2);
IkReal x2850=(r21*sj5);
IkReal x2851=(r00*sj5);
IkReal x2852=(cj2*sj1);
IkReal x2853=(r01*sj5);
IkReal x2854=(r20*sj5);
IkReal x2855=(cj1*sj2);
IkReal x2856=((1.0)*cj0);
IkReal x2857=((1.0)*x2843);
IkReal x2858=(r20*x2844);
IkReal x2859=(r00*x2844);
IkReal x2860=(cj3*x2844);
IkReal x2861=((1.0)*x2844);
evalcond[0]=((((-1.0)*r12*x2861))+(((-1.0)*x2856)));
evalcond[1]=((((-1.0)*cj5*r20*x2857))+((x2843*x2850)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2857))+((x2843*x2853)));
evalcond[3]=(((sj0*x2855))+((sj1*x2845))+(((-1.0)*r12*sj3*x2857)));
evalcond[4]=((((-1.0)*sj0*x2846))+((cj1*x2845))+((cj3*r12*x2843)));
evalcond[5]=(((r21*x2847))+((sj3*x2854))+x2852+x2855+((x2850*x2860))+(((-1.0)*x2848*x2858)));
evalcond[6]=(((r21*x2848))+(((-1.0)*sj3*x2850*x2861))+((cj3*x2854))+((x2847*x2858))+(((-1.0)*x2849))+x2846);
evalcond[7]=(((cj3*x2851))+((x2847*x2859))+((cj0*x2852))+((cj0*x2855))+((r01*x2848))+(((-1.0)*sj3*x2853*x2861)));
evalcond[8]=(((x2853*x2860))+((sj3*x2851))+((cj0*x2849))+((r01*x2847))+(((-1.0)*x2848*x2859))+(((-1.0)*x2846*x2856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2862=((1.0)*cj5);
CheckValue<IkReal> x2863 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2862))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2863.valid){
continue;
}
CheckValue<IkReal> x2864=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2862))+(((-1.0)*r20*sj5)))),-1);
if(!x2864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2863.value)+(((1.5707963267949)*(x2864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2865=IKsin(j4);
IkReal x2866=IKcos(j4);
IkReal x2867=(r11*sj5);
IkReal x2868=(cj2*sj0);
IkReal x2869=(cj5*r10);
IkReal x2870=(sj1*sj2);
IkReal x2871=(cj5*r01);
IkReal x2872=(cj5*r00);
IkReal x2873=(cj1*cj2);
IkReal x2874=(cj3*sj5);
IkReal x2875=(r21*sj5);
IkReal x2876=(cj5*sj3);
IkReal x2877=(sj3*sj5);
IkReal x2878=(cj2*sj1);
IkReal x2879=(r01*sj5);
IkReal x2880=(cj3*cj5);
IkReal x2881=(cj1*sj2);
IkReal x2882=((1.0)*cj0);
IkReal x2883=(cj5*r20);
IkReal x2884=((1.0)*x2866);
IkReal x2885=((1.0)*x2865);
IkReal x2886=(cj3*x2866);
IkReal x2887=(sj3*x2866);
IkReal x2888=(cj3*x2865);
evalcond[0]=((((-1.0)*x2883*x2885))+((x2865*x2875))+(((-1.0)*r22*x2884)));
evalcond[1]=(((x2865*x2879))+sj0+(((-1.0)*r02*x2884))+(((-1.0)*x2872*x2885)));
evalcond[2]=(((x2865*x2867))+(((-1.0)*x2869*x2885))+(((-1.0)*x2882))+(((-1.0)*r12*x2884)));
evalcond[3]=(((r22*x2888))+((r21*x2876))+(((-1.0)*r20*x2880*x2884))+((r20*x2877))+((r21*x2866*x2874))+x2881+x2878);
evalcond[4]=((((-1.0)*x2873))+((r21*x2880))+((r20*x2866*x2876))+(((-1.0)*r22*sj3*x2885))+(((-1.0)*sj3*x2875*x2884))+((r20*x2874))+x2870);
evalcond[5]=(((cj0*x2878))+((r00*x2874))+((x2872*x2887))+((cj0*x2881))+(((-1.0)*r02*sj3*x2885))+((cj3*x2871))+(((-1.0)*r01*x2877*x2884)));
evalcond[6]=(((cj0*x2873))+((r00*x2877))+(((-1.0)*x2870*x2882))+((r02*x2888))+(((-1.0)*cj3*x2872*x2884))+((r01*x2866*x2874))+((sj3*x2871)));
evalcond[7]=((((-1.0)*r12*sj3*x2885))+((r10*x2874))+((r11*x2880))+((x2869*x2887))+((sj0*x2881))+((sj1*x2868))+(((-1.0)*sj3*x2867*x2884)));
evalcond[8]=((((-1.0)*sj0*x2870))+((r10*x2877))+((cj1*x2868))+((r11*x2876))+((r12*x2888))+((x2867*x2886))+(((-1.0)*cj3*x2869*x2884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2889.valid){
continue;
}
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2889.value)))+(x2890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2891=IKsin(j4);
IkReal x2892=IKcos(j4);
IkReal x2893=(r11*sj5);
IkReal x2894=(cj2*sj0);
IkReal x2895=(cj5*r10);
IkReal x2896=(sj1*sj2);
IkReal x2897=(cj5*r01);
IkReal x2898=(cj5*r00);
IkReal x2899=(cj1*cj2);
IkReal x2900=(cj3*sj5);
IkReal x2901=(r21*sj5);
IkReal x2902=(cj5*sj3);
IkReal x2903=(sj3*sj5);
IkReal x2904=(cj2*sj1);
IkReal x2905=(r01*sj5);
IkReal x2906=(cj3*cj5);
IkReal x2907=(cj1*sj2);
IkReal x2908=((1.0)*cj0);
IkReal x2909=(cj5*r20);
IkReal x2910=((1.0)*x2892);
IkReal x2911=((1.0)*x2891);
IkReal x2912=(cj3*x2892);
IkReal x2913=(sj3*x2892);
IkReal x2914=(cj3*x2891);
evalcond[0]=(((x2891*x2901))+(((-1.0)*x2909*x2911))+(((-1.0)*r22*x2910)));
evalcond[1]=(sj0+((x2891*x2905))+(((-1.0)*x2898*x2911))+(((-1.0)*r02*x2910)));
evalcond[2]=(((x2891*x2893))+(((-1.0)*x2895*x2911))+(((-1.0)*r12*x2910))+(((-1.0)*x2908)));
evalcond[3]=(((r21*x2902))+((r21*x2892*x2900))+(((-1.0)*r20*x2906*x2910))+((r20*x2903))+((r22*x2914))+x2907+x2904);
evalcond[4]=(((r21*x2906))+((r20*x2892*x2902))+(((-1.0)*r22*sj3*x2911))+(((-1.0)*x2899))+((r20*x2900))+x2896+(((-1.0)*sj3*x2901*x2910)));
evalcond[5]=(((x2898*x2913))+((r00*x2900))+((cj0*x2907))+((cj0*x2904))+(((-1.0)*r01*x2903*x2910))+((cj3*x2897))+(((-1.0)*r02*sj3*x2911)));
evalcond[6]=(((sj3*x2897))+(((-1.0)*cj3*x2898*x2910))+((cj0*x2899))+((r00*x2903))+(((-1.0)*x2896*x2908))+((r02*x2914))+((r01*x2892*x2900)));
evalcond[7]=(((r10*x2900))+(((-1.0)*r12*sj3*x2911))+((sj1*x2894))+(((-1.0)*sj3*x2893*x2910))+((r11*x2906))+((x2895*x2913))+((sj0*x2907)));
evalcond[8]=(((r10*x2903))+((r12*x2914))+((x2893*x2912))+(((-1.0)*cj3*x2895*x2910))+((cj1*x2894))+((r11*x2902))+(((-1.0)*sj0*x2896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2915=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2915.valid){
continue;
}
CheckValue<IkReal> x2916 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2915.value)))+(x2916.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2917=IKsin(j4);
IkReal x2918=IKcos(j4);
IkReal x2919=(r11*sj5);
IkReal x2920=(cj2*sj0);
IkReal x2921=(cj5*r10);
IkReal x2922=(sj1*sj2);
IkReal x2923=(cj5*r01);
IkReal x2924=(cj5*r00);
IkReal x2925=(cj1*cj2);
IkReal x2926=(cj3*sj5);
IkReal x2927=(r21*sj5);
IkReal x2928=(cj5*sj3);
IkReal x2929=(sj3*sj5);
IkReal x2930=(cj2*sj1);
IkReal x2931=(r01*sj5);
IkReal x2932=(cj3*cj5);
IkReal x2933=(cj1*sj2);
IkReal x2934=((1.0)*cj0);
IkReal x2935=(cj5*r20);
IkReal x2936=((1.0)*x2918);
IkReal x2937=((1.0)*x2917);
IkReal x2938=(cj3*x2918);
IkReal x2939=(sj3*x2918);
IkReal x2940=(cj3*x2917);
evalcond[0]=(((x2917*x2927))+(((-1.0)*x2935*x2937))+(((-1.0)*r22*x2936)));
evalcond[1]=(sj0+((x2917*x2931))+(((-1.0)*x2924*x2937))+(((-1.0)*r02*x2936)));
evalcond[2]=((((-1.0)*x2921*x2937))+((x2917*x2919))+(((-1.0)*x2934))+(((-1.0)*r12*x2936)));
evalcond[3]=(((r21*x2918*x2926))+((r21*x2928))+((r22*x2940))+(((-1.0)*r20*x2932*x2936))+((r20*x2929))+x2933+x2930);
evalcond[4]=(((r21*x2932))+((r20*x2918*x2928))+((r20*x2926))+(((-1.0)*r22*sj3*x2937))+(((-1.0)*sj3*x2927*x2936))+x2922+(((-1.0)*x2925)));
evalcond[5]=((((-1.0)*r02*sj3*x2937))+((cj0*x2930))+((cj0*x2933))+((x2924*x2939))+((r00*x2926))+(((-1.0)*r01*x2929*x2936))+((cj3*x2923)));
evalcond[6]=(((sj3*x2923))+(((-1.0)*cj3*x2924*x2936))+((r02*x2940))+((r00*x2929))+((cj0*x2925))+((r01*x2918*x2926))+(((-1.0)*x2922*x2934)));
evalcond[7]=(((sj1*x2920))+((r10*x2926))+(((-1.0)*sj3*x2919*x2936))+(((-1.0)*r12*sj3*x2937))+((x2921*x2939))+((sj0*x2933))+((r11*x2932)));
evalcond[8]=(((r10*x2929))+(((-1.0)*cj3*x2921*x2936))+(((-1.0)*sj0*x2922))+((x2919*x2938))+((r12*x2940))+((r11*x2928))+((cj1*x2920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2941=cj5*cj5;
IkReal x2942=r21*r21;
IkReal x2943=r20*r20;
IkReal x2944=(r20*r21);
IkReal x2945=((1.0)*cj3);
IkReal x2946=((1.0)*cj5);
IkReal x2947=(cj1*sj2);
IkReal x2948=(cj5*sj5);
IkReal x2949=(sj3*sj5);
IkReal x2950=(cj2*sj1);
IkReal x2951=(r21*sj5);
CheckValue<IkReal> x2952=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2945*(r22*r22)))+(((-1.0)*x2942*x2945))+(((-1.0)*x2941*x2943*x2945))+(((2.0)*cj3*x2944*x2948))+((cj3*x2941*x2942)))),-1);
if(!x2952.valid){
continue;
}
CheckValue<IkReal> x2953 = IKatan2WithCheck(IkReal((((r20*r22*x2949))+((r22*x2950))+((cj5*r21*r22*sj3))+((r22*x2947)))),IkReal((((x2950*x2951))+(((-1.0)*r20*x2946*x2950))+((x2947*x2951))+(((-1.0)*x2943*x2946*x2949))+(((-1.0)*r20*x2946*x2947))+(((-2.0)*sj3*x2941*x2944))+((sj3*x2944))+((sj3*x2942*x2948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2952.value)))+(x2953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2954=IKsin(j4);
IkReal x2955=IKcos(j4);
IkReal x2956=(cj3*r21);
IkReal x2957=(r21*sj5);
IkReal x2958=(r20*sj5);
IkReal x2959=(cj5*r20);
IkReal x2960=((1.0)*x2955);
IkReal x2961=((1.0)*x2954);
evalcond[0]=(((x2954*x2957))+(((-1.0)*x2959*x2961))+(((-1.0)*r22*x2960)));
evalcond[1]=(((cj2*sj1))+((cj3*r22*x2954))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x2958))+(((-1.0)*cj3*x2959*x2960))+((sj5*x2955*x2956)));
evalcond[2]=((((-1.0)*r22*sj3*x2961))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x2956))+((sj3*x2955*x2959))+((cj3*x2958))+(((-1.0)*sj3*x2957*x2960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2962=(cj5*sj4);
IkReal x2963=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x2963))+((r00*x2962))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2963))+(((-1.0)*r10*x2962))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2963))+((r00*x2962))+((cj4*r02))))+IKsqr((((r11*x2963))+(((-1.0)*r10*x2962))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x2963))+((r00*x2962))+((cj4*r02))), (((r11*x2963))+(((-1.0)*r10*x2962))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2964=IKsin(j0);
IkReal x2965=IKcos(j0);
IkReal x2966=(r02*sj4);
IkReal x2967=((1.0)*sj3);
IkReal x2968=(r12*sj4);
IkReal x2969=(cj3*cj4);
IkReal x2970=((1.0)*cj5);
IkReal x2971=(r11*sj5);
IkReal x2972=(cj5*r01);
IkReal x2973=(r01*sj5);
IkReal x2974=(r00*sj5);
IkReal x2975=((0.39225)*cj2);
IkReal x2976=(cj5*r11);
IkReal x2977=((1.0)*sj2);
IkReal x2978=(r10*sj5);
IkReal x2979=((1.0)*cj4);
IkReal x2980=((0.39225)*sj1*sj2);
IkReal x2981=(cj1*x2964);
IkReal x2982=(cj4*cj5*sj3);
IkReal x2983=(cj1*x2965);
IkReal x2984=(sj1*x2965);
IkReal x2985=(sj1*x2964);
evalcond[0]=(((sj4*x2973))+(((-1.0)*r02*x2979))+(((-1.0)*r00*sj4*x2970))+x2964);
evalcond[1]=(((sj4*x2971))+(((-1.0)*r12*x2979))+(((-1.0)*x2965))+(((-1.0)*r10*sj4*x2970)));
evalcond[2]=((((-0.09465)*x2974))+(((-0.09465)*x2972))+(((-0.425)*x2983))+(((0.10915)*x2964))+(((-1.0)*px))+((x2965*x2980))+(((-1.0)*x2975*x2983)));
evalcond[3]=((((-0.09465)*x2976))+(((-0.09465)*x2978))+(((-0.425)*x2981))+(((-1.0)*py))+((x2964*x2980))+(((-0.10915)*x2965))+(((-1.0)*x2975*x2981)));
evalcond[4]=(((cj2*x2984))+((sj2*x2983))+((r00*x2982))+(((-1.0)*x2966*x2967))+((cj3*x2972))+((cj3*x2974))+(((-1.0)*cj4*x2967*x2973)));
evalcond[5]=((((-1.0)*x2977*x2984))+((cj2*x2983))+(((-1.0)*r00*x2969*x2970))+((x2969*x2973))+((cj3*x2966))+((sj3*x2972))+((sj3*x2974)));
evalcond[6]=(((cj2*x2985))+((sj2*x2981))+(((-1.0)*x2967*x2968))+((cj3*x2978))+((cj3*x2976))+((r10*x2982))+(((-1.0)*cj4*x2967*x2971)));
evalcond[7]=((((-1.0)*x2977*x2985))+((cj2*x2981))+(((-1.0)*r10*x2969*x2970))+((x2969*x2971))+((cj3*x2968))+((sj3*x2978))+((sj3*x2976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2986=cj5*cj5;
IkReal x2987=r21*r21;
IkReal x2988=r20*r20;
IkReal x2989=(r20*r21);
IkReal x2990=(sj1*sj2);
IkReal x2991=(r21*sj5);
IkReal x2992=(cj1*cj2);
IkReal x2993=(cj5*r20);
IkReal x2994=(cj5*sj5);
IkReal x2995=(cj3*r22);
IkReal x2996=(sj3*x2987);
CheckValue<IkReal> x2997 = IKatan2WithCheck(IkReal((((cj5*r21*x2995))+(((-1.0)*r22*x2992))+((r20*sj5*x2995))+((r22*x2990)))),IkReal(((((-1.0)*cj3*x2988*x2994))+((x2990*x2991))+(((-2.0)*cj3*x2986*x2989))+((cj3*x2989))+((x2992*x2993))+((cj3*x2987*x2994))+(((-1.0)*x2991*x2992))+(((-1.0)*x2990*x2993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2997.valid){
continue;
}
CheckValue<IkReal> x2998=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x2989*x2994))+((sj3*x2986*x2988))+(((-1.0)*x2986*x2996))+x2996)),-1);
if(!x2998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2997.value)+(((1.5707963267949)*(x2998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2999=IKsin(j4);
IkReal x3000=IKcos(j4);
IkReal x3001=(cj3*r21);
IkReal x3002=(r21*sj5);
IkReal x3003=(r20*sj5);
IkReal x3004=(cj5*r20);
IkReal x3005=((1.0)*x3000);
IkReal x3006=((1.0)*x2999);
evalcond[0]=((((-1.0)*r22*x3005))+((x2999*x3002))+(((-1.0)*x3004*x3006)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj3*r22*x2999))+((cj1*sj2))+((sj3*x3003))+((sj5*x3000*x3001))+(((-1.0)*cj3*x3004*x3005)));
evalcond[2]=((((-1.0)*r22*sj3*x3006))+((cj5*x3001))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x3002*x3005))+((sj3*x3000*x3004))+((cj3*x3003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3007=(cj5*sj4);
IkReal x3008=(sj4*sj5);
if( IKabs((((r00*x3007))+(((-1.0)*r01*x3008))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x3008))+(((-1.0)*r10*x3007))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x3007))+(((-1.0)*r01*x3008))+((cj4*r02))))+IKsqr((((r11*x3008))+(((-1.0)*r10*x3007))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x3007))+(((-1.0)*r01*x3008))+((cj4*r02))), (((r11*x3008))+(((-1.0)*r10*x3007))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3009=IKsin(j0);
IkReal x3010=IKcos(j0);
IkReal x3011=(r02*sj4);
IkReal x3012=((1.0)*sj3);
IkReal x3013=(r12*sj4);
IkReal x3014=(cj3*cj4);
IkReal x3015=((1.0)*cj5);
IkReal x3016=(r11*sj5);
IkReal x3017=(cj5*r01);
IkReal x3018=(r01*sj5);
IkReal x3019=(r00*sj5);
IkReal x3020=((0.39225)*cj2);
IkReal x3021=(cj5*r11);
IkReal x3022=((1.0)*sj2);
IkReal x3023=(r10*sj5);
IkReal x3024=((1.0)*cj4);
IkReal x3025=((0.39225)*sj1*sj2);
IkReal x3026=(cj1*x3009);
IkReal x3027=(cj4*cj5*sj3);
IkReal x3028=(cj1*x3010);
IkReal x3029=(sj1*x3010);
IkReal x3030=(sj1*x3009);
evalcond[0]=(x3009+(((-1.0)*r00*sj4*x3015))+(((-1.0)*r02*x3024))+((sj4*x3018)));
evalcond[1]=((((-1.0)*r12*x3024))+(((-1.0)*r10*sj4*x3015))+(((-1.0)*x3010))+((sj4*x3016)));
evalcond[2]=((((0.10915)*x3009))+(((-1.0)*x3020*x3028))+(((-1.0)*px))+((x3010*x3025))+(((-0.09465)*x3019))+(((-0.09465)*x3017))+(((-0.425)*x3028)));
evalcond[3]=((((-1.0)*x3020*x3026))+(((-0.10915)*x3010))+(((-0.09465)*x3023))+(((-0.09465)*x3021))+((x3009*x3025))+(((-1.0)*py))+(((-0.425)*x3026)));
evalcond[4]=(((sj2*x3028))+((cj2*x3029))+((cj3*x3019))+((cj3*x3017))+(((-1.0)*x3011*x3012))+((r00*x3027))+(((-1.0)*cj4*x3012*x3018)));
evalcond[5]=(((cj2*x3028))+((cj3*x3011))+((sj3*x3019))+((sj3*x3017))+(((-1.0)*r00*x3014*x3015))+(((-1.0)*x3022*x3029))+((x3014*x3018)));
evalcond[6]=(((r10*x3027))+((sj2*x3026))+((cj2*x3030))+((cj3*x3023))+((cj3*x3021))+(((-1.0)*cj4*x3012*x3016))+(((-1.0)*x3012*x3013)));
evalcond[7]=(((sj3*x3023))+((sj3*x3021))+((cj2*x3026))+((cj3*x3013))+(((-1.0)*r10*x3014*x3015))+(((-1.0)*x3022*x3030))+((x3014*x3016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (00278502ff22d208f516e0c94be6cb47)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
