/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2024-09-27 09:39:01.702248
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[0]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKcos(j[3]);
x9=IKsin(j[3]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.09465)*x4);
x13=((0.39225)*x2);
x14=((1.0)*x0);
x15=((0.09465)*x2);
x16=((1.0)*x5);
x17=((1.0)*x4);
x18=((1.0)*x2);
x19=(x0*x1);
x20=(x3*x4);
x21=((-1.0)*x9);
x22=(x1*x5);
x23=(x2*x3);
x24=((-1.0)*x8);
x25=(x1*x4);
x26=(x14*x20);
x27=(x16*x20);
x28=(((x1*x18))+(((-1.0)*x17*x3)));
x29=((((-1.0)*x18*x3))+(((-1.0)*x1*x17)));
x30=(x29*x9);
x31=((((-1.0)*x1*x14*x2))+x26);
x32=(x27+(((-1.0)*x1*x16*x2)));
x33=(x14*(((((-1.0)*x23))+(((-1.0)*x25)))));
x34=(x16*(((((-1.0)*x23))+(((-1.0)*x25)))));
x35=(x31*x9);
x36=(x34*x8);
x37=(x33*x8);
x38=(((x8*((x25+x23))))+((x28*x9)));
x39=(x38*x7);
x40=(((x33*x9))+((x8*((((x19*x2))+(((-1.0)*x26)))))));
x41=(((x34*x9))+((x8*(((((-1.0)*x27))+((x2*x22)))))));
x42=(x41*x7);
x43=(((x5*x6))+((x40*x7)));
eerot[0]=((((-1.0)*x16*x7))+((x40*x6)));
eerot[1]=(((x11*((x37+x35))))+((x10*x43)));
eerot[2]=(((x11*x43))+((x10*(((((-1.0)*x37))+(((-1.0)*x35)))))));
IkReal x44=(x0*x3);
eetrans[0]=((((0.10915)*x5))+(((-1.0)*x13*x19))+(((0.39225)*x0*x20))+((x8*((((x15*x44))+((x12*x19))))))+(((-0.425)*x19))+((x9*(((((-1.0)*x12*x44))+((x15*x19)))))));
eerot[3]=(((x0*x7))+((x41*x6)));
eerot[4]=(((x10*(((((-1.0)*x0*x6))+x42))))+((x11*((((x32*x9))+x36)))));
eerot[5]=(((x10*((((x21*x32))+((x24*x34))))))+((x11*(((((-1.0)*x14*x6))+x42)))));
IkReal x45=(x3*x5);
eetrans[1]=((((0.39225)*x20*x5))+(((-1.0)*x13*x22))+(((-0.10915)*x0))+((x9*(((((-1.0)*x12*x45))+((x15*x22))))))+((x8*((((x15*x45))+((x12*x22))))))+(((-0.425)*x22)));
eerot[6]=(x38*x6);
eerot[7]=(((x10*x39))+((x11*((x30+((x28*x8)))))));
eerot[8]=(((x10*((((x21*x29))+((x24*x28))))))+((x11*x39)));
eetrans[2]=((0.089159)+((x9*((((x1*x12))+((x15*x3))))))+(((-0.425)*x3))+((x8*(((((-1.0)*x1*x15))+((x12*x3))))))+(((-0.39225)*x25))+(((-1.0)*x13*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=((-1.0)*r02);
new_r02=((-1.0)*r00);
new_px=px;
new_r10=r11;
new_r11=((-1.0)*r12);
new_r12=((-1.0)*r10);
new_py=py;
new_r20=r21;
new_r21=((-1.0)*r22);
new_r22=((-1.0)*r20);
new_pz=((-0.089159)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x46=((1.0)*px);
IkReal x47=((1.0)*pz);
IkReal x48=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x48))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x47)));
rxp0_2=((((-1.0)*r10*x46))+((py*r00)));
rxp1_0=((((-1.0)*r21*x48))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x47)));
rxp1_2=((((-1.0)*r11*x46))+((py*r01)));
rxp2_0=((((-1.0)*r22*x48))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x47))+((px*r22)));
rxp2_2=((((-1.0)*r12*x46))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x49=((0.1893)*npx);
IkReal x50=((0.1893)*npy);
IkReal x51=((0.09465)*r22);
IkReal x52=((0.09465)*r21);
IkReal x53=((-0.09465)*r20);
IkReal x54=((-1.0)*r20);
IkReal x55=((-1.0)*rxp0_2);
IkReal x56=((-0.09465)*r21);
IkReal x57=((-1.0)*r21);
IkReal x58=((-1.0)*rxp1_2);
IkReal x59=((-1.0)*npx);
IkReal x60=((-1.0)*r22);
IkReal x61=((-1.0)*npz);
matrixinvcoeffs[0]=x53;
matrixinvcoeffs[1]=x49;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x54;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x55;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x53;
matrixinvcoeffs[19]=x49;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x54;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x55;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x56;
matrixinvcoeffs[33]=x50;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x57;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x58;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x56;
matrixinvcoeffs[51]=x50;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x57;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x58;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x60;
matrixinvcoeffs[76]=x51;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x61;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x51;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x58;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x56;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x58;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x52;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x54;
matrixinvcoeffs[133]=x59;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x54;
matrixinvcoeffs[151]=x59;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x53;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x60;
matrixinvcoeffs[165]=x61;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x51;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x60;
matrixinvcoeffs[183]=x61;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x57;
matrixinvcoeffs[204]=x52;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x58;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x52;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x59;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x53;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x54;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x53;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x55;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x62=pz*pz;
IkReal x63=pp*pp;
IkReal x64=((0.1893)*pz);
IkReal x65=((1.7)*pz);
IkReal x66=(gclwh15_9*npx);
IkReal x67=(gclwh6_11*r21);
IkReal x68=(pp*r22);
IkReal x69=((0.00702803935125)*r21);
IkReal x70=(gclwh5_9*npz);
IkReal x71=(gclwh8_11*r20);
IkReal x72=(npy*pz);
IkReal x73=((3.60823078949063e-5)*r22);
IkReal x74=(gclwh14_3*rxp0_2);
IkReal x75=((0.000977833645875)*r20);
IkReal x76=(npz*pz);
IkReal x77=((0.000977833645875)*r21);
IkReal x78=(gclwh10_12*r22);
IkReal x79=(gclwh10_2*rxp2_2);
IkReal x80=((0.00076243651125)*rxp1_2);
IkReal x81=((0.00600991575645741)*r20);
IkReal x82=((0.154705425)*rxp1_2);
IkReal x83=((0.017917245)*r21);
IkReal x84=(gclwh6_11*rxp1_2);
IkReal x85=((0.3786)*rxp1_2);
IkReal x86=(gclwh7_0*rxp1_2);
IkReal x87=((0.7572)*rxp1_2);
IkReal x88=((0.154705425)*rxp2_2);
IkReal x89=((2.0)*gclwh11_10);
IkReal x90=(gclwh12_8*r21);
IkReal x91=((0.81725)*pp);
IkReal x92=(pp*pz);
IkReal x93=(gclwh14_2*r20);
IkReal x94=(pp*r21);
IkReal x95=((2.0)*gclwh4_11);
IkReal x96=(gclwh8_12*r20);
IkReal x97=(npx*pz);
IkReal x98=(gclwh14_8*rxp0_2);
IkReal x99=((0.1893)*rxp2_2);
IkReal x100=(gclwh5_9*rxp2_2);
IkReal x101=((0.020662095)*rxp1_2);
IkReal x102=((0.007321434238125)*r21);
IkReal x103=((1.6345)*pz);
IkReal x104=((0.0089586225)*pz);
IkReal x105=(gclwh13_0*r21);
IkReal x106=(gclwh5_9*r22);
IkReal x107=(gclwh11_10*r22);
IkReal x108=(gclwh11_13*r22);
IkReal x109=((1.0)*r21);
IkReal x110=((0.3786)*rxp0_2);
IkReal x111=(gclwh14_14*rxp0_2);
IkReal x112=(pp*r20);
IkReal x113=((0.00195566729175)*r22);
IkReal x114=(gclwh15_10*rxp0_2);
IkReal x115=(gclwh14_8*r20);
IkReal x116=(gclwh12_8*rxp1_2);
IkReal x117=((2.0)*gclwh9_10);
IkReal x118=((2.0)*gclwh15_10);
IkReal x119=(gclwh5_15*rxp2_2);
IkReal x120=((2.0)*gclwh13_10);
IkReal x121=((0.00702803935125)*r20);
IkReal x122=(gclwh13_9*r21);
IkReal x123=(gclwh5_0*r22);
IkReal x124=((0.01464286847625)*r20);
IkReal x125=(gclwh15_1*r20);
IkReal x126=((0.000977833645875)*r22);
IkReal x127=((0.0089586225)*r20);
IkReal x128=((2.0)*gclwh10_11);
IkReal x129=(gclwh5_10*r22);
IkReal x130=((2.0)*pp);
IkReal x131=(gclwh15_9*r20);
IkReal x132=(gclwh1_3*r20);
IkReal x133=((0.00195566729175)*r20);
IkReal x134=(gclwh4_3*rxp2_2);
IkReal x135=((0.2183)*gclwh13_15);
IkReal x136=((2.0)*gclwh7_10);
IkReal x137=(gclwh15_0*r20);
IkReal x138=(gclwh9_0*r20);
IkReal x139=(gclwh15_15*rxp0_2);
IkReal x140=(gclwh2_1*r21);
IkReal x141=((4.0)*gclwh11_10);
IkReal x142=((0.30941085)*rxp0_2);
IkReal x143=(gclwh9_0*rxp0_2);
IkReal x144=(gclwh5_10*rxp2_2);
IkReal x145=((0.2183)*gclwh12_14);
IkReal x146=((0.2183)*gclwh14_14);
IkReal x147=(gclwh4_2*rxp2_2);
IkReal x148=((0.03275)*pp);
IkReal x149=((0.006199575)*rxp1_2);
IkReal x150=(gclwh12_2*rxp1_2);
IkReal x151=(gclwh5_0*rxp2_2);
IkReal x152=((3.60823078949063e-5)*r21);
IkReal x153=(gclwh14_11*rxp0_2);
IkReal x154=((0.020662095)*rxp0_2);
IkReal x155=(gclwh14_8*npx);
IkReal x156=((4.0)*gclwh9_10);
IkReal x157=((0.00195566729175)*r21);
IkReal x158=(gclwh8_12*rxp0_2);
IkReal x159=((0.01464286847625)*r21);
IkReal x160=((0.3786)*rxp2_2);
IkReal x161=((0.01464286847625)*r22);
IkReal x162=(gclwh7_13*r21);
IkReal x163=((4.0)*gclwh7_10);
IkReal x164=(gclwh13_0*rxp1_2);
IkReal x165=((0.1893)*rxp1_2);
IkReal x166=(gclwh6_2*r21);
IkReal x167=(gclwh5_1*rxp2_2);
IkReal x168=(gclwh8_2*rxp0_2);
IkReal x169=(gclwh9_10*r20);
IkReal x170=((4.0)*pp);
IkReal x171=(gclwh15_1*rxp0_2);
IkReal x172=(gclwh9_13*r20);
IkReal x173=((0.0089586225)*r21);
IkReal x174=(gclwh0_0*r20);
IkReal x175=(gclwh10_11*r22);
IkReal x176=((2.0)*gclwh12_11);
IkReal x177=((0.0655)*pz);
IkReal x178=((0.006199575)*rxp2_2);
IkReal x179=(gclwh12_14*rxp1_2);
IkReal x180=(gclwh15_0*rxp0_2);
IkReal x181=((2.0)*npx);
IkReal x182=(gclwh9_13*rxp0_2);
IkReal x183=((1.0)*pp);
IkReal x184=((4.0)*gclwh10_11);
IkReal x185=(gclwh15_9*rxp0_2);
IkReal x186=((3.60823078949063e-5)*r20);
IkReal x187=((0.00702803935125)*r22);
IkReal x188=(gclwh8_2*r20);
IkReal x189=((0.2183)*gclwh5_15);
IkReal x190=(gclwh10_2*r22);
IkReal x191=(gclwh5_1*r22);
IkReal x192=(gclwh13_9*rxp1_2);
IkReal x193=((2.0)*gclwh5_10);
IkReal x194=((0.020662095)*rxp2_2);
IkReal x195=(gclwh4_8*r22);
IkReal x196=((0.017917245)*r20);
IkReal x197=(gclwh7_0*r21);
IkReal x198=((0.00600991575645741)*r21);
IkReal x199=(gclwh11_0*r22);
IkReal x200=(gclwh6_12*r21);
IkReal x201=((0.2183)*gclwh15_15);
IkReal x202=(gclwh11_0*rxp2_2);
IkReal x203=((0.2183)*gclwh4_14);
IkReal x204=(gclwh4_14*rxp2_2);
IkReal x205=(gclwh6_2*rxp1_2);
IkReal x206=((0.1893)*rxp0_2);
IkReal x207=(gclwh4_8*rxp2_2);
IkReal x208=((0.12699240901125)*rxp1_2);
IkReal x209=(gclwh14_2*rxp0_2);
IkReal x210=(gclwh4_3*r22);
IkReal x211=((0.1893)*pp);
IkReal x212=(gclwh13_15*rxp1_2);
IkReal x213=(gclwh1_2*r20);
IkReal x214=((2.0)*gclwh14_11);
IkReal x215=(gclwh4_11*r22);
IkReal x216=((0.020662095)*x111);
IkReal x217=(gclwh6_5*x77);
IkReal x218=(gclwh8_5*x75);
IkReal x219=(gclwh12_14*x101);
IkReal x220=(gclwh10_5*x126);
IkReal x221=(gclwh4_14*x194);
IkReal x222=((0.0089586225)*x67);
IkReal x223=(gclwh12_11*x165);
IkReal x224=((0.017917245)*x116);
IkReal x225=((0.017917245)*x207);
IkReal x226=(gclwh4_11*x99);
IkReal x227=((0.0089586225)*x71);
IkReal x228=((0.1893)*x153);
IkReal x229=((0.0089586225)*x175);
IkReal x230=((0.017917245)*x98);
IkReal x231=((0.017917245)*x100);
IkReal x232=((0.0089586225)*x107);
IkReal x233=((0.1893)*x114);
IkReal x234=((0.017917245)*x192);
IkReal x235=(gclwh9_10*x127);
IkReal x236=((0.017917245)*x185);
IkReal x237=(gclwh13_10*x165);
IkReal x238=(gclwh7_10*x173);
IkReal x239=(gclwh5_10*x99);
IkReal x240=((0.020662095)*x139);
IkReal x241=(gclwh7_7*x77);
IkReal x242=(gclwh9_7*x75);
IkReal x243=(gclwh13_15*x101);
IkReal x244=((0.020662095)*x119);
IkReal x245=(gclwh11_7*x126);
IkReal x246=(gclwh10_5*x194);
IkReal x247=(gclwh8_5*x154);
IkReal x248=(gclwh14_14*x75);
IkReal x249=(gclwh6_5*x101);
IkReal x250=(gclwh4_14*x126);
IkReal x251=(gclwh12_14*x77);
IkReal x252=(gclwh8_11*x206);
IkReal x253=((0.000847933619625)*x90);
IkReal x254=(gclwh12_11*x173);
IkReal x255=(gclwh10_11*x99);
IkReal x256=((0.0089586225)*x215);
IkReal x257=((0.000847933619625)*x195);
IkReal x258=((0.1893)*x84);
IkReal x259=(gclwh14_11*x127);
IkReal x260=((0.000847933619625)*x115);
IkReal x261=(gclwh9_10*x206);
IkReal x262=(gclwh13_10*x173);
IkReal x263=(gclwh11_10*x99);
IkReal x264=((0.000847933619625)*x131);
IkReal x265=((0.0089586225)*x129);
IkReal x266=((0.000847933619625)*x106);
IkReal x267=(gclwh7_10*x165);
IkReal x268=((0.000847933619625)*x122);
IkReal x269=(gclwh15_10*x127);
IkReal x270=(gclwh5_15*x126);
IkReal x271=(gclwh7_7*x101);
IkReal x272=(gclwh13_15*x77);
IkReal x273=(gclwh15_15*x75);
IkReal x274=(gclwh9_7*x154);
IkReal x275=(gclwh11_7*x194);
IkReal x276=((0.017917245)*x175);
IkReal x277=(gclwh14_11*x110);
IkReal x278=((0.017917245)*x71);
IkReal x279=((0.04132419)*x111);
IkReal x280=((0.04132419)*x179);
IkReal x281=((0.04132419)*x204);
IkReal x282=(gclwh4_11*x160);
IkReal x283=((0.017917245)*x67);
IkReal x284=(gclwh12_11*x85);
IkReal x285=((0.04132419)*x119);
IkReal x286=((0.04132419)*x212);
IkReal x287=((0.04132419)*x139);
IkReal x288=((0.017917245)*x169);
IkReal x289=(gclwh15_10*x110);
IkReal x290=((0.017917245)*x107);
IkReal x291=(gclwh7_10*x83);
IkReal x292=((0.3786)*x144);
IkReal x293=(gclwh13_10*x85);
IkReal x294=((0.3786)*x84);
IkReal x295=(gclwh14_11*x196);
IkReal x296=(gclwh14_14*x133);
IkReal x297=(gclwh4_14*x113);
IkReal x298=(gclwh12_14*x157);
IkReal x299=(gclwh14_8*x112);
IkReal x300=((2.0)*x62);
IkReal x301=((1.0)*x63);
IkReal x302=(r21*x63);
IkReal x303=((0.2183)*gclwh10_5*x76);
IkReal x304=((0.2183)*gclwh8_5*x97);
IkReal x305=((0.10915)*gclwh6_5*x94);
IkReal x306=((0.2183)*gclwh6_5*x72);
IkReal x307=((0.10915)*gclwh8_5*x112);
IkReal x308=((0.10915)*gclwh10_5*x68);
IkReal x309=(gclwh12_3*pp*x165);
IkReal x310=(x128*x76);
IkReal x311=(x104*x188);
IkReal x312=((2.0)*gclwh8_11*x97);
IkReal x313=(gclwh10_2*pz*x68);
IkReal x314=(x209*x64);
IkReal x315=(x188*x92);
IkReal x316=(gclwh4_3*pp*x99);
IkReal x317=(x104*x190);
IkReal x318=(x150*x64);
IkReal x319=((2.0)*gclwh6_11*x72);
IkReal x320=(x147*x64);
IkReal x321=(x211*x74);
IkReal x322=(x104*x166);
IkReal x323=(gclwh13_1*pp*x165);
IkReal x324=(x104*x199);
IkReal x325=(x104*x138);
IkReal x326=(gclwh5_1*pp*x99);
IkReal x327=(x180*x64);
IkReal x328=(gclwh11_0*pz*x68);
IkReal x329=(x136*x72);
IkReal x330=(x138*x92);
IkReal x331=(x76*x89);
IkReal x332=(x171*x211);
IkReal x333=(x117*x97);
IkReal x334=(x104*x197);
IkReal x335=(x164*x64);
IkReal x336=(x151*x64);
IkReal x337=((0.10915)*gclwh7_7*x94);
IkReal x338=((0.2183)*gclwh9_7*x97);
IkReal x339=((0.2183)*gclwh11_7*x76);
IkReal x340=((0.10915)*gclwh9_7*x112);
IkReal x341=((0.2183)*gclwh7_7*x72);
IkReal x342=((0.10915)*gclwh11_7*x68);
IkReal x343=((0.10915)*gclwh14_14*x112);
IkReal x344=(x203*x76);
IkReal x345=(x145*x72);
IkReal x346=((0.10915)*gclwh12_14*x94);
IkReal x347=(x146*x97);
IkReal x348=((0.10915)*gclwh4_14*x68);
IkReal x349=((0.09465)*gclwh4_8*x68);
IkReal x350=(x92*x93);
IkReal x351=(gclwh12_3*x302);
IkReal x352=(x205*x64);
IkReal x353=(gclwh3_3*x302);
IkReal x354=(x132*x63);
IkReal x355=(gclwh3_2*r21*x104);
IkReal x356=(x214*x97);
IkReal x357=(x155*x64);
IkReal x358=(x104*x93);
IkReal x359=((0.09465)*pp*x90);
IkReal x360=(x210*x63);
IkReal x361=(x104*x213);
IkReal x362=(x168*x64);
IkReal x363=(x76*x95);
IkReal x364=(gclwh4_2*r22*x104);
IkReal x365=(gclwh4_8*npz*x64);
IkReal x366=(gclwh12_2*r21*x104);
IkReal x367=(x64*x79);
IkReal x368=((0.09465)*x299);
IkReal x369=(x176*x72);
IkReal x370=(gclwh12_8*npy*x64);
IkReal x371=(x125*x63);
IkReal x372=(x64*x70);
IkReal x373=(gclwh5_0*pz*x68);
IkReal x374=(gclwh13_9*npy*x64);
IkReal x375=(x104*x123);
IkReal x376=(x105*x92);
IkReal x377=((0.09465)*gclwh15_9*x112);
IkReal x378=(x118*x97);
IkReal x379=(x104*x105);
IkReal x380=(x140*x63);
IkReal x381=(gclwh2_0*r21*x104);
IkReal x382=(x143*x64);
IkReal x383=(x202*x64);
IkReal x384=(gclwh0_1*r20*x63);
IkReal x385=(x104*x174);
IkReal x386=((0.09465)*gclwh5_9*x68);
IkReal x387=(x64*x86);
IkReal x388=((0.09465)*gclwh13_9*x94);
IkReal x389=(x104*x137);
IkReal x390=(x64*x66);
IkReal x391=(x193*x76);
IkReal x392=(x120*x72);
IkReal x393=((0.10915)*gclwh13_15*x94);
IkReal x394=((0.10915)*gclwh5_15*x68);
IkReal x395=(x201*x97);
IkReal x396=((0.10915)*gclwh15_15*x112);
IkReal x397=(x189*x76);
IkReal x398=(x135*x72);
IkReal x399=(x130*x71);
IkReal x400=(x128*x68);
IkReal x401=((4.0)*gclwh6_11*x72);
IkReal x402=((4.0)*gclwh8_11*x97);
IkReal x403=(x130*x67);
IkReal x404=(x184*x76);
IkReal x405=(x68*x89);
IkReal x406=(x163*x72);
IkReal x407=(x112*x117);
IkReal x408=(x136*x94);
IkReal x409=(x156*x97);
IkReal x410=(x141*x76);
IkReal x411=(x112*x214);
IkReal x412=((4.0)*gclwh12_11*x72);
IkReal x413=((4.0)*gclwh4_11*x76);
IkReal x414=(x112*x146);
IkReal x415=((0.4366)*gclwh12_14*x72);
IkReal x416=((0.4366)*gclwh4_14*x76);
IkReal x417=(x145*x94);
IkReal x418=((0.4366)*gclwh14_14*x97);
IkReal x419=(x203*x68);
IkReal x420=(gclwh6_2*npy*x300);
IkReal x421=(gclwh6_2*x109*x92);
IkReal x422=(gclwh10_2*npz*x300);
IkReal x423=(gclwh8_2*x181*x62);
IkReal x424=(gclwh7_0*npy*x300);
IkReal x425=(gclwh9_0*x181*x62);
IkReal x426=(gclwh11_0*npz*x300);
IkReal x427=(gclwh7_0*x109*x92);
IkReal x428=(gclwh12_2*npy*x300);
IkReal x429=(gclwh3_2*npy*x300);
IkReal x430=(gclwh1_2*x181*x62);
IkReal x431=(gclwh14_3*x181*x92);
IkReal x432=(gclwh4_2*npz*x300);
IkReal x433=(gclwh4_3*x130*x76);
IkReal x434=(gclwh12_2*x109*x92);
IkReal x435=((1.0)*x213*x92);
IkReal x436=(gclwh3_3*x130*x72);
IkReal x437=((1.0)*gclwh4_2*pz*x68);
IkReal x438=(gclwh1_3*x181*x92);
IkReal x439=(gclwh3_2*x109*x92);
IkReal x440=(gclwh12_3*x130*x72);
IkReal x441=(gclwh14_2*x181*x62);
IkReal x442=(gclwh14_3*r20*x301);
IkReal x443=(gclwh0_0*x181*x62);
IkReal x444=(gclwh2_0*npy*x300);
IkReal x445=(gclwh5_1*x130*x76);
IkReal x446=(gclwh13_1*x130*x72);
IkReal x447=(gclwh15_0*x181*x62);
IkReal x448=(gclwh2_1*x130*x72);
IkReal x449=(gclwh0_1*x181*x92);
IkReal x450=(gclwh5_0*npz*x300);
IkReal x451=(gclwh13_0*npy*x300);
IkReal x452=((1.0)*x174*x92);
IkReal x453=((1.0)*x137*x92);
IkReal x454=(gclwh2_0*x109*x92);
IkReal x455=(gclwh13_1*x109*x63);
IkReal x456=(x191*x301);
IkReal x457=(gclwh15_1*x181*x92);
IkReal x458=(x281+x280);
IkReal x459=(x286+x285);
IkReal x460=(x247+x246);
IkReal x461=(x219+x221);
IkReal x462=(x243+x244);
IkReal x463=(x274+x275);
IkReal x464=(x319+x229+x228+x227);
IkReal x465=(x329+x232+x233+x235);
IkReal x466=(x391+x392+x267+x269);
IkReal x467=(x369+x363+x258+x259);
IkReal x468=(x296+x416+x414+x415);
IkReal x469=(x304+x305+x303+x217);
IkReal x470=(x343+x344+x345+x248);
IkReal x471=(x397+x396+x398+x273);
IkReal x472=(x339+x338+x337+x241);
IkReal x473=(x378+x265+x261+x263+x262);
IkReal x474=(x356+x254+x255+x256+x252);
IkReal x475=(x310+x312+x223+x222+x226);
IkReal x476=(x333+x331+x238+x239+x237);
IkReal x477=(x346+x347+x348+x250+x251);
IkReal x478=(x395+x394+x393+x272+x270);
IkReal x479=(x342+x340+x341+x242+x245);
IkReal x480=(x298+x297+x417+x418+x419);
IkReal x481=(x294+x295+x412+x413+x411);
IkReal x482=(x308+x306+x307+x218+x220);
IkReal x483=(x284+x283+x282+x403+x402+x404);
IkReal x484=(x291+x292+x293+x409+x408+x410);
IkReal x485=(x290+x289+x288+x405+x407+x406);
IkReal x486=(x399+x276+x277+x278+x401+x400);
IkReal x487=(((x68*x95))+((x176*x94))+((gclwh12_11*x83))+(((0.017917245)*x215))+((gclwh10_11*x160))+(((4.0)*gclwh14_11*x97))+((gclwh8_11*x110)));
IkReal x488=(x320+x321+x322+x318+x230+x423+x422+x421);
IkReal x489=(x332+x336+x335+x334+x236+x427+x426+x425);
IkReal x490=(x309+x315+x314+x317+x316+x311+x313+x225+x224+x420);
IkReal x491=(x330+x324+x325+x326+x327+x323+x328+x231+x234+x424);
IkReal x492=(x386+x387+x388+x389+x390+x266+x268+x449+x448+x456+x457+x454+x455+x452+x453+x450+x451);
IkReal x493=(x351+x350+x353+x352+x355+x354+x357+x359+x358+x349+x360+x361+x257+x253+x429+x428+x430+x431+x432+x64);
IkReal x494=(x370+x368+x362+x364+x365+x366+x367+x260+x438+x439+x433+x434+x435+x436+x437+x441+x440+x442);
IkReal x495=(x384+x385+x382+x383+x380+x381+x379+x377+x376+x375+x374+x373+x372+x371+x264+x445+x444+x447+x446+x443+x64);
op[0]=((((1.6345)*gclwh10_12*x76))+(((0.154705425)*x98))+(((-1.0)*x482))+((gclwh6_12*x102))+(((-1.0)*x91*x96))+(((-0.007321434238125)*x96))+(((-1.6345)*gclwh6_12*x72))+(((-1.0)*gclwh4_8*x88))+x469+x461+((x200*x91))+(((-0.81725)*gclwh10_12*x68))+(((-1.0)*x216))+(((1.6345)*gclwh8_12*x97))+(((-0.007321434238125)*x78))+(((-1.0)*gclwh12_8*x82)));
op[1]=((((-1.0)*x488))+(((-1.0)*gclwh12_3*x208))+(((-1.0)*x475))+(((-0.12699240901125)*x134))+x490+x464+(((-1.0)*x183*x67))+((pp*x71))+(((0.12699240901125)*x74))+((gclwh10_11*x68)));
op[2]=((-0.17125635)+(((-1.0)*x483))+x486);
op[3]=(((gclwh8_2*x121))+((gclwh10_2*x187))+(((-0.160905)*x98))+(((0.7845)*gclwh8_2*x112))+(((-1.0)*gclwh6_2*x69))+(((-0.7845)*gclwh6_2*x94))+(((0.160905)*x207))+(((-0.14850585)*x147))+(((-0.14850585)*x150))+(((-1.569)*gclwh10_2*x76))+(((0.7845)*gclwh10_2*x68))+(((0.160905)*x116))+(((-1.0)*x458))+x279+(((-1.569)*gclwh8_2*x97))+(((0.14850585)*x209))+(((1.569)*gclwh6_2*x72)));
op[4]=((((-0.000293394886875)*x78))+(((-0.0655)*gclwh6_12*x72))+(((-1.0)*x482))+(((0.03275)*gclwh6_12*x94))+(((-1.0)*x461))+(((-0.03275)*gclwh10_12*x68))+(((-0.000293394886875)*x96))+((gclwh4_8*x178))+x216+x469+(((0.0655)*gclwh10_12*x76))+(((0.0655)*gclwh8_12*x97))+(((0.006199575)*x116))+(((0.000293394886875)*x200))+(((-0.006199575)*x98))+(((-1.0)*x148*x96)));
op[5]=(((pp*x67))+(((-1.0)*x488))+(((-1.0)*x183*x71))+(((-1.0)*x464))+x490+x475+(((-1.0)*gclwh12_3*x80))+(((-0.00076243651125)*x134))+(((0.00076243651125)*x74))+(((-1.0)*gclwh10_11*x68)));
op[6]=((((0.12699240901125)*x171))+(((-1.0)*x489))+(((-1.0)*gclwh9_10*x112))+((gclwh7_10*x94))+(((-1.0)*gclwh13_1*x208))+(((-1.0)*gclwh11_10*x68))+(((-1.0)*x465))+x491+x476+(((-0.12699240901125)*x167)));
op[7]=(((gclwh7_13*x102))+((x162*x91))+(((-1.0)*gclwh13_9*x82))+(((0.154705425)*x185))+(((-1.0)*x479))+(((-1.0)*gclwh5_9*x88))+x462+x472+(((-1.0)*x172*x91))+(((1.6345)*gclwh9_13*x97))+(((-0.007321434238125)*x108))+(((-1.0)*x240))+(((-0.007321434238125)*x172))+(((1.6345)*gclwh11_13*x76))+(((-1.6345)*gclwh7_13*x72))+(((-0.81725)*gclwh11_13*x68)));
op[8]=((((-0.160905)*x192))+(((0.160905)*x185))+(((-0.160905)*x100))+(((0.14850585)*x180))+(((1.569)*gclwh7_0*x72))+(((-1.0)*gclwh7_0*x69))+(((0.7845)*gclwh11_0*x68))+(((-0.14850585)*x151))+(((-0.14850585)*x164))+((gclwh9_0*x121))+x459+(((-1.569)*gclwh11_0*x76))+(((-1.569)*gclwh9_0*x97))+(((-1.0)*x287))+(((-0.7845)*gclwh7_0*x94))+((gclwh11_0*x187))+(((0.7845)*gclwh9_0*x112)));
op[9]=((-0.17125635)+(((-1.0)*x484))+x485);
op[10]=((((-1.0)*x489))+(((-1.0)*gclwh7_10*x94))+(((-1.0)*x476))+x491+x465+(((0.00076243651125)*x171))+((gclwh9_10*x112))+(((-0.00076243651125)*x167))+(((-1.0)*gclwh13_1*x80))+((gclwh11_10*x68)));
op[11]=((((0.000293394886875)*x162))+(((-0.03275)*gclwh9_13*x112))+(((0.03275)*gclwh7_13*x94))+(((-0.006199575)*x185))+(((-0.0655)*gclwh7_13*x72))+(((-1.0)*x479))+(((-1.0)*x462))+(((-0.000293394886875)*x108))+((gclwh13_9*x149))+(((0.0655)*gclwh11_13*x76))+(((-0.03275)*gclwh11_13*x68))+x240+x472+(((0.0655)*gclwh9_13*x97))+(((-0.000293394886875)*x172))+(((0.006199575)*x100)));
op[12]=((((1.6345)*gclwh4_8*x76))+(((1.6345)*gclwh12_8*x72))+(((-1.6345)*gclwh14_8*x97))+(((-1.0)*x90*x91))+(((-0.007321434238125)*x90))+(((-1.0)*x470))+(((0.154705425)*x158))+((gclwh10_12*x88))+x460+x477+(((-0.81725)*gclwh4_8*x68))+((x115*x91))+(((-1.0)*x249))+(((0.007321434238125)*x115))+(((-1.0)*gclwh6_12*x82))+(((-0.007321434238125)*x195)));
op[13]=((-0.679811285)+(((1.341705325)*gclwh12_3*x72))+(((-1.0)*x494))+(((1.341705325)*gclwh4_3*x76))+(((-1.0)*gclwh12_3*x198))+(((-0.66189404)*gclwh4_3*x68))+(((-0.66189404)*gclwh12_3*x94))+(((-1.0)*x474))+((gclwh3_3*x198))+(((-0.679811285)*gclwh1_3*x112))+(((-0.679811285)*gclwh3_3*x94))+(((1.341705325)*gclwh3_3*x72))+(((-1.0)*gclwh4_11*x68))+(((1.341705325)*gclwh1_3*x97))+x493+x467+((gclwh1_3*x81))+((gclwh14_3*x81))+(((-1.341705325)*gclwh14_3*x97))+((gclwh14_11*x112))+(((-1.0)*gclwh12_11*x94))+(((-0.00600991575645741)*x210))+(((0.66189404)*gclwh14_3*x112)));
op[14]=((-0.07735732)+(((-1.0)*x487))+x481);
op[15]=((((-1.0)*gclwh4_2*x187))+(((-0.14850585)*x79))+(((1.569)*gclwh3_2*x72))+(((0.7845)*pp*x93))+(((-1.0)*x480))+(((-0.7845)*gclwh12_2*x94))+(((-0.007614829125)*x115))+(((1.569)*gclwh12_2*x72))+(((-0.14850585)*x168))+(((0.00702803935125)*x93))+(((0.85)*pp*x90))+(((0.007614829125)*x90))+x468+(((0.007614829125)*x195))+(((-1.0)*gclwh12_2*x69))+(((-0.85)*x299))+((gclwh3_2*x69))+(((-0.7845)*gclwh1_2*x112))+(((0.85)*gclwh4_8*x68))+(((1.569)*gclwh4_2*x76))+((x155*x65))+(((-0.7845)*gclwh3_2*x94))+(((-1.569)*gclwh14_2*x97))+(((1.569)*gclwh1_2*x97))+(((-1.0)*gclwh12_8*npy*x65))+((gclwh1_2*x121))+(((-1.0)*gclwh4_8*npz*x65))+(((0.14850585)*x205))+(((-0.7845)*gclwh4_2*x68)));
op[16]=((((0.0655)*gclwh14_8*x97))+(((-1.0)*gclwh6_12*x149))+(((0.03275)*gclwh4_8*x68))+((x148*x90))+(((-0.0655)*gclwh12_8*x72))+(((-0.0655)*gclwh4_8*x76))+(((-1.0)*x477))+(((-0.000293394886875)*x115))+(((0.000293394886875)*x90))+x460+x470+(((0.006199575)*x158))+((gclwh10_12*x178))+(((-1.0)*x249))+(((-0.03275)*x299))+(((0.000293394886875)*x195)));
op[17]=((0.012986285)+(((-0.00493096)*gclwh14_3*x112))+(((-1.0)*gclwh14_11*x112))+(((0.008055325)*gclwh3_3*x72))+(((-1.0)*x494))+((gclwh4_11*x68))+(((0.00493096)*gclwh4_3*x68))+(((-1.0)*x467))+(((-0.012986285)*gclwh3_3*x94))+(((0.008055325)*gclwh12_3*x72))+x493+x474+(((0.008055325)*gclwh4_3*x76))+(((-0.008055325)*gclwh14_3*x97))+((gclwh3_3*x152))+(((0.00493096)*gclwh12_3*x94))+(((3.60823078949063e-5)*x132))+(((-1.0)*gclwh4_3*x73))+(((-0.012986285)*gclwh1_3*x112))+((gclwh12_11*x94))+((gclwh14_3*x186))+(((-1.0)*gclwh12_3*x152))+(((0.008055325)*gclwh1_3*x97)));
op[18]=((0.679811285)+(((0.66189404)*gclwh5_1*x68))+(((-1.0)*x492))+(((1.341705325)*gclwh0_1*x97))+(((0.00600991575645741)*x191))+(((-0.66189404)*gclwh15_1*x112))+(((0.00600991575645741)*x140))+(((-1.0)*gclwh15_1*x81))+(((-0.679811285)*gclwh0_1*x112))+(((-1.341705325)*gclwh5_1*x76))+(((-1.0)*x473))+(((-1.341705325)*gclwh13_1*x72))+(((-1.0)*gclwh13_10*x94))+((gclwh0_1*x81))+((gclwh15_10*x112))+(((-1.0)*gclwh5_10*x68))+x495+x466+(((0.66189404)*gclwh13_1*x94))+(((1.341705325)*gclwh2_1*x72))+(((-0.679811285)*gclwh2_1*x94))+(((1.341705325)*gclwh15_1*x97))+((gclwh13_1*x198)));
op[19]=((((-1.0)*x478))+(((-1.0)*x463))+(((-1.0)*gclwh11_13*x88))+(((-0.154705425)*x182))+x271+x471+(((-0.007321434238125)*x131))+((x103*x66))+(((-1.6345)*gclwh13_9*x72))+(((0.007321434238125)*x106))+((gclwh7_13*x82))+(((0.81725)*gclwh5_9*x68))+((gclwh13_9*x102))+((x122*x91))+(((-1.0)*x131*x91))+(((-1.0)*x103*x70)));
op[20]=((((-0.7845)*gclwh15_0*x112))+((gclwh15_15*x133))+(((-0.85)*gclwh15_9*x112))+((gclwh0_0*x121))+(((0.007614829125)*x106))+(((-0.007614829125)*x131))+((gclwh2_0*x69))+(((-0.14850585)*x86))+(((-0.7845)*gclwh2_0*x94))+(((0.4366)*gclwh13_15*x72))+(((0.007614829125)*x122))+(((-1.569)*gclwh5_0*x76))+(((0.7845)*gclwh5_0*x68))+((gclwh13_0*x69))+(((1.569)*gclwh15_0*x97))+(((0.14850585)*x143))+(((-0.7845)*gclwh0_0*x112))+(((-1.0)*gclwh15_0*x121))+(((1.569)*gclwh2_0*x72))+(((-1.0)*x189*x68))+(((1.569)*gclwh0_0*x97))+((x112*x201))+(((-1.0)*gclwh5_15*x113))+(((0.85)*gclwh5_9*x68))+(((0.4366)*gclwh5_15*x76))+(((-1.0)*gclwh13_15*x157))+(((0.85)*gclwh13_9*x94))+(((-0.4366)*gclwh15_15*x97))+(((0.00702803935125)*x123))+(((0.14850585)*x202))+(((-1.0)*gclwh13_9*npy*x65))+(((0.7845)*gclwh13_0*x94))+(((-1.569)*gclwh13_0*x72))+(((-1.0)*x135*x94))+((x65*x66))+(((-1.0)*x65*x70)));
op[21]=((-0.07735732)+(((-1.0)*x112*x118))+(((4.0)*gclwh15_10*x97))+((gclwh11_10*x160))+((x193*x68))+(((-4.0)*gclwh13_10*x72))+(((-1.0)*gclwh15_10*x196))+((gclwh9_10*x110))+(((0.017917245)*x129))+((x120*x94))+((gclwh13_10*x83))+(((-4.0)*gclwh5_10*x76))+(((-1.0)*gclwh7_10*x85)));
op[22]=((-0.012986285)+((gclwh5_1*x73))+(((0.008055325)*gclwh2_1*x72))+(((3.60823078949063e-5)*x140))+(((-1.0)*x492))+(((-1.0)*gclwh15_10*x112))+(((-0.00493096)*gclwh5_1*x68))+(((-0.012986285)*gclwh2_1*x94))+(((-0.008055325)*gclwh5_1*x76))+(((0.008055325)*gclwh15_1*x97))+(((-1.0)*x466))+(((-0.012986285)*gclwh0_1*x112))+x495+x473+((gclwh0_1*x186))+(((0.00493096)*gclwh15_1*x112))+(((-0.00493096)*gclwh13_1*x94))+(((0.008055325)*gclwh0_1*x97))+((gclwh13_10*x94))+((gclwh5_10*x68))+(((-3.60823078949063e-5)*x125))+(((-0.008055325)*gclwh13_1*x72))+((gclwh13_1*x152)));
op[23]=((((0.0655)*gclwh13_9*x72))+(((-0.006199575)*x182))+(((0.03275)*gclwh15_9*x112))+(((-0.03275)*gclwh13_9*x94))+(((-0.000293394886875)*x122))+((gclwh7_13*x149))+(((-0.03275)*gclwh5_9*x68))+(((-1.0)*x471))+(((0.000293394886875)*x131))+(((-1.0)*x463))+(((-0.000293394886875)*x106))+x271+x478+(((-1.0)*gclwh11_13*x178))+(((-1.0)*x177*x66))+((x177*x70)));
op[24]=((-0.35681135)+(((-1.0)*x483))+x486);
op[25]=((((-3.269)*gclwh8_2*x97))+((gclwh8_2*x124))+((gclwh10_2*x161))+(((-1.0)*gclwh6_2*x159))+(((3.269)*gclwh6_2*x72))+(((-3.269)*gclwh10_2*x76))+(((-1.0)*x458))+(((-0.30941085)*x150))+x279+((gclwh14_2*x142))+(((-0.30941085)*x147))+(((-1.6345)*gclwh6_2*x94))+(((1.6345)*gclwh8_2*x112))+(((1.6345)*gclwh10_2*x68)));
op[26]=((((1.569)*pp*x96))+(((0.08264838)*x111))+(((1.569)*gclwh10_12*x68))+(((-3.138)*gclwh10_12*x76))+(((0.0140560787025)*x78))+(((-0.0140560787025)*x200))+(((-1.569)*gclwh6_12*x94))+(((-0.08264838)*x179))+(((0.0140560787025)*x96))+(((-0.08264838)*x204))+(((3.138)*gclwh6_12*x72))+(((-3.138)*gclwh8_12*x97)));
op[27]=((((-0.03583449)*x71))+(((0.03583449)*x67))+(((8.0)*gclwh10_11*x76))+(((0.7572)*gclwh4_11*rxp2_2))+(((-0.03583449)*x175))+((x170*x67))+(((8.0)*gclwh8_11*x97))+(((-0.7572)*x153))+(((-1.0)*x170*x71))+((gclwh12_11*x87))+(((-8.0)*gclwh6_11*x72))+(((-1.0)*x184*x68)));
op[28]=((-0.01429865)+(((-1.0)*x486))+x483);
op[29]=((((-0.00058678977375)*x166))+(((-0.131)*gclwh8_2*x97))+(((0.00058678977375)*x190))+(((0.00058678977375)*x188))+(((0.0655)*gclwh8_2*x112))+x458+(((-0.0655)*gclwh6_2*x94))+(((-1.0)*x279))+(((0.131)*gclwh6_2*x72))+(((-0.131)*gclwh10_2*x76))+(((0.01239915)*x209))+(((-0.01239915)*x150))+(((0.0655)*gclwh10_2*x68))+(((-0.01239915)*x147)));
op[30]=((((-3.269)*gclwh9_0*x97))+(((-1.6345)*gclwh7_0*x94))+(((-0.30941085)*x164))+(((3.269)*gclwh7_0*x72))+(((-0.30941085)*x151))+(((1.6345)*gclwh9_0*x112))+((gclwh9_0*x124))+x459+(((-1.0)*gclwh7_0*x159))+(((-3.269)*gclwh11_0*x76))+(((1.6345)*gclwh11_0*x68))+((gclwh15_0*x142))+(((-1.0)*x287))+((gclwh11_0*x161)));
op[31]=((-0.35681135)+(((-1.0)*x484))+x485);
op[32]=((((-1.0)*x163*x94))+((x141*x68))+(((0.03583449)*x169))+(((-1.0)*gclwh13_10*x87))+(((-0.03583449)*gclwh7_10*r21))+((x112*x156))+(((0.03583449)*x107))+(((-8.0)*gclwh11_10*x76))+(((8.0)*gclwh7_10*x72))+(((-0.7572)*x144))+(((0.7572)*x114))+(((-8.0)*gclwh9_10*x97)));
op[33]=((((-0.0140560787025)*x162))+(((-3.138)*gclwh11_13*x76))+(((-0.08264838)*x119))+(((1.569)*gclwh9_13*x112))+(((0.0140560787025)*x108))+(((-0.08264838)*x212))+(((0.08264838)*x139))+(((1.569)*gclwh11_13*x68))+(((3.138)*gclwh7_13*x72))+(((0.0140560787025)*x172))+(((-1.569)*gclwh7_13*x94))+(((-3.138)*gclwh9_13*x97)));
op[34]=((((-0.0655)*gclwh7_0*x94))+(((-0.00058678977375)*x197))+(((0.00058678977375)*x199))+(((0.131)*gclwh7_0*x72))+(((0.00058678977375)*x138))+(((-1.0)*x459))+x287+(((0.0655)*gclwh11_0*x68))+(((-0.131)*gclwh11_0*x76))+(((0.0655)*gclwh9_0*x112))+(((-0.131)*gclwh9_0*x97))+(((-0.01239915)*x164))+(((-0.01239915)*x151))+(((0.01239915)*x180)));
op[35]=((-0.01429865)+(((-1.0)*x485))+x484);
op[36]=((1.31196768)+(((-1.0)*x487))+x481);
op[37]=((((-1.6345)*gclwh3_2*x94))+(((3.269)*gclwh12_2*x72))+(((-1.0)*gclwh12_2*x159))+(((0.30941085)*x205))+(((-1.0)*x480))+(((-1.0)*gclwh4_2*x161))+(((-3.269)*gclwh14_2*x97))+(((-1.6345)*gclwh1_2*x112))+(((0.01464286847625)*x93))+(((3.269)*gclwh1_2*x97))+x468+(((-1.6345)*gclwh12_2*x94))+(((3.269)*gclwh3_2*x72))+((gclwh3_2*x159))+((gclwh1_2*x124))+(((-1.0)*gclwh8_2*x142))+(((-1.6345)*gclwh4_2*x68))+(((1.6345)*pp*x93))+(((3.269)*gclwh4_2*x76))+(((-0.30941085)*x79)));
IkReal x496=pz*pz;
IkReal x497=pp*pp;
IkReal x498=((0.1893)*pz);
IkReal x499=((1.7)*pz);
IkReal x500=(gclwh15_9*npx);
IkReal x501=(pp*r21);
IkReal x502=(pp*r22);
IkReal x503=((0.00702803935125)*r21);
IkReal x504=(gclwh5_9*npz);
IkReal x505=(pp*r20);
IkReal x506=(npy*pz);
IkReal x507=((4.0)*gclwh12_11);
IkReal x508=((3.60823078949063e-5)*r22);
IkReal x509=(gclwh14_3*rxp0_2);
IkReal x510=((0.000977833645875)*r20);
IkReal x511=(npz*pz);
IkReal x512=((0.000977833645875)*r21);
IkReal x513=(gclwh10_2*rxp2_2);
IkReal x514=((0.00076243651125)*rxp1_2);
IkReal x515=((0.00600991575645741)*r20);
IkReal x516=((0.154705425)*rxp1_2);
IkReal x517=((0.4366)*gclwh5_15);
IkReal x518=(gclwh6_11*rxp1_2);
IkReal x519=(gclwh7_0*rxp1_2);
IkReal x520=((0.154705425)*rxp2_2);
IkReal x521=((2.0)*gclwh11_10);
IkReal x522=((0.2970117)*rxp1_2);
IkReal x523=((0.017917245)*r21);
IkReal x524=(gclwh14_2*pz);
IkReal x525=(gclwh12_8*r21);
IkReal x526=(gclwh14_2*rxp0_2);
IkReal x527=((2.0)*gclwh4_11);
IkReal x528=((0.007321434238125)*r20);
IkReal x529=(npx*pz);
IkReal x530=((0.4366)*gclwh15_15);
IkReal x531=(gclwh10_11*rxp2_2);
IkReal x532=(gclwh5_9*rxp2_2);
IkReal x533=((0.020662095)*rxp1_2);
IkReal x534=((0.007321434238125)*r21);
IkReal x535=(gclwh0_0*r20);
IkReal x536=((0.0089586225)*r21);
IkReal x537=(gclwh13_0*pz);
IkReal x538=((1.6345)*pz);
IkReal x539=((0.007321434238125)*r22);
IkReal x540=((1.0)*pz);
IkReal x541=(gclwh14_14*rxp0_2);
IkReal x542=(gclwh4_14*r22);
IkReal x543=((0.1893)*rxp0_2);
IkReal x544=((0.00058678977375)*r22);
IkReal x545=(gclwh12_8*rxp1_2);
IkReal x546=((2.0)*gclwh9_10);
IkReal x547=((0.1893)*rxp2_2);
IkReal x548=((2.0)*gclwh15_10);
IkReal x549=((4.0)*gclwh14_11);
IkReal x550=(gclwh5_15*rxp2_2);
IkReal x551=((0.020662095)*rxp0_2);
IkReal x552=((2.0)*gclwh13_10);
IkReal x553=((0.3786)*rxp1_2);
IkReal x554=(gclwh9_0*r20);
IkReal x555=(gclwh13_9*r21);
IkReal x556=(gclwh15_1*r20);
IkReal x557=((0.000977833645875)*r22);
IkReal x558=((0.006199575)*rxp0_2);
IkReal x559=(gclwh6_2*rxp1_2);
IkReal x560=((0.0089586225)*r20);
IkReal x561=((2.0)*gclwh10_11);
IkReal x562=((2.0)*pp);
IkReal x563=((0.00058678977375)*r21);
IkReal x564=(gclwh1_3*r20);
IkReal x565=(gclwh14_14*r20);
IkReal x566=(gclwh9_0*rxp0_2);
IkReal x567=(gclwh4_3*rxp2_2);
IkReal x568=(gclwh5_0*r22);
IkReal x569=((0.03583449)*r20);
IkReal x570=((0.00058678977375)*r20);
IkReal x571=((0.2183)*gclwh13_15);
IkReal x572=((2.0)*gclwh7_10);
IkReal x573=(gclwh2_1*r21);
IkReal x574=((4.0)*gclwh15_10);
IkReal x575=((0.0089586225)*pz);
IkReal x576=((0.2183)*gclwh12_14);
IkReal x577=((0.2183)*gclwh14_14);
IkReal x578=(gclwh11_0*rxp2_2);
IkReal x579=(gclwh8_2*rxp0_2);
IkReal x580=((0.3786)*rxp2_2);
IkReal x581=(gclwh12_2*rxp1_2);
IkReal x582=(gclwh5_0*rxp2_2);
IkReal x583=((3.60823078949063e-5)*r21);
IkReal x584=(gclwh15_9*r20);
IkReal x585=((0.3786)*rxp0_2);
IkReal x586=((0.006199575)*rxp1_2);
IkReal x587=(gclwh14_8*npx);
IkReal x588=(gclwh13_15*r21);
IkReal x589=((0.017917245)*r20);
IkReal x590=(gclwh5_15*r22);
IkReal x591=((0.000293394886875)*r21);
IkReal x592=(gclwh13_0*rxp1_2);
IkReal x593=(gclwh7_10*rxp1_2);
IkReal x594=((0.000293394886875)*r22);
IkReal x595=(gclwh5_1*rxp2_2);
IkReal x596=((0.154705425)*rxp0_2);
IkReal x597=((0.4366)*gclwh13_15);
IkReal x598=((0.0089586225)*r22);
IkReal x599=((0.2970117)*rxp2_2);
IkReal x600=(gclwh5_9*r22);
IkReal x601=((0.7572)*rxp0_2);
IkReal x602=((4.0)*gclwh4_11);
IkReal x603=(gclwh15_1*rxp0_2);
IkReal x604=((0.000293394886875)*r20);
IkReal x605=((2.0)*gclwh6_11);
IkReal x606=((0.4366)*gclwh12_14);
IkReal x607=((0.017917245)*r22);
IkReal x608=(gclwh15_0*r20);
IkReal x609=(gclwh15_15*r20);
IkReal x610=((2.0)*gclwh12_11);
IkReal x611=(gclwh14_8*rxp0_2);
IkReal x612=((0.0655)*pz);
IkReal x613=((0.006199575)*rxp2_2);
IkReal x614=((0.04132419)*rxp1_2);
IkReal x615=((0.4366)*gclwh4_14);
IkReal x616=(gclwh15_0*rxp0_2);
IkReal x617=(gclwh14_8*r20);
IkReal x618=((0.03583449)*r22);
IkReal x619=((2.0)*gclwh8_11);
IkReal x620=((4.0)*gclwh13_10);
IkReal x621=(gclwh15_9*rxp0_2);
IkReal x622=((3.60823078949063e-5)*r20);
IkReal x623=((0.00702803935125)*r22);
IkReal x624=((0.2183)*gclwh5_15);
IkReal x625=(gclwh5_1*r22);
IkReal x626=((4.0)*gclwh5_10);
IkReal x627=(gclwh13_9*rxp1_2);
IkReal x628=((2.0)*gclwh5_10);
IkReal x629=((0.4366)*gclwh14_14);
IkReal x630=((0.020662095)*rxp2_2);
IkReal x631=(gclwh4_8*r22);
IkReal x632=(gclwh4_2*rxp2_2);
IkReal x633=((0.00600991575645741)*r21);
IkReal x634=((0.2183)*gclwh15_15);
IkReal x635=((0.2183)*gclwh4_14);
IkReal x636=((0.00702803935125)*r20);
IkReal x637=(gclwh12_14*r21);
IkReal x638=(gclwh4_8*rxp2_2);
IkReal x639=((0.2970117)*rxp0_2);
IkReal x640=(gclwh8_2*pz);
IkReal x641=(gclwh13_1*rxp1_2);
IkReal x642=((0.1893)*pp);
IkReal x643=(gclwh12_3*rxp1_2);
IkReal x644=((0.01464286847625)*r21);
IkReal x645=((0.1893)*rxp1_2);
IkReal x646=(gclwh4_3*r22);
IkReal x647=((2.0)*gclwh14_11);
IkReal x648=((0.03583449)*r21);
IkReal x649=((0.00195566729175)*x588);
IkReal x650=((0.00195566729175)*x590);
IkReal x651=((0.00195566729175)*x609);
IkReal x652=(gclwh15_10*x589);
IkReal x653=(gclwh7_10*x553);
IkReal x654=(gclwh5_10*x607);
IkReal x655=(gclwh9_10*x585);
IkReal x656=(gclwh13_10*x523);
IkReal x657=(gclwh11_10*x580);
IkReal x658=(gclwh12_14*x533);
IkReal x659=(gclwh6_5*x512);
IkReal x660=(gclwh4_14*x630);
IkReal x661=(gclwh8_5*x510);
IkReal x662=((0.020662095)*x541);
IkReal x663=(gclwh10_5*x557);
IkReal x664=((0.017917245)*x545);
IkReal x665=(gclwh8_11*x560);
IkReal x666=(gclwh14_11*x543);
IkReal x667=((0.017917245)*x638);
IkReal x668=(gclwh10_11*x598);
IkReal x669=(gclwh6_11*x536);
IkReal x670=(gclwh12_11*x645);
IkReal x671=(gclwh4_11*x547);
IkReal x672=((0.017917245)*x611);
IkReal x673=((0.017917245)*x532);
IkReal x674=(gclwh13_10*x645);
IkReal x675=(gclwh7_10*x536);
IkReal x676=(gclwh5_10*x547);
IkReal x677=((0.017917245)*x627);
IkReal x678=((0.017917245)*x621);
IkReal x679=(gclwh11_10*x598);
IkReal x680=(gclwh15_10*x543);
IkReal x681=(gclwh9_10*x560);
IkReal x682=(gclwh13_15*x533);
IkReal x683=((0.020662095)*x550);
IkReal x684=(gclwh7_7*x512);
IkReal x685=(gclwh9_7*x510);
IkReal x686=(gclwh15_15*x551);
IkReal x687=(gclwh11_7*x557);
IkReal x688=(gclwh12_11*x523);
IkReal x689=((0.3786)*x531);
IkReal x690=(gclwh4_11*x607);
IkReal x691=(gclwh8_11*x585);
IkReal x692=((0.00195566729175)*x542);
IkReal x693=((0.00195566729175)*x637);
IkReal x694=((0.00195566729175)*x565);
IkReal x695=((0.000977833645875)*x542);
IkReal x696=(gclwh10_5*x630);
IkReal x697=(gclwh12_14*x512);
IkReal x698=(gclwh8_5*x551);
IkReal x699=(gclwh6_5*x533);
IkReal x700=(gclwh14_14*x510);
IkReal x701=((0.000847933619625)*x525);
IkReal x702=((0.1893)*x518);
IkReal x703=(gclwh14_11*x560);
IkReal x704=((0.000847933619625)*x631);
IkReal x705=(gclwh8_11*x543);
IkReal x706=(gclwh12_11*x536);
IkReal x707=((0.1893)*x531);
IkReal x708=(gclwh4_11*x598);
IkReal x709=((0.000847933619625)*x617);
IkReal x710=((0.1893)*x593);
IkReal x711=(gclwh15_10*x560);
IkReal x712=((0.000847933619625)*x584);
IkReal x713=((0.000847933619625)*x600);
IkReal x714=(gclwh9_10*x543);
IkReal x715=(gclwh13_10*x536);
IkReal x716=((0.000847933619625)*x555);
IkReal x717=(gclwh11_10*x547);
IkReal x718=(gclwh5_10*x598);
IkReal x719=(gclwh15_15*x510);
IkReal x720=(gclwh7_7*x533);
IkReal x721=(gclwh5_15*x557);
IkReal x722=(gclwh9_7*x551);
IkReal x723=(gclwh11_7*x630);
IkReal x724=(gclwh13_15*x512);
IkReal x725=((2.0)*x496);
IkReal x726=(r21*x497);
IkReal x727=((1.0)*x497);
IkReal x728=(x501*x571);
IkReal x729=(x529*x530);
IkReal x730=(x502*x624);
IkReal x731=(x506*x597);
IkReal x732=(x505*x634);
IkReal x733=(x511*x517);
IkReal x734=(x505*x548);
IkReal x735=(x511*x626);
IkReal x736=(x506*x620);
IkReal x737=(x501*x552);
IkReal x738=(x529*x574);
IkReal x739=(x502*x628);
IkReal x740=((0.2183)*gclwh10_5*x511);
IkReal x741=((0.2183)*gclwh8_5*x529);
IkReal x742=((0.10915)*gclwh6_5*x501);
IkReal x743=((0.2183)*gclwh6_5*x506);
IkReal x744=((0.10915)*gclwh8_5*x505);
IkReal x745=((0.10915)*gclwh10_5*x502);
IkReal x746=(x642*x643);
IkReal x747=(x506*x605);
IkReal x748=(x560*x640);
IkReal x749=(gclwh10_2*pz*x502);
IkReal x750=(x498*x526);
IkReal x751=(x505*x640);
IkReal x752=(gclwh4_3*pp*x547);
IkReal x753=(gclwh10_2*r22*x575);
IkReal x754=(x498*x581);
IkReal x755=(x511*x561);
IkReal x756=(x498*x632);
IkReal x757=(x509*x642);
IkReal x758=(x529*x619);
IkReal x759=(gclwh6_2*pz*x536);
IkReal x760=(x641*x642);
IkReal x761=(x511*x521);
IkReal x762=(x529*x546);
IkReal x763=(gclwh11_0*r22*x575);
IkReal x764=(x554*x575);
IkReal x765=(gclwh5_1*pp*x547);
IkReal x766=(x498*x616);
IkReal x767=(gclwh11_0*pz*x502);
IkReal x768=(gclwh9_0*pz*x505);
IkReal x769=(gclwh15_1*pp*x543);
IkReal x770=(gclwh7_0*pz*x536);
IkReal x771=(x498*x592);
IkReal x772=(x498*x582);
IkReal x773=(x506*x572);
IkReal x774=((0.10915)*gclwh7_7*x501);
IkReal x775=((0.2183)*gclwh9_7*x529);
IkReal x776=((0.2183)*gclwh11_7*x511);
IkReal x777=((0.10915)*gclwh9_7*x505);
IkReal x778=((0.2183)*gclwh7_7*x506);
IkReal x779=((0.10915)*gclwh11_7*x502);
IkReal x780=(x502*x527);
IkReal x781=(x501*x610);
IkReal x782=(x529*x549);
IkReal x783=(x501*x576);
IkReal x784=(x529*x629);
IkReal x785=(x502*x635);
IkReal x786=(x505*x577);
IkReal x787=(x506*x606);
IkReal x788=(x511*x615);
IkReal x789=((0.10915)*gclwh12_14*x501);
IkReal x790=(x529*x577);
IkReal x791=((0.10915)*gclwh4_14*x502);
IkReal x792=((0.10915)*gclwh14_14*x505);
IkReal x793=(x511*x635);
IkReal x794=(x506*x576);
IkReal x795=((0.09465)*gclwh4_8*x502);
IkReal x796=(x505*x524);
IkReal x797=(gclwh12_3*x726);
IkReal x798=(x511*x527);
IkReal x799=(x498*x559);
IkReal x800=(gclwh3_3*x726);
IkReal x801=(x497*x564);
IkReal x802=(gclwh3_2*pz*x536);
IkReal x803=(x498*x587);
IkReal x804=(x524*x560);
IkReal x805=((0.09465)*gclwh12_8*x501);
IkReal x806=(x497*x646);
IkReal x807=(gclwh1_2*pz*x560);
IkReal x808=(x506*x610);
IkReal x809=(x498*x579);
IkReal x810=(gclwh4_2*r22*x575);
IkReal x811=(gclwh4_8*npz*x498);
IkReal x812=(gclwh12_2*pz*x536);
IkReal x813=(x498*x513);
IkReal x814=(x529*x647);
IkReal x815=((0.09465)*gclwh14_8*x505);
IkReal x816=(gclwh12_8*npy*x498);
IkReal x817=(x497*x556);
IkReal x818=(x498*x504);
IkReal x819=(gclwh5_0*pz*x502);
IkReal x820=(gclwh13_9*npy*x498);
IkReal x821=(x568*x575);
IkReal x822=(x501*x537);
IkReal x823=((0.09465)*gclwh15_9*x505);
IkReal x824=(x536*x537);
IkReal x825=(x497*x573);
IkReal x826=(x511*x628);
IkReal x827=(gclwh2_0*pz*x536);
IkReal x828=(x498*x566);
IkReal x829=(x506*x552);
IkReal x830=(x498*x578);
IkReal x831=(gclwh0_1*r20*x497);
IkReal x832=(x535*x575);
IkReal x833=((0.09465)*gclwh5_9*x502);
IkReal x834=(x498*x519);
IkReal x835=((0.09465)*gclwh13_9*x501);
IkReal x836=(gclwh15_0*pz*x560);
IkReal x837=(x498*x500);
IkReal x838=(x529*x548);
IkReal x839=((0.10915)*gclwh15_15*x505);
IkReal x840=(x511*x624);
IkReal x841=(x506*x571);
IkReal x842=((0.10915)*gclwh13_15*x501);
IkReal x843=((0.10915)*gclwh5_15*x502);
IkReal x844=(x529*x634);
IkReal x845=(gclwh6_2*npy*x725);
IkReal x846=(gclwh6_2*x501*x540);
IkReal x847=(gclwh10_2*npz*x725);
IkReal x848=(gclwh8_2*npx*x725);
IkReal x849=(gclwh7_0*npy*x725);
IkReal x850=(gclwh9_0*npx*x725);
IkReal x851=(gclwh11_0*npz*x725);
IkReal x852=(gclwh7_0*x501*x540);
IkReal x853=(gclwh12_2*npy*x725);
IkReal x854=(gclwh3_2*npy*x725);
IkReal x855=(gclwh1_2*npx*x725);
IkReal x856=(gclwh14_3*x529*x562);
IkReal x857=(gclwh4_2*npz*x725);
IkReal x858=(gclwh4_3*x511*x562);
IkReal x859=(gclwh12_2*x501*x540);
IkReal x860=(gclwh1_2*x505*x540);
IkReal x861=(gclwh3_3*x506*x562);
IkReal x862=(gclwh4_2*x502*x540);
IkReal x863=(gclwh1_3*x529*x562);
IkReal x864=(gclwh3_2*x501*x540);
IkReal x865=(gclwh12_3*x506*x562);
IkReal x866=(gclwh14_2*npx*x725);
IkReal x867=(gclwh14_3*r20*x727);
IkReal x868=(gclwh0_0*npx*x725);
IkReal x869=(gclwh2_0*npy*x725);
IkReal x870=(gclwh5_1*x511*x562);
IkReal x871=(gclwh13_1*x506*x562);
IkReal x872=(gclwh15_0*npx*x725);
IkReal x873=(gclwh2_1*x506*x562);
IkReal x874=(gclwh0_1*x529*x562);
IkReal x875=(gclwh5_0*npz*x725);
IkReal x876=(gclwh13_0*npy*x725);
IkReal x877=(gclwh0_0*x505*x540);
IkReal x878=(gclwh15_0*x505*x540);
IkReal x879=(gclwh2_0*x501*x540);
IkReal x880=((1.0)*gclwh13_1*x726);
IkReal x881=(x625*x727);
IkReal x882=(gclwh15_1*x529*x562);
IkReal x883=(x658+x660);
IkReal x884=(x696+x698);
IkReal x885=(x683+x682);
IkReal x886=(x722+x723);
IkReal x887=(x679+x681+x680+x773);
IkReal x888=(x668+x665+x666+x747);
IkReal x889=(x702+x703+x798+x808);
IkReal x890=(x711+x710+x829+x826);
IkReal x891=(x651+x733+x732+x731);
IkReal x892=(x659+x742+x740+x741);
IkReal x893=(x700+x793+x792+x794);
IkReal x894=(x694+x786+x787+x788);
IkReal x895=(x684+x776+x775+x774);
IkReal x896=(x719+x839+x841+x840);
IkReal x897=(x718+x715+x714+x717+x838);
IkReal x898=(x708+x706+x707+x705+x814);
IkReal x899=(x676+x674+x675+x761+x762);
IkReal x900=(x669+x670+x671+x755+x758);
IkReal x901=(((gclwh14_11*x589))+((x505*x647))+(((0.3786)*x518))+((x506*x507))+((x511*x602)));
IkReal x902=(x692+x693+x783+x784+x785);
IkReal x903=(x652+x653+x736+x735+x734);
IkReal x904=(x695+x697+x791+x790+x789);
IkReal x905=(x721+x724+x843+x842+x844);
IkReal x906=(x661+x663+x744+x745+x743);
IkReal x907=(x649+x650+x730+x728+x729);
IkReal x908=(x687+x685+x777+x779+x778);
IkReal x909=(x654+x655+x656+x657+x737+x739+x738);
IkReal x910=(x689+x688+x690+x691+x782+x780+x781);
IkReal x911=(x678+x772+x771+x770+x769+x852+x850+x851);
IkReal x912=(x672+x754+x757+x756+x759+x847+x846+x848);
IkReal x913=(x673+x677+x768+x764+x765+x766+x767+x760+x763+x849);
IkReal x914=(x664+x667+x751+x750+x753+x752+x746+x748+x749+x845);
IkReal x915=(x713+x716+x878+x879+x873+x874+x875+x876+x877+x881+x880+x882+x834+x835+x836+x837+x833);
IkReal x916=(x498+x701+x704+x795+x797+x796+x799+x853+x856+x857+x854+x855+x805+x804+x807+x806+x801+x800+x803+x802);
IkReal x917=(x709+x858+x859+x867+x866+x865+x864+x863+x862+x861+x860+x816+x815+x812+x813+x810+x811+x809);
IkReal x918=(x498+x712+x869+x868+x870+x871+x872+x818+x819+x817+x828+x823+x822+x821+x820+x827+x825+x824+x830+x831+x832);
op[38]=((((0.8732)*gclwh4_14*x511))+(((-0.0039113345835)*x637))+((x505*x629))+(((0.0039113345835)*x565))+(((-1.0)*x502*x615))+(((0.8732)*gclwh12_14*x506))+(((-1.0)*x501*x606))+(((-1.0)*gclwh8_12*x639))+(((-1.0)*gclwh10_12*x599))+(((-0.8732)*gclwh14_14*x529))+(((-0.0039113345835)*x542))+((gclwh6_12*x522)));
op[39]=((-0.05940486)+((gclwh8_11*x601))+(((-8.0)*gclwh4_11*x511))+((x502*x602))+(((0.7572)*x531))+(((-1.0)*x505*x549))+((x501*x507))+(((-0.7572)*x518))+((gclwh12_11*x648))+(((-8.0)*gclwh12_11*x506))+(((-1.0)*gclwh14_11*x569))+((gclwh4_11*x618))+(((8.0)*gclwh14_11*x529)));
op[40]=((0.02168232)+(((-1.0)*x901))+x910);
op[41]=(((gclwh3_2*x563))+(((-0.01239915)*x579))+(((-0.131)*npx*x524))+(((-1.0)*gclwh12_2*x563))+((gclwh1_2*x570))+((gclwh14_2*x570))+(((-0.0655)*gclwh1_2*x505))+(((-1.0)*x894))+(((0.01239915)*x559))+(((0.131)*gclwh4_2*x511))+(((0.0655)*gclwh14_2*x505))+(((-0.0655)*gclwh12_2*x501))+(((0.131)*gclwh12_2*x506))+(((0.131)*gclwh1_2*x529))+(((-0.0655)*gclwh4_2*x502))+x902+(((-0.0655)*gclwh3_2*x501))+(((-0.01239915)*x513))+(((0.131)*gclwh3_2*x506))+(((-1.0)*gclwh4_2*x544)));
op[42]=((((-3.269)*gclwh13_0*x506))+(((-0.30941085)*x519))+(((-1.6345)*gclwh15_0*x505))+(((0.30941085)*x566))+(((3.269)*gclwh0_0*x529))+(((1.6345)*gclwh13_0*x501))+(((-1.0)*x907))+(((-1.6345)*gclwh0_0*x505))+(((0.30941085)*x578))+(((0.01464286847625)*x568))+((gclwh13_0*x644))+((gclwh2_0*x644))+(((-0.01464286847625)*x608))+(((0.01464286847625)*x535))+x891+(((3.269)*gclwh2_0*x506))+(((-1.6345)*gclwh2_0*x501))+(((3.269)*gclwh15_0*x529))+(((-3.269)*gclwh5_0*x511))+(((1.6345)*gclwh5_0*x502)));
op[43]=((1.31196768)+(((-1.0)*x903))+x909);
op[44]=((0.05940486)+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*gclwh15_10*x569))+(((-8.0)*gclwh13_10*x506))+((x501*x620))+(((-0.7572)*x593))+(((8.0)*gclwh15_10*x529))+((gclwh13_10*x648))+((x502*x626))+((gclwh5_10*x618))+((gclwh9_10*x601))+(((-1.0)*x505*x574))+(((-8.0)*gclwh5_10*x511)));
op[45]=(((x502*x517))+(((0.8732)*gclwh15_15*x529))+(((-1.0)*gclwh7_13*x522))+(((0.0039113345835)*x590))+((gclwh9_13*x639))+(((-0.8732)*gclwh13_15*x506))+(((-0.0039113345835)*x609))+(((-1.0)*x505*x530))+((x501*x597))+(((0.0039113345835)*x588))+((gclwh11_13*x599))+(((-0.8732)*gclwh5_15*x511)));
op[46]=((((0.131)*gclwh15_0*x529))+(((0.131)*gclwh2_0*x506))+(((-1.0)*gclwh15_0*x570))+(((-0.0655)*gclwh15_0*x505))+(((-0.0655)*gclwh0_0*x505))+(((-0.131)*gclwh5_0*x511))+(((0.00058678977375)*x535))+(((-0.131)*gclwh13_0*x506))+(((0.131)*gclwh0_0*x529))+((gclwh5_0*x544))+(((-1.0)*x891))+(((0.01239915)*x578))+((gclwh13_0*x563))+((gclwh2_0*x563))+(((-0.0655)*gclwh2_0*x501))+(((0.0655)*gclwh13_0*x501))+x907+(((0.0655)*gclwh5_0*x502))+(((-0.01239915)*x519))+(((0.01239915)*x566)));
op[47]=((0.02168232)+(((-1.0)*x909))+x903);
op[48]=(((gclwh10_12*x539))+(((-1.0)*gclwh4_8*x520))+(((-1.0)*gclwh12_8*x516))+((gclwh8_12*x528))+(((-1.6345)*gclwh10_12*x511))+(((-1.0)*x906))+(((0.81725)*gclwh8_12*x505))+(((-1.0)*x883))+((gclwh14_8*x596))+(((0.81725)*gclwh10_12*x502))+x662+(((1.6345)*gclwh6_12*x506))+(((-1.6345)*gclwh8_12*x529))+(((-1.0)*gclwh6_12*x534))+x892+(((-0.81725)*gclwh6_12*x501)));
op[49]=((((-1.0)*gclwh10_11*x502))+(((-1.0)*x912))+(((-0.12699240901125)*x567))+(((-1.0)*x888))+(((-0.12699240901125)*x643))+((gclwh6_11*x501))+(((0.12699240901125)*x509))+x914+x900+(((-1.0)*gclwh8_11*x505)));
op[50]=((0.17125635)+(((-1.0)*x505*x619))+(((4.0)*gclwh10_11*x511))+((x501*x605))+((gclwh12_11*x553))+((gclwh6_11*x523))+(((-1.0)*x502*x561))+(((4.0)*gclwh8_11*x529))+(((-4.0)*gclwh6_11*x506))+(((-1.0)*gclwh14_11*x585))+(((-1.0)*gclwh8_11*x589))+(((-1.0)*gclwh10_11*x607))+((gclwh4_11*x580)));
op[51]=((((0.14850585)*x581))+(((-0.160905)*x611))+(((-1.0)*gclwh8_2*x636))+(((0.160905)*x638))+(((-0.14850585)*x526))+((gclwh6_2*x503))+(((0.7845)*gclwh6_2*x501))+(((-1.0)*gclwh10_2*x623))+(((0.04132419)*gclwh4_14*rxp2_2))+(((0.160905)*x545))+(((-0.7845)*gclwh8_2*x505))+((gclwh12_14*x614))+(((0.14850585)*x632))+(((1.569)*gclwh10_2*x511))+(((-1.569)*gclwh6_2*x506))+(((-0.04132419)*x541))+(((1.569)*gclwh8_2*x529))+(((-0.7845)*gclwh10_2*x502)));
op[52]=((((-0.0655)*gclwh10_12*x511))+(((-0.0655)*gclwh8_12*x529))+(((0.0655)*gclwh6_12*x506))+(((-0.03275)*gclwh6_12*x501))+(((-1.0)*x906))+((gclwh4_8*x613))+(((0.03275)*gclwh8_12*x505))+((gclwh10_12*x594))+(((-1.0)*gclwh6_12*x591))+(((-1.0)*x662))+(((0.006199575)*x545))+(((0.03275)*gclwh10_12*x502))+(((-1.0)*gclwh14_8*x558))+x883+x892+((gclwh8_12*x604)));
op[53]=(((gclwh8_11*x505))+(((-1.0)*gclwh6_11*x501))+(((0.00076243651125)*x509))+(((-1.0)*x900))+(((-1.0)*x912))+((gclwh10_11*x502))+(((-0.00076243651125)*x567))+x888+x914+(((-1.0)*gclwh12_3*x514)));
op[54]=(((gclwh11_10*x502))+((gclwh9_10*x505))+(((-1.0)*x899))+(((-1.0)*x911))+(((-0.12699240901125)*x595))+(((-1.0)*gclwh7_10*x501))+(((-0.12699240901125)*x641))+(((0.12699240901125)*x603))+x887+x913);
op[55]=((((-1.0)*gclwh13_9*x516))+(((-1.6345)*gclwh9_13*x529))+(((0.81725)*gclwh11_13*x502))+(((0.81725)*gclwh9_13*x505))+(((-1.0)*x908))+(((-1.0)*gclwh5_9*x520))+(((-1.0)*gclwh7_13*x534))+(((-1.6345)*gclwh11_13*x511))+(((-1.0)*x885))+(((-0.81725)*gclwh7_13*x501))+((gclwh11_13*x539))+(((1.6345)*gclwh7_13*x506))+x686+((gclwh15_9*x596))+x895+((gclwh9_13*x528)));
op[56]=((((-1.0)*gclwh13_15*x614))+(((-0.7845)*gclwh11_0*x502))+(((0.14850585)*x582))+(((-0.04132419)*x550))+(((-0.00702803935125)*x554))+(((-1.569)*gclwh7_0*x506))+(((-1.0)*gclwh11_0*x623))+((gclwh7_0*x503))+(((0.160905)*x621))+(((-0.14850585)*x616))+(((1.569)*gclwh9_0*x529))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-0.160905)*x627))+(((0.7845)*gclwh7_0*x501))+(((0.14850585)*x592))+(((-0.160905)*x532))+(((-0.7845)*gclwh9_0*x505))+(((1.569)*gclwh11_0*x511)));
op[57]=((0.17125635)+((gclwh5_10*x580))+((gclwh13_10*x553))+(((-1.0)*gclwh9_10*x589))+(((-1.0)*gclwh11_10*x607))+(((-1.0)*gclwh15_10*x585))+(((-1.0)*x505*x546))+(((-1.0)*x502*x521))+(((4.0)*gclwh11_10*x511))+((gclwh7_10*x523))+(((-4.0)*gclwh7_10*x506))+((x501*x572))+(((4.0)*gclwh9_10*x529)));
op[58]=((((-1.0)*gclwh11_10*x502))+((gclwh7_10*x501))+(((-1.0)*x911))+(((-1.0)*x887))+(((-1.0)*gclwh13_1*x514))+(((-1.0)*gclwh9_10*x505))+(((0.00076243651125)*x603))+x899+x913+(((-0.00076243651125)*x595)));
op[59]=((((-0.0655)*gclwh9_13*x529))+(((0.03275)*gclwh9_13*x505))+(((-1.0)*x686))+(((-0.03275)*gclwh7_13*x501))+(((-1.0)*x908))+(((-0.0655)*gclwh11_13*x511))+(((-1.0)*gclwh15_9*x558))+(((0.0655)*gclwh7_13*x506))+(((0.006199575)*x532))+(((-1.0)*gclwh7_13*x591))+x885+x895+((gclwh9_13*x604))+((gclwh13_9*x586))+((gclwh11_13*x594))+(((0.03275)*gclwh11_13*x502)));
op[60]=((((-1.0)*gclwh4_8*x539))+(((1.6345)*gclwh12_8*x506))+(((-1.0)*x904))+((gclwh6_12*x516))+(((-0.81725)*gclwh4_8*x502))+(((-0.007321434238125)*x525))+(((-1.0)*gclwh8_12*x596))+(((-0.81725)*gclwh12_8*x501))+((gclwh14_8*x528))+(((-1.0)*x699))+(((0.81725)*gclwh14_8*x505))+(((1.6345)*gclwh4_8*x511))+x884+x893+(((-1.0)*gclwh10_12*x520))+(((-1.6345)*gclwh14_8*x529)));
op[61]=((0.679811285)+((gclwh3_3*x633))+(((-0.66189404)*gclwh12_3*x501))+(((-1.0)*gclwh14_11*x505))+(((-0.00600991575645741)*x646))+(((1.341705325)*gclwh12_3*x506))+(((-1.0)*x917))+((gclwh14_3*x515))+(((-1.0)*x889))+(((0.66189404)*gclwh14_3*x505))+(((-0.66189404)*gclwh4_3*x502))+(((1.341705325)*gclwh3_3*x506))+((gclwh12_11*x501))+x898+(((-0.679811285)*gclwh3_3*x501))+(((-1.0)*gclwh12_3*x633))+(((1.341705325)*gclwh1_3*x529))+(((-1.341705325)*gclwh14_3*x529))+(((1.341705325)*gclwh4_3*x511))+(((-0.679811285)*gclwh1_3*x505))+x916+((gclwh4_11*x502))+((gclwh1_3*x515)));
op[62]=((0.07735732)+(((-1.0)*x901))+x910);
op[63]=((((-1.569)*gclwh1_2*x529))+(((-1.0)*gclwh4_8*npz*x499))+(((-1.569)*gclwh12_2*x506))+(((-0.85)*gclwh14_8*x505))+(((0.7845)*gclwh12_2*x501))+(((0.85)*gclwh4_8*x502))+(((-1.569)*gclwh4_2*x511))+(((-1.0)*gclwh1_2*x636))+(((0.14850585)*x513))+(((-1.0)*x894))+(((0.7845)*gclwh3_2*x501))+(((0.14850585)*x579))+(((-0.14850585)*x559))+(((-0.7845)*gclwh14_2*x505))+((gclwh12_2*x503))+(((0.85)*gclwh12_8*x501))+(((1.569)*npx*x524))+(((0.007614829125)*x525))+(((0.7845)*gclwh1_2*x505))+(((-0.007614829125)*x617))+(((-1.0)*gclwh12_8*npy*x499))+(((0.7845)*gclwh4_2*x502))+x902+(((0.007614829125)*x631))+((x499*x587))+(((-1.0)*gclwh14_2*x636))+(((-1.0)*gclwh3_2*x503))+((gclwh4_2*x623))+(((-1.569)*gclwh3_2*x506)));
op[64]=((((0.0655)*gclwh14_8*x529))+(((-1.0)*gclwh14_8*x604))+(((-0.0655)*gclwh4_8*x511))+(((0.000293394886875)*x525))+(((-1.0)*x893))+(((0.03275)*gclwh12_8*x501))+((gclwh4_8*x594))+(((-0.0655)*gclwh12_8*x506))+(((-1.0)*gclwh8_12*x558))+((gclwh6_12*x586))+(((-1.0)*x699))+x884+(((-0.03275)*gclwh14_8*x505))+(((-1.0)*gclwh10_12*x613))+x904+(((0.03275)*gclwh4_8*x502)));
op[65]=((-0.012986285)+(((0.008055325)*gclwh3_3*x506))+(((3.60823078949063e-5)*x564))+(((-1.0)*gclwh12_11*x501))+(((0.00493096)*gclwh12_3*x501))+((gclwh14_11*x505))+(((-1.0)*x898))+((gclwh3_3*x583))+(((-1.0)*x917))+(((-1.0)*gclwh12_3*x583))+(((-1.0)*gclwh4_11*x502))+(((-0.008055325)*gclwh14_3*x529))+(((0.008055325)*gclwh12_3*x506))+(((0.008055325)*gclwh1_3*x529))+(((-0.00493096)*gclwh14_3*x505))+(((0.00493096)*gclwh4_3*x502))+(((-1.0)*gclwh4_3*x508))+x889+(((0.008055325)*gclwh4_3*x511))+(((-0.012986285)*gclwh3_3*x501))+x916+((gclwh14_3*x622))+(((-0.012986285)*gclwh1_3*x505)));
op[66]=((-0.679811285)+((gclwh0_1*x515))+((gclwh13_1*x633))+(((-1.0)*gclwh15_1*x515))+(((1.341705325)*gclwh15_1*x529))+(((1.341705325)*gclwh0_1*x529))+(((-1.0)*x890))+(((-1.0)*gclwh15_10*x505))+(((-1.0)*x915))+(((-0.679811285)*gclwh0_1*x505))+(((0.00600991575645741)*x573))+(((-0.66189404)*gclwh15_1*x505))+(((-1.341705325)*gclwh13_1*x506))+((gclwh5_10*x502))+(((-0.679811285)*gclwh2_1*x501))+(((0.66189404)*gclwh13_1*x501))+(((-1.341705325)*gclwh5_1*x511))+x897+((gclwh13_10*x501))+x918+(((0.66189404)*gclwh5_1*x502))+(((0.00600991575645741)*x625))+(((1.341705325)*gclwh2_1*x506)));
op[67]=(((x500*x538))+(((-1.0)*x504*x538))+(((0.81725)*gclwh13_9*x501))+((gclwh9_13*x596))+(((-1.0)*x896))+(((-1.0)*x886))+((gclwh13_9*x534))+(((0.81725)*gclwh5_9*x502))+(((-1.0)*gclwh15_9*x528))+((gclwh11_13*x520))+x720+(((-0.81725)*gclwh15_9*x505))+((gclwh5_9*x539))+x905+(((-1.6345)*gclwh13_9*x506))+(((-1.0)*gclwh7_13*x516)));
op[68]=((((-1.0)*gclwh13_0*x503))+(((0.85)*gclwh13_9*x501))+(((-0.14850585)*x566))+(((-0.85)*gclwh15_9*x505))+(((-1.0)*x499*x504))+(((-1.569)*gclwh0_0*x529))+(((-1.0)*gclwh13_9*npy*x499))+(((-1.569)*gclwh2_0*x506))+(((0.7845)*gclwh2_0*x501))+(((0.14850585)*x519))+(((-1.0)*x891))+(((-0.7845)*gclwh5_0*x502))+(((1.569)*gclwh5_0*x511))+(((0.007614829125)*x600))+(((0.00702803935125)*x608))+(((-0.00702803935125)*x568))+(((-0.14850585)*x578))+(((0.85)*gclwh5_9*x502))+(((0.007614829125)*x555))+(((-0.7845)*gclwh13_0*x501))+(((0.7845)*gclwh15_0*x505))+(((-1.569)*gclwh15_0*x529))+(((-0.007614829125)*x584))+(((-1.0)*gclwh2_0*x503))+(((1.569)*gclwh13_0*x506))+(((0.7845)*gclwh0_0*x505))+((x499*x500))+x907+(((-0.00702803935125)*x535)));
op[69]=((0.07735732)+(((-1.0)*x909))+x903);
op[70]=((0.012986285)+((gclwh5_1*x508))+((gclwh0_1*x622))+((gclwh13_1*x583))+(((-1.0)*gclwh5_10*x502))+(((0.008055325)*gclwh0_1*x529))+(((-1.0)*x897))+(((-1.0)*x915))+(((-0.00493096)*gclwh13_1*x501))+(((3.60823078949063e-5)*x573))+(((0.00493096)*gclwh15_1*x505))+(((-0.012986285)*gclwh0_1*x505))+(((0.008055325)*gclwh2_1*x506))+(((-0.008055325)*gclwh5_1*x511))+(((-3.60823078949063e-5)*x556))+(((0.008055325)*gclwh15_1*x529))+(((-0.00493096)*gclwh5_1*x502))+x890+(((-1.0)*gclwh13_10*x501))+(((-0.012986285)*gclwh2_1*x501))+x918+(((-0.008055325)*gclwh13_1*x506))+((gclwh15_10*x505)));
op[71]=((((-1.0)*gclwh7_13*x586))+((gclwh9_13*x558))+(((0.0655)*gclwh13_9*x506))+((x504*x612))+((gclwh11_13*x613))+(((-1.0)*x905))+(((-1.0)*x886))+(((-0.03275)*gclwh13_9*x501))+(((0.03275)*gclwh15_9*x505))+(((-1.0)*gclwh5_9*x594))+(((0.000293394886875)*x584))+x720+x896+(((-0.000293394886875)*x555))+(((-1.0)*x500*x612))+(((-0.03275)*gclwh5_9*x502)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x919=htj1*htj1;
CheckValue<IkReal> x920=IKPowWithIntegerCheck(((1.0)+x919),-1);
if(!x920.valid){
continue;
}
cj1array[numsolutions]=((x920.value)*(((1.0)+(((-1.0)*x919)))));
CheckValue<IkReal> x921=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x921.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x921.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x922=htj2*htj2;
CheckValue<IkReal> x923=IKPowWithIntegerCheck(((1.0)+x922),-1);
if(!x923.valid){
continue;
}
cj2array[numsolutions]=((x923.value)*(((1.0)+(((-1.0)*x922)))));
CheckValue<IkReal> x924=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x924.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x924.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x925=htj3*htj3;
CheckValue<IkReal> x926=IKPowWithIntegerCheck(((1.0)+x925),-1);
if(!x926.valid){
continue;
}
cj3array[numsolutions]=((x926.value)*(((1.0)+(((-1.0)*x925)))));
CheckValue<IkReal> x927=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x927.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x927.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x928=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x928);
rxp1_0=(pz*r11);
rxp1_1=(r01*x928);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x929=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x929);
rxp1_0=(pz*r11);
rxp1_1=(r01*x929);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x930=IKPowWithIntegerCheck(r22,-1);
if(!x930.valid){
continue;
}
CheckValue<IkReal> x931=IKPowWithIntegerCheck(sj3,-1);
if(!x931.valid){
continue;
}
sj4array[0]=((x930.value)*(x931.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x932=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x932);
rxp1_0=(pz*r11);
rxp1_1=(r01*x932);
IkReal x933=((16.0)*sj4);
IkReal x934=(cj1*cj2);
IkReal x935=((4.0)*sj3);
IkReal x936=((8.0)*sj4);
IkReal x937=((4.0)*cj4);
IkReal x938=(sj1*sj2);
IkReal x939=((4.0)*sj4);
IkReal x940=(cj3*r02);
IkReal x941=((16.0)*sj3);
IkReal x942=((8.0)*sj3);
IkReal x943=((12.0)*cj4);
IkReal x944=((12.0)*sj4);
IkReal x945=(cj3*r12);
IkReal x946=(r11*x935);
IkReal x947=(r01*x935);
IkReal x948=(r01*x938);
IkReal x949=(cj3*cj4*r01);
IkReal x950=(cj3*cj4*r11);
IkReal x951=(cj3*r10*x937);
IkReal x952=(x944*x945);
IkReal x953=(cj3*r00*x937);
IkReal x954=(x940*x944);
IkReal x955=(r00*x938*x939);
IkReal x956=(r02*x938*x943);
IkReal x957=(r00*x934*x939);
IkReal x958=(r02*x934*x943);
IkReal x959=(r10*x938*x939);
IkReal x960=(r12*x934*x943);
IkReal x961=(r12*x938*x943);
IkReal x962=(r10*x934*x939);
IkReal x963=(x957+x946);
IkReal x964=(x959+x947);
IkReal x965=(x955+x951);
IkReal x966=(x958+x952);
IkReal x967=(x962+x953);
IkReal x968=(x961+x954);
j5eval[0]=((((0.5)*(IKabs((((r01*x933*x934))+(((-1.0)*x933*x948))+(((-16.0)*x950))+(((-1.0)*r10*x941)))))))+(((0.5)*(IKabs((x960+x967+(((-1.0)*x964))+(((-1.0)*x968)))))))+(((0.5)*(IKabs((x960+x964+(((-1.0)*x967))+(((-1.0)*x968)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x937*x938))+(((-1.0)*x939*x940))+((r12*x934*x937))+x964+(((-1.0)*x967)))))))+(((0.5)*(IKabs((x963+x956+(((-1.0)*x965))+(((-1.0)*x966)))))))+(IKabs(((((-1.0)*r00*x942))+(((-1.0)*r11*x934*x936))+(((-8.0)*x949))+((r11*x936*x938)))))+(((0.5)*(IKabs(((((-1.0)*r02*x934*x937))+((r02*x937*x938))+(((-1.0)*x939*x945))+x963+(((-1.0)*x965)))))))+(IKabs((((r01*x934*x936))+(((-8.0)*x950))+(((-1.0)*r10*x942))+(((-1.0)*x936*x948)))))+(((0.5)*(IKabs((x965+x956+(((-1.0)*x966))+(((-1.0)*x963)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x933*x934))+(((-1.0)*r00*x941))+((r11*x933*x938))+(((-16.0)*x949))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x969=(r10*sj3);
IkReal x970=(r01*sj4);
IkReal x971=(cj1*cj2);
IkReal x972=(cj3*cj4);
IkReal x973=(sj1*sj2);
IkReal x974=(cj4*r02);
IkReal x975=((4.0)*r11*sj3);
IkReal x976=(cj3*r12*sj4);
IkReal x977=((4.0)*r00*sj4);
IkReal x978=((4.0)*r10*x972);
IkReal x979=((12.0)*x976);
IkReal x980=((4.0)*x976);
IkReal x981=(x971*x977);
IkReal x982=(x973*x977);
IkReal x983=((12.0)*x973*x974);
IkReal x984=((12.0)*x971*x974);
IkReal x985=((4.0)*x973*x974);
IkReal x986=((4.0)*x971*x974);
IkReal x987=(x981+x975);
IkReal x988=(x982+x978);
IkReal x989=(x986+x980);
IkReal x990=(x984+x979);
IkReal x991=((((-8.0)*x969))+(((8.0)*x970*x971))+(((-8.0)*x970*x973))+(((-8.0)*r11*x972)));
op[0]=((((-1.0)*x989))+(((-1.0)*x988))+x985+x987);
op[1]=x991;
op[2]=((((-1.0)*x988))+(((-1.0)*x990))+x987+x983);
op[3]=((((-16.0)*r11*x972))+(((-16.0)*x970*x973))+(((16.0)*x970*x971))+(((-16.0)*x969)));
op[4]=((((-1.0)*x987))+(((-1.0)*x990))+x988+x983);
op[5]=x991;
op[6]=((((-1.0)*x989))+(((-1.0)*x987))+x988+x985);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x992=(cj1*cj2);
IkReal x993=((4.0)*cj4);
IkReal x994=(sj1*sj2);
IkReal x995=((4.0)*sj4);
IkReal x996=(r00*sj3);
IkReal x997=(cj3*r02);
IkReal x998=((4.0)*r01*sj3);
IkReal x999=((16.0)*r11*sj4);
IkReal x1000=(cj3*cj4*r01);
IkReal x1001=((12.0)*cj4*r12);
IkReal x1002=((8.0)*r11*sj4);
IkReal x1003=(cj3*r00*x993);
IkReal x1004=((12.0)*sj4*x997);
IkReal x1005=(x995*x997);
IkReal x1006=(r10*x992*x995);
IkReal x1007=(r10*x994*x995);
IkReal x1008=(x1001*x992);
IkReal x1009=(x1001*x994);
IkReal x1010=(r12*x992*x993);
IkReal x1011=(r12*x993*x994);
IkReal x1012=(x1007+x998);
IkReal x1013=(x1006+x1003);
IkReal x1014=(x1011+x1005);
IkReal x1015=(x1009+x1004);
IkReal x1016=((((-1.0)*x1002*x992))+(((-8.0)*x1000))+((x1002*x994))+(((-8.0)*x996)));
j5evalpoly[0]=(x1010+x1013+(((htj5*htj5)*((x1013+x1008+(((-1.0)*x1015))+(((-1.0)*x1012))))))+(((-1.0)*x1014))+(((-1.0)*x1012))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1010+x1012+(((-1.0)*x1014))+(((-1.0)*x1013))))))+(((htj5*htj5*htj5*htj5)*((x1012+x1008+(((-1.0)*x1015))+(((-1.0)*x1013))))))+((x1016*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*x1000))+((x994*x999))+(((-1.0)*x992*x999))+(((-16.0)*x996))))))+((htj5*x1016)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1017=(cj5*sj4);
IkReal x1018=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1018))+((r00*x1017))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1018))+(((-1.0)*r10*x1017))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1018))+((r00*x1017))+((cj4*r02))))+IKsqr((((r11*x1018))+(((-1.0)*r10*x1017))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1018))+((r00*x1017))+((cj4*r02))), (((r11*x1018))+(((-1.0)*r10*x1017))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1019=IKsin(j0);
IkReal x1020=IKcos(j0);
IkReal x1021=(r02*sj4);
IkReal x1022=((1.0)*sj3);
IkReal x1023=(r12*sj4);
IkReal x1024=(cj3*cj4);
IkReal x1025=((1.0)*cj5);
IkReal x1026=(r11*sj5);
IkReal x1027=(cj5*r01);
IkReal x1028=(r01*sj5);
IkReal x1029=(r00*sj5);
IkReal x1030=((0.39225)*cj2);
IkReal x1031=(cj5*r11);
IkReal x1032=((1.0)*sj2);
IkReal x1033=(r10*sj5);
IkReal x1034=((1.0)*cj4);
IkReal x1035=((0.39225)*sj1*sj2);
IkReal x1036=(cj1*x1019);
IkReal x1037=(cj4*cj5*sj3);
IkReal x1038=(cj1*x1020);
IkReal x1039=(sj1*x1020);
IkReal x1040=(sj1*x1019);
evalcond[0]=(x1019+(((-1.0)*r00*sj4*x1025))+((sj4*x1028))+(((-1.0)*r02*x1034)));
evalcond[1]=((((-1.0)*x1020))+((sj4*x1026))+(((-1.0)*r12*x1034))+(((-1.0)*r10*sj4*x1025)));
evalcond[2]=(((x1020*x1035))+(((0.10915)*x1019))+(((-1.0)*px))+(((-1.0)*x1030*x1038))+(((-0.425)*x1038))+(((-0.09465)*x1027))+(((-0.09465)*x1029)));
evalcond[3]=((((-0.10915)*x1020))+(((-1.0)*py))+(((-1.0)*x1030*x1036))+((x1019*x1035))+(((-0.425)*x1036))+(((-0.09465)*x1033))+(((-0.09465)*x1031)));
evalcond[4]=(((cj2*x1039))+((r00*x1037))+(((-1.0)*x1021*x1022))+(((-1.0)*cj4*x1022*x1028))+((sj2*x1038))+((cj3*x1027))+((cj3*x1029)));
evalcond[5]=(((cj2*x1038))+(((-1.0)*x1032*x1039))+(((-1.0)*r00*x1024*x1025))+((x1024*x1028))+((sj3*x1027))+((sj3*x1029))+((cj3*x1021)));
evalcond[6]=(((r10*x1037))+((cj3*x1033))+((cj3*x1031))+(((-1.0)*x1022*x1023))+(((-1.0)*cj4*x1022*x1026))+((sj2*x1036))+((cj2*x1040)));
evalcond[7]=((((-1.0)*x1032*x1040))+((cj2*x1036))+((sj3*x1033))+((sj3*x1031))+(((-1.0)*r10*x1024*x1025))+((x1024*x1026))+((cj3*x1023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1041=IKPowWithIntegerCheck(cj3,-1);
if(!x1041.valid){
continue;
}
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(r22,-1);
if(!x1042.valid){
continue;
}
sj4array[0]=((-1.0)*(x1041.value)*(x1042.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1043=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1043);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1043);
IkReal x1044=((16.0)*sj4);
IkReal x1045=(cj1*cj2);
IkReal x1046=((4.0)*sj3);
IkReal x1047=((8.0)*sj4);
IkReal x1048=((4.0)*cj4);
IkReal x1049=(sj1*sj2);
IkReal x1050=((4.0)*sj4);
IkReal x1051=(cj3*r02);
IkReal x1052=((16.0)*sj3);
IkReal x1053=((8.0)*sj3);
IkReal x1054=((12.0)*cj4);
IkReal x1055=((12.0)*sj4);
IkReal x1056=(cj3*r12);
IkReal x1057=(r11*x1046);
IkReal x1058=(r01*x1046);
IkReal x1059=(r01*x1049);
IkReal x1060=(cj3*cj4*r01);
IkReal x1061=(cj3*cj4*r11);
IkReal x1062=(cj3*r10*x1048);
IkReal x1063=(x1055*x1056);
IkReal x1064=(cj3*r00*x1048);
IkReal x1065=(x1051*x1055);
IkReal x1066=(r00*x1049*x1050);
IkReal x1067=(r02*x1049*x1054);
IkReal x1068=(r00*x1045*x1050);
IkReal x1069=(r02*x1045*x1054);
IkReal x1070=(r10*x1049*x1050);
IkReal x1071=(r12*x1045*x1054);
IkReal x1072=(r12*x1049*x1054);
IkReal x1073=(r10*x1045*x1050);
IkReal x1074=(x1057+x1068);
IkReal x1075=(x1058+x1070);
IkReal x1076=(x1062+x1066);
IkReal x1077=(x1069+x1063);
IkReal x1078=(x1073+x1064);
IkReal x1079=(x1072+x1065);
j5eval[0]=((((0.5)*(IKabs((x1075+x1071+(((-1.0)*x1079))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs((x1074+x1067+(((-1.0)*x1077))+(((-1.0)*x1076)))))))+(((0.5)*(IKabs((x1074+(((-1.0)*r02*x1045*x1048))+(((-1.0)*x1076))+(((-1.0)*x1050*x1056))+((r02*x1048*x1049)))))))+(IKabs(((((-1.0)*r10*x1053))+((r01*x1045*x1047))+(((-1.0)*x1047*x1059))+(((-8.0)*x1061)))))+(((0.5)*(IKabs(((((-1.0)*r10*x1052))+(((-1.0)*x1044*x1059))+((r01*x1044*x1045))+(((-16.0)*x1061)))))))+(((0.5)*(IKabs((x1078+x1071+(((-1.0)*x1075))+(((-1.0)*x1079)))))))+(IKabs(((((-1.0)*r00*x1053))+(((-1.0)*r11*x1045*x1047))+((r11*x1047*x1049))+(((-8.0)*x1060)))))+(((0.5)*(IKabs((x1076+x1067+(((-1.0)*x1074))+(((-1.0)*x1077)))))))+(((0.5)*(IKabs((x1075+((r12*x1045*x1048))+(((-1.0)*r12*x1048*x1049))+(((-1.0)*x1078))+(((-1.0)*x1050*x1051)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x1052))+((r11*x1044*x1049))+(((-16.0)*x1060))+(((-1.0)*r11*x1044*x1045))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1080=(r10*sj3);
IkReal x1081=(r01*sj4);
IkReal x1082=(cj1*cj2);
IkReal x1083=(cj3*cj4);
IkReal x1084=(sj1*sj2);
IkReal x1085=(cj4*r02);
IkReal x1086=((4.0)*r11*sj3);
IkReal x1087=(cj3*r12*sj4);
IkReal x1088=((4.0)*r00*sj4);
IkReal x1089=((4.0)*r10*x1083);
IkReal x1090=((12.0)*x1087);
IkReal x1091=((4.0)*x1087);
IkReal x1092=(x1082*x1088);
IkReal x1093=(x1084*x1088);
IkReal x1094=((12.0)*x1084*x1085);
IkReal x1095=((12.0)*x1082*x1085);
IkReal x1096=((4.0)*x1084*x1085);
IkReal x1097=((4.0)*x1082*x1085);
IkReal x1098=(x1092+x1086);
IkReal x1099=(x1093+x1089);
IkReal x1100=(x1097+x1091);
IkReal x1101=(x1095+x1090);
IkReal x1102=((((-8.0)*x1081*x1084))+(((-8.0)*r11*x1083))+(((8.0)*x1081*x1082))+(((-8.0)*x1080)));
op[0]=(x1096+x1098+(((-1.0)*x1099))+(((-1.0)*x1100)));
op[1]=x1102;
op[2]=(x1094+x1098+(((-1.0)*x1099))+(((-1.0)*x1101)));
op[3]=((((-16.0)*x1081*x1084))+(((-16.0)*x1080))+(((16.0)*x1081*x1082))+(((-16.0)*r11*x1083)));
op[4]=(x1094+x1099+(((-1.0)*x1098))+(((-1.0)*x1101)));
op[5]=x1102;
op[6]=(x1096+x1099+(((-1.0)*x1098))+(((-1.0)*x1100)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1103=(cj1*cj2);
IkReal x1104=((4.0)*cj4);
IkReal x1105=(sj1*sj2);
IkReal x1106=((4.0)*sj4);
IkReal x1107=(r00*sj3);
IkReal x1108=(cj3*r02);
IkReal x1109=((4.0)*r01*sj3);
IkReal x1110=((16.0)*r11*sj4);
IkReal x1111=(cj3*cj4*r01);
IkReal x1112=((12.0)*cj4*r12);
IkReal x1113=((8.0)*r11*sj4);
IkReal x1114=(cj3*r00*x1104);
IkReal x1115=((12.0)*sj4*x1108);
IkReal x1116=(x1106*x1108);
IkReal x1117=(r10*x1103*x1106);
IkReal x1118=(r10*x1105*x1106);
IkReal x1119=(x1103*x1112);
IkReal x1120=(x1105*x1112);
IkReal x1121=(r12*x1103*x1104);
IkReal x1122=(r12*x1104*x1105);
IkReal x1123=(x1109+x1118);
IkReal x1124=(x1114+x1117);
IkReal x1125=(x1116+x1122);
IkReal x1126=(x1115+x1120);
IkReal x1127=((((-1.0)*x1103*x1113))+((x1105*x1113))+(((-8.0)*x1107))+(((-8.0)*x1111)));
j5evalpoly[0]=(((htj5*x1127))+x1121+x1124+(((htj5*htj5)*((x1119+x1124+(((-1.0)*x1126))+(((-1.0)*x1123))))))+(((htj5*htj5*htj5)*(((((-1.0)*x1103*x1110))+((x1105*x1110))+(((-16.0)*x1111))+(((-16.0)*x1107))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1121+x1123+(((-1.0)*x1125))+(((-1.0)*x1124))))))+(((-1.0)*x1125))+(((-1.0)*x1123))+((x1127*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x1119+x1123+(((-1.0)*x1126))+(((-1.0)*x1124)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1128=(cj5*sj4);
IkReal x1129=(sj4*sj5);
if( IKabs((((r00*x1128))+(((-1.0)*r01*x1129))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1128))+((r11*x1129))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1128))+(((-1.0)*r01*x1129))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1128))+((r11*x1129))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1128))+(((-1.0)*r01*x1129))+((cj4*r02))), ((((-1.0)*r10*x1128))+((r11*x1129))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1130=IKsin(j0);
IkReal x1131=IKcos(j0);
IkReal x1132=(r02*sj4);
IkReal x1133=((1.0)*sj3);
IkReal x1134=(r12*sj4);
IkReal x1135=(cj3*cj4);
IkReal x1136=((1.0)*cj5);
IkReal x1137=(r11*sj5);
IkReal x1138=(cj5*r01);
IkReal x1139=(r01*sj5);
IkReal x1140=(r00*sj5);
IkReal x1141=((0.39225)*cj2);
IkReal x1142=(cj5*r11);
IkReal x1143=((1.0)*sj2);
IkReal x1144=(r10*sj5);
IkReal x1145=((1.0)*cj4);
IkReal x1146=((0.39225)*sj1*sj2);
IkReal x1147=(cj1*x1130);
IkReal x1148=(cj4*cj5*sj3);
IkReal x1149=(cj1*x1131);
IkReal x1150=(sj1*x1131);
IkReal x1151=(sj1*x1130);
evalcond[0]=(x1130+((sj4*x1139))+(((-1.0)*r02*x1145))+(((-1.0)*r00*sj4*x1136)));
evalcond[1]=(((sj4*x1137))+(((-1.0)*x1131))+(((-1.0)*r12*x1145))+(((-1.0)*r10*sj4*x1136)));
evalcond[2]=((((-0.09465)*x1138))+(((-1.0)*x1141*x1149))+(((0.10915)*x1130))+((x1131*x1146))+(((-1.0)*px))+(((-0.425)*x1149))+(((-0.09465)*x1140)));
evalcond[3]=((((-1.0)*x1141*x1147))+((x1130*x1146))+(((-1.0)*py))+(((-0.10915)*x1131))+(((-0.425)*x1147))+(((-0.09465)*x1144))+(((-0.09465)*x1142)));
evalcond[4]=(((cj3*x1138))+((cj2*x1150))+((cj3*x1140))+((sj2*x1149))+(((-1.0)*x1132*x1133))+(((-1.0)*cj4*x1133*x1139))+((r00*x1148)));
evalcond[5]=(((cj3*x1132))+(((-1.0)*r00*x1135*x1136))+((cj2*x1149))+(((-1.0)*x1143*x1150))+((x1135*x1139))+((sj3*x1140))+((sj3*x1138)));
evalcond[6]=(((cj2*x1151))+((cj3*x1144))+((cj3*x1142))+((sj2*x1147))+(((-1.0)*cj4*x1133*x1137))+((r10*x1148))+(((-1.0)*x1133*x1134)));
evalcond[7]=(((cj3*x1134))+((cj2*x1147))+(((-1.0)*x1143*x1151))+((x1135*x1137))+(((-1.0)*r10*x1135*x1136))+((sj3*x1142))+((sj3*x1144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1152=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1152);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1152);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1153=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1153);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1153);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1154=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1154);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1154);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1155=IKPowWithIntegerCheck(r22,-1);
if(!x1155.valid){
continue;
}
sj4array[0]=((-1.0)*(x1155.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1156=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1156);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1156);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1158 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1158.valid){
continue;
}
IkReal x1157=x1158.value;
j5array[0]=((-1.0)*x1157);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1157)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1159=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1159)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1159)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1159))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1159))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1159))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1159))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1160=IKcos(j0);
IkReal x1161=IKsin(j0);
IkReal x1162=(cj5*r01);
IkReal x1163=(sj4*sj5);
IkReal x1164=(cj1*sj2);
IkReal x1165=((0.425)*cj1);
IkReal x1166=(cj2*sj1);
IkReal x1167=(r00*sj5);
IkReal x1168=(cj5*r11);
IkReal x1169=(r10*sj5);
IkReal x1170=((1.0)*cj5*sj4);
evalcond[0]=(x1161+((r01*x1163))+(((-1.0)*r00*x1170)));
evalcond[1]=(((r11*x1163))+(((-1.0)*x1160))+(((-1.0)*r10*x1170)));
evalcond[2]=(x1167+x1162+((x1160*x1166))+((x1160*x1164)));
evalcond[3]=(x1168+x1169+((x1161*x1164))+((x1161*x1166)));
evalcond[4]=((((-0.09465)*x1167))+(((-0.09465)*x1162))+(((0.10915)*x1161))+(((-1.0)*px))+(((-1.0)*x1160*x1165)));
evalcond[5]=((((-0.10915)*x1160))+(((-0.09465)*x1169))+(((-0.09465)*x1168))+(((-1.0)*py))+(((-1.0)*x1161*x1165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1171=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1171);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1171);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1172=IKPowWithIntegerCheck(r22,-1);
if(!x1172.valid){
continue;
}
sj4array[0]=((x1172.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1173=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1173);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1173);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1175 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1175.valid){
continue;
}
IkReal x1174=x1175.value;
j5array[0]=((-1.0)*x1174);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1174)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1176=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1176))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1176))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1176))+((cj5*r00*sj4))))+IKsqr(((((-1.0)*cj5*r10*x1176))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1176))+((cj5*r00*sj4))), ((((-1.0)*cj5*r10*x1176))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1177=IKcos(j0);
IkReal x1178=IKsin(j0);
IkReal x1179=(sj4*sj5);
IkReal x1180=(cj5*r11);
IkReal x1181=(cj1*sj2);
IkReal x1182=(cj2*sj1);
IkReal x1183=((1.0)*sj5);
IkReal x1184=((0.09465)*sj5);
IkReal x1185=((1.0)*cj5);
IkReal x1186=((0.425)*cj1);
evalcond[0]=((((-1.0)*r00*sj4*x1185))+x1178+((r01*x1179)));
evalcond[1]=(((r11*x1179))+(((-1.0)*r10*sj4*x1185))+(((-1.0)*x1177)));
evalcond[2]=((((-1.0)*r01*x1185))+((x1177*x1181))+((x1177*x1182))+(((-1.0)*r00*x1183)));
evalcond[3]=(((x1178*x1182))+((x1178*x1181))+(((-1.0)*r10*x1183))+(((-1.0)*x1180)));
evalcond[4]=((((-0.09465)*cj5*r01))+(((0.10915)*x1178))+(((-1.0)*px))+(((-1.0)*r00*x1184))+(((-1.0)*x1177*x1186)));
evalcond[5]=((((-0.09465)*x1180))+(((-0.10915)*x1177))+(((-1.0)*x1178*x1186))+(((-1.0)*r10*x1184))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1187=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1187);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1187);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1188=IKPowWithIntegerCheck(r22,-1);
if(!x1188.valid){
continue;
}
sj4array[0]=((x1188.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1189=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1189);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1189);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1191 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1191.valid){
continue;
}
IkReal x1190=x1191.value;
j5array[0]=((-1.0)*x1190);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1190)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1192=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1192))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1192))))+IKsqr(((((-1.0)*cj5*r10*x1192))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1192))), ((((-1.0)*cj5*r10*x1192))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1193=IKcos(j0);
IkReal x1194=IKsin(j0);
IkReal x1195=(cj5*r01);
IkReal x1196=(sj4*sj5);
IkReal x1197=(cj1*cj2);
IkReal x1198=(sj1*sj2);
IkReal x1199=((0.425)*cj1);
IkReal x1200=(r00*sj5);
IkReal x1201=(cj5*r11);
IkReal x1202=(r10*sj5);
IkReal x1203=((0.39225)*x1193);
IkReal x1204=((1.0)*x1193);
IkReal x1205=((1.0)*cj5*sj4);
IkReal x1206=(x1194*x1198);
evalcond[0]=(x1194+((r01*x1196))+(((-1.0)*r00*x1205)));
evalcond[1]=((((-1.0)*r10*x1205))+((r11*x1196))+(((-1.0)*x1204)));
evalcond[2]=(x1195+x1200+((x1193*x1197))+(((-1.0)*x1198*x1204)));
evalcond[3]=(x1201+x1202+((x1194*x1197))+(((-1.0)*x1206)));
evalcond[4]=((((-1.0)*x1193*x1199))+(((-0.09465)*x1195))+(((0.10915)*x1194))+(((-1.0)*px))+(((-1.0)*x1197*x1203))+(((-0.09465)*x1200))+((x1198*x1203)));
evalcond[5]=((((0.39225)*x1206))+(((-1.0)*x1194*x1199))+(((-0.10915)*x1193))+(((-0.39225)*x1194*x1197))+(((-1.0)*py))+(((-0.09465)*x1202))+(((-0.09465)*x1201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1207=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1207);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1207);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1208=IKPowWithIntegerCheck(r22,-1);
if(!x1208.valid){
continue;
}
sj4array[0]=((-1.0)*(x1208.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1209=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1209);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1209);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1211 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1211.valid){
continue;
}
IkReal x1210=x1211.value;
j5array[0]=((-1.0)*x1210);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1210)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1212=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1212))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1212))))+IKsqr(((((-1.0)*cj5*r10*x1212))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1212))), ((((-1.0)*cj5*r10*x1212))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1213=IKcos(j0);
IkReal x1214=IKsin(j0);
IkReal x1215=(sj4*sj5);
IkReal x1216=(cj1*cj2);
IkReal x1217=(cj5*r11);
IkReal x1218=(sj1*sj2);
IkReal x1219=((1.0)*sj5);
IkReal x1220=((0.09465)*sj5);
IkReal x1221=((1.0)*cj5);
IkReal x1222=((0.425)*cj1);
IkReal x1223=((0.39225)*x1213);
IkReal x1224=((1.0)*x1213);
IkReal x1225=(x1214*x1218);
evalcond[0]=(x1214+((r01*x1215))+(((-1.0)*r00*sj4*x1221)));
evalcond[1]=(((r11*x1215))+(((-1.0)*x1224))+(((-1.0)*r10*sj4*x1221)));
evalcond[2]=((((-1.0)*r01*x1221))+((x1213*x1216))+(((-1.0)*x1218*x1224))+(((-1.0)*r00*x1219)));
evalcond[3]=(((x1214*x1216))+(((-1.0)*x1225))+(((-1.0)*r10*x1219))+(((-1.0)*x1217)));
evalcond[4]=((((-1.0)*x1213*x1222))+(((-1.0)*r00*x1220))+(((-0.09465)*cj5*r01))+(((-1.0)*px))+(((0.10915)*x1214))+((x1218*x1223))+(((-1.0)*x1216*x1223)));
evalcond[5]=((((-0.10915)*x1213))+(((-0.09465)*x1217))+(((-1.0)*x1214*x1222))+(((-0.39225)*x1214*x1216))+(((-1.0)*py))+(((0.39225)*x1225))+(((-1.0)*r10*x1220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1226=IKPowWithIntegerCheck(r22,-1);
if(!x1226.valid){
continue;
}
CheckValue<IkReal> x1227=IKPowWithIntegerCheck(sj3,-1);
if(!x1227.valid){
continue;
}
sj4array[0]=((x1226.value)*(x1227.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1228=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1228);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1228);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1229=((4.0)*r01);
IkReal x1230=((16.0)*r00);
IkReal x1231=(cj3*sj2);
IkReal x1232=((8.0)*r00);
IkReal x1233=(cj2*cj3);
IkReal x1234=(cj4*r01);
IkReal x1235=((16.0)*cj1);
IkReal x1236=((8.0)*sj1);
IkReal x1237=((16.0)*sj1);
IkReal x1238=((8.0)*cj1);
IkReal x1239=(cj2*sj3);
IkReal x1240=(sj2*sj3);
IkReal x1241=(sj1*x1239);
IkReal x1242=((4.0)*cj4*r00);
IkReal x1243=(cj1*x1240);
IkReal x1244=(((x1229*x1241))+((x1229*x1243))+((sj1*x1229*x1231))+((sj1*x1240*x1242)));
IkReal x1245=(((cj1*x1229*x1233))+((cj1*x1231*x1242))+((cj1*x1239*x1242))+((sj1*x1233*x1242)));
IkReal x1246=(x1244+(((-1.0)*x1245)));
IkReal x1247=((((-1.0)*x1231*x1234*x1238))+(((-1.0)*x1233*x1234*x1236))+(((-1.0)*x1234*x1238*x1239))+(((-1.0)*sj1*x1231*x1232))+((x1234*x1236*x1240))+((cj1*x1232*x1233))+(((-1.0)*x1232*x1241))+(((-1.0)*x1232*x1243)));
IkReal x1248=(x1245+(((-1.0)*x1244)));
op[0]=x1246;
op[1]=x1247;
op[2]=x1246;
op[3]=((((-1.0)*x1234*x1235*x1239))+(((-1.0)*sj1*x1230*x1231))+((cj1*x1230*x1233))+(((-1.0)*x1231*x1234*x1235))+(((-1.0)*x1233*x1234*x1237))+((x1234*x1237*x1240))+(((-1.0)*x1230*x1241))+(((-1.0)*x1230*x1243)));
op[4]=x1248;
op[5]=x1247;
op[6]=x1248;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1249=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1249))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1249))+((cj5*r00*sj4))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1249))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1249))+((cj5*r00*sj4))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1249))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1250=IKcos(j0);
IkReal x1251=IKsin(j0);
IkReal x1252=((1.0)*cj3);
IkReal x1253=(r11*sj5);
IkReal x1254=(cj5*r01);
IkReal x1255=(cj1*cj2);
IkReal x1256=(cj5*r11);
IkReal x1257=(r01*sj5);
IkReal x1258=(cj3*cj4);
IkReal x1259=(r00*sj5);
IkReal x1260=(r10*sj5);
IkReal x1261=(cj4*cj5*r00);
IkReal x1262=(cj4*cj5*r10);
IkReal x1263=((1.0)*cj4*sj3);
IkReal x1264=(cj1*x1251);
IkReal x1265=(cj1*x1250);
IkReal x1266=(sj1*x1250);
IkReal x1267=((1.0)*cj5*sj4);
IkReal x1268=(sj1*sj2*x1251);
evalcond[0]=(x1251+((sj4*x1257))+(((-1.0)*r00*x1267)));
evalcond[1]=((((-1.0)*r10*x1267))+((sj4*x1253))+(((-1.0)*x1250)));
evalcond[2]=(((cj3*x1254))+((cj3*x1259))+((cj2*x1266))+(((-1.0)*x1257*x1263))+((sj3*x1261))+((sj2*x1265)));
evalcond[3]=((((-1.0)*x1253*x1263))+((cj3*x1260))+((cj3*x1256))+((cj2*sj1*x1251))+((sj3*x1262))+((sj2*x1264)));
evalcond[4]=((((-1.0)*x1252*x1261))+((x1250*x1255))+((x1257*x1258))+(((-1.0)*sj2*x1266))+((sj3*x1254))+((sj3*x1259)));
evalcond[5]=((((-1.0)*x1252*x1262))+((x1253*x1258))+((x1251*x1255))+(((-1.0)*x1268))+((sj3*x1256))+((sj3*x1260)));
evalcond[6]=((((0.39225)*sj2*x1266))+(((-0.39225)*x1250*x1255))+(((-0.09465)*x1259))+(((-0.09465)*x1254))+(((0.10915)*x1251))+(((-1.0)*px))+(((-0.425)*x1265)));
evalcond[7]=((((-0.10915)*x1250))+(((-0.09465)*x1256))+(((-0.09465)*x1260))+(((-1.0)*py))+(((-0.39225)*x1251*x1255))+(((-0.425)*x1264))+(((0.39225)*x1268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1269=IKPowWithIntegerCheck(cj3,-1);
if(!x1269.valid){
continue;
}
CheckValue<IkReal> x1270=IKPowWithIntegerCheck(r22,-1);
if(!x1270.valid){
continue;
}
sj4array[0]=((-1.0)*(x1269.value)*(x1270.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1271=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1271);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1271);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1272=((4.0)*r01);
IkReal x1273=((16.0)*r00);
IkReal x1274=(cj3*sj2);
IkReal x1275=((8.0)*r00);
IkReal x1276=(cj2*cj3);
IkReal x1277=(cj4*r01);
IkReal x1278=((16.0)*cj1);
IkReal x1279=((8.0)*sj1);
IkReal x1280=((16.0)*sj1);
IkReal x1281=((8.0)*cj1);
IkReal x1282=(cj2*sj3);
IkReal x1283=(sj2*sj3);
IkReal x1284=(sj1*x1282);
IkReal x1285=((4.0)*cj4*r00);
IkReal x1286=(cj1*x1283);
IkReal x1287=(((sj1*x1283*x1285))+((x1272*x1284))+((x1272*x1286))+((sj1*x1272*x1274)));
IkReal x1288=(((sj1*x1276*x1285))+((cj1*x1274*x1285))+((cj1*x1272*x1276))+((cj1*x1282*x1285)));
IkReal x1289=(x1287+(((-1.0)*x1288)));
IkReal x1290=((((-1.0)*x1277*x1281*x1282))+((x1277*x1279*x1283))+(((-1.0)*x1276*x1277*x1279))+(((-1.0)*x1275*x1284))+(((-1.0)*x1275*x1286))+(((-1.0)*x1274*x1277*x1281))+(((-1.0)*sj1*x1274*x1275))+((cj1*x1275*x1276)));
IkReal x1291=(x1288+(((-1.0)*x1287)));
op[0]=x1289;
op[1]=x1290;
op[2]=x1289;
op[3]=(((cj1*x1273*x1276))+(((-1.0)*x1276*x1277*x1280))+(((-1.0)*x1274*x1277*x1278))+(((-1.0)*x1277*x1278*x1282))+(((-1.0)*sj1*x1273*x1274))+(((-1.0)*x1273*x1286))+(((-1.0)*x1273*x1284))+((x1277*x1280*x1283)));
op[4]=x1291;
op[5]=x1290;
op[6]=x1291;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1292=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1292))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1292))))+IKsqr(((((-1.0)*cj5*r10*x1292))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1292))), ((((-1.0)*cj5*r10*x1292))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1293=IKcos(j0);
IkReal x1294=IKsin(j0);
IkReal x1295=((1.0)*cj3);
IkReal x1296=(r11*sj5);
IkReal x1297=(cj5*r01);
IkReal x1298=(cj1*cj2);
IkReal x1299=(cj5*r11);
IkReal x1300=(r01*sj5);
IkReal x1301=(cj3*cj4);
IkReal x1302=(r00*sj5);
IkReal x1303=(r10*sj5);
IkReal x1304=(cj4*cj5*r00);
IkReal x1305=(cj4*cj5*r10);
IkReal x1306=((1.0)*cj4*sj3);
IkReal x1307=(cj1*x1294);
IkReal x1308=(cj1*x1293);
IkReal x1309=(sj1*x1293);
IkReal x1310=((1.0)*cj5*sj4);
IkReal x1311=(sj1*sj2*x1294);
evalcond[0]=(x1294+(((-1.0)*r00*x1310))+((sj4*x1300)));
evalcond[1]=((((-1.0)*x1293))+((sj4*x1296))+(((-1.0)*r10*x1310)));
evalcond[2]=(((sj2*x1308))+((cj3*x1297))+((sj3*x1304))+(((-1.0)*x1300*x1306))+((cj2*x1309))+((cj3*x1302)));
evalcond[3]=(((sj2*x1307))+((cj3*x1299))+((sj3*x1305))+(((-1.0)*x1296*x1306))+((cj2*sj1*x1294))+((cj3*x1303)));
evalcond[4]=((((-1.0)*sj2*x1309))+((sj3*x1297))+((sj3*x1302))+((x1300*x1301))+((x1293*x1298))+(((-1.0)*x1295*x1304)));
evalcond[5]=(((sj3*x1299))+((sj3*x1303))+((x1294*x1298))+(((-1.0)*x1311))+(((-1.0)*x1295*x1305))+((x1296*x1301)));
evalcond[6]=((((-0.39225)*x1293*x1298))+(((0.10915)*x1294))+(((-1.0)*px))+(((-0.09465)*x1302))+(((0.39225)*sj2*x1309))+(((-0.425)*x1308))+(((-0.09465)*x1297)));
evalcond[7]=((((-1.0)*py))+(((-0.10915)*x1293))+(((-0.09465)*x1303))+(((-0.425)*x1307))+(((-0.09465)*x1299))+(((-0.39225)*x1294*x1298))+(((0.39225)*x1311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1314 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1314.valid){
continue;
}
IkReal x1312=((1.0)*(x1314.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1315=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1315.valid){
continue;
}
if( (((-1.0)*(x1315.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1315.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1313=((-1.0)*(IKasin(((-1.0)*(x1315.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1312))+(((-1.0)*x1313)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1312))+(((1.0)*x1313)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1316=cj5*cj5;
IkReal x1317=r21*r21;
IkReal x1318=(sj3*x1316);
IkReal x1319=(((sj3*(r22*r22)))+((sj3*x1317))+(((-1.0)*x1317*x1318))+((x1318*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5)));
j4eval[0]=x1319;
j4eval[1]=IKsign(x1319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1320=cj5*cj5;
IkReal x1321=r21*r21;
IkReal x1322=((1.0)*cj3);
IkReal x1323=(cj3*x1320);
IkReal x1324=((((-1.0)*x1320*x1322*(r20*r20)))+(((-1.0)*x1321*x1322))+(((-1.0)*x1322*(r22*r22)))+((x1321*x1323))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1324;
j4eval[1]=IKsign(x1324);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1325=cj2*cj2;
IkReal x1326=cj1*cj1;
IkReal x1327=(cj1*sj1*sj2);
IkReal x1328=(cj2*x1326);
IkReal x1329=(x1325*x1326);
j0eval[0]=((-6.19369221392727)+(((-11.4971359451148)*x1329))+(((11.4971359451148)*cj2*x1327))+(((-1.0)*x1326))+(((12.4570625281677)*x1327))+(((-12.4570625281677)*x1328))+(((5.74856797255738)*x1325)));
j0eval[1]=IKsign(((-66309514.0)+(((-123088050.0)*x1329))+(((133365000.0)*x1327))+(((123088050.0)*cj2*x1327))+(((-10705975.0)*x1326))+(((-133365000.0)*x1328))+(((61544025.0)*x1325))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1330=((1.0)*cj5);
IkReal x1331=((1.0)*sj5);
IkReal x1332=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1332;
j0eval[1]=IKsign(x1332);
j0eval[2]=((IKabs(((((-1.0)*r10*x1331))+(((-1.0)*r11*x1330)))))+(IKabs(((((-1.0)*r00*x1331))+(((-1.0)*r01*x1330))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1333=cj5*cj5;
IkReal x1334=r21*r21;
IkReal x1335=(sj1*sj2);
IkReal x1336=(r21*sj5);
IkReal x1337=(cj5*r20);
IkReal x1338=(cj1*cj2);
IkReal x1339=(x1334+(((-1.0)*x1333*x1334))+(r22*r22)+(((-2.0)*x1336*x1337))+((x1333*(r20*r20))));
j4eval[0]=x1339;
j4eval[1]=IKsign(x1339);
j4eval[2]=((IKabs((((x1337*x1338))+((x1335*x1336))+(((-1.0)*x1335*x1337))+(((-1.0)*x1336*x1338)))))+(IKabs(((((-1.0)*r22*x1338))+((r22*x1335))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.566898951975751)*px))+(((-2.20734818680435)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.566898951975751)*px))+(((-2.20734818680435)*py))))+IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.566898951975751)*px))+(((-2.20734818680435)*py))), ((((-2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1340=IKsin(j0);
IkReal x1341=IKcos(j0);
evalcond[0]=((((-0.425)*x1341))+(((-1.0)*px))+(((0.10915)*x1340)));
evalcond[1]=((((-0.425)*x1340))+(((-1.0)*py))+(((-0.10915)*x1341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1342=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1342;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1342);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1343=cj5*cj5;
IkReal x1344=((1.0)*r21);
IkReal x1345=(cj5*sj5);
IkReal x1346=((1.0)*r20);
IkReal x1347=((((-1.0)*r00*x1344*x1345))+((r01*r21))+(((-1.0)*r01*x1343*x1344))+(((-1.0)*r01*x1345*x1346))+((r02*r22))+((r00*r20*x1343)));
j4eval[0]=x1347;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1346))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1348=cj5*cj5;
IkReal x1349=(r21*sj5);
IkReal x1350=(r11*r21);
IkReal x1351=((1.0)*cj5*r20);
IkReal x1352=(x1350+(((-1.0)*cj5*r10*x1349))+((r12*r22))+((r10*r20*x1348))+(((-1.0)*x1348*x1350))+(((-1.0)*r11*sj5*x1351)));
j4eval[0]=x1352;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1349))+(((-1.0)*sj0*x1351))))));
j4eval[2]=IKsign(x1352);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1353=cj5*cj5;
IkReal x1354=(r21*sj5);
IkReal x1355=(r11*r21);
IkReal x1356=((1.0)*cj5*r20);
CheckValue<IkReal> x1357 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1354))+(((-1.0)*sj0*x1356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1357.valid){
continue;
}
CheckValue<IkReal> x1358=IKPowWithIntegerCheck(IKsign((x1355+((r10*r20*x1353))+(((-1.0)*cj5*r10*x1354))+((r12*r22))+(((-1.0)*x1353*x1355))+(((-1.0)*r11*sj5*x1356)))),-1);
if(!x1358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1357.value)+(((1.5707963267949)*(x1358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1359=IKsin(j4);
IkReal x1360=IKcos(j4);
IkReal x1361=(r11*sj5);
IkReal x1362=(cj5*r00);
IkReal x1363=(cj5*r10);
IkReal x1364=(r21*sj5);
IkReal x1365=(cj5*r20);
IkReal x1366=(r01*sj5);
IkReal x1367=((1.0)*x1360);
IkReal x1368=((1.0)*x1359);
evalcond[0]=(((x1359*x1364))+(((-1.0)*r22*x1367))+(((-1.0)*x1365*x1368)));
evalcond[1]=((((-1.0)*x1364*x1367))+((x1360*x1365))+(((-1.0)*r22*x1368)));
evalcond[2]=(sj0+(((-1.0)*r02*x1367))+((x1359*x1366))+(((-1.0)*x1362*x1368)));
evalcond[3]=((((-1.0)*x1366*x1367))+cj0+(((-1.0)*r02*x1368))+((x1360*x1362)));
evalcond[4]=(sj0+(((-1.0)*r12*x1368))+((x1360*x1363))+(((-1.0)*x1361*x1367)));
evalcond[5]=((((-1.0)*r12*x1367))+((x1359*x1361))+(((-1.0)*x1363*x1368))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1369=cj5*cj5;
IkReal x1370=((1.0)*r21);
IkReal x1371=(cj5*sj5);
IkReal x1372=((1.0)*r20);
CheckValue<IkReal> x1373 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1369*x1370))+((r01*r21))+(((-1.0)*r00*x1370*x1371))+(((-1.0)*r01*x1371*x1372))+((r00*r20*x1369))+((r02*r22)))),-1);
if(!x1374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1373.value)+(((1.5707963267949)*(x1374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1375=IKsin(j4);
IkReal x1376=IKcos(j4);
IkReal x1377=(r11*sj5);
IkReal x1378=(cj5*r00);
IkReal x1379=(cj5*r10);
IkReal x1380=(r21*sj5);
IkReal x1381=(cj5*r20);
IkReal x1382=(r01*sj5);
IkReal x1383=((1.0)*x1376);
IkReal x1384=((1.0)*x1375);
evalcond[0]=((((-1.0)*x1381*x1384))+((x1375*x1380))+(((-1.0)*r22*x1383)));
evalcond[1]=(((x1376*x1381))+(((-1.0)*x1380*x1383))+(((-1.0)*r22*x1384)));
evalcond[2]=(sj0+(((-1.0)*r02*x1383))+((x1375*x1382))+(((-1.0)*x1378*x1384)));
evalcond[3]=(((x1376*x1378))+cj0+(((-1.0)*r02*x1384))+(((-1.0)*x1382*x1383)));
evalcond[4]=((((-1.0)*r12*x1384))+((x1376*x1379))+sj0+(((-1.0)*x1377*x1383)));
evalcond[5]=((((-1.0)*r12*x1383))+((x1375*x1377))+(((-1.0)*x1379*x1384))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1385=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1385.valid){
continue;
}
CheckValue<IkReal> x1386 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1385.value)))+(x1386.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1387=IKsin(j4);
IkReal x1388=IKcos(j4);
IkReal x1389=(r11*sj5);
IkReal x1390=(cj5*r00);
IkReal x1391=(cj5*r10);
IkReal x1392=(r21*sj5);
IkReal x1393=(cj5*r20);
IkReal x1394=(r01*sj5);
IkReal x1395=((1.0)*x1388);
IkReal x1396=((1.0)*x1387);
evalcond[0]=((((-1.0)*x1393*x1396))+((x1387*x1392))+(((-1.0)*r22*x1395)));
evalcond[1]=((((-1.0)*x1392*x1395))+((x1388*x1393))+(((-1.0)*r22*x1396)));
evalcond[2]=(sj0+(((-1.0)*r02*x1395))+(((-1.0)*x1390*x1396))+((x1387*x1394)));
evalcond[3]=(((x1388*x1390))+(((-1.0)*r02*x1396))+cj0+(((-1.0)*x1394*x1395)));
evalcond[4]=((((-1.0)*r12*x1396))+sj0+((x1388*x1391))+(((-1.0)*x1389*x1395)));
evalcond[5]=((((-1.0)*r12*x1395))+(((-1.0)*x1391*x1396))+((x1387*x1389))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.566898951975751)*px))+(((-2.20734818680435)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.566898951975751)*px))+(((-2.20734818680435)*py))))+IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.566898951975751)*px))+(((-2.20734818680435)*py))), ((((-2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1397=IKsin(j0);
IkReal x1398=IKcos(j0);
evalcond[0]=((((-0.425)*x1398))+(((-1.0)*px))+(((0.10915)*x1397)));
evalcond[1]=((((-0.425)*x1397))+(((-1.0)*py))+(((-0.10915)*x1398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1399=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1399;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1400=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1400;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1401=cj5*cj5;
IkReal x1402=((1.0)*r21);
IkReal x1403=(cj5*r20);
IkReal x1404=((((-1.0)*r01*x1401*x1402))+((r01*r21))+((r00*r20*x1401))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1402))+(((-1.0)*r01*sj5*x1403)));
j4eval[0]=x1404;
j4eval[1]=IKsign(x1404);
j4eval[2]=((IKabs(((((-1.0)*sj0*sj5*x1402))+((sj0*x1403)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1405=cj5*cj5;
IkReal x1406=((1.0)*r21);
IkReal x1407=(cj5*r20);
CheckValue<IkReal> x1408 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1406))+((sj0*x1407)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1408.valid){
continue;
}
CheckValue<IkReal> x1409=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x1405))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1406))+(((-1.0)*r01*x1405*x1406))+(((-1.0)*r01*sj5*x1407)))),-1);
if(!x1409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1408.value)+(((1.5707963267949)*(x1409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1410=IKsin(j4);
IkReal x1411=IKcos(j4);
IkReal x1412=((1.0)*cj0);
IkReal x1413=(cj5*r00);
IkReal x1414=(r11*sj5);
IkReal x1415=(cj5*r10);
IkReal x1416=(r21*sj5);
IkReal x1417=(cj5*r20);
IkReal x1418=(r01*sj5);
IkReal x1419=((1.0)*x1411);
IkReal x1420=((1.0)*x1410);
evalcond[0]=((((-1.0)*r22*x1419))+(((-1.0)*x1417*x1420))+((x1410*x1416)));
evalcond[1]=((((-1.0)*x1416*x1419))+((x1411*x1417))+(((-1.0)*r22*x1420)));
evalcond[2]=(sj0+(((-1.0)*r02*x1419))+((x1410*x1418))+(((-1.0)*x1413*x1420)));
evalcond[3]=((((-1.0)*x1415*x1420))+(((-1.0)*x1412))+((x1410*x1414))+(((-1.0)*r12*x1419)));
evalcond[4]=((((-1.0)*x1412))+((x1411*x1413))+(((-1.0)*x1418*x1419))+(((-1.0)*r02*x1420)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1414*x1419))+(((-1.0)*r12*x1420))+((x1411*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1421=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1421.valid){
continue;
}
CheckValue<IkReal> x1422 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1421.value)))+(x1422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1423=IKsin(j4);
IkReal x1424=IKcos(j4);
IkReal x1425=((1.0)*cj0);
IkReal x1426=(cj5*r00);
IkReal x1427=(r11*sj5);
IkReal x1428=(cj5*r10);
IkReal x1429=(r21*sj5);
IkReal x1430=(cj5*r20);
IkReal x1431=(r01*sj5);
IkReal x1432=((1.0)*x1424);
IkReal x1433=((1.0)*x1423);
evalcond[0]=(((x1423*x1429))+(((-1.0)*r22*x1432))+(((-1.0)*x1430*x1433)));
evalcond[1]=((((-1.0)*x1429*x1432))+(((-1.0)*r22*x1433))+((x1424*x1430)));
evalcond[2]=(sj0+(((-1.0)*r02*x1432))+(((-1.0)*x1426*x1433))+((x1423*x1431)));
evalcond[3]=((((-1.0)*r12*x1432))+((x1423*x1427))+(((-1.0)*x1428*x1433))+(((-1.0)*x1425)));
evalcond[4]=(((x1424*x1426))+(((-1.0)*x1431*x1432))+(((-1.0)*r02*x1433))+(((-1.0)*x1425)));
evalcond[5]=(((x1424*x1428))+(((-1.0)*sj0))+(((-1.0)*r12*x1433))+(((-1.0)*x1427*x1432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1434.valid){
continue;
}
CheckValue<IkReal> x1435 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1434.value)))+(x1435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1436=IKsin(j4);
IkReal x1437=IKcos(j4);
IkReal x1438=((1.0)*cj0);
IkReal x1439=(cj5*r00);
IkReal x1440=(r11*sj5);
IkReal x1441=(cj5*r10);
IkReal x1442=(r21*sj5);
IkReal x1443=(cj5*r20);
IkReal x1444=(r01*sj5);
IkReal x1445=((1.0)*x1437);
IkReal x1446=((1.0)*x1436);
evalcond[0]=((((-1.0)*r22*x1445))+((x1436*x1442))+(((-1.0)*x1443*x1446)));
evalcond[1]=(((x1437*x1443))+(((-1.0)*r22*x1446))+(((-1.0)*x1442*x1445)));
evalcond[2]=(sj0+(((-1.0)*x1439*x1446))+((x1436*x1444))+(((-1.0)*r02*x1445)));
evalcond[3]=((((-1.0)*r12*x1445))+(((-1.0)*x1441*x1446))+(((-1.0)*x1438))+((x1436*x1440)));
evalcond[4]=(((x1437*x1439))+(((-1.0)*x1438))+(((-1.0)*x1444*x1445))+(((-1.0)*r02*x1446)));
evalcond[5]=(((x1437*x1441))+(((-1.0)*sj0))+(((-1.0)*r12*x1446))+(((-1.0)*x1440*x1445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1447=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1447;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1447);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1448=cj5*cj5;
IkReal x1449=((1.0)*r21);
IkReal x1450=(cj5*sj5);
IkReal x1451=((1.0)*r20);
IkReal x1452=(((r00*r20*x1448))+((r01*r21))+(((-1.0)*r01*x1448*x1449))+(((-1.0)*r01*x1450*x1451))+(((-1.0)*r00*x1449*x1450))+((r02*r22)));
j4eval[0]=x1452;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1451)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1453=cj5*cj5;
IkReal x1454=(r21*sj5);
IkReal x1455=(r11*r21);
IkReal x1456=((1.0)*cj5*r20);
IkReal x1457=(((r10*r20*x1453))+(((-1.0)*r11*sj5*x1456))+(((-1.0)*cj5*r10*x1454))+((r12*r22))+x1455+(((-1.0)*x1453*x1455)));
j4eval[0]=x1457;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1456))+((sj0*x1454))))));
j4eval[2]=IKsign(x1457);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1458=cj5*cj5;
IkReal x1459=(r21*sj5);
IkReal x1460=(r11*r21);
IkReal x1461=((1.0)*cj5*r20);
CheckValue<IkReal> x1462 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1461))+((sj0*x1459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1462.valid){
continue;
}
CheckValue<IkReal> x1463=IKPowWithIntegerCheck(IKsign((((r10*r20*x1458))+(((-1.0)*cj5*r10*x1459))+((r12*r22))+x1460+(((-1.0)*x1458*x1460))+(((-1.0)*r11*sj5*x1461)))),-1);
if(!x1463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1462.value)+(((1.5707963267949)*(x1463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1464=IKsin(j4);
IkReal x1465=IKcos(j4);
IkReal x1466=(r11*sj5);
IkReal x1467=(cj5*r00);
IkReal x1468=(cj5*r10);
IkReal x1469=(r21*sj5);
IkReal x1470=(cj5*r20);
IkReal x1471=(r01*sj5);
IkReal x1472=((1.0)*x1465);
IkReal x1473=((1.0)*x1464);
evalcond[0]=((((-1.0)*r22*x1472))+(((-1.0)*x1470*x1473))+((x1464*x1469)));
evalcond[1]=((((-1.0)*r22*x1473))+(((-1.0)*x1469*x1472))+((x1465*x1470)));
evalcond[2]=(sj0+(((-1.0)*x1467*x1473))+(((-1.0)*r02*x1472))+((x1464*x1471)));
evalcond[3]=((((-1.0)*x1471*x1472))+cj0+((x1465*x1467))+(((-1.0)*r02*x1473)));
evalcond[4]=(sj0+((x1465*x1468))+(((-1.0)*r12*x1473))+(((-1.0)*x1466*x1472)));
evalcond[5]=((((-1.0)*r12*x1472))+((x1464*x1466))+(((-1.0)*x1468*x1473))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1474=cj5*cj5;
IkReal x1475=((1.0)*r21);
IkReal x1476=(cj5*sj5);
IkReal x1477=((1.0)*r20);
CheckValue<IkReal> x1478=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1476*x1477))+(((-1.0)*r01*x1474*x1475))+((r01*r21))+(((-1.0)*r00*x1475*x1476))+((r02*r22))+((r00*r20*x1474)))),-1);
if(!x1478.valid){
continue;
}
CheckValue<IkReal> x1479 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1478.value)))+(x1479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1480=IKsin(j4);
IkReal x1481=IKcos(j4);
IkReal x1482=(r11*sj5);
IkReal x1483=(cj5*r00);
IkReal x1484=(cj5*r10);
IkReal x1485=(r21*sj5);
IkReal x1486=(cj5*r20);
IkReal x1487=(r01*sj5);
IkReal x1488=((1.0)*x1481);
IkReal x1489=((1.0)*x1480);
evalcond[0]=(((x1480*x1485))+(((-1.0)*x1486*x1489))+(((-1.0)*r22*x1488)));
evalcond[1]=((((-1.0)*x1485*x1488))+((x1481*x1486))+(((-1.0)*r22*x1489)));
evalcond[2]=(sj0+((x1480*x1487))+(((-1.0)*r02*x1488))+(((-1.0)*x1483*x1489)));
evalcond[3]=((((-1.0)*x1487*x1488))+cj0+((x1481*x1483))+(((-1.0)*r02*x1489)));
evalcond[4]=((((-1.0)*x1482*x1488))+sj0+(((-1.0)*r12*x1489))+((x1481*x1484)));
evalcond[5]=((((-1.0)*r12*x1488))+((x1480*x1482))+(((-1.0)*x1484*x1489))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1490=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1490.valid){
continue;
}
CheckValue<IkReal> x1491 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1490.value)))+(x1491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1492=IKsin(j4);
IkReal x1493=IKcos(j4);
IkReal x1494=(r11*sj5);
IkReal x1495=(cj5*r00);
IkReal x1496=(cj5*r10);
IkReal x1497=(r21*sj5);
IkReal x1498=(cj5*r20);
IkReal x1499=(r01*sj5);
IkReal x1500=((1.0)*x1493);
IkReal x1501=((1.0)*x1492);
evalcond[0]=((((-1.0)*x1498*x1501))+(((-1.0)*r22*x1500))+((x1492*x1497)));
evalcond[1]=((((-1.0)*r22*x1501))+((x1493*x1498))+(((-1.0)*x1497*x1500)));
evalcond[2]=(sj0+(((-1.0)*r02*x1500))+((x1492*x1499))+(((-1.0)*x1495*x1501)));
evalcond[3]=((((-1.0)*x1499*x1500))+cj0+(((-1.0)*r02*x1501))+((x1493*x1495)));
evalcond[4]=(sj0+(((-1.0)*x1494*x1500))+((x1493*x1496))+(((-1.0)*r12*x1501)));
evalcond[5]=(((x1492*x1494))+(((-1.0)*x1496*x1501))+(((-1.0)*cj0))+(((-1.0)*r12*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1502=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1502;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1503=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1503;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1504=cj5*cj5;
IkReal x1505=((1.0)*r21);
IkReal x1506=(cj5*r20);
IkReal x1507=(((r01*r21))+(((-1.0)*r01*x1504*x1505))+((r00*r20*x1504))+(((-1.0)*r01*sj5*x1506))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1505)));
j4eval[0]=x1507;
j4eval[1]=IKsign(x1507);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x1505))+((sj0*x1506))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1508=cj5*cj5;
IkReal x1509=((1.0)*r21);
IkReal x1510=(cj5*r20);
CheckValue<IkReal> x1511=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x1508))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1509))+(((-1.0)*r01*sj5*x1510))+(((-1.0)*r01*x1508*x1509)))),-1);
if(!x1511.valid){
continue;
}
CheckValue<IkReal> x1512 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1509))+((sj0*x1510)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1511.value)))+(x1512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1513=IKsin(j4);
IkReal x1514=IKcos(j4);
IkReal x1515=((1.0)*cj0);
IkReal x1516=(cj5*r00);
IkReal x1517=(r11*sj5);
IkReal x1518=(cj5*r10);
IkReal x1519=(r21*sj5);
IkReal x1520=(cj5*r20);
IkReal x1521=(r01*sj5);
IkReal x1522=((1.0)*x1514);
IkReal x1523=((1.0)*x1513);
evalcond[0]=(((x1513*x1519))+(((-1.0)*r22*x1522))+(((-1.0)*x1520*x1523)));
evalcond[1]=((((-1.0)*x1519*x1522))+(((-1.0)*r22*x1523))+((x1514*x1520)));
evalcond[2]=(((x1513*x1521))+sj0+(((-1.0)*r02*x1522))+(((-1.0)*x1516*x1523)));
evalcond[3]=(((x1513*x1517))+(((-1.0)*r12*x1522))+(((-1.0)*x1515))+(((-1.0)*x1518*x1523)));
evalcond[4]=(((x1514*x1516))+(((-1.0)*x1515))+(((-1.0)*r02*x1523))+(((-1.0)*x1521*x1522)));
evalcond[5]=((((-1.0)*r12*x1523))+((x1514*x1518))+(((-1.0)*sj0))+(((-1.0)*x1517*x1522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1524=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1524.valid){
continue;
}
CheckValue<IkReal> x1525 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1524.value)))+(x1525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1526=IKsin(j4);
IkReal x1527=IKcos(j4);
IkReal x1528=((1.0)*cj0);
IkReal x1529=(cj5*r00);
IkReal x1530=(r11*sj5);
IkReal x1531=(cj5*r10);
IkReal x1532=(r21*sj5);
IkReal x1533=(cj5*r20);
IkReal x1534=(r01*sj5);
IkReal x1535=((1.0)*x1527);
IkReal x1536=((1.0)*x1526);
evalcond[0]=((((-1.0)*r22*x1535))+((x1526*x1532))+(((-1.0)*x1533*x1536)));
evalcond[1]=((((-1.0)*r22*x1536))+(((-1.0)*x1532*x1535))+((x1527*x1533)));
evalcond[2]=((((-1.0)*x1529*x1536))+sj0+(((-1.0)*r02*x1535))+((x1526*x1534)));
evalcond[3]=((((-1.0)*r12*x1535))+(((-1.0)*x1531*x1536))+(((-1.0)*x1528))+((x1526*x1530)));
evalcond[4]=((((-1.0)*x1528))+(((-1.0)*r02*x1536))+((x1527*x1529))+(((-1.0)*x1534*x1535)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1536))+(((-1.0)*x1530*x1535))+((x1527*x1531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1537=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1537.valid){
continue;
}
CheckValue<IkReal> x1538 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1537.value)))+(x1538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1539=IKsin(j4);
IkReal x1540=IKcos(j4);
IkReal x1541=((1.0)*cj0);
IkReal x1542=(cj5*r00);
IkReal x1543=(r11*sj5);
IkReal x1544=(cj5*r10);
IkReal x1545=(r21*sj5);
IkReal x1546=(cj5*r20);
IkReal x1547=(r01*sj5);
IkReal x1548=((1.0)*x1540);
IkReal x1549=((1.0)*x1539);
evalcond[0]=((((-1.0)*x1546*x1549))+((x1539*x1545))+(((-1.0)*r22*x1548)));
evalcond[1]=((((-1.0)*r22*x1549))+((x1540*x1546))+(((-1.0)*x1545*x1548)));
evalcond[2]=((((-1.0)*r02*x1548))+sj0+((x1539*x1547))+(((-1.0)*x1542*x1549)));
evalcond[3]=(((x1539*x1543))+(((-1.0)*x1544*x1549))+(((-1.0)*x1541))+(((-1.0)*r12*x1548)));
evalcond[4]=((((-1.0)*r02*x1549))+(((-1.0)*x1547*x1548))+((x1540*x1542))+(((-1.0)*x1541)));
evalcond[5]=((((-1.0)*x1543*x1548))+(((-1.0)*sj0))+((x1540*x1544))+(((-1.0)*r12*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((0.566898951975751)*px))), ((((2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1550=IKsin(j0);
IkReal x1551=IKcos(j0);
evalcond[0]=((((0.425)*x1551))+(((-1.0)*px))+(((0.10915)*x1550)));
evalcond[1]=((((0.425)*x1550))+(((-1.0)*py))+(((-0.10915)*x1551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1552=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1552;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1552);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1553=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1553;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1554=cj5*cj5;
IkReal x1555=((1.0)*r21);
IkReal x1556=(cj5*r20);
IkReal x1557=((((-1.0)*r01*sj5*x1556))+(((-1.0)*cj5*r00*sj5*x1555))+((r01*r21))+((r00*r20*x1554))+(((-1.0)*r01*x1554*x1555))+((r02*r22)));
j4eval[0]=x1557;
j4eval[1]=IKsign(x1557);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x1555))+((sj0*x1556))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1558=cj5*cj5;
IkReal x1559=((1.0)*r21);
IkReal x1560=(cj5*r20);
CheckValue<IkReal> x1561=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1558*x1559))+(((-1.0)*r01*sj5*x1560))+(((-1.0)*cj5*r00*sj5*x1559))+((r01*r21))+((r00*r20*x1558))+((r02*r22)))),-1);
if(!x1561.valid){
continue;
}
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal((((sj0*x1560))+(((-1.0)*sj0*sj5*x1559)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1561.value)))+(x1562.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1563=IKsin(j4);
IkReal x1564=IKcos(j4);
IkReal x1565=((1.0)*cj0);
IkReal x1566=(cj5*r00);
IkReal x1567=(r11*sj5);
IkReal x1568=(cj5*r10);
IkReal x1569=(r21*sj5);
IkReal x1570=(cj5*r20);
IkReal x1571=(r01*sj5);
IkReal x1572=((1.0)*x1564);
IkReal x1573=((1.0)*x1563);
evalcond[0]=((((-1.0)*x1570*x1573))+(((-1.0)*r22*x1572))+((x1563*x1569)));
evalcond[1]=((((-1.0)*r22*x1573))+(((-1.0)*x1569*x1572))+((x1564*x1570)));
evalcond[2]=((((-1.0)*r02*x1572))+sj0+(((-1.0)*x1566*x1573))+((x1563*x1571)));
evalcond[3]=((((-1.0)*x1568*x1573))+(((-1.0)*r12*x1572))+((x1563*x1567))+(((-1.0)*x1565)));
evalcond[4]=((((-1.0)*r02*x1573))+(((-1.0)*x1571*x1572))+(((-1.0)*x1565))+((x1564*x1566)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1567*x1572))+(((-1.0)*r12*x1573))+((x1564*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1574=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1574.valid){
continue;
}
CheckValue<IkReal> x1575 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1574.value)))+(x1575.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1576=IKsin(j4);
IkReal x1577=IKcos(j4);
IkReal x1578=((1.0)*cj0);
IkReal x1579=(cj5*r00);
IkReal x1580=(r11*sj5);
IkReal x1581=(cj5*r10);
IkReal x1582=(r21*sj5);
IkReal x1583=(cj5*r20);
IkReal x1584=(r01*sj5);
IkReal x1585=((1.0)*x1577);
IkReal x1586=((1.0)*x1576);
evalcond[0]=(((x1576*x1582))+(((-1.0)*r22*x1585))+(((-1.0)*x1583*x1586)));
evalcond[1]=((((-1.0)*r22*x1586))+((x1577*x1583))+(((-1.0)*x1582*x1585)));
evalcond[2]=(sj0+((x1576*x1584))+(((-1.0)*r02*x1585))+(((-1.0)*x1579*x1586)));
evalcond[3]=(((x1576*x1580))+(((-1.0)*x1581*x1586))+(((-1.0)*x1578))+(((-1.0)*r12*x1585)));
evalcond[4]=((((-1.0)*r02*x1586))+(((-1.0)*x1584*x1585))+((x1577*x1579))+(((-1.0)*x1578)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1580*x1585))+((x1577*x1581))+(((-1.0)*r12*x1586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1587=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1587.valid){
continue;
}
CheckValue<IkReal> x1588 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1587.value)))+(x1588.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1589=IKsin(j4);
IkReal x1590=IKcos(j4);
IkReal x1591=((1.0)*cj0);
IkReal x1592=(cj5*r00);
IkReal x1593=(r11*sj5);
IkReal x1594=(cj5*r10);
IkReal x1595=(r21*sj5);
IkReal x1596=(cj5*r20);
IkReal x1597=(r01*sj5);
IkReal x1598=((1.0)*x1590);
IkReal x1599=((1.0)*x1589);
evalcond[0]=(((x1589*x1595))+(((-1.0)*r22*x1598))+(((-1.0)*x1596*x1599)));
evalcond[1]=(((x1590*x1596))+(((-1.0)*x1595*x1598))+(((-1.0)*r22*x1599)));
evalcond[2]=(sj0+(((-1.0)*x1592*x1599))+((x1589*x1597))+(((-1.0)*r02*x1598)));
evalcond[3]=((((-1.0)*x1591))+(((-1.0)*x1594*x1599))+((x1589*x1593))+(((-1.0)*r12*x1598)));
evalcond[4]=((((-1.0)*x1591))+((x1590*x1592))+(((-1.0)*r02*x1599))+(((-1.0)*x1597*x1598)));
evalcond[5]=((((-1.0)*sj0))+((x1590*x1594))+(((-1.0)*x1593*x1598))+(((-1.0)*r12*x1599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((0.566898951975751)*px))), ((((2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1600=IKsin(j0);
IkReal x1601=IKcos(j0);
evalcond[0]=((((0.425)*x1601))+(((0.10915)*x1600))+(((-1.0)*px)));
evalcond[1]=((((-0.10915)*x1601))+(((0.425)*x1600))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1602=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1602;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1603=cj5*cj5;
IkReal x1604=((1.0)*r21);
IkReal x1605=(cj5*sj5);
IkReal x1606=((1.0)*r20);
IkReal x1607=(((r00*r20*x1603))+((r01*r21))+(((-1.0)*r01*x1603*x1604))+((r02*r22))+(((-1.0)*r01*x1605*x1606))+(((-1.0)*r00*x1604*x1605)));
j4eval[0]=x1607;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1606)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1608=cj5*cj5;
IkReal x1609=(r21*sj5);
IkReal x1610=(r11*r21);
IkReal x1611=((1.0)*cj5*r20);
IkReal x1612=((((-1.0)*x1608*x1610))+(((-1.0)*cj5*r10*x1609))+((r10*r20*x1608))+x1610+((r12*r22))+(((-1.0)*r11*sj5*x1611)));
j4eval[0]=x1612;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1611))+((sj0*x1609))))));
j4eval[2]=IKsign(x1612);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1613=cj5*cj5;
IkReal x1614=(r21*sj5);
IkReal x1615=(r11*r21);
IkReal x1616=((1.0)*cj5*r20);
CheckValue<IkReal> x1617 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1616))+((sj0*x1614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1617.valid){
continue;
}
CheckValue<IkReal> x1618=IKPowWithIntegerCheck(IKsign((((r10*r20*x1613))+x1615+(((-1.0)*x1613*x1615))+((r12*r22))+(((-1.0)*r11*sj5*x1616))+(((-1.0)*cj5*r10*x1614)))),-1);
if(!x1618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1617.value)+(((1.5707963267949)*(x1618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1619=IKsin(j4);
IkReal x1620=IKcos(j4);
IkReal x1621=(r11*sj5);
IkReal x1622=(cj5*r00);
IkReal x1623=(cj5*r10);
IkReal x1624=(r21*sj5);
IkReal x1625=(cj5*r20);
IkReal x1626=(r01*sj5);
IkReal x1627=((1.0)*x1620);
IkReal x1628=((1.0)*x1619);
evalcond[0]=((((-1.0)*x1625*x1628))+(((-1.0)*r22*x1627))+((x1619*x1624)));
evalcond[1]=(((x1620*x1625))+(((-1.0)*r22*x1628))+(((-1.0)*x1624*x1627)));
evalcond[2]=(sj0+(((-1.0)*r02*x1627))+(((-1.0)*x1622*x1628))+((x1619*x1626)));
evalcond[3]=(((x1620*x1622))+cj0+(((-1.0)*r02*x1628))+(((-1.0)*x1626*x1627)));
evalcond[4]=((((-1.0)*r12*x1628))+((x1620*x1623))+sj0+(((-1.0)*x1621*x1627)));
evalcond[5]=((((-1.0)*r12*x1627))+(((-1.0)*x1623*x1628))+((x1619*x1621))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1629=cj5*cj5;
IkReal x1630=((1.0)*r21);
IkReal x1631=(cj5*sj5);
IkReal x1632=((1.0)*r20);
CheckValue<IkReal> x1633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1631*x1632))+((r00*r20*x1629))+((r01*r21))+(((-1.0)*r01*x1629*x1630))+(((-1.0)*r00*x1630*x1631))+((r02*r22)))),-1);
if(!x1633.valid){
continue;
}
CheckValue<IkReal> x1634 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1633.value)))+(x1634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1635=IKsin(j4);
IkReal x1636=IKcos(j4);
IkReal x1637=(r11*sj5);
IkReal x1638=(cj5*r00);
IkReal x1639=(cj5*r10);
IkReal x1640=(r21*sj5);
IkReal x1641=(cj5*r20);
IkReal x1642=(r01*sj5);
IkReal x1643=((1.0)*x1636);
IkReal x1644=((1.0)*x1635);
evalcond[0]=((((-1.0)*x1641*x1644))+(((-1.0)*r22*x1643))+((x1635*x1640)));
evalcond[1]=(((x1636*x1641))+(((-1.0)*r22*x1644))+(((-1.0)*x1640*x1643)));
evalcond[2]=(sj0+(((-1.0)*x1638*x1644))+((x1635*x1642))+(((-1.0)*r02*x1643)));
evalcond[3]=(((x1636*x1638))+cj0+(((-1.0)*x1642*x1643))+(((-1.0)*r02*x1644)));
evalcond[4]=(sj0+((x1636*x1639))+(((-1.0)*r12*x1644))+(((-1.0)*x1637*x1643)));
evalcond[5]=((((-1.0)*r12*x1643))+(((-1.0)*x1639*x1644))+((x1635*x1637))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1645=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1645.valid){
continue;
}
CheckValue<IkReal> x1646 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1645.value)))+(x1646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1647=IKsin(j4);
IkReal x1648=IKcos(j4);
IkReal x1649=(r11*sj5);
IkReal x1650=(cj5*r00);
IkReal x1651=(cj5*r10);
IkReal x1652=(r21*sj5);
IkReal x1653=(cj5*r20);
IkReal x1654=(r01*sj5);
IkReal x1655=((1.0)*x1648);
IkReal x1656=((1.0)*x1647);
evalcond[0]=((((-1.0)*r22*x1655))+((x1647*x1652))+(((-1.0)*x1653*x1656)));
evalcond[1]=((((-1.0)*x1652*x1655))+((x1648*x1653))+(((-1.0)*r22*x1656)));
evalcond[2]=(sj0+(((-1.0)*x1650*x1656))+((x1647*x1654))+(((-1.0)*r02*x1655)));
evalcond[3]=(cj0+((x1648*x1650))+(((-1.0)*x1654*x1655))+(((-1.0)*r02*x1656)));
evalcond[4]=(sj0+((x1648*x1651))+(((-1.0)*r12*x1656))+(((-1.0)*x1649*x1655)));
evalcond[5]=((((-1.0)*r12*x1655))+((x1647*x1649))+(((-1.0)*x1651*x1656))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1657=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1657;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1658=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1658;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1658);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1659=cj5*cj5;
IkReal x1660=((1.0)*r21);
IkReal x1661=(cj5*r20);
IkReal x1662=((((-1.0)*cj5*r00*sj5*x1660))+(((-1.0)*r01*x1659*x1660))+((r01*r21))+(((-1.0)*r01*sj5*x1661))+((r00*r20*x1659))+((r02*r22)));
j4eval[0]=x1662;
j4eval[1]=IKsign(x1662);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1661))+(((-1.0)*sj0*sj5*x1660))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1663=cj5*cj5;
IkReal x1664=((1.0)*r21);
IkReal x1665=(cj5*r20);
CheckValue<IkReal> x1666=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x1664))+(((-1.0)*r01*x1663*x1664))+((r01*r21))+(((-1.0)*r01*sj5*x1665))+((r00*r20*x1663))+((r02*r22)))),-1);
if(!x1666.valid){
continue;
}
CheckValue<IkReal> x1667 = IKatan2WithCheck(IkReal((((sj0*x1665))+(((-1.0)*sj0*sj5*x1664)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1666.value)))+(x1667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1668=IKsin(j4);
IkReal x1669=IKcos(j4);
IkReal x1670=((1.0)*cj0);
IkReal x1671=(cj5*r00);
IkReal x1672=(r11*sj5);
IkReal x1673=(cj5*r10);
IkReal x1674=(r21*sj5);
IkReal x1675=(cj5*r20);
IkReal x1676=(r01*sj5);
IkReal x1677=((1.0)*x1669);
IkReal x1678=((1.0)*x1668);
evalcond[0]=(((x1668*x1674))+(((-1.0)*r22*x1677))+(((-1.0)*x1675*x1678)));
evalcond[1]=(((x1669*x1675))+(((-1.0)*x1674*x1677))+(((-1.0)*r22*x1678)));
evalcond[2]=(sj0+(((-1.0)*r02*x1677))+((x1668*x1676))+(((-1.0)*x1671*x1678)));
evalcond[3]=((((-1.0)*x1673*x1678))+((x1668*x1672))+(((-1.0)*r12*x1677))+(((-1.0)*x1670)));
evalcond[4]=((((-1.0)*r02*x1678))+((x1669*x1671))+(((-1.0)*x1670))+(((-1.0)*x1676*x1677)));
evalcond[5]=((((-1.0)*x1672*x1677))+(((-1.0)*sj0))+((x1669*x1673))+(((-1.0)*r12*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1679=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1679.valid){
continue;
}
CheckValue<IkReal> x1680 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1679.value)))+(x1680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1681=IKsin(j4);
IkReal x1682=IKcos(j4);
IkReal x1683=((1.0)*cj0);
IkReal x1684=(cj5*r00);
IkReal x1685=(r11*sj5);
IkReal x1686=(cj5*r10);
IkReal x1687=(r21*sj5);
IkReal x1688=(cj5*r20);
IkReal x1689=(r01*sj5);
IkReal x1690=((1.0)*x1682);
IkReal x1691=((1.0)*x1681);
evalcond[0]=((((-1.0)*x1688*x1691))+((x1681*x1687))+(((-1.0)*r22*x1690)));
evalcond[1]=((((-1.0)*x1687*x1690))+(((-1.0)*r22*x1691))+((x1682*x1688)));
evalcond[2]=(((x1681*x1689))+sj0+(((-1.0)*x1684*x1691))+(((-1.0)*r02*x1690)));
evalcond[3]=((((-1.0)*x1686*x1691))+((x1681*x1685))+(((-1.0)*x1683))+(((-1.0)*r12*x1690)));
evalcond[4]=((((-1.0)*x1683))+(((-1.0)*r02*x1691))+((x1682*x1684))+(((-1.0)*x1689*x1690)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1691))+((x1682*x1686))+(((-1.0)*x1685*x1690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1692=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1692.valid){
continue;
}
CheckValue<IkReal> x1693 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1692.value)))+(x1693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1694=IKsin(j4);
IkReal x1695=IKcos(j4);
IkReal x1696=((1.0)*cj0);
IkReal x1697=(cj5*r00);
IkReal x1698=(r11*sj5);
IkReal x1699=(cj5*r10);
IkReal x1700=(r21*sj5);
IkReal x1701=(cj5*r20);
IkReal x1702=(r01*sj5);
IkReal x1703=((1.0)*x1695);
IkReal x1704=((1.0)*x1694);
evalcond[0]=(((x1694*x1700))+(((-1.0)*r22*x1703))+(((-1.0)*x1701*x1704)));
evalcond[1]=((((-1.0)*x1700*x1703))+(((-1.0)*r22*x1704))+((x1695*x1701)));
evalcond[2]=(sj0+((x1694*x1702))+(((-1.0)*r02*x1703))+(((-1.0)*x1697*x1704)));
evalcond[3]=((((-1.0)*x1696))+(((-1.0)*x1699*x1704))+((x1694*x1698))+(((-1.0)*r12*x1703)));
evalcond[4]=((((-1.0)*x1702*x1703))+(((-1.0)*x1696))+((x1695*x1697))+(((-1.0)*r02*x1704)));
evalcond[5]=((((-1.0)*x1698*x1703))+(((-1.0)*sj0))+((x1695*x1699))+(((-1.0)*r12*x1704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1705=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1705;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1706=cj5*cj5;
IkReal x1707=((1.0)*r21);
IkReal x1708=(cj5*sj5);
IkReal x1709=((1.0)*r20);
IkReal x1710=((((-1.0)*r00*x1707*x1708))+(((-1.0)*r01*x1706*x1707))+((r01*r21))+((r00*r20*x1706))+((r02*r22))+(((-1.0)*r01*x1708*x1709)));
j4eval[0]=x1710;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1709)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1710);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1711=cj5*cj5;
IkReal x1712=(r21*sj5);
IkReal x1713=(r11*r21);
IkReal x1714=((1.0)*cj5*r20);
IkReal x1715=(x1713+(((-1.0)*r11*sj5*x1714))+((r10*r20*x1711))+((r12*r22))+(((-1.0)*x1711*x1713))+(((-1.0)*cj5*r10*x1712)));
j4eval[0]=x1715;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1714))+((sj0*x1712))))));
j4eval[2]=IKsign(x1715);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1716=cj5*cj5;
IkReal x1717=(r21*sj5);
IkReal x1718=(r11*r21);
IkReal x1719=((1.0)*cj5*r20);
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1719))+((sj0*x1717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
CheckValue<IkReal> x1721=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1716*x1718))+x1718+(((-1.0)*r11*sj5*x1719))+((r10*r20*x1716))+((r12*r22))+(((-1.0)*cj5*r10*x1717)))),-1);
if(!x1721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1720.value)+(((1.5707963267949)*(x1721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1722=IKsin(j4);
IkReal x1723=IKcos(j4);
IkReal x1724=(r11*sj5);
IkReal x1725=(cj5*r00);
IkReal x1726=(cj5*r10);
IkReal x1727=(r21*sj5);
IkReal x1728=(cj5*r20);
IkReal x1729=(r01*sj5);
IkReal x1730=((1.0)*x1723);
IkReal x1731=((1.0)*x1722);
evalcond[0]=(((x1722*x1727))+(((-1.0)*x1728*x1731))+(((-1.0)*r22*x1730)));
evalcond[1]=(((x1723*x1728))+(((-1.0)*x1727*x1730))+(((-1.0)*r22*x1731)));
evalcond[2]=(((x1722*x1729))+sj0+(((-1.0)*x1725*x1731))+(((-1.0)*r02*x1730)));
evalcond[3]=(((x1723*x1725))+cj0+(((-1.0)*x1729*x1730))+(((-1.0)*r02*x1731)));
evalcond[4]=(((x1723*x1726))+sj0+(((-1.0)*r12*x1731))+(((-1.0)*x1724*x1730)));
evalcond[5]=(((x1722*x1724))+(((-1.0)*x1726*x1731))+(((-1.0)*r12*x1730))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1732=cj5*cj5;
IkReal x1733=((1.0)*r21);
IkReal x1734=(cj5*sj5);
IkReal x1735=((1.0)*r20);
CheckValue<IkReal> x1736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1732*x1733))+((r01*r21))+((r02*r22))+((r00*r20*x1732))+(((-1.0)*r00*x1733*x1734))+(((-1.0)*r01*x1734*x1735)))),-1);
if(!x1736.valid){
continue;
}
CheckValue<IkReal> x1737 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1736.value)))+(x1737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1738=IKsin(j4);
IkReal x1739=IKcos(j4);
IkReal x1740=(r11*sj5);
IkReal x1741=(cj5*r00);
IkReal x1742=(cj5*r10);
IkReal x1743=(r21*sj5);
IkReal x1744=(cj5*r20);
IkReal x1745=(r01*sj5);
IkReal x1746=((1.0)*x1739);
IkReal x1747=((1.0)*x1738);
evalcond[0]=((((-1.0)*r22*x1746))+(((-1.0)*x1744*x1747))+((x1738*x1743)));
evalcond[1]=(((x1739*x1744))+(((-1.0)*r22*x1747))+(((-1.0)*x1743*x1746)));
evalcond[2]=((((-1.0)*x1741*x1747))+sj0+((x1738*x1745))+(((-1.0)*r02*x1746)));
evalcond[3]=(((x1739*x1741))+cj0+(((-1.0)*x1745*x1746))+(((-1.0)*r02*x1747)));
evalcond[4]=((((-1.0)*r12*x1747))+((x1739*x1742))+sj0+(((-1.0)*x1740*x1746)));
evalcond[5]=((((-1.0)*r12*x1746))+(((-1.0)*x1742*x1747))+((x1738*x1740))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1748=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1748.valid){
continue;
}
CheckValue<IkReal> x1749 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1748.value)))+(x1749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1750=IKsin(j4);
IkReal x1751=IKcos(j4);
IkReal x1752=(r11*sj5);
IkReal x1753=(cj5*r00);
IkReal x1754=(cj5*r10);
IkReal x1755=(r21*sj5);
IkReal x1756=(cj5*r20);
IkReal x1757=(r01*sj5);
IkReal x1758=((1.0)*x1751);
IkReal x1759=((1.0)*x1750);
evalcond[0]=((((-1.0)*x1756*x1759))+(((-1.0)*r22*x1758))+((x1750*x1755)));
evalcond[1]=((((-1.0)*r22*x1759))+((x1751*x1756))+(((-1.0)*x1755*x1758)));
evalcond[2]=(sj0+((x1750*x1757))+(((-1.0)*x1753*x1759))+(((-1.0)*r02*x1758)));
evalcond[3]=((((-1.0)*x1757*x1758))+cj0+(((-1.0)*r02*x1759))+((x1751*x1753)));
evalcond[4]=(sj0+(((-1.0)*r12*x1759))+(((-1.0)*x1752*x1758))+((x1751*x1754)));
evalcond[5]=((((-1.0)*r12*x1758))+((x1750*x1752))+(((-1.0)*x1754*x1759))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1760=(cj1*cj2);
IkReal x1761=(cj5*r01);
IkReal x1762=(sj1*sj2);
IkReal x1763=(r00*sj5);
IkReal x1764=((20000.0)*px);
IkReal x1765=((8500.0)*cj1);
CheckValue<IkReal> x1766=IKPowWithIntegerCheck(((((2183.0)*x1760))+(((-2183.0)*x1762))),-1);
if(!x1766.valid){
continue;
}
CheckValue<IkReal> x1767=IKPowWithIntegerCheck(((((-1.0)*x1762))+x1760),-1);
if(!x1767.valid){
continue;
}
if( IKabs(((x1766.value)*(((((-1.0)*x1762*x1764))+(((-1.0)*x1763*x1765))+(((-1.0)*x1761*x1765))+(((5952.0)*x1762*x1763))+(((-5952.0)*x1760*x1763))+(((-5952.0)*x1760*x1761))+(((5952.0)*x1761*x1762))+((x1760*x1764)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1767.value)*(((((-1.0)*x1763))+(((-1.0)*x1761)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1766.value)*(((((-1.0)*x1762*x1764))+(((-1.0)*x1763*x1765))+(((-1.0)*x1761*x1765))+(((5952.0)*x1762*x1763))+(((-5952.0)*x1760*x1763))+(((-5952.0)*x1760*x1761))+(((5952.0)*x1761*x1762))+((x1760*x1764))))))+IKsqr(((x1767.value)*(((((-1.0)*x1763))+(((-1.0)*x1761))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1766.value)*(((((-1.0)*x1762*x1764))+(((-1.0)*x1763*x1765))+(((-1.0)*x1761*x1765))+(((5952.0)*x1762*x1763))+(((-5952.0)*x1760*x1763))+(((-5952.0)*x1760*x1761))+(((5952.0)*x1761*x1762))+((x1760*x1764))))), ((x1767.value)*(((((-1.0)*x1763))+(((-1.0)*x1761))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1768=IKcos(j0);
IkReal x1769=IKsin(j0);
IkReal x1770=(cj5*r01);
IkReal x1771=(cj1*cj2);
IkReal x1772=(sj1*sj2);
IkReal x1773=((0.425)*cj1);
IkReal x1774=(r00*sj5);
IkReal x1775=(cj5*r11);
IkReal x1776=(r10*sj5);
IkReal x1777=((0.39225)*x1768);
IkReal x1778=(x1769*x1772);
evalcond[0]=(x1774+x1770+(((-1.0)*x1768*x1772))+((x1768*x1771)));
evalcond[1]=((((-1.0)*x1778))+x1775+x1776+((x1769*x1771)));
evalcond[2]=((((-0.09465)*x1774))+(((-0.09465)*x1770))+(((-1.0)*px))+(((-1.0)*x1771*x1777))+(((0.10915)*x1769))+((x1772*x1777))+(((-1.0)*x1768*x1773)));
evalcond[3]=((((0.39225)*x1778))+(((-0.09465)*x1775))+(((-0.09465)*x1776))+(((-0.39225)*x1769*x1771))+(((-0.10915)*x1768))+(((-1.0)*py))+(((-1.0)*x1769*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1779=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1779;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1780=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1780;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1781=((1.0)*cj5);
IkReal x1782=((((-1.0)*r21*x1781))+(((-1.0)*r20*sj5)));
j4eval[0]=x1782;
j4eval[1]=((IKabs(((((-1.0)*r10*sj0*x1781))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1781))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1783=((-1.0)*r20);
IkReal x1785 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1785)==0){
continue;
}
IkReal x1784=pow(x1785,-0.5);
CheckValue<IkReal> x1786 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1783),IKFAST_ATAN2_MAGTHRESH);
if(!x1786.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1786.value));
IkReal gconst79=(r21*x1784);
IkReal gconst80=(x1783*x1784);
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1787.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1788=((-1.0)*r20);
IkReal x1789=x1784;
CheckValue<IkReal> x1791 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1788),IKFAST_ATAN2_MAGTHRESH);
if(!x1791.valid){
continue;
}
IkReal x1790=((-1.0)*(x1791.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1790;
IkReal gconst78=x1790;
IkReal gconst79=(r21*x1789);
IkReal gconst80=(x1788*x1789);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1792=((-1.0)*r20);
IkReal x1793=x1784;
CheckValue<IkReal> x1795 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1792),IKFAST_ATAN2_MAGTHRESH);
if(!x1795.valid){
continue;
}
IkReal x1794=((-1.0)*(x1795.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1794;
IkReal gconst78=x1794;
IkReal gconst79=(r21*x1793);
IkReal gconst80=(x1792*x1793);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1796=((-1.0)*r20);
IkReal x1797=x1784;
CheckValue<IkReal> x1799 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1796),IKFAST_ATAN2_MAGTHRESH);
if(!x1799.valid){
continue;
}
IkReal x1798=((-1.0)*(x1799.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1798;
IkReal gconst78=x1798;
IkReal gconst79=(r21*x1797);
IkReal gconst80=(x1796*x1797);
IkReal x1800=r22*r22;
CheckValue<IkReal> x1803=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1800))),-1);
if(!x1803.valid){
continue;
}
IkReal x1801=x1803.value;
IkReal x1802=(((x1801*(r20*r20*r20*r20)))+((x1801*(r21*r21*r21*r21)))+x1800+(((2.0)*x1801*(r20*r20)*(r21*r21))));
j4eval[0]=x1802;
j4eval[1]=IKsign(x1802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1804=(sj1*sj2);
IkReal x1805=(gconst80*r20);
IkReal x1806=(gconst79*r21);
IkReal x1807=(cj1*cj2);
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1807))+((r22*x1804)))),IkReal(((((-1.0)*x1804*x1805))+(((-1.0)*x1806*x1807))+((x1805*x1807))+((x1804*x1806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
CheckValue<IkReal> x1809=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1805*x1806))+(r22*r22)+(x1805*x1805)+(x1806*x1806))),-1);
if(!x1809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1808.value)+(((1.5707963267949)*(x1809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1810=IKsin(j4);
IkReal x1811=IKcos(j4);
IkReal x1812=(gconst79*r01);
IkReal x1813=(cj2*sj1);
IkReal x1814=(gconst79*r21);
IkReal x1815=(gconst79*r11);
IkReal x1816=(cj1*sj2);
IkReal x1817=((1.0)*x1811);
IkReal x1818=(gconst80*x1811);
IkReal x1819=((1.0)*x1810);
IkReal x1820=(gconst80*x1819);
evalcond[0]=((((-1.0)*r20*x1820))+((x1810*x1814))+(((-1.0)*r22*x1817)));
evalcond[1]=(sj0+(((-1.0)*r02*x1817))+(((-1.0)*r00*x1820))+((x1810*x1812)));
evalcond[2]=((((-1.0)*r12*x1817))+((x1810*x1815))+(((-1.0)*cj0))+(((-1.0)*r10*x1820)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1818))+(((-1.0)*x1814*x1817))+(((-1.0)*r22*x1819)));
evalcond[4]=(((cj0*x1813))+((cj0*x1816))+(((-1.0)*x1812*x1817))+(((-1.0)*r02*x1819))+((r00*x1818)));
evalcond[5]=((((-1.0)*r12*x1819))+((sj0*x1816))+((sj0*x1813))+(((-1.0)*x1815*x1817))+((r10*x1818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1821=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1821.valid){
continue;
}
CheckValue<IkReal> x1822 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1821.value)))+(x1822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1823=IKsin(j4);
IkReal x1824=IKcos(j4);
IkReal x1825=(gconst79*r01);
IkReal x1826=(cj2*sj1);
IkReal x1827=(gconst79*r21);
IkReal x1828=(gconst79*r11);
IkReal x1829=(cj1*sj2);
IkReal x1830=((1.0)*x1824);
IkReal x1831=(gconst80*x1824);
IkReal x1832=((1.0)*x1823);
IkReal x1833=(gconst80*x1832);
evalcond[0]=((((-1.0)*r20*x1833))+((x1823*x1827))+(((-1.0)*r22*x1830)));
evalcond[1]=(sj0+(((-1.0)*r00*x1833))+((x1823*x1825))+(((-1.0)*r02*x1830)));
evalcond[2]=((((-1.0)*r10*x1833))+((x1823*x1828))+(((-1.0)*r12*x1830))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1827*x1830))+((r20*x1831))+(((-1.0)*r22*x1832)));
evalcond[4]=(((cj0*x1826))+((cj0*x1829))+(((-1.0)*x1825*x1830))+(((-1.0)*r02*x1832))+((r00*x1831)));
evalcond[5]=(((r10*x1831))+(((-1.0)*x1828*x1830))+((sj0*x1829))+((sj0*x1826))+(((-1.0)*r12*x1832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1834=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x1834.valid){
continue;
}
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1834.value)))+(x1835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1836=IKsin(j4);
IkReal x1837=IKcos(j4);
IkReal x1838=(gconst79*r01);
IkReal x1839=(cj2*sj1);
IkReal x1840=(gconst79*r21);
IkReal x1841=(gconst79*r11);
IkReal x1842=(cj1*sj2);
IkReal x1843=((1.0)*x1837);
IkReal x1844=(gconst80*x1837);
IkReal x1845=((1.0)*x1836);
IkReal x1846=(gconst80*x1845);
evalcond[0]=(((x1836*x1840))+(((-1.0)*r22*x1843))+(((-1.0)*r20*x1846)));
evalcond[1]=(sj0+(((-1.0)*r00*x1846))+(((-1.0)*r02*x1843))+((x1836*x1838)));
evalcond[2]=(((x1836*x1841))+(((-1.0)*r10*x1846))+(((-1.0)*r12*x1843))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1845))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1844))+(((-1.0)*x1840*x1843)));
evalcond[4]=(((cj0*x1842))+(((-1.0)*r02*x1845))+((cj0*x1839))+((r00*x1844))+(((-1.0)*x1838*x1843)));
evalcond[5]=((((-1.0)*x1841*x1843))+((sj0*x1839))+((sj0*x1842))+((r10*x1844))+(((-1.0)*r12*x1845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1847=((-1.0)*r21);
IkReal x1849 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1849)==0){
continue;
}
IkReal x1848=pow(x1849,-0.5);
CheckValue<IkReal> x1850 = IKatan2WithCheck(IkReal(x1847),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1850.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1850.value))));
IkReal gconst82=(x1847*x1848);
IkReal gconst83=((1.0)*r20*x1848);
CheckValue<IkReal> x1851 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1851.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1851.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1852=((-1.0)*r21);
CheckValue<IkReal> x1855 = IKatan2WithCheck(IkReal(x1852),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1855.valid){
continue;
}
IkReal x1853=((1.0)*(x1855.value));
IkReal x1854=x1848;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1853)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1853)));
IkReal gconst82=(x1852*x1854);
IkReal gconst83=((1.0)*r20*x1854);
IkReal x1856=r22*r22;
IkReal x1857=((1.0)*x1856);
CheckValue<IkReal> x1861=IKPowWithIntegerCheck(((-1.0)+x1856),-1);
if(!x1861.valid){
continue;
}
IkReal x1858=x1861.value;
if((((1.0)+(((-1.0)*x1857)))) < -0.00001)
continue;
IkReal x1859=IKsqrt(((1.0)+(((-1.0)*x1857))));
IkReal x1860=(sj0*x1858*x1859);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1860+(((-1.0)*x1857*x1860))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1862=((-1.0)*r21);
CheckValue<IkReal> x1865 = IKatan2WithCheck(IkReal(x1862),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1865.valid){
continue;
}
IkReal x1863=((1.0)*(x1865.value));
IkReal x1864=x1848;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1863)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1863)));
IkReal gconst82=(x1862*x1864);
IkReal gconst83=((1.0)*r20*x1864);
IkReal x1866=r22*r22;
IkReal x1867=((1.0)*x1866);
CheckValue<IkReal> x1871=IKPowWithIntegerCheck(((-1.0)+x1866),-1);
if(!x1871.valid){
continue;
}
IkReal x1868=x1871.value;
if((((1.0)+(((-1.0)*x1867)))) < -0.00001)
continue;
IkReal x1869=IKsqrt(((1.0)+(((-1.0)*x1867))));
IkReal x1870=(cj0*x1868*x1869);
j4eval[0]=((IKabs(((((-1.0)*x1867*x1870))+x1870)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1872=((-1.0)*r21);
CheckValue<IkReal> x1875 = IKatan2WithCheck(IkReal(x1872),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1875.valid){
continue;
}
IkReal x1873=((1.0)*(x1875.value));
IkReal x1874=x1848;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1873)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1873)));
IkReal gconst82=(x1872*x1874);
IkReal gconst83=((1.0)*r20*x1874);
IkReal x1876=r22*r22;
IkReal x1877=(cj0*r02);
IkReal x1878=(r12*sj0);
CheckValue<IkReal> x1882=IKPowWithIntegerCheck(((-1.0)+x1876),-1);
if(!x1882.valid){
continue;
}
IkReal x1879=x1882.value;
if((((1.0)+(((-1.0)*x1876)))) < -0.00001)
continue;
IkReal x1880=IKsqrt(((1.0)+(((-1.0)*x1876))));
IkReal x1881=((1.0)*r22*x1879*x1880);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1878*x1881))+(((-1.0)*x1877*x1881)))))+(IKabs((x1877+x1878))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1883=((1.0)*gconst83);
CheckValue<IkReal> x1884 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1883))+(((-1.0)*r10*sj0*x1883))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1884.valid){
continue;
}
CheckValue<IkReal> x1885=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x1883)))),-1);
if(!x1885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1884.value)+(((1.5707963267949)*(x1885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1886=IKsin(j4);
IkReal x1887=IKcos(j4);
IkReal x1888=(cj2*sj1);
IkReal x1889=(gconst82*r11);
IkReal x1890=(cj1*sj2);
IkReal x1891=((1.0)*x1887);
IkReal x1892=(gconst83*x1887);
IkReal x1893=(gconst82*x1886);
IkReal x1894=((1.0)*x1886);
evalcond[0]=((((-1.0)*r22*x1891))+(((-1.0)*gconst83*r20*x1894))+((r21*x1893)));
evalcond[1]=((((-1.0)*r02*x1891))+sj0+((r01*x1893))+(((-1.0)*gconst83*r00*x1894)));
evalcond[2]=((((-1.0)*r12*x1891))+(((-1.0)*gconst83*r10*x1894))+((x1886*x1889))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x1891))+((r20*x1892))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1894)));
evalcond[4]=((((-1.0)*r02*x1894))+((r00*x1892))+(((-1.0)*gconst82*r01*x1891))+((cj0*x1890))+((cj0*x1888)));
evalcond[5]=(((r10*x1892))+(((-1.0)*x1889*x1891))+(((-1.0)*r12*x1894))+((sj0*x1890))+((sj0*x1888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1895 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1895.valid){
continue;
}
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1895.value)+(((1.5707963267949)*(x1896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1897=IKsin(j4);
IkReal x1898=IKcos(j4);
IkReal x1899=(cj2*sj1);
IkReal x1900=(gconst82*r11);
IkReal x1901=(cj1*sj2);
IkReal x1902=((1.0)*x1898);
IkReal x1903=(gconst83*x1898);
IkReal x1904=(gconst82*x1897);
IkReal x1905=((1.0)*x1897);
evalcond[0]=((((-1.0)*r22*x1902))+((r21*x1904))+(((-1.0)*gconst83*r20*x1905)));
evalcond[1]=(sj0+((r01*x1904))+(((-1.0)*gconst83*r00*x1905))+(((-1.0)*r02*x1902)));
evalcond[2]=((((-1.0)*r12*x1902))+(((-1.0)*gconst83*r10*x1905))+((x1897*x1900))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1905))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1902))+((r20*x1903)));
evalcond[4]=(((r00*x1903))+((cj0*x1901))+((cj0*x1899))+(((-1.0)*gconst82*r01*x1902))+(((-1.0)*r02*x1905)));
evalcond[5]=((((-1.0)*x1900*x1902))+((sj0*x1901))+(((-1.0)*r12*x1905))+((sj0*x1899))+((r10*x1903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1906 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1906.valid){
continue;
}
CheckValue<IkReal> x1907=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x1907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1906.value)+(((1.5707963267949)*(x1907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1908=IKsin(j4);
IkReal x1909=IKcos(j4);
IkReal x1910=(cj2*sj1);
IkReal x1911=(gconst82*r11);
IkReal x1912=(cj1*sj2);
IkReal x1913=((1.0)*x1909);
IkReal x1914=(gconst83*x1909);
IkReal x1915=(gconst82*x1908);
IkReal x1916=((1.0)*x1908);
evalcond[0]=((((-1.0)*r22*x1913))+(((-1.0)*gconst83*r20*x1916))+((r21*x1915)));
evalcond[1]=(sj0+(((-1.0)*r02*x1913))+(((-1.0)*gconst83*r00*x1916))+((r01*x1915)));
evalcond[2]=((((-1.0)*r12*x1913))+(((-1.0)*gconst83*r10*x1916))+((x1908*x1911))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1916))+(((-1.0)*cj1*cj2))+(((-1.0)*gconst82*r21*x1913))+((sj1*sj2))+((r20*x1914)));
evalcond[4]=((((-1.0)*r02*x1916))+((r00*x1914))+(((-1.0)*gconst82*r01*x1913))+((cj0*x1912))+((cj0*x1910)));
evalcond[5]=(((r10*x1914))+(((-1.0)*x1911*x1913))+(((-1.0)*r12*x1916))+((sj0*x1910))+((sj0*x1912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1918 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1918)==0){
continue;
}
IkReal x1917=pow(x1918,-0.5);
CheckValue<IkReal> x1919 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1919.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1919.value));
IkReal gconst85=((-1.0)*r01*x1917);
IkReal gconst86=(r00*x1917);
CheckValue<IkReal> x1920 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1920.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1920.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1923 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1923.valid){
continue;
}
IkReal x1921=((-1.0)*(x1923.value));
IkReal x1922=x1917;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1921;
IkReal gconst84=x1921;
IkReal gconst85=((-1.0)*r01*x1922);
IkReal gconst86=(r00*x1922);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1924=((1.0)*gconst86);
CheckValue<IkReal> x1925 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst85*r11*sj0))+(((-1.0)*cj0*r00*x1924))+((cj0*gconst85*r01))+(((-1.0)*r10*sj0*x1924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1925.valid){
continue;
}
CheckValue<IkReal> x1926=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1924)))),-1);
if(!x1926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1925.value)+(((1.5707963267949)*(x1926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1927=IKsin(j4);
IkReal x1928=IKcos(j4);
IkReal x1929=(gconst85*r21);
IkReal x1930=(cj2*sj1);
IkReal x1931=(gconst86*r00);
IkReal x1932=(gconst86*r10);
IkReal x1933=(gconst85*r11);
IkReal x1934=(gconst85*r01);
IkReal x1935=(gconst86*r20);
IkReal x1936=(cj1*sj2);
IkReal x1937=((1.0)*x1928);
IkReal x1938=((1.0)*x1927);
evalcond[0]=(((x1927*x1929))+(((-1.0)*r22*x1937))+(((-1.0)*x1935*x1938)));
evalcond[1]=(sj0+(((-1.0)*x1931*x1938))+((x1927*x1934))+(((-1.0)*r02*x1937)));
evalcond[2]=((((-1.0)*r12*x1937))+(((-1.0)*x1932*x1938))+((x1927*x1933))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1938))+(((-1.0)*x1929*x1937))+((x1928*x1935)));
evalcond[4]=((((-1.0)*x1934*x1937))+((cj0*x1930))+((cj0*x1936))+((x1928*x1931))+(((-1.0)*r02*x1938)));
evalcond[5]=((((-1.0)*x1933*x1937))+(((-1.0)*r12*x1938))+((sj0*x1930))+((sj0*x1936))+((x1928*x1932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1939=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x1939.valid){
continue;
}
CheckValue<IkReal> x1940 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1939.value)))+(x1940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1941=IKsin(j4);
IkReal x1942=IKcos(j4);
IkReal x1943=(gconst85*r21);
IkReal x1944=(cj2*sj1);
IkReal x1945=(gconst86*r00);
IkReal x1946=(gconst86*r10);
IkReal x1947=(gconst85*r11);
IkReal x1948=(gconst85*r01);
IkReal x1949=(gconst86*r20);
IkReal x1950=(cj1*sj2);
IkReal x1951=((1.0)*x1942);
IkReal x1952=((1.0)*x1941);
evalcond[0]=((((-1.0)*x1949*x1952))+(((-1.0)*r22*x1951))+((x1941*x1943)));
evalcond[1]=(sj0+(((-1.0)*x1945*x1952))+(((-1.0)*r02*x1951))+((x1941*x1948)));
evalcond[2]=(((x1941*x1947))+(((-1.0)*x1946*x1952))+(((-1.0)*r12*x1951))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1952))+(((-1.0)*x1943*x1951))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1942*x1949)));
evalcond[4]=((((-1.0)*x1948*x1951))+((cj0*x1950))+((cj0*x1944))+(((-1.0)*r02*x1952))+((x1942*x1945)));
evalcond[5]=((((-1.0)*x1947*x1951))+((sj0*x1950))+((sj0*x1944))+(((-1.0)*r12*x1952))+((x1942*x1946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1954 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1954)==0){
continue;
}
IkReal x1953=pow(x1954,-0.5);
CheckValue<IkReal> x1955 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1955.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1955.value))));
IkReal gconst88=((1.0)*r01*x1953);
IkReal gconst89=((-1.0)*r00*x1953);
CheckValue<IkReal> x1956 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1956.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1956.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1959 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1959.valid){
continue;
}
IkReal x1957=((1.0)*(x1959.value));
IkReal x1958=x1953;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1957)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1957)));
IkReal gconst88=((1.0)*r01*x1958);
IkReal gconst89=((-1.0)*r00*x1958);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
IkReal x1960=((1.0)*(x1962.value));
IkReal x1961=x1953;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1960)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1960)));
IkReal gconst88=((1.0)*r01*x1961);
IkReal gconst89=((-1.0)*r00*x1961);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1965 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1965.valid){
continue;
}
IkReal x1963=((1.0)*(x1965.value));
IkReal x1964=x1953;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1963)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1963)));
IkReal gconst88=((1.0)*r01*x1964);
IkReal gconst89=((-1.0)*r00*x1964);
IkReal x1966=r02*r02;
IkReal x1967=(r12*sj0);
IkReal x1968=x1953;
IkReal x1969=(cj0*x1968);
j4eval[0]=((IKabs(((((-1.0)*x1969))+((r02*x1967*x1968))+((x1966*x1969)))))+(IKabs((x1967+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1970=((1.0)*gconst89);
CheckValue<IkReal> x1971 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x1970))+(((-1.0)*r10*sj0*x1970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1971.valid){
continue;
}
CheckValue<IkReal> x1972=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x1970)))),-1);
if(!x1972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1971.value)+(((1.5707963267949)*(x1972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1973=IKsin(j4);
IkReal x1974=IKcos(j4);
IkReal x1975=(cj2*sj1);
IkReal x1976=(cj1*sj2);
IkReal x1977=((1.0)*x1974);
IkReal x1978=(gconst89*x1974);
IkReal x1979=((1.0)*x1973);
IkReal x1980=(gconst88*x1973);
IkReal x1981=(gconst89*x1979);
evalcond[0]=((((-1.0)*r22*x1977))+((r21*x1980))+(((-1.0)*r20*x1981)));
evalcond[1]=(sj0+(((-1.0)*r02*x1977))+((r01*x1980))+(((-1.0)*r00*x1981)));
evalcond[2]=(((r11*x1980))+(((-1.0)*r10*x1981))+(((-1.0)*r12*x1977))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x1978))+(((-1.0)*r22*x1979))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x1977)));
evalcond[4]=((((-1.0)*r02*x1979))+(((-1.0)*gconst88*r01*x1977))+((r00*x1978))+((cj0*x1975))+((cj0*x1976)));
evalcond[5]=(((r10*x1978))+((sj0*x1975))+((sj0*x1976))+(((-1.0)*gconst88*r11*x1977))+(((-1.0)*r12*x1979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1982=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x1982.valid){
continue;
}
CheckValue<IkReal> x1983 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1982.value)))+(x1983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1984=IKsin(j4);
IkReal x1985=IKcos(j4);
IkReal x1986=(cj2*sj1);
IkReal x1987=(cj1*sj2);
IkReal x1988=((1.0)*x1985);
IkReal x1989=(gconst89*x1985);
IkReal x1990=((1.0)*x1984);
IkReal x1991=(gconst88*x1984);
IkReal x1992=(gconst89*x1990);
evalcond[0]=(((r21*x1991))+(((-1.0)*r22*x1988))+(((-1.0)*r20*x1992)));
evalcond[1]=(sj0+(((-1.0)*r02*x1988))+(((-1.0)*r00*x1992))+((r01*x1991)));
evalcond[2]=((((-1.0)*r10*x1992))+((r11*x1991))+(((-1.0)*r12*x1988))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst88*r21*x1988))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1990))+((r20*x1989)));
evalcond[4]=((((-1.0)*r02*x1990))+(((-1.0)*gconst88*r01*x1988))+((r00*x1989))+((cj0*x1986))+((cj0*x1987)));
evalcond[5]=(((r10*x1989))+((sj0*x1986))+((sj0*x1987))+(((-1.0)*gconst88*r11*x1988))+(((-1.0)*r12*x1990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1993=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x1993.valid){
continue;
}
CheckValue<IkReal> x1994 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1993.value)))+(x1994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1995=IKsin(j4);
IkReal x1996=IKcos(j4);
IkReal x1997=(cj2*sj1);
IkReal x1998=(cj1*sj2);
IkReal x1999=((1.0)*x1996);
IkReal x2000=(gconst89*x1996);
IkReal x2001=((1.0)*x1995);
IkReal x2002=(gconst88*x1995);
IkReal x2003=(gconst89*x2001);
evalcond[0]=(((r21*x2002))+(((-1.0)*r22*x1999))+(((-1.0)*r20*x2003)));
evalcond[1]=(sj0+((r01*x2002))+(((-1.0)*r02*x1999))+(((-1.0)*r00*x2003)));
evalcond[2]=(((r11*x2002))+(((-1.0)*r10*x2003))+(((-1.0)*r12*x1999))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2001))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x1999))+((r20*x2000)));
evalcond[4]=(((cj0*x1997))+((cj0*x1998))+((r00*x2000))+(((-1.0)*r02*x2001))+(((-1.0)*gconst88*r01*x1999)));
evalcond[5]=(((sj0*x1998))+((sj0*x1997))+((r10*x2000))+(((-1.0)*r12*x2001))+(((-1.0)*gconst88*r11*x1999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2004=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2004;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2005=((1.0)*cj5);
IkReal x2006=((((-1.0)*r21*x2005))+(((-1.0)*r20*sj5)));
j4eval[0]=x2006;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2005))+((r11*sj5))))));
j4eval[2]=IKsign(x2006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2007=cj5*cj5;
IkReal x2008=r01*r01;
IkReal x2009=(cj5*r00);
IkReal x2010=(r01*sj5);
IkReal x2011=((((-1.0)*x2007*x2008))+x2008+(((-2.0)*x2009*x2010))+((x2007*(r00*r00)))+(r02*r02));
j4eval[0]=x2011;
j4eval[1]=((IKabs(r02))+(IKabs((x2009+(((-1.0)*x2010))))));
j4eval[2]=IKsign(x2011);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2012=cj5*cj5;
IkReal x2013=r01*r01;
IkReal x2014=(r01*sj5);
IkReal x2015=(cj5*r00);
CheckValue<IkReal> x2016=IKPowWithIntegerCheck(IKsign((x2013+((x2012*(r00*r00)))+(r02*r02)+(((-2.0)*x2014*x2015))+(((-1.0)*x2012*x2013)))),-1);
if(!x2016.valid){
continue;
}
CheckValue<IkReal> x2017 = IKatan2WithCheck(IkReal((x2015+(((-1.0)*x2014)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2016.value)))+(x2017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2018=IKsin(j4);
IkReal x2019=IKcos(j4);
IkReal x2020=(cj5*r10);
IkReal x2021=(r01*sj5);
IkReal x2022=(cj5*r00);
IkReal x2023=(cj5*r20);
IkReal x2024=((1.0)*x2019);
IkReal x2025=((1.0)*x2018);
IkReal x2026=(sj5*x2018);
evalcond[0]=((((-1.0)*x2023*x2025))+(((-1.0)*r22*x2024))+((r21*x2026)));
evalcond[1]=(((r11*x2026))+(((-1.0)*r12*x2024))+(((-1.0)*x2020*x2025)));
evalcond[2]=((((-1.0)*x2021*x2024))+((x2019*x2022))+(((-1.0)*r02*x2025)));
evalcond[3]=((1.0)+(((-1.0)*x2022*x2025))+((x2018*x2021))+(((-1.0)*r02*x2024)));
evalcond[4]=(((cj2*sj1))+((x2019*x2020))+((cj1*sj2))+(((-1.0)*r12*x2025))+(((-1.0)*r11*sj5*x2024)));
evalcond[5]=((((-1.0)*r21*sj5*x2024))+((x2019*x2023))+(((-1.0)*r22*x2025))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2027=((1.0)*cj5);
CheckValue<IkReal> x2028=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2027))+(((-1.0)*r20*sj5)))),-1);
if(!x2028.valid){
continue;
}
CheckValue<IkReal> x2029 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2027))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2028.value)))+(x2029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2030=IKsin(j4);
IkReal x2031=IKcos(j4);
IkReal x2032=(cj5*r10);
IkReal x2033=(r01*sj5);
IkReal x2034=(cj5*r00);
IkReal x2035=(cj5*r20);
IkReal x2036=((1.0)*x2031);
IkReal x2037=((1.0)*x2030);
IkReal x2038=(sj5*x2030);
evalcond[0]=((((-1.0)*x2035*x2037))+((r21*x2038))+(((-1.0)*r22*x2036)));
evalcond[1]=((((-1.0)*r12*x2036))+(((-1.0)*x2032*x2037))+((r11*x2038)));
evalcond[2]=(((x2031*x2034))+(((-1.0)*r02*x2037))+(((-1.0)*x2033*x2036)));
evalcond[3]=((1.0)+((x2030*x2033))+(((-1.0)*r02*x2036))+(((-1.0)*x2034*x2037)));
evalcond[4]=(((cj2*sj1))+((x2031*x2032))+(((-1.0)*r12*x2037))+(((-1.0)*r11*sj5*x2036))+((cj1*sj2)));
evalcond[5]=(((x2031*x2035))+(((-1.0)*r22*x2037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2039 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2039.valid){
continue;
}
CheckValue<IkReal> x2040=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2039.value)+(((1.5707963267949)*(x2040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2041=IKsin(j4);
IkReal x2042=IKcos(j4);
IkReal x2043=(cj5*r10);
IkReal x2044=(r01*sj5);
IkReal x2045=(cj5*r00);
IkReal x2046=(cj5*r20);
IkReal x2047=((1.0)*x2042);
IkReal x2048=((1.0)*x2041);
IkReal x2049=(sj5*x2041);
evalcond[0]=(((r21*x2049))+(((-1.0)*r22*x2047))+(((-1.0)*x2046*x2048)));
evalcond[1]=(((r11*x2049))+(((-1.0)*x2043*x2048))+(((-1.0)*r12*x2047)));
evalcond[2]=(((x2042*x2045))+(((-1.0)*r02*x2048))+(((-1.0)*x2044*x2047)));
evalcond[3]=((1.0)+((x2041*x2044))+(((-1.0)*r02*x2047))+(((-1.0)*x2045*x2048)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2047))+((x2042*x2043))+((cj1*sj2))+(((-1.0)*r12*x2048)));
evalcond[5]=(((x2042*x2046))+(((-1.0)*r22*x2048))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2050=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2050;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2051=((1.0)*cj5);
IkReal x2052=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2051)));
j4eval[0]=x2052;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2051)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2053=cj5*cj5;
IkReal x2054=r01*r01;
IkReal x2055=(r01*sj5);
IkReal x2056=(cj5*r00);
IkReal x2057=(((x2053*x2054))+(((-1.0)*x2053*(r00*r00)))+(((2.0)*x2055*x2056))+(((-1.0)*(r02*r02)))+(((-1.0)*x2054)));
j4eval[0]=x2057;
j4eval[1]=IKsign(x2057);
j4eval[2]=((IKabs(r02))+(IKabs((x2056+(((-1.0)*x2055))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2058=cj5*cj5;
IkReal x2059=r01*r01;
IkReal x2060=(r01*sj5);
IkReal x2061=(cj5*r00);
CheckValue<IkReal> x2062 = IKatan2WithCheck(IkReal((x2061+(((-1.0)*x2060)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2062.valid){
continue;
}
CheckValue<IkReal> x2063=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x2060*x2061))+(((-1.0)*x2059))+((x2058*x2059))+(((-1.0)*x2058*(r00*r00))))),-1);
if(!x2063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2062.value)+(((1.5707963267949)*(x2063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2064=IKsin(j4);
IkReal x2065=IKcos(j4);
IkReal x2066=(cj5*r10);
IkReal x2067=(r01*sj5);
IkReal x2068=((1.0)*cj2);
IkReal x2069=(cj5*r00);
IkReal x2070=(cj5*r20);
IkReal x2071=((1.0)*x2065);
IkReal x2072=((1.0)*x2064);
IkReal x2073=(sj5*x2064);
evalcond[0]=((((-1.0)*x2070*x2072))+(((-1.0)*r22*x2071))+((r21*x2073)));
evalcond[1]=((((-1.0)*r12*x2071))+((r11*x2073))+(((-1.0)*x2066*x2072)));
evalcond[2]=((((-1.0)*r02*x2072))+(((-1.0)*x2067*x2071))+((x2065*x2069)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2071))+(((-1.0)*x2069*x2072))+((x2064*x2067)));
evalcond[4]=((((-1.0)*r22*x2072))+((sj1*sj2))+(((-1.0)*cj1*x2068))+(((-1.0)*r21*sj5*x2071))+((x2065*x2070)));
evalcond[5]=((((-1.0)*r12*x2072))+(((-1.0)*r11*sj5*x2071))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2068))+((x2065*x2066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2074=((1.0)*cj5);
CheckValue<IkReal> x2075 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2075.valid){
continue;
}
CheckValue<IkReal> x2076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2074))+(((-1.0)*r10*sj5)))),-1);
if(!x2076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2075.value)+(((1.5707963267949)*(x2076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2077=IKsin(j4);
IkReal x2078=IKcos(j4);
IkReal x2079=(cj5*r10);
IkReal x2080=(r01*sj5);
IkReal x2081=((1.0)*cj2);
IkReal x2082=(cj5*r00);
IkReal x2083=(cj5*r20);
IkReal x2084=((1.0)*x2078);
IkReal x2085=((1.0)*x2077);
IkReal x2086=(sj5*x2077);
evalcond[0]=((((-1.0)*r22*x2084))+(((-1.0)*x2083*x2085))+((r21*x2086)));
evalcond[1]=((((-1.0)*r12*x2084))+(((-1.0)*x2079*x2085))+((r11*x2086)));
evalcond[2]=((((-1.0)*r02*x2085))+((x2078*x2082))+(((-1.0)*x2080*x2084)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2084))+((x2077*x2080))+(((-1.0)*x2082*x2085)));
evalcond[4]=((((-1.0)*cj1*x2081))+(((-1.0)*r21*sj5*x2084))+(((-1.0)*r22*x2085))+((x2078*x2083))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x2081))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2084))+(((-1.0)*r12*x2085))+((x2078*x2079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2087=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2087.valid){
continue;
}
CheckValue<IkReal> x2088 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2087.value)))+(x2088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2089=IKsin(j4);
IkReal x2090=IKcos(j4);
IkReal x2091=(cj5*r10);
IkReal x2092=(r01*sj5);
IkReal x2093=((1.0)*cj2);
IkReal x2094=(cj5*r00);
IkReal x2095=(cj5*r20);
IkReal x2096=((1.0)*x2090);
IkReal x2097=((1.0)*x2089);
IkReal x2098=(sj5*x2089);
evalcond[0]=((((-1.0)*x2095*x2097))+((r21*x2098))+(((-1.0)*r22*x2096)));
evalcond[1]=((((-1.0)*x2091*x2097))+(((-1.0)*r12*x2096))+((r11*x2098)));
evalcond[2]=(((x2090*x2094))+(((-1.0)*x2092*x2096))+(((-1.0)*r02*x2097)));
evalcond[3]=((-1.0)+(((-1.0)*x2094*x2097))+((x2089*x2092))+(((-1.0)*r02*x2096)));
evalcond[4]=((((-1.0)*r21*sj5*x2096))+((sj1*sj2))+((x2090*x2095))+(((-1.0)*cj1*x2093))+(((-1.0)*r22*x2097)));
evalcond[5]=((((-1.0)*r11*sj5*x2096))+(((-1.0)*cj1*sj2))+((x2090*x2091))+(((-1.0)*r12*x2097))+(((-1.0)*sj1*x2093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2100 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2100)==0){
continue;
}
IkReal x2099=pow(x2100,-0.5);
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2101.value));
IkReal gconst91=((-1.0)*r11*x2099);
IkReal gconst92=(r10*x2099);
CheckValue<IkReal> x2102 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2102.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2102.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2105 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2105.valid){
continue;
}
IkReal x2103=((-1.0)*(x2105.value));
IkReal x2104=x2099;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2103;
IkReal gconst90=x2103;
IkReal gconst91=((-1.0)*r11*x2104);
IkReal gconst92=(r10*x2104);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2106=((1.0)*gconst92);
CheckValue<IkReal> x2107 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2106))+((gconst91*r11*sj0))+(((-1.0)*cj0*r00*x2106))+((cj0*gconst91*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2107.valid){
continue;
}
CheckValue<IkReal> x2108=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2106)))),-1);
if(!x2108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2107.value)+(((1.5707963267949)*(x2108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2109=IKsin(j4);
IkReal x2110=IKcos(j4);
IkReal x2111=(cj2*sj1);
IkReal x2112=(gconst92*r00);
IkReal x2113=(gconst92*r20);
IkReal x2114=(gconst92*r10);
IkReal x2115=(cj1*sj2);
IkReal x2116=((1.0)*x2110);
IkReal x2117=(gconst91*x2109);
IkReal x2118=((1.0)*x2109);
evalcond[0]=(((r21*x2117))+(((-1.0)*r22*x2116))+(((-1.0)*x2113*x2118)));
evalcond[1]=(sj0+((r01*x2117))+(((-1.0)*x2112*x2118))+(((-1.0)*r02*x2116)));
evalcond[2]=((((-1.0)*x2114*x2118))+(((-1.0)*r12*x2116))+(((-1.0)*cj0))+((r11*x2117)));
evalcond[3]=((((-1.0)*gconst91*r21*x2116))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2110*x2113))+(((-1.0)*r22*x2118)));
evalcond[4]=(((cj0*x2111))+((cj0*x2115))+((x2110*x2112))+(((-1.0)*gconst91*r01*x2116))+(((-1.0)*r02*x2118)));
evalcond[5]=((((-1.0)*gconst91*r11*x2116))+((sj0*x2111))+((sj0*x2115))+((x2110*x2114))+(((-1.0)*r12*x2118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2119 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2119.valid){
continue;
}
CheckValue<IkReal> x2120=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x2120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2119.value)+(((1.5707963267949)*(x2120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2121=IKsin(j4);
IkReal x2122=IKcos(j4);
IkReal x2123=(cj2*sj1);
IkReal x2124=(gconst92*r00);
IkReal x2125=(gconst92*r20);
IkReal x2126=(gconst92*r10);
IkReal x2127=(cj1*sj2);
IkReal x2128=((1.0)*x2122);
IkReal x2129=(gconst91*x2121);
IkReal x2130=((1.0)*x2121);
evalcond[0]=((((-1.0)*x2125*x2130))+(((-1.0)*r22*x2128))+((r21*x2129)));
evalcond[1]=(sj0+(((-1.0)*r02*x2128))+(((-1.0)*x2124*x2130))+((r01*x2129)));
evalcond[2]=(((r11*x2129))+(((-1.0)*r12*x2128))+(((-1.0)*x2126*x2130))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2130))+((x2122*x2125))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2128)));
evalcond[4]=(((x2122*x2124))+(((-1.0)*gconst91*r01*x2128))+((cj0*x2123))+((cj0*x2127))+(((-1.0)*r02*x2130)));
evalcond[5]=(((x2122*x2126))+(((-1.0)*gconst91*r11*x2128))+(((-1.0)*r12*x2130))+((sj0*x2123))+((sj0*x2127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2132 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2132)==0){
continue;
}
IkReal x2131=pow(x2132,-0.5);
CheckValue<IkReal> x2133 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2133.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2133.value))));
IkReal gconst94=((1.0)*r11*x2131);
IkReal gconst95=((-1.0)*r10*x2131);
CheckValue<IkReal> x2134 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2134.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2134.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2137 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2137.valid){
continue;
}
IkReal x2135=((1.0)*(x2137.value));
IkReal x2136=x2131;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2135)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2135)));
IkReal gconst94=((1.0)*r11*x2136);
IkReal gconst95=((-1.0)*r10*x2136);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2140 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2140.valid){
continue;
}
IkReal x2138=((1.0)*(x2140.value));
IkReal x2139=x2131;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2138)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2138)));
IkReal gconst94=((1.0)*r11*x2139);
IkReal gconst95=((-1.0)*r10*x2139);
IkReal x2141=r12*r12;
IkReal x2142=(cj0*r02);
IkReal x2143=x2131;
IkReal x2144=(sj0*x2143);
j4eval[0]=((IKabs(((((-1.0)*x2144))+((r12*x2142*x2143))+((x2141*x2144)))))+(IKabs((x2142+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2147 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2147.valid){
continue;
}
IkReal x2145=((1.0)*(x2147.value));
IkReal x2146=x2131;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2145)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2145)));
IkReal gconst94=((1.0)*r11*x2146);
IkReal gconst95=((-1.0)*r10*x2146);
IkReal x2148=r12*r12;
IkReal x2149=(sj1*sj2);
IkReal x2150=((1.0)*cj1*cj2);
CheckValue<IkReal> x2154=IKPowWithIntegerCheck(((-1.0)+x2148),-1);
if(!x2154.valid){
continue;
}
IkReal x2151=x2154.value;
if((((1.0)+(((-1.0)*x2148)))) < -0.00001)
continue;
IkReal x2152=IKsqrt(((1.0)+(((-1.0)*x2148))));
IkReal x2153=(r12*r22*x2151*x2152);
j4eval[0]=((IKabs((((x2149*x2153))+(((-1.0)*x2150*x2153)))))+(IKabs(((((-1.0)*r22*x2150))+((r22*x2149))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2155=(gconst94*r21);
IkReal x2156=(cj1*cj2);
IkReal x2157=(sj1*sj2);
IkReal x2158=(gconst95*r20);
CheckValue<IkReal> x2159 = IKatan2WithCheck(IkReal((((r22*x2157))+(((-1.0)*r22*x2156)))),IkReal(((((-1.0)*x2157*x2158))+((x2155*x2157))+((x2156*x2158))+(((-1.0)*x2155*x2156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2159.valid){
continue;
}
CheckValue<IkReal> x2160=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2158*x2158)+(x2155*x2155)+(((-2.0)*x2155*x2158)))),-1);
if(!x2160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2159.value)+(((1.5707963267949)*(x2160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2161=IKsin(j4);
IkReal x2162=IKcos(j4);
IkReal x2163=(cj2*sj1);
IkReal x2164=(gconst94*r11);
IkReal x2165=(gconst95*r10);
IkReal x2166=(gconst94*r21);
IkReal x2167=(gconst94*r01);
IkReal x2168=(cj1*sj2);
IkReal x2169=((1.0)*x2162);
IkReal x2170=((1.0)*x2161);
IkReal x2171=(gconst95*x2162);
evalcond[0]=(((x2161*x2166))+(((-1.0)*r22*x2169))+(((-1.0)*gconst95*r20*x2170)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2170))+((x2161*x2167))+(((-1.0)*r02*x2169)));
evalcond[2]=(((x2161*x2164))+(((-1.0)*r12*x2169))+(((-1.0)*x2165*x2170))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2166*x2169))+((r20*x2171))+(((-1.0)*r22*x2170)));
evalcond[4]=(((r00*x2171))+((cj0*x2168))+((cj0*x2163))+(((-1.0)*r02*x2170))+(((-1.0)*x2167*x2169)));
evalcond[5]=(((sj0*x2163))+((sj0*x2168))+(((-1.0)*x2164*x2169))+((x2162*x2165))+(((-1.0)*r12*x2170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2172=((1.0)*gconst95);
CheckValue<IkReal> x2173 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst94*r11*sj0))+((cj0*gconst94*r01))+(((-1.0)*cj0*r00*x2172))+(((-1.0)*r10*sj0*x2172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2173.valid){
continue;
}
CheckValue<IkReal> x2174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2172))+(((-1.0)*gconst94*r20)))),-1);
if(!x2174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2173.value)+(((1.5707963267949)*(x2174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2175=IKsin(j4);
IkReal x2176=IKcos(j4);
IkReal x2177=(cj2*sj1);
IkReal x2178=(gconst94*r11);
IkReal x2179=(gconst95*r10);
IkReal x2180=(gconst94*r21);
IkReal x2181=(gconst94*r01);
IkReal x2182=(cj1*sj2);
IkReal x2183=((1.0)*x2176);
IkReal x2184=((1.0)*x2175);
IkReal x2185=(gconst95*x2176);
evalcond[0]=((((-1.0)*gconst95*r20*x2184))+(((-1.0)*r22*x2183))+((x2175*x2180)));
evalcond[1]=(sj0+(((-1.0)*r02*x2183))+((x2175*x2181))+(((-1.0)*gconst95*r00*x2184)));
evalcond[2]=(((x2175*x2178))+(((-1.0)*x2179*x2184))+(((-1.0)*r12*x2183))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2180*x2183))+((r20*x2185))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2184)));
evalcond[4]=(((cj0*x2177))+((cj0*x2182))+(((-1.0)*r02*x2184))+(((-1.0)*x2181*x2183))+((r00*x2185)));
evalcond[5]=(((x2176*x2179))+((sj0*x2182))+(((-1.0)*x2178*x2183))+(((-1.0)*r12*x2184))+((sj0*x2177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2186 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2186.valid){
continue;
}
CheckValue<IkReal> x2187=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2186.value)+(((1.5707963267949)*(x2187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2188=IKsin(j4);
IkReal x2189=IKcos(j4);
IkReal x2190=(cj2*sj1);
IkReal x2191=(gconst94*r11);
IkReal x2192=(gconst95*r10);
IkReal x2193=(gconst94*r21);
IkReal x2194=(gconst94*r01);
IkReal x2195=(cj1*sj2);
IkReal x2196=((1.0)*x2189);
IkReal x2197=((1.0)*x2188);
IkReal x2198=(gconst95*x2189);
evalcond[0]=((((-1.0)*gconst95*r20*x2197))+((x2188*x2193))+(((-1.0)*r22*x2196)));
evalcond[1]=(sj0+(((-1.0)*r02*x2196))+((x2188*x2194))+(((-1.0)*gconst95*r00*x2197)));
evalcond[2]=((((-1.0)*x2192*x2197))+((x2188*x2191))+(((-1.0)*r12*x2196))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2193*x2196))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2198))+(((-1.0)*r22*x2197)));
evalcond[4]=((((-1.0)*x2194*x2196))+(((-1.0)*r02*x2197))+((cj0*x2190))+((cj0*x2195))+((r00*x2198)));
evalcond[5]=(((sj0*x2190))+((sj0*x2195))+(((-1.0)*x2191*x2196))+((x2189*x2192))+(((-1.0)*r12*x2197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2199=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2199;
j4eval[1]=IKsign(x2199);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2200=((1.0)*cj5);
IkReal x2201=((((-1.0)*r21*x2200))+(((-1.0)*r20*sj5)));
j4eval[0]=x2201;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2200))))));
j4eval[2]=IKsign(x2201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2202=cj5*cj5;
IkReal x2203=r11*r11;
IkReal x2204=(cj5*r10);
IkReal x2205=(r11*sj5);
IkReal x2206=(((x2202*x2203))+(((-1.0)*x2203))+(((-1.0)*x2202*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x2204*x2205)));
j4eval[0]=x2206;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2205))+x2204))));
j4eval[2]=IKsign(x2206);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2207=cj5*cj5;
IkReal x2208=r11*r11;
IkReal x2209=(cj5*r10);
IkReal x2210=(r11*sj5);
CheckValue<IkReal> x2211 = IKatan2WithCheck(IkReal(((((-1.0)*x2210))+x2209)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2211.valid){
continue;
}
CheckValue<IkReal> x2212=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2208))+(((2.0)*x2209*x2210))+(((-1.0)*(r12*r12)))+(((-1.0)*x2207*(r10*r10)))+((x2207*x2208)))),-1);
if(!x2212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2211.value)+(((1.5707963267949)*(x2212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2213=IKsin(j4);
IkReal x2214=IKcos(j4);
IkReal x2215=(cj5*r10);
IkReal x2216=(r01*sj5);
IkReal x2217=(cj5*r00);
IkReal x2218=(cj5*r20);
IkReal x2219=((1.0)*x2214);
IkReal x2220=((1.0)*x2213);
IkReal x2221=(sj5*x2213);
evalcond[0]=((((-1.0)*r22*x2219))+((r21*x2221))+(((-1.0)*x2218*x2220)));
evalcond[1]=((((-1.0)*x2217*x2220))+(((-1.0)*r02*x2219))+((x2213*x2216)));
evalcond[2]=(((x2214*x2215))+(((-1.0)*r12*x2220))+(((-1.0)*r11*sj5*x2219)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2219))+(((-1.0)*x2215*x2220))+((r11*x2221)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2220))+((x2214*x2217))+(((-1.0)*x2216*x2219)));
evalcond[5]=((((-1.0)*r21*sj5*x2219))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2214*x2218))+(((-1.0)*r22*x2220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2222=((1.0)*cj5);
CheckValue<IkReal> x2223=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2222))+(((-1.0)*r20*sj5)))),-1);
if(!x2223.valid){
continue;
}
CheckValue<IkReal> x2224 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2223.value)))+(x2224.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2225=IKsin(j4);
IkReal x2226=IKcos(j4);
IkReal x2227=(cj5*r10);
IkReal x2228=(r01*sj5);
IkReal x2229=(cj5*r00);
IkReal x2230=(cj5*r20);
IkReal x2231=((1.0)*x2226);
IkReal x2232=((1.0)*x2225);
IkReal x2233=(sj5*x2225);
evalcond[0]=(((r21*x2233))+(((-1.0)*r22*x2231))+(((-1.0)*x2230*x2232)));
evalcond[1]=(((x2225*x2228))+(((-1.0)*r02*x2231))+(((-1.0)*x2229*x2232)));
evalcond[2]=(((x2226*x2227))+(((-1.0)*r11*sj5*x2231))+(((-1.0)*r12*x2232)));
evalcond[3]=((-1.0)+(((-1.0)*x2227*x2232))+(((-1.0)*r12*x2231))+((r11*x2233)));
evalcond[4]=(((cj2*sj1))+((x2226*x2229))+((cj1*sj2))+(((-1.0)*r02*x2232))+(((-1.0)*x2228*x2231)));
evalcond[5]=(((x2226*x2230))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2231))+(((-1.0)*r22*x2232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2234 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2234.valid){
continue;
}
CheckValue<IkReal> x2235=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2234.value)+(((1.5707963267949)*(x2235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2236=IKsin(j4);
IkReal x2237=IKcos(j4);
IkReal x2238=(cj5*r10);
IkReal x2239=(r01*sj5);
IkReal x2240=(cj5*r00);
IkReal x2241=(cj5*r20);
IkReal x2242=((1.0)*x2237);
IkReal x2243=((1.0)*x2236);
IkReal x2244=(sj5*x2236);
evalcond[0]=((((-1.0)*r22*x2242))+(((-1.0)*x2241*x2243))+((r21*x2244)));
evalcond[1]=((((-1.0)*r02*x2242))+((x2236*x2239))+(((-1.0)*x2240*x2243)));
evalcond[2]=(((x2237*x2238))+(((-1.0)*r12*x2243))+(((-1.0)*r11*sj5*x2242)));
evalcond[3]=((-1.0)+((r11*x2244))+(((-1.0)*r12*x2242))+(((-1.0)*x2238*x2243)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2243))+((cj1*sj2))+(((-1.0)*x2239*x2242))+((x2237*x2240)));
evalcond[5]=((((-1.0)*r22*x2243))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2242))+((x2237*x2241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2245=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2245;
j4eval[1]=IKsign(x2245);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2246=((1.0)*cj5);
IkReal x2247=((((-1.0)*r01*x2246))+(((-1.0)*r00*sj5)));
j4eval[0]=x2247;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2246)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2248=cj5*cj5;
IkReal x2249=r11*r11;
IkReal x2250=(r11*sj5);
IkReal x2251=(cj5*r10);
IkReal x2252=((r12*r12)+x2249+(((-1.0)*x2248*x2249))+(((-2.0)*x2250*x2251))+((x2248*(r10*r10))));
j4eval[0]=x2252;
j4eval[1]=IKsign(x2252);
j4eval[2]=((IKabs(r12))+(IKabs((x2251+(((-1.0)*x2250))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2253=cj5*cj5;
IkReal x2254=r11*r11;
IkReal x2255=(cj5*r10);
IkReal x2256=(r11*sj5);
CheckValue<IkReal> x2257 = IKatan2WithCheck(IkReal((x2255+(((-1.0)*x2256)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2257.valid){
continue;
}
CheckValue<IkReal> x2258=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2254+(((-1.0)*x2253*x2254))+((x2253*(r10*r10)))+(((-2.0)*x2255*x2256)))),-1);
if(!x2258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2257.value)+(((1.5707963267949)*(x2258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2259=IKsin(j4);
IkReal x2260=IKcos(j4);
IkReal x2261=(cj5*r10);
IkReal x2262=(r01*sj5);
IkReal x2263=((1.0)*cj2);
IkReal x2264=(cj5*r00);
IkReal x2265=(cj5*r20);
IkReal x2266=((1.0)*x2260);
IkReal x2267=((1.0)*x2259);
IkReal x2268=(sj5*x2259);
evalcond[0]=(((r21*x2268))+(((-1.0)*r22*x2266))+(((-1.0)*x2265*x2267)));
evalcond[1]=(((x2259*x2262))+(((-1.0)*r02*x2266))+(((-1.0)*x2264*x2267)));
evalcond[2]=(((x2260*x2261))+(((-1.0)*r11*sj5*x2266))+(((-1.0)*r12*x2267)));
evalcond[3]=((1.0)+((r11*x2268))+(((-1.0)*x2261*x2267))+(((-1.0)*r12*x2266)));
evalcond[4]=(((x2260*x2265))+(((-1.0)*cj1*x2263))+((sj1*sj2))+(((-1.0)*r22*x2267))+(((-1.0)*r21*sj5*x2266)));
evalcond[5]=(((x2260*x2264))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2263))+(((-1.0)*r02*x2267))+(((-1.0)*x2262*x2266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2269=((1.0)*cj5);
CheckValue<IkReal> x2270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2269)))),-1);
if(!x2270.valid){
continue;
}
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2270.value)))+(x2271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2272=IKsin(j4);
IkReal x2273=IKcos(j4);
IkReal x2274=(cj5*r10);
IkReal x2275=(r01*sj5);
IkReal x2276=((1.0)*cj2);
IkReal x2277=(cj5*r00);
IkReal x2278=(cj5*r20);
IkReal x2279=((1.0)*x2273);
IkReal x2280=((1.0)*x2272);
IkReal x2281=(sj5*x2272);
evalcond[0]=((((-1.0)*x2278*x2280))+(((-1.0)*r22*x2279))+((r21*x2281)));
evalcond[1]=((((-1.0)*x2277*x2280))+((x2272*x2275))+(((-1.0)*r02*x2279)));
evalcond[2]=(((x2273*x2274))+(((-1.0)*r12*x2280))+(((-1.0)*r11*sj5*x2279)));
evalcond[3]=((1.0)+((r11*x2281))+(((-1.0)*x2274*x2280))+(((-1.0)*r12*x2279)));
evalcond[4]=(((x2273*x2278))+(((-1.0)*cj1*x2276))+((sj1*sj2))+(((-1.0)*r21*sj5*x2279))+(((-1.0)*r22*x2280)));
evalcond[5]=((((-1.0)*r02*x2280))+((x2273*x2277))+(((-1.0)*x2275*x2279))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2282=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2282.valid){
continue;
}
CheckValue<IkReal> x2283 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2282.value)))+(x2283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2284=IKsin(j4);
IkReal x2285=IKcos(j4);
IkReal x2286=(cj5*r10);
IkReal x2287=(r01*sj5);
IkReal x2288=((1.0)*cj2);
IkReal x2289=(cj5*r00);
IkReal x2290=(cj5*r20);
IkReal x2291=((1.0)*x2285);
IkReal x2292=((1.0)*x2284);
IkReal x2293=(sj5*x2284);
evalcond[0]=(((r21*x2293))+(((-1.0)*x2290*x2292))+(((-1.0)*r22*x2291)));
evalcond[1]=((((-1.0)*x2289*x2292))+(((-1.0)*r02*x2291))+((x2284*x2287)));
evalcond[2]=((((-1.0)*r11*sj5*x2291))+(((-1.0)*r12*x2292))+((x2285*x2286)));
evalcond[3]=((1.0)+(((-1.0)*x2286*x2292))+(((-1.0)*r12*x2291))+((r11*x2293)));
evalcond[4]=(((sj1*sj2))+((x2285*x2290))+(((-1.0)*cj1*x2288))+(((-1.0)*r21*sj5*x2291))+(((-1.0)*r22*x2292)));
evalcond[5]=((((-1.0)*sj1*x2288))+(((-1.0)*r02*x2292))+(((-1.0)*cj1*sj2))+(((-1.0)*x2287*x2291))+((x2285*x2289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2294=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2294);
rxp0_2=(py*r00);
rxp1_0=(r21*x2294);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2295=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2295);
rxp0_2=(py*r00);
rxp1_0=(r21*x2295);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2296=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2296);
rxp0_2=(py*r00);
rxp1_0=(r21*x2296);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2299=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2299.valid){
continue;
}
IkReal x2297=x2299.value;
IkReal x2298=((1.0)*cj0*x2297);
cj4array[0]=((((-1.0)*cj2*sj1*x2298))+(((-1.0)*cj1*sj2*x2298)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2300=IKsin(j4);
IkReal x2301=IKcos(j4);
IkReal x2302=(r21*sj5);
IkReal x2303=((1.0)*x2301);
IkReal x2304=((1.0)*cj5*x2300);
evalcond[0]=((-1.0)*r12*x2300);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r12*x2303)));
evalcond[2]=((((-1.0)*r20*x2304))+((x2300*x2302)));
evalcond[3]=((((-1.0)*r00*x2304))+((r01*sj5*x2300)));
evalcond[4]=(((cj5*r20*x2301))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2302*x2303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2306=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2306.valid){
continue;
}
IkReal x2305=x2306.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2305))+((cj1*cj2*x2305)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2307=IKsin(j4);
IkReal x2308=IKcos(j4);
IkReal x2309=(cj5*r00);
IkReal x2310=((1.0)*x2307);
IkReal x2311=(sj5*x2307);
IkReal x2312=((1.0)*x2308);
evalcond[0]=((-1.0)*r12*x2307);
evalcond[1]=((((-1.0)*r12*x2312))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x2311))+(((-1.0)*cj5*r20*x2310)));
evalcond[3]=((((-1.0)*x2309*x2310))+((r01*x2311)));
evalcond[4]=(((x2308*x2309))+(((-1.0)*r01*sj5*x2312))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2313=IKPowWithIntegerCheck(r12,-1);
if(!x2313.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2313.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2314=IKsin(j4);
IkReal x2315=IKcos(j4);
IkReal x2316=(cj5*r00);
IkReal x2317=(cj5*r20);
IkReal x2318=(r21*sj5);
IkReal x2319=(r01*sj5);
IkReal x2320=((1.0)*x2314);
IkReal x2321=((1.0)*x2315);
evalcond[0]=((-1.0)*r12*x2314);
evalcond[1]=(((x2314*x2318))+(((-1.0)*x2317*x2320)));
evalcond[2]=(((x2314*x2319))+(((-1.0)*x2316*x2320)));
evalcond[3]=(((x2315*x2317))+(((-1.0)*x2318*x2321))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((x2315*x2316))+(((-1.0)*x2319*x2321))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2322=((1.0)*cj5);
CheckValue<IkReal> x2323=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5))+(((-1.0)*r21*x2322)))),-1);
if(!x2323.valid){
continue;
}
CheckValue<IkReal> x2324 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2322))+(((-1.0)*r10*sj0*x2322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2323.value)))+(x2324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2325=IKsin(j4);
IkReal x2326=IKcos(j4);
IkReal x2327=(cj5*r10);
IkReal x2328=(cj2*sj1);
IkReal x2329=(r01*sj5);
IkReal x2330=(cj5*r00);
IkReal x2331=(cj5*r20);
IkReal x2332=(cj1*sj2);
IkReal x2333=((1.0)*x2326);
IkReal x2334=((1.0)*x2325);
IkReal x2335=(sj5*x2325);
evalcond[0]=(((r21*x2335))+(((-1.0)*r22*x2333))+(((-1.0)*x2331*x2334)));
evalcond[1]=(sj0+(((-1.0)*r02*x2333))+((x2325*x2329))+(((-1.0)*x2330*x2334)));
evalcond[2]=(((r11*x2335))+(((-1.0)*r12*x2333))+(((-1.0)*x2327*x2334))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2334))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2326*x2331))+(((-1.0)*r21*sj5*x2333)));
evalcond[4]=(((cj0*x2328))+(((-1.0)*r02*x2334))+((x2326*x2330))+(((-1.0)*x2329*x2333))+((cj0*x2332)));
evalcond[5]=(((sj0*x2332))+((sj0*x2328))+(((-1.0)*r11*sj5*x2333))+((x2326*x2327))+(((-1.0)*r12*x2334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2336=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2336.valid){
continue;
}
CheckValue<IkReal> x2337 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2336.value)))+(x2337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2338=IKsin(j4);
IkReal x2339=IKcos(j4);
IkReal x2340=(cj5*r10);
IkReal x2341=(cj2*sj1);
IkReal x2342=(r01*sj5);
IkReal x2343=(cj5*r00);
IkReal x2344=(cj5*r20);
IkReal x2345=(cj1*sj2);
IkReal x2346=((1.0)*x2339);
IkReal x2347=((1.0)*x2338);
IkReal x2348=(sj5*x2338);
evalcond[0]=((((-1.0)*x2344*x2347))+(((-1.0)*r22*x2346))+((r21*x2348)));
evalcond[1]=(sj0+((x2338*x2342))+(((-1.0)*r02*x2346))+(((-1.0)*x2343*x2347)));
evalcond[2]=((((-1.0)*x2340*x2347))+((r11*x2348))+(((-1.0)*r12*x2346))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2347))+((x2339*x2344))+(((-1.0)*r21*sj5*x2346)));
evalcond[4]=((((-1.0)*r02*x2347))+((x2339*x2343))+(((-1.0)*x2342*x2346))+((cj0*x2345))+((cj0*x2341)));
evalcond[5]=(((sj0*x2345))+((sj0*x2341))+(((-1.0)*r11*sj5*x2346))+((x2339*x2340))+(((-1.0)*r12*x2347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2349=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2349.valid){
continue;
}
CheckValue<IkReal> x2350 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2349.value)))+(x2350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2351=IKsin(j4);
IkReal x2352=IKcos(j4);
IkReal x2353=(cj5*r10);
IkReal x2354=(cj2*sj1);
IkReal x2355=(r01*sj5);
IkReal x2356=(cj5*r00);
IkReal x2357=(cj5*r20);
IkReal x2358=(cj1*sj2);
IkReal x2359=((1.0)*x2352);
IkReal x2360=((1.0)*x2351);
IkReal x2361=(sj5*x2351);
evalcond[0]=((((-1.0)*x2357*x2360))+(((-1.0)*r22*x2359))+((r21*x2361)));
evalcond[1]=(sj0+(((-1.0)*x2356*x2360))+((x2351*x2355))+(((-1.0)*r02*x2359)));
evalcond[2]=(((r11*x2361))+(((-1.0)*r12*x2359))+(((-1.0)*x2353*x2360))+(((-1.0)*cj0)));
evalcond[3]=(((x2352*x2357))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2360))+(((-1.0)*r21*sj5*x2359)));
evalcond[4]=(((cj0*x2354))+((cj0*x2358))+(((-1.0)*x2355*x2359))+((x2352*x2356))+(((-1.0)*r02*x2360)));
evalcond[5]=(((sj0*x2358))+((sj0*x2354))+(((-1.0)*r11*sj5*x2359))+((x2352*x2353))+(((-1.0)*r12*x2360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2362=cj5*cj5;
IkReal x2363=r21*r21;
IkReal x2364=(sj1*sj2);
IkReal x2365=(r21*sj5);
IkReal x2366=(cj1*cj2);
IkReal x2367=(cj5*r20);
CheckValue<IkReal> x2368=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2362*x2363))+(r22*r22)+x2363+((x2362*(r20*r20)))+(((-2.0)*x2365*x2367)))),-1);
if(!x2368.valid){
continue;
}
CheckValue<IkReal> x2369 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2366))+((r22*x2364)))),IkReal((((x2364*x2365))+((x2366*x2367))+(((-1.0)*x2364*x2367))+(((-1.0)*x2365*x2366)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2368.value)))+(x2369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2370=IKsin(j4);
IkReal x2371=IKcos(j4);
IkReal x2372=(r21*sj5);
IkReal x2373=(cj5*r20);
IkReal x2374=((1.0)*x2371);
IkReal x2375=((1.0)*x2370);
evalcond[0]=(((x2370*x2372))+(((-1.0)*x2373*x2375))+(((-1.0)*r22*x2374)));
evalcond[1]=(((x2371*x2373))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2372*x2374))+(((-1.0)*r22*x2375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2376=(cj5*sj4);
IkReal x2377=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x2377))+((r00*x2376))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2376))+((r11*x2377))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2377))+((r00*x2376))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x2376))+((r11*x2377))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x2377))+((r00*x2376))+((cj4*r02))), ((((-1.0)*r10*x2376))+((r11*x2377))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2378=IKcos(j0);
IkReal x2379=IKsin(j0);
IkReal x2380=(cj4*cj5);
IkReal x2381=(cj5*r01);
IkReal x2382=(r11*sj5);
IkReal x2383=(cj1*cj2);
IkReal x2384=((1.0)*sj4);
IkReal x2385=(r00*sj5);
IkReal x2386=(cj5*r11);
IkReal x2387=((1.0)*cj4);
IkReal x2388=(r01*sj5);
IkReal x2389=(r10*sj5);
IkReal x2390=(sj1*x2378);
IkReal x2391=(cj1*x2379);
IkReal x2392=(cj1*x2378);
IkReal x2393=(sj1*sj2*x2379);
evalcond[0]=((((-1.0)*cj5*r00*x2384))+(((-1.0)*r02*x2387))+((sj4*x2388))+x2379);
evalcond[1]=((((-1.0)*r12*x2387))+((sj4*x2382))+(((-1.0)*x2378))+(((-1.0)*cj5*r10*x2384)));
evalcond[2]=(x2381+x2385+(((-1.0)*sj2*x2390))+((x2378*x2383)));
evalcond[3]=(x2386+x2389+(((-1.0)*x2393))+((x2379*x2383)));
evalcond[4]=((((-1.0)*r02*x2384))+((r00*x2380))+((sj2*x2392))+((cj2*x2390))+(((-1.0)*x2387*x2388)));
evalcond[5]=((((-1.0)*r12*x2384))+((cj2*sj1*x2379))+(((-1.0)*x2382*x2387))+((sj2*x2391))+((r10*x2380)));
evalcond[6]=((((0.10915)*x2379))+(((-0.09465)*x2385))+(((-0.09465)*x2381))+(((0.39225)*sj2*x2390))+(((-0.425)*x2392))+(((-0.39225)*x2378*x2383))+(((-1.0)*px)));
evalcond[7]=((((-0.39225)*x2379*x2383))+(((-0.09465)*x2386))+(((-0.09465)*x2389))+(((-0.425)*x2391))+(((-1.0)*py))+(((0.39225)*x2393))+(((-0.10915)*x2378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2394=((1.0)*cj5);
IkReal x2395=((1.0)*sj5);
CheckValue<IkReal> x2396 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2395))+(((-1.0)*r11*x2394)))),IkReal(((((-1.0)*r00*x2395))+(((-1.0)*r01*x2394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2396.valid){
continue;
}
CheckValue<IkReal> x2397=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x2397.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2396.value)+(((1.5707963267949)*(x2397.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2398=IKcos(j0);
IkReal x2399=IKsin(j0);
IkReal x2400=(cj5*r01);
IkReal x2401=(cj1*cj2);
IkReal x2402=(sj1*sj2);
IkReal x2403=((0.425)*cj1);
IkReal x2404=(r00*sj5);
IkReal x2405=(cj5*r11);
IkReal x2406=(r10*sj5);
IkReal x2407=((0.39225)*x2398);
IkReal x2408=(x2399*x2402);
evalcond[0]=(x2404+x2400+((x2398*x2401))+(((-1.0)*x2398*x2402)));
evalcond[1]=((((-1.0)*x2408))+x2406+x2405+((x2399*x2401)));
evalcond[2]=((((-1.0)*x2401*x2407))+(((0.10915)*x2399))+(((-0.09465)*x2404))+(((-0.09465)*x2400))+(((-1.0)*px))+((x2402*x2407))+(((-1.0)*x2398*x2403)));
evalcond[3]=((((-1.0)*x2399*x2403))+(((-0.39225)*x2399*x2401))+(((0.39225)*x2408))+(((-0.09465)*x2405))+(((-0.09465)*x2406))+(((-1.0)*py))+(((-0.10915)*x2398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2409=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2409;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2409);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2410=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2410;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2411=((1.0)*cj5);
IkReal x2412=((((-1.0)*r21*x2411))+(((-1.0)*r20*sj5)));
j4eval[0]=x2412;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2411))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2411))))));
j4eval[2]=IKsign(x2412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2413=((-1.0)*r20);
IkReal x2415 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2415)==0){
continue;
}
IkReal x2414=pow(x2415,-0.5);
CheckValue<IkReal> x2416 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2413),IKFAST_ATAN2_MAGTHRESH);
if(!x2416.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2416.value));
IkReal gconst79=(r21*x2414);
IkReal gconst80=(x2413*x2414);
CheckValue<IkReal> x2417 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2417.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2417.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2418=((-1.0)*r20);
IkReal x2419=x2414;
CheckValue<IkReal> x2421 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2418),IKFAST_ATAN2_MAGTHRESH);
if(!x2421.valid){
continue;
}
IkReal x2420=((-1.0)*(x2421.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2420;
IkReal gconst78=x2420;
IkReal gconst79=(r21*x2419);
IkReal gconst80=(x2418*x2419);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2422=((-1.0)*r20);
IkReal x2423=x2414;
CheckValue<IkReal> x2425 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2422),IKFAST_ATAN2_MAGTHRESH);
if(!x2425.valid){
continue;
}
IkReal x2424=((-1.0)*(x2425.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2424;
IkReal gconst78=x2424;
IkReal gconst79=(r21*x2423);
IkReal gconst80=(x2422*x2423);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2426=((-1.0)*r20);
IkReal x2427=x2414;
CheckValue<IkReal> x2429 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2426),IKFAST_ATAN2_MAGTHRESH);
if(!x2429.valid){
continue;
}
IkReal x2428=((-1.0)*(x2429.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2428;
IkReal gconst78=x2428;
IkReal gconst79=(r21*x2427);
IkReal gconst80=(x2426*x2427);
IkReal x2430=r22*r22;
CheckValue<IkReal> x2433=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2430))),-1);
if(!x2433.valid){
continue;
}
IkReal x2431=x2433.value;
IkReal x2432=((((2.0)*x2431*(r20*r20)*(r21*r21)))+x2430+((x2431*(r20*r20*r20*r20)))+((x2431*(r21*r21*r21*r21))));
j4eval[0]=x2432;
j4eval[1]=IKsign(x2432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2434=(sj1*sj2);
IkReal x2435=(gconst80*r20);
IkReal x2436=(gconst79*r21);
IkReal x2437=(cj1*cj2);
CheckValue<IkReal> x2438 = IKatan2WithCheck(IkReal((((r22*x2434))+(((-1.0)*r22*x2437)))),IkReal((((x2435*x2437))+(((-1.0)*x2436*x2437))+((x2434*x2436))+(((-1.0)*x2434*x2435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2438.valid){
continue;
}
CheckValue<IkReal> x2439=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2435*x2435)+(((-2.0)*x2435*x2436))+(x2436*x2436))),-1);
if(!x2439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2438.value)+(((1.5707963267949)*(x2439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2440=IKsin(j4);
IkReal x2441=IKcos(j4);
IkReal x2442=(gconst79*r01);
IkReal x2443=(cj2*sj1);
IkReal x2444=(gconst79*r21);
IkReal x2445=(gconst79*r11);
IkReal x2446=(cj1*sj2);
IkReal x2447=((1.0)*x2441);
IkReal x2448=(gconst80*x2441);
IkReal x2449=((1.0)*x2440);
IkReal x2450=(gconst80*x2449);
evalcond[0]=((((-1.0)*r20*x2450))+((x2440*x2444))+(((-1.0)*r22*x2447)));
evalcond[1]=(sj0+((x2440*x2442))+(((-1.0)*r00*x2450))+(((-1.0)*r02*x2447)));
evalcond[2]=((((-1.0)*r10*x2450))+((x2440*x2445))+(((-1.0)*r12*x2447))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2444*x2447))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2449))+((r20*x2448)));
evalcond[4]=(((r00*x2448))+((cj0*x2443))+((cj0*x2446))+(((-1.0)*x2442*x2447))+(((-1.0)*r02*x2449)));
evalcond[5]=(((r10*x2448))+((sj0*x2446))+((sj0*x2443))+(((-1.0)*x2445*x2447))+(((-1.0)*r12*x2449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2451=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2451.valid){
continue;
}
CheckValue<IkReal> x2452 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2451.value)))+(x2452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2453=IKsin(j4);
IkReal x2454=IKcos(j4);
IkReal x2455=(gconst79*r01);
IkReal x2456=(cj2*sj1);
IkReal x2457=(gconst79*r21);
IkReal x2458=(gconst79*r11);
IkReal x2459=(cj1*sj2);
IkReal x2460=((1.0)*x2454);
IkReal x2461=(gconst80*x2454);
IkReal x2462=((1.0)*x2453);
IkReal x2463=(gconst80*x2462);
evalcond[0]=((((-1.0)*r22*x2460))+((x2453*x2457))+(((-1.0)*r20*x2463)));
evalcond[1]=(sj0+(((-1.0)*r00*x2463))+((x2453*x2455))+(((-1.0)*r02*x2460)));
evalcond[2]=((((-1.0)*r12*x2460))+((x2453*x2458))+(((-1.0)*r10*x2463))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2462))+(((-1.0)*x2457*x2460))+((r20*x2461))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x2455*x2460))+((cj0*x2459))+((cj0*x2456))+(((-1.0)*r02*x2462))+((r00*x2461)));
evalcond[5]=(((sj0*x2459))+((sj0*x2456))+(((-1.0)*r12*x2462))+((r10*x2461))+(((-1.0)*x2458*x2460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2464=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2464.valid){
continue;
}
CheckValue<IkReal> x2465 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2464.value)))+(x2465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2466=IKsin(j4);
IkReal x2467=IKcos(j4);
IkReal x2468=(gconst79*r01);
IkReal x2469=(cj2*sj1);
IkReal x2470=(gconst79*r21);
IkReal x2471=(gconst79*r11);
IkReal x2472=(cj1*sj2);
IkReal x2473=((1.0)*x2467);
IkReal x2474=(gconst80*x2467);
IkReal x2475=((1.0)*x2466);
IkReal x2476=(gconst80*x2475);
evalcond[0]=((((-1.0)*r20*x2476))+(((-1.0)*r22*x2473))+((x2466*x2470)));
evalcond[1]=(sj0+(((-1.0)*r00*x2476))+((x2466*x2468))+(((-1.0)*r02*x2473)));
evalcond[2]=((((-1.0)*r12*x2473))+(((-1.0)*r10*x2476))+((x2466*x2471))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2474))+(((-1.0)*x2470*x2473))+(((-1.0)*r22*x2475)));
evalcond[4]=(((r00*x2474))+((cj0*x2472))+(((-1.0)*x2468*x2473))+(((-1.0)*r02*x2475))+((cj0*x2469)));
evalcond[5]=((((-1.0)*r12*x2475))+((r10*x2474))+((sj0*x2472))+(((-1.0)*x2471*x2473))+((sj0*x2469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2477=((-1.0)*r21);
IkReal x2479 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2479)==0){
continue;
}
IkReal x2478=pow(x2479,-0.5);
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal(x2477),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2480.value))));
IkReal gconst82=(x2477*x2478);
IkReal gconst83=((1.0)*r20*x2478);
CheckValue<IkReal> x2481 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2481.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2481.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2482=((-1.0)*r21);
CheckValue<IkReal> x2485 = IKatan2WithCheck(IkReal(x2482),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2485.valid){
continue;
}
IkReal x2483=((1.0)*(x2485.value));
IkReal x2484=x2478;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2483)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2483)));
IkReal gconst82=(x2482*x2484);
IkReal gconst83=((1.0)*r20*x2484);
IkReal x2486=r22*r22;
IkReal x2487=((1.0)*x2486);
CheckValue<IkReal> x2491=IKPowWithIntegerCheck(((-1.0)+x2486),-1);
if(!x2491.valid){
continue;
}
IkReal x2488=x2491.value;
if((((1.0)+(((-1.0)*x2487)))) < -0.00001)
continue;
IkReal x2489=IKsqrt(((1.0)+(((-1.0)*x2487))));
IkReal x2490=(sj0*x2488*x2489);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2490+(((-1.0)*x2487*x2490))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2492=((-1.0)*r21);
CheckValue<IkReal> x2495 = IKatan2WithCheck(IkReal(x2492),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2495.valid){
continue;
}
IkReal x2493=((1.0)*(x2495.value));
IkReal x2494=x2478;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2493)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2493)));
IkReal gconst82=(x2492*x2494);
IkReal gconst83=((1.0)*r20*x2494);
IkReal x2496=r22*r22;
IkReal x2497=((1.0)*x2496);
CheckValue<IkReal> x2501=IKPowWithIntegerCheck(((-1.0)+x2496),-1);
if(!x2501.valid){
continue;
}
IkReal x2498=x2501.value;
if((((1.0)+(((-1.0)*x2497)))) < -0.00001)
continue;
IkReal x2499=IKsqrt(((1.0)+(((-1.0)*x2497))));
IkReal x2500=(cj0*x2498*x2499);
j4eval[0]=((IKabs((x2500+(((-1.0)*x2497*x2500)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2502=((-1.0)*r21);
CheckValue<IkReal> x2505 = IKatan2WithCheck(IkReal(x2502),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2505.valid){
continue;
}
IkReal x2503=((1.0)*(x2505.value));
IkReal x2504=x2478;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2503)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2503)));
IkReal gconst82=(x2502*x2504);
IkReal gconst83=((1.0)*r20*x2504);
IkReal x2506=r22*r22;
IkReal x2507=(cj0*r02);
IkReal x2508=(r12*sj0);
CheckValue<IkReal> x2512=IKPowWithIntegerCheck(((-1.0)+x2506),-1);
if(!x2512.valid){
continue;
}
IkReal x2509=x2512.value;
if((((1.0)+(((-1.0)*x2506)))) < -0.00001)
continue;
IkReal x2510=IKsqrt(((1.0)+(((-1.0)*x2506))));
IkReal x2511=((1.0)*r22*x2509*x2510);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2508*x2511))+(((-1.0)*x2507*x2511)))))+(IKabs((x2508+x2507))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2513=((1.0)*gconst83);
CheckValue<IkReal> x2514 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2513))+((gconst82*r11*sj0))+(((-1.0)*cj0*r00*x2513))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2514.valid){
continue;
}
CheckValue<IkReal> x2515=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x2513)))),-1);
if(!x2515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2514.value)+(((1.5707963267949)*(x2515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2516=IKsin(j4);
IkReal x2517=IKcos(j4);
IkReal x2518=(cj2*sj1);
IkReal x2519=(gconst82*r11);
IkReal x2520=(cj1*sj2);
IkReal x2521=((1.0)*x2517);
IkReal x2522=(gconst83*x2517);
IkReal x2523=(gconst82*x2516);
IkReal x2524=((1.0)*x2516);
evalcond[0]=((((-1.0)*gconst83*r20*x2524))+((r21*x2523))+(((-1.0)*r22*x2521)));
evalcond[1]=(sj0+(((-1.0)*gconst83*r00*x2524))+((r01*x2523))+(((-1.0)*r02*x2521)));
evalcond[2]=((((-1.0)*gconst83*r10*x2524))+(((-1.0)*r12*x2521))+((x2516*x2519))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2521))+((r20*x2522))+(((-1.0)*r22*x2524)));
evalcond[4]=(((cj0*x2518))+((r00*x2522))+(((-1.0)*r02*x2524))+((cj0*x2520))+(((-1.0)*gconst82*r01*x2521)));
evalcond[5]=((((-1.0)*r12*x2524))+((sj0*x2518))+((sj0*x2520))+(((-1.0)*x2519*x2521))+((r10*x2522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2525 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2525.valid){
continue;
}
CheckValue<IkReal> x2526=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2525.value)+(((1.5707963267949)*(x2526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2527=IKsin(j4);
IkReal x2528=IKcos(j4);
IkReal x2529=(cj2*sj1);
IkReal x2530=(gconst82*r11);
IkReal x2531=(cj1*sj2);
IkReal x2532=((1.0)*x2528);
IkReal x2533=(gconst83*x2528);
IkReal x2534=(gconst82*x2527);
IkReal x2535=((1.0)*x2527);
evalcond[0]=((((-1.0)*gconst83*r20*x2535))+((r21*x2534))+(((-1.0)*r22*x2532)));
evalcond[1]=(((r01*x2534))+sj0+(((-1.0)*r02*x2532))+(((-1.0)*gconst83*r00*x2535)));
evalcond[2]=(((x2527*x2530))+(((-1.0)*gconst83*r10*x2535))+(((-1.0)*r12*x2532))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x2532))+((r20*x2533))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2535)));
evalcond[4]=((((-1.0)*r02*x2535))+((cj0*x2531))+(((-1.0)*gconst82*r01*x2532))+((cj0*x2529))+((r00*x2533)));
evalcond[5]=(((sj0*x2531))+((r10*x2533))+(((-1.0)*x2530*x2532))+((sj0*x2529))+(((-1.0)*r12*x2535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2536 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2536.valid){
continue;
}
CheckValue<IkReal> x2537=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2536.value)+(((1.5707963267949)*(x2537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2538=IKsin(j4);
IkReal x2539=IKcos(j4);
IkReal x2540=(cj2*sj1);
IkReal x2541=(gconst82*r11);
IkReal x2542=(cj1*sj2);
IkReal x2543=((1.0)*x2539);
IkReal x2544=(gconst83*x2539);
IkReal x2545=(gconst82*x2538);
IkReal x2546=((1.0)*x2538);
evalcond[0]=(((r21*x2545))+(((-1.0)*gconst83*r20*x2546))+(((-1.0)*r22*x2543)));
evalcond[1]=(sj0+(((-1.0)*gconst83*r00*x2546))+((r01*x2545))+(((-1.0)*r02*x2543)));
evalcond[2]=((((-1.0)*r12*x2543))+((x2538*x2541))+(((-1.0)*gconst83*r10*x2546))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x2543))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2544))+(((-1.0)*r22*x2546)));
evalcond[4]=(((r00*x2544))+(((-1.0)*gconst82*r01*x2543))+(((-1.0)*r02*x2546))+((cj0*x2542))+((cj0*x2540)));
evalcond[5]=((((-1.0)*r12*x2546))+(((-1.0)*x2541*x2543))+((sj0*x2540))+((sj0*x2542))+((r10*x2544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2548 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2548)==0){
continue;
}
IkReal x2547=pow(x2548,-0.5);
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2549.value));
IkReal gconst85=((-1.0)*r01*x2547);
IkReal gconst86=(r00*x2547);
CheckValue<IkReal> x2550 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2550.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2550.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2553 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2553.valid){
continue;
}
IkReal x2551=((-1.0)*(x2553.value));
IkReal x2552=x2547;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2551;
IkReal gconst84=x2551;
IkReal gconst85=((-1.0)*r01*x2552);
IkReal gconst86=(r00*x2552);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2554=((1.0)*gconst86);
CheckValue<IkReal> x2555 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2554))+((gconst85*r11*sj0))+(((-1.0)*r10*sj0*x2554))+((cj0*gconst85*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2555.valid){
continue;
}
CheckValue<IkReal> x2556=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2554)))),-1);
if(!x2556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2555.value)+(((1.5707963267949)*(x2556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2557=IKsin(j4);
IkReal x2558=IKcos(j4);
IkReal x2559=(gconst85*r21);
IkReal x2560=(cj2*sj1);
IkReal x2561=(gconst86*r00);
IkReal x2562=(gconst86*r10);
IkReal x2563=(gconst85*r11);
IkReal x2564=(gconst85*r01);
IkReal x2565=(gconst86*r20);
IkReal x2566=(cj1*sj2);
IkReal x2567=((1.0)*x2558);
IkReal x2568=((1.0)*x2557);
evalcond[0]=((((-1.0)*r22*x2567))+(((-1.0)*x2565*x2568))+((x2557*x2559)));
evalcond[1]=(sj0+(((-1.0)*r02*x2567))+((x2557*x2564))+(((-1.0)*x2561*x2568)));
evalcond[2]=((((-1.0)*x2562*x2568))+((x2557*x2563))+(((-1.0)*r12*x2567))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2568))+((x2558*x2565))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2559*x2567)));
evalcond[4]=((((-1.0)*r02*x2568))+((x2558*x2561))+((cj0*x2560))+((cj0*x2566))+(((-1.0)*x2564*x2567)));
evalcond[5]=((((-1.0)*x2563*x2567))+((x2558*x2562))+((sj0*x2566))+((sj0*x2560))+(((-1.0)*r12*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2569=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x2569.valid){
continue;
}
CheckValue<IkReal> x2570 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2569.value)))+(x2570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2571=IKsin(j4);
IkReal x2572=IKcos(j4);
IkReal x2573=(gconst85*r21);
IkReal x2574=(cj2*sj1);
IkReal x2575=(gconst86*r00);
IkReal x2576=(gconst86*r10);
IkReal x2577=(gconst85*r11);
IkReal x2578=(gconst85*r01);
IkReal x2579=(gconst86*r20);
IkReal x2580=(cj1*sj2);
IkReal x2581=((1.0)*x2572);
IkReal x2582=((1.0)*x2571);
evalcond[0]=(((x2571*x2573))+(((-1.0)*x2579*x2582))+(((-1.0)*r22*x2581)));
evalcond[1]=(((x2571*x2578))+sj0+(((-1.0)*r02*x2581))+(((-1.0)*x2575*x2582)));
evalcond[2]=(((x2571*x2577))+(((-1.0)*x2576*x2582))+(((-1.0)*cj0))+(((-1.0)*r12*x2581)));
evalcond[3]=((((-1.0)*x2573*x2581))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2572*x2579))+(((-1.0)*r22*x2582)));
evalcond[4]=((((-1.0)*r02*x2582))+((cj0*x2580))+(((-1.0)*x2578*x2581))+((x2572*x2575))+((cj0*x2574)));
evalcond[5]=(((x2572*x2576))+((sj0*x2574))+(((-1.0)*x2577*x2581))+((sj0*x2580))+(((-1.0)*r12*x2582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2584 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2584)==0){
continue;
}
IkReal x2583=pow(x2584,-0.5);
CheckValue<IkReal> x2585 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2585.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2585.value))));
IkReal gconst88=((1.0)*r01*x2583);
IkReal gconst89=((-1.0)*r00*x2583);
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2586.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2589 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2589.valid){
continue;
}
IkReal x2587=((1.0)*(x2589.value));
IkReal x2588=x2583;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2587)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2587)));
IkReal gconst88=((1.0)*r01*x2588);
IkReal gconst89=((-1.0)*r00*x2588);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2592 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2592.valid){
continue;
}
IkReal x2590=((1.0)*(x2592.value));
IkReal x2591=x2583;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2590)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2590)));
IkReal gconst88=((1.0)*r01*x2591);
IkReal gconst89=((-1.0)*r00*x2591);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
IkReal x2593=((1.0)*(x2595.value));
IkReal x2594=x2583;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2593)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2593)));
IkReal gconst88=((1.0)*r01*x2594);
IkReal gconst89=((-1.0)*r00*x2594);
IkReal x2596=r02*r02;
IkReal x2597=(r12*sj0);
IkReal x2598=x2583;
IkReal x2599=(cj0*x2598);
j4eval[0]=((IKabs(((((-1.0)*x2599))+((r02*x2597*x2598))+((x2596*x2599)))))+(IKabs((x2597+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2600=((1.0)*gconst89);
CheckValue<IkReal> x2601 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+(((-1.0)*cj0*r00*x2600))+((gconst88*r11*sj0))+(((-1.0)*r10*sj0*x2600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2601.valid){
continue;
}
CheckValue<IkReal> x2602=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x2600)))),-1);
if(!x2602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2601.value)+(((1.5707963267949)*(x2602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2603=IKsin(j4);
IkReal x2604=IKcos(j4);
IkReal x2605=(cj2*sj1);
IkReal x2606=(cj1*sj2);
IkReal x2607=((1.0)*x2604);
IkReal x2608=(gconst89*x2604);
IkReal x2609=((1.0)*x2603);
IkReal x2610=(gconst88*x2603);
IkReal x2611=(gconst89*x2609);
evalcond[0]=((((-1.0)*r22*x2607))+(((-1.0)*r20*x2611))+((r21*x2610)));
evalcond[1]=((((-1.0)*r00*x2611))+((r01*x2610))+sj0+(((-1.0)*r02*x2607)));
evalcond[2]=((((-1.0)*r12*x2607))+((r11*x2610))+(((-1.0)*r10*x2611))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2608))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2607))+(((-1.0)*r22*x2609)));
evalcond[4]=((((-1.0)*gconst88*r01*x2607))+(((-1.0)*r02*x2609))+((cj0*x2606))+((cj0*x2605))+((r00*x2608)));
evalcond[5]=((((-1.0)*gconst88*r11*x2607))+(((-1.0)*r12*x2609))+((r10*x2608))+((sj0*x2606))+((sj0*x2605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2612.valid){
continue;
}
CheckValue<IkReal> x2613 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2612.value)))+(x2613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2614=IKsin(j4);
IkReal x2615=IKcos(j4);
IkReal x2616=(cj2*sj1);
IkReal x2617=(cj1*sj2);
IkReal x2618=((1.0)*x2615);
IkReal x2619=(gconst89*x2615);
IkReal x2620=((1.0)*x2614);
IkReal x2621=(gconst88*x2614);
IkReal x2622=(gconst89*x2620);
evalcond[0]=((((-1.0)*r22*x2618))+((r21*x2621))+(((-1.0)*r20*x2622)));
evalcond[1]=(((r01*x2621))+(((-1.0)*r00*x2622))+sj0+(((-1.0)*r02*x2618)));
evalcond[2]=((((-1.0)*r12*x2618))+(((-1.0)*r10*x2622))+((r11*x2621))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2619))+(((-1.0)*gconst88*r21*x2618))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2620)));
evalcond[4]=(((r00*x2619))+(((-1.0)*gconst88*r01*x2618))+(((-1.0)*r02*x2620))+((cj0*x2616))+((cj0*x2617)));
evalcond[5]=((((-1.0)*gconst88*r11*x2618))+(((-1.0)*r12*x2620))+((r10*x2619))+((sj0*x2616))+((sj0*x2617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2623=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x2623.valid){
continue;
}
CheckValue<IkReal> x2624 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2623.value)))+(x2624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2625=IKsin(j4);
IkReal x2626=IKcos(j4);
IkReal x2627=(cj2*sj1);
IkReal x2628=(cj1*sj2);
IkReal x2629=((1.0)*x2626);
IkReal x2630=(gconst89*x2626);
IkReal x2631=((1.0)*x2625);
IkReal x2632=(gconst88*x2625);
IkReal x2633=(gconst89*x2631);
evalcond[0]=((((-1.0)*r20*x2633))+((r21*x2632))+(((-1.0)*r22*x2629)));
evalcond[1]=(sj0+(((-1.0)*r00*x2633))+((r01*x2632))+(((-1.0)*r02*x2629)));
evalcond[2]=((((-1.0)*r10*x2633))+((r11*x2632))+(((-1.0)*r12*x2629))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst88*r21*x2629))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2630))+(((-1.0)*r22*x2631)));
evalcond[4]=((((-1.0)*r02*x2631))+((r00*x2630))+((cj0*x2627))+((cj0*x2628))+(((-1.0)*gconst88*r01*x2629)));
evalcond[5]=((((-1.0)*gconst88*r11*x2629))+((r10*x2630))+(((-1.0)*r12*x2631))+((sj0*x2628))+((sj0*x2627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2634=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2634;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2634);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2635=((1.0)*cj5);
IkReal x2636=((((-1.0)*r21*x2635))+(((-1.0)*r20*sj5)));
j4eval[0]=x2636;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2635))+((r11*sj5))))));
j4eval[2]=IKsign(x2636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2637=cj5*cj5;
IkReal x2638=r01*r01;
IkReal x2639=(cj5*r00);
IkReal x2640=(r01*sj5);
IkReal x2641=(((x2637*(r00*r00)))+(((-2.0)*x2639*x2640))+(r02*r02)+(((-1.0)*x2637*x2638))+x2638);
j4eval[0]=x2641;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2640))+x2639))));
j4eval[2]=IKsign(x2641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2642=cj5*cj5;
IkReal x2643=r01*r01;
IkReal x2644=(r01*sj5);
IkReal x2645=(cj5*r00);
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal(((((-1.0)*x2644))+x2645)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
CheckValue<IkReal> x2647=IKPowWithIntegerCheck(IKsign((((x2642*(r00*r00)))+(((-2.0)*x2644*x2645))+(r02*r02)+(((-1.0)*x2642*x2643))+x2643)),-1);
if(!x2647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2646.value)+(((1.5707963267949)*(x2647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2648=IKsin(j4);
IkReal x2649=IKcos(j4);
IkReal x2650=(cj5*r10);
IkReal x2651=(r01*sj5);
IkReal x2652=(cj5*r00);
IkReal x2653=(cj5*r20);
IkReal x2654=((1.0)*x2649);
IkReal x2655=((1.0)*x2648);
IkReal x2656=(sj5*x2648);
evalcond[0]=((((-1.0)*r22*x2654))+((r21*x2656))+(((-1.0)*x2653*x2655)));
evalcond[1]=(((r11*x2656))+(((-1.0)*x2650*x2655))+(((-1.0)*r12*x2654)));
evalcond[2]=((((-1.0)*x2651*x2654))+((x2649*x2652))+(((-1.0)*r02*x2655)));
evalcond[3]=((1.0)+(((-1.0)*x2652*x2655))+((x2648*x2651))+(((-1.0)*r02*x2654)));
evalcond[4]=(((cj2*sj1))+((x2649*x2650))+(((-1.0)*r11*sj5*x2654))+(((-1.0)*r12*x2655))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r22*x2655))+((x2649*x2653))+(((-1.0)*r21*sj5*x2654))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2657=((1.0)*cj5);
CheckValue<IkReal> x2658=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2657))+(((-1.0)*r20*sj5)))),-1);
if(!x2658.valid){
continue;
}
CheckValue<IkReal> x2659 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2658.value)))+(x2659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2660=IKsin(j4);
IkReal x2661=IKcos(j4);
IkReal x2662=(cj5*r10);
IkReal x2663=(r01*sj5);
IkReal x2664=(cj5*r00);
IkReal x2665=(cj5*r20);
IkReal x2666=((1.0)*x2661);
IkReal x2667=((1.0)*x2660);
IkReal x2668=(sj5*x2660);
evalcond[0]=(((r21*x2668))+(((-1.0)*x2665*x2667))+(((-1.0)*r22*x2666)));
evalcond[1]=((((-1.0)*r12*x2666))+(((-1.0)*x2662*x2667))+((r11*x2668)));
evalcond[2]=(((x2661*x2664))+(((-1.0)*r02*x2667))+(((-1.0)*x2663*x2666)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2666))+(((-1.0)*x2664*x2667))+((x2660*x2663)));
evalcond[4]=((((-1.0)*r12*x2667))+((cj2*sj1))+((x2661*x2662))+((cj1*sj2))+(((-1.0)*r11*sj5*x2666)));
evalcond[5]=(((x2661*x2665))+(((-1.0)*r21*sj5*x2666))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2669 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2669.valid){
continue;
}
CheckValue<IkReal> x2670=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2669.value)+(((1.5707963267949)*(x2670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2671=IKsin(j4);
IkReal x2672=IKcos(j4);
IkReal x2673=(cj5*r10);
IkReal x2674=(r01*sj5);
IkReal x2675=(cj5*r00);
IkReal x2676=(cj5*r20);
IkReal x2677=((1.0)*x2672);
IkReal x2678=((1.0)*x2671);
IkReal x2679=(sj5*x2671);
evalcond[0]=(((r21*x2679))+(((-1.0)*x2676*x2678))+(((-1.0)*r22*x2677)));
evalcond[1]=((((-1.0)*r12*x2677))+(((-1.0)*x2673*x2678))+((r11*x2679)));
evalcond[2]=(((x2672*x2675))+(((-1.0)*x2674*x2677))+(((-1.0)*r02*x2678)));
evalcond[3]=((1.0)+(((-1.0)*x2675*x2678))+(((-1.0)*r02*x2677))+((x2671*x2674)));
evalcond[4]=((((-1.0)*r12*x2678))+((cj2*sj1))+((x2672*x2673))+((cj1*sj2))+(((-1.0)*r11*sj5*x2677)));
evalcond[5]=((((-1.0)*r21*sj5*x2677))+((x2672*x2676))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2680=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2680;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2681=((1.0)*cj5);
IkReal x2682=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2681)));
j4eval[0]=x2682;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2681)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2683=cj5*cj5;
IkReal x2684=r01*r01;
IkReal x2685=(r01*sj5);
IkReal x2686=(cj5*r00);
IkReal x2687=((((2.0)*x2685*x2686))+(((-1.0)*(r02*r02)))+((x2683*x2684))+(((-1.0)*x2683*(r00*r00)))+(((-1.0)*x2684)));
j4eval[0]=x2687;
j4eval[1]=IKsign(x2687);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2685))+x2686))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2688=cj5*cj5;
IkReal x2689=r01*r01;
IkReal x2690=(r01*sj5);
IkReal x2691=(cj5*r00);
CheckValue<IkReal> x2692=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x2690*x2691))+(((-1.0)*x2688*(r00*r00)))+(((-1.0)*x2689))+((x2688*x2689)))),-1);
if(!x2692.valid){
continue;
}
CheckValue<IkReal> x2693 = IKatan2WithCheck(IkReal(((((-1.0)*x2690))+x2691)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2692.value)))+(x2693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2694=IKsin(j4);
IkReal x2695=IKcos(j4);
IkReal x2696=(cj5*r10);
IkReal x2697=(r01*sj5);
IkReal x2698=((1.0)*cj2);
IkReal x2699=(cj5*r00);
IkReal x2700=(cj5*r20);
IkReal x2701=((1.0)*x2695);
IkReal x2702=((1.0)*x2694);
IkReal x2703=(sj5*x2694);
evalcond[0]=((((-1.0)*r22*x2701))+((r21*x2703))+(((-1.0)*x2700*x2702)));
evalcond[1]=(((r11*x2703))+(((-1.0)*r12*x2701))+(((-1.0)*x2696*x2702)));
evalcond[2]=((((-1.0)*x2697*x2701))+(((-1.0)*r02*x2702))+((x2695*x2699)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2701))+((x2694*x2697))+(((-1.0)*x2699*x2702)));
evalcond[4]=(((x2695*x2700))+(((-1.0)*r22*x2702))+(((-1.0)*cj1*x2698))+((sj1*sj2))+(((-1.0)*r21*sj5*x2701)));
evalcond[5]=((((-1.0)*r11*sj5*x2701))+(((-1.0)*sj1*x2698))+(((-1.0)*r12*x2702))+(((-1.0)*cj1*sj2))+((x2695*x2696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2704=((1.0)*cj5);
CheckValue<IkReal> x2705 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2705.valid){
continue;
}
CheckValue<IkReal> x2706=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2704)))),-1);
if(!x2706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2705.value)+(((1.5707963267949)*(x2706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2707=IKsin(j4);
IkReal x2708=IKcos(j4);
IkReal x2709=(cj5*r10);
IkReal x2710=(r01*sj5);
IkReal x2711=((1.0)*cj2);
IkReal x2712=(cj5*r00);
IkReal x2713=(cj5*r20);
IkReal x2714=((1.0)*x2708);
IkReal x2715=((1.0)*x2707);
IkReal x2716=(sj5*x2707);
evalcond[0]=((((-1.0)*x2713*x2715))+(((-1.0)*r22*x2714))+((r21*x2716)));
evalcond[1]=((((-1.0)*x2709*x2715))+((r11*x2716))+(((-1.0)*r12*x2714)));
evalcond[2]=(((x2708*x2712))+(((-1.0)*r02*x2715))+(((-1.0)*x2710*x2714)));
evalcond[3]=((-1.0)+(((-1.0)*x2712*x2715))+((x2707*x2710))+(((-1.0)*r02*x2714)));
evalcond[4]=(((x2708*x2713))+(((-1.0)*r21*sj5*x2714))+((sj1*sj2))+(((-1.0)*r22*x2715))+(((-1.0)*cj1*x2711)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2714))+(((-1.0)*sj1*x2711))+(((-1.0)*r12*x2715))+((x2708*x2709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2717=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2717.valid){
continue;
}
CheckValue<IkReal> x2718 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2717.value)))+(x2718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2719=IKsin(j4);
IkReal x2720=IKcos(j4);
IkReal x2721=(cj5*r10);
IkReal x2722=(r01*sj5);
IkReal x2723=((1.0)*cj2);
IkReal x2724=(cj5*r00);
IkReal x2725=(cj5*r20);
IkReal x2726=((1.0)*x2720);
IkReal x2727=((1.0)*x2719);
IkReal x2728=(sj5*x2719);
evalcond[0]=((((-1.0)*x2725*x2727))+((r21*x2728))+(((-1.0)*r22*x2726)));
evalcond[1]=((((-1.0)*r12*x2726))+(((-1.0)*x2721*x2727))+((r11*x2728)));
evalcond[2]=((((-1.0)*x2722*x2726))+((x2720*x2724))+(((-1.0)*r02*x2727)));
evalcond[3]=((-1.0)+(((-1.0)*x2724*x2727))+((x2719*x2722))+(((-1.0)*r02*x2726)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x2727))+((x2720*x2725))+(((-1.0)*r21*sj5*x2726))+(((-1.0)*cj1*x2723)));
evalcond[5]=((((-1.0)*sj1*x2723))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2727))+(((-1.0)*r11*sj5*x2726))+((x2720*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2730 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2730)==0){
continue;
}
IkReal x2729=pow(x2730,-0.5);
CheckValue<IkReal> x2731 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2731.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2731.value));
IkReal gconst91=((-1.0)*r11*x2729);
IkReal gconst92=(r10*x2729);
CheckValue<IkReal> x2732 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2732.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2732.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2735 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2735.valid){
continue;
}
IkReal x2733=((-1.0)*(x2735.value));
IkReal x2734=x2729;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2733;
IkReal gconst90=x2733;
IkReal gconst91=((-1.0)*r11*x2734);
IkReal gconst92=(r10*x2734);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2736=((1.0)*gconst92);
CheckValue<IkReal> x2737 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst91*r11*sj0))+(((-1.0)*cj0*r00*x2736))+((cj0*gconst91*r01))+(((-1.0)*r10*sj0*x2736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2737.valid){
continue;
}
CheckValue<IkReal> x2738=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2736)))),-1);
if(!x2738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2737.value)+(((1.5707963267949)*(x2738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2739=IKsin(j4);
IkReal x2740=IKcos(j4);
IkReal x2741=(cj2*sj1);
IkReal x2742=(gconst92*r00);
IkReal x2743=(gconst92*r20);
IkReal x2744=(gconst92*r10);
IkReal x2745=(cj1*sj2);
IkReal x2746=((1.0)*x2740);
IkReal x2747=(gconst91*x2739);
IkReal x2748=((1.0)*x2739);
evalcond[0]=((((-1.0)*x2743*x2748))+((r21*x2747))+(((-1.0)*r22*x2746)));
evalcond[1]=(sj0+((r01*x2747))+(((-1.0)*r02*x2746))+(((-1.0)*x2742*x2748)));
evalcond[2]=(((r11*x2747))+(((-1.0)*x2744*x2748))+(((-1.0)*r12*x2746))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst91*r21*x2746))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2740*x2743))+(((-1.0)*r22*x2748)));
evalcond[4]=(((cj0*x2741))+((cj0*x2745))+(((-1.0)*gconst91*r01*x2746))+((x2740*x2742))+(((-1.0)*r02*x2748)));
evalcond[5]=((((-1.0)*gconst91*r11*x2746))+((sj0*x2741))+((sj0*x2745))+((x2740*x2744))+(((-1.0)*r12*x2748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2749 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2749.valid){
continue;
}
CheckValue<IkReal> x2750=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x2750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2749.value)+(((1.5707963267949)*(x2750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2751=IKsin(j4);
IkReal x2752=IKcos(j4);
IkReal x2753=(cj2*sj1);
IkReal x2754=(gconst92*r00);
IkReal x2755=(gconst92*r20);
IkReal x2756=(gconst92*r10);
IkReal x2757=(cj1*sj2);
IkReal x2758=((1.0)*x2752);
IkReal x2759=(gconst91*x2751);
IkReal x2760=((1.0)*x2751);
evalcond[0]=((((-1.0)*x2755*x2760))+(((-1.0)*r22*x2758))+((r21*x2759)));
evalcond[1]=(sj0+((r01*x2759))+(((-1.0)*x2754*x2760))+(((-1.0)*r02*x2758)));
evalcond[2]=(((r11*x2759))+(((-1.0)*r12*x2758))+(((-1.0)*x2756*x2760))+(((-1.0)*cj0)));
evalcond[3]=(((x2752*x2755))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2760))+(((-1.0)*gconst91*r21*x2758)));
evalcond[4]=(((x2752*x2754))+((cj0*x2757))+((cj0*x2753))+(((-1.0)*gconst91*r01*x2758))+(((-1.0)*r02*x2760)));
evalcond[5]=(((x2752*x2756))+(((-1.0)*gconst91*r11*x2758))+(((-1.0)*r12*x2760))+((sj0*x2757))+((sj0*x2753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2762 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2762)==0){
continue;
}
IkReal x2761=pow(x2762,-0.5);
CheckValue<IkReal> x2763 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2763.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2763.value))));
IkReal gconst94=((1.0)*r11*x2761);
IkReal gconst95=((-1.0)*r10*x2761);
CheckValue<IkReal> x2764 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2764.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2764.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2767 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2767.valid){
continue;
}
IkReal x2765=((1.0)*(x2767.value));
IkReal x2766=x2761;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2765)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2765)));
IkReal gconst94=((1.0)*r11*x2766);
IkReal gconst95=((-1.0)*r10*x2766);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2770 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2770.valid){
continue;
}
IkReal x2768=((1.0)*(x2770.value));
IkReal x2769=x2761;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2768)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2768)));
IkReal gconst94=((1.0)*r11*x2769);
IkReal gconst95=((-1.0)*r10*x2769);
IkReal x2771=r12*r12;
IkReal x2772=(cj0*r02);
IkReal x2773=x2761;
IkReal x2774=(sj0*x2773);
j4eval[0]=((IKabs(((((-1.0)*x2774))+((x2771*x2774))+((r12*x2772*x2773)))))+(IKabs((x2772+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2777 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2777.valid){
continue;
}
IkReal x2775=((1.0)*(x2777.value));
IkReal x2776=x2761;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2775)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2775)));
IkReal gconst94=((1.0)*r11*x2776);
IkReal gconst95=((-1.0)*r10*x2776);
IkReal x2778=r12*r12;
IkReal x2779=(sj1*sj2);
IkReal x2780=((1.0)*cj1*cj2);
CheckValue<IkReal> x2784=IKPowWithIntegerCheck(((-1.0)+x2778),-1);
if(!x2784.valid){
continue;
}
IkReal x2781=x2784.value;
if((((1.0)+(((-1.0)*x2778)))) < -0.00001)
continue;
IkReal x2782=IKsqrt(((1.0)+(((-1.0)*x2778))));
IkReal x2783=(r12*r22*x2781*x2782);
j4eval[0]=((IKabs((((r22*x2779))+(((-1.0)*r22*x2780)))))+(IKabs((((x2779*x2783))+(((-1.0)*x2780*x2783))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2785=(gconst94*r21);
IkReal x2786=(cj1*cj2);
IkReal x2787=(sj1*sj2);
IkReal x2788=(gconst95*r20);
CheckValue<IkReal> x2789 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2786))+((r22*x2787)))),IkReal((((x2785*x2787))+(((-1.0)*x2785*x2786))+(((-1.0)*x2787*x2788))+((x2786*x2788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2789.valid){
continue;
}
CheckValue<IkReal> x2790=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2788*x2788)+(x2785*x2785)+(((-2.0)*x2785*x2788)))),-1);
if(!x2790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2789.value)+(((1.5707963267949)*(x2790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2791=IKsin(j4);
IkReal x2792=IKcos(j4);
IkReal x2793=(cj2*sj1);
IkReal x2794=(gconst94*r11);
IkReal x2795=(gconst95*r10);
IkReal x2796=(gconst94*r21);
IkReal x2797=(gconst94*r01);
IkReal x2798=(cj1*sj2);
IkReal x2799=((1.0)*x2792);
IkReal x2800=((1.0)*x2791);
IkReal x2801=(gconst95*x2792);
evalcond[0]=((((-1.0)*gconst95*r20*x2800))+((x2791*x2796))+(((-1.0)*r22*x2799)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2800))+((x2791*x2797))+(((-1.0)*r02*x2799)));
evalcond[2]=(((x2791*x2794))+(((-1.0)*x2795*x2800))+(((-1.0)*cj0))+(((-1.0)*r12*x2799)));
evalcond[3]=((((-1.0)*x2796*x2799))+((r20*x2801))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2800)));
evalcond[4]=((((-1.0)*x2797*x2799))+(((-1.0)*r02*x2800))+((cj0*x2798))+((cj0*x2793))+((r00*x2801)));
evalcond[5]=(((x2792*x2795))+(((-1.0)*r12*x2800))+((sj0*x2793))+((sj0*x2798))+(((-1.0)*x2794*x2799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2802=((1.0)*gconst95);
CheckValue<IkReal> x2803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2802))+(((-1.0)*gconst94*r20)))),-1);
if(!x2803.valid){
continue;
}
CheckValue<IkReal> x2804 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2802))+((gconst94*r11*sj0))+((cj0*gconst94*r01))+(((-1.0)*cj0*r00*x2802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2803.value)))+(x2804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2805=IKsin(j4);
IkReal x2806=IKcos(j4);
IkReal x2807=(cj2*sj1);
IkReal x2808=(gconst94*r11);
IkReal x2809=(gconst95*r10);
IkReal x2810=(gconst94*r21);
IkReal x2811=(gconst94*r01);
IkReal x2812=(cj1*sj2);
IkReal x2813=((1.0)*x2806);
IkReal x2814=((1.0)*x2805);
IkReal x2815=(gconst95*x2806);
evalcond[0]=((((-1.0)*r22*x2813))+((x2805*x2810))+(((-1.0)*gconst95*r20*x2814)));
evalcond[1]=((((-1.0)*r02*x2813))+sj0+(((-1.0)*gconst95*r00*x2814))+((x2805*x2811)));
evalcond[2]=((((-1.0)*r12*x2813))+(((-1.0)*x2809*x2814))+((x2805*x2808))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2810*x2813))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2814))+((r20*x2815)));
evalcond[4]=(((r00*x2815))+(((-1.0)*r02*x2814))+((cj0*x2807))+((cj0*x2812))+(((-1.0)*x2811*x2813)));
evalcond[5]=((((-1.0)*r12*x2814))+((sj0*x2812))+(((-1.0)*x2808*x2813))+((x2806*x2809))+((sj0*x2807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2816 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2816.valid){
continue;
}
CheckValue<IkReal> x2817=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2816.value)+(((1.5707963267949)*(x2817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2818=IKsin(j4);
IkReal x2819=IKcos(j4);
IkReal x2820=(cj2*sj1);
IkReal x2821=(gconst94*r11);
IkReal x2822=(gconst95*r10);
IkReal x2823=(gconst94*r21);
IkReal x2824=(gconst94*r01);
IkReal x2825=(cj1*sj2);
IkReal x2826=((1.0)*x2819);
IkReal x2827=((1.0)*x2818);
IkReal x2828=(gconst95*x2819);
evalcond[0]=(((x2818*x2823))+(((-1.0)*r22*x2826))+(((-1.0)*gconst95*r20*x2827)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2827))+((x2818*x2824))+(((-1.0)*r02*x2826)));
evalcond[2]=((((-1.0)*r12*x2826))+((x2818*x2821))+(((-1.0)*x2822*x2827))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2828))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2827))+(((-1.0)*x2823*x2826)));
evalcond[4]=((((-1.0)*x2824*x2826))+((r00*x2828))+(((-1.0)*r02*x2827))+((cj0*x2820))+((cj0*x2825)));
evalcond[5]=((((-1.0)*r12*x2827))+((x2819*x2822))+(((-1.0)*x2821*x2826))+((sj0*x2820))+((sj0*x2825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2829=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2829;
j4eval[1]=IKsign(x2829);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2830=((1.0)*cj5);
IkReal x2831=((((-1.0)*r21*x2830))+(((-1.0)*r20*sj5)));
j4eval[0]=x2831;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2830))+((r01*sj5))))));
j4eval[2]=IKsign(x2831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2832=cj5*cj5;
IkReal x2833=r11*r11;
IkReal x2834=(cj5*r10);
IkReal x2835=(r11*sj5);
IkReal x2836=((((-1.0)*x2833))+(((-1.0)*x2832*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2832*x2833))+(((2.0)*x2834*x2835)));
j4eval[0]=x2836;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2835))+x2834))));
j4eval[2]=IKsign(x2836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2837=cj5*cj5;
IkReal x2838=r11*r11;
IkReal x2839=(cj5*r10);
IkReal x2840=(r11*sj5);
CheckValue<IkReal> x2841=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2838))+(((2.0)*x2839*x2840))+(((-1.0)*(r12*r12)))+(((-1.0)*x2837*(r10*r10)))+((x2837*x2838)))),-1);
if(!x2841.valid){
continue;
}
CheckValue<IkReal> x2842 = IKatan2WithCheck(IkReal(((((-1.0)*x2840))+x2839)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2841.value)))+(x2842.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2843=IKsin(j4);
IkReal x2844=IKcos(j4);
IkReal x2845=(cj5*r10);
IkReal x2846=(r01*sj5);
IkReal x2847=(cj5*r00);
IkReal x2848=(cj5*r20);
IkReal x2849=((1.0)*x2844);
IkReal x2850=((1.0)*x2843);
IkReal x2851=(sj5*x2843);
evalcond[0]=(((r21*x2851))+(((-1.0)*x2848*x2850))+(((-1.0)*r22*x2849)));
evalcond[1]=(((x2843*x2846))+(((-1.0)*r02*x2849))+(((-1.0)*x2847*x2850)));
evalcond[2]=(((x2844*x2845))+(((-1.0)*r12*x2850))+(((-1.0)*r11*sj5*x2849)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2849))+(((-1.0)*x2845*x2850))+((r11*x2851)));
evalcond[4]=((((-1.0)*x2846*x2849))+((cj2*sj1))+((x2844*x2847))+((cj1*sj2))+(((-1.0)*r02*x2850)));
evalcond[5]=(((x2844*x2848))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2850))+(((-1.0)*r21*sj5*x2849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2852=((1.0)*cj5);
CheckValue<IkReal> x2853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2852))+(((-1.0)*r20*sj5)))),-1);
if(!x2853.valid){
continue;
}
CheckValue<IkReal> x2854 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2853.value)))+(x2854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2855=IKsin(j4);
IkReal x2856=IKcos(j4);
IkReal x2857=(cj5*r10);
IkReal x2858=(r01*sj5);
IkReal x2859=(cj5*r00);
IkReal x2860=(cj5*r20);
IkReal x2861=((1.0)*x2856);
IkReal x2862=((1.0)*x2855);
IkReal x2863=(sj5*x2855);
evalcond[0]=(((r21*x2863))+(((-1.0)*r22*x2861))+(((-1.0)*x2860*x2862)));
evalcond[1]=(((x2855*x2858))+(((-1.0)*r02*x2861))+(((-1.0)*x2859*x2862)));
evalcond[2]=((((-1.0)*r12*x2862))+(((-1.0)*r11*sj5*x2861))+((x2856*x2857)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2861))+(((-1.0)*x2857*x2862))+((r11*x2863)));
evalcond[4]=((((-1.0)*r02*x2862))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2858*x2861))+((x2856*x2859)));
evalcond[5]=(((x2856*x2860))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2862))+(((-1.0)*r21*sj5*x2861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2864 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2864.valid){
continue;
}
CheckValue<IkReal> x2865=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2864.value)+(((1.5707963267949)*(x2865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2866=IKsin(j4);
IkReal x2867=IKcos(j4);
IkReal x2868=(cj5*r10);
IkReal x2869=(r01*sj5);
IkReal x2870=(cj5*r00);
IkReal x2871=(cj5*r20);
IkReal x2872=((1.0)*x2867);
IkReal x2873=((1.0)*x2866);
IkReal x2874=(sj5*x2866);
evalcond[0]=((((-1.0)*x2871*x2873))+(((-1.0)*r22*x2872))+((r21*x2874)));
evalcond[1]=((((-1.0)*r02*x2872))+((x2866*x2869))+(((-1.0)*x2870*x2873)));
evalcond[2]=((((-1.0)*r11*sj5*x2872))+((x2867*x2868))+(((-1.0)*r12*x2873)));
evalcond[3]=((-1.0)+(((-1.0)*x2868*x2873))+((r11*x2874))+(((-1.0)*r12*x2872)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2873))+((cj1*sj2))+(((-1.0)*x2869*x2872))+((x2867*x2870)));
evalcond[5]=((((-1.0)*r22*x2873))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2867*x2871))+(((-1.0)*r21*sj5*x2872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2875=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2875;
j4eval[1]=IKsign(x2875);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2876=((1.0)*cj5);
IkReal x2877=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2876)));
j4eval[0]=x2877;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2876))))));
j4eval[2]=IKsign(x2877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2878=cj5*cj5;
IkReal x2879=r11*r11;
IkReal x2880=(r11*sj5);
IkReal x2881=(cj5*r10);
IkReal x2882=((r12*r12)+(((-1.0)*x2878*x2879))+(((-2.0)*x2880*x2881))+x2879+((x2878*(r10*r10))));
j4eval[0]=x2882;
j4eval[1]=IKsign(x2882);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2880))+x2881))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2883=cj5*cj5;
IkReal x2884=r11*r11;
IkReal x2885=(cj5*r10);
IkReal x2886=(r11*sj5);
CheckValue<IkReal> x2887 = IKatan2WithCheck(IkReal(((((-1.0)*x2886))+x2885)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2887.valid){
continue;
}
CheckValue<IkReal> x2888=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2883*(r10*r10)))+x2884+(((-1.0)*x2883*x2884))+(((-2.0)*x2885*x2886)))),-1);
if(!x2888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2887.value)+(((1.5707963267949)*(x2888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2889=IKsin(j4);
IkReal x2890=IKcos(j4);
IkReal x2891=(cj5*r10);
IkReal x2892=(r01*sj5);
IkReal x2893=((1.0)*cj2);
IkReal x2894=(cj5*r00);
IkReal x2895=(cj5*r20);
IkReal x2896=((1.0)*x2890);
IkReal x2897=((1.0)*x2889);
IkReal x2898=(sj5*x2889);
evalcond[0]=((((-1.0)*r22*x2896))+(((-1.0)*x2895*x2897))+((r21*x2898)));
evalcond[1]=((((-1.0)*r02*x2896))+((x2889*x2892))+(((-1.0)*x2894*x2897)));
evalcond[2]=(((x2890*x2891))+(((-1.0)*r11*sj5*x2896))+(((-1.0)*r12*x2897)));
evalcond[3]=((1.0)+(((-1.0)*x2891*x2897))+((r11*x2898))+(((-1.0)*r12*x2896)));
evalcond[4]=((((-1.0)*r22*x2897))+((x2890*x2895))+((sj1*sj2))+(((-1.0)*r21*sj5*x2896))+(((-1.0)*cj1*x2893)));
evalcond[5]=(((x2890*x2894))+(((-1.0)*r02*x2897))+(((-1.0)*x2892*x2896))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2899=((1.0)*cj5);
CheckValue<IkReal> x2900 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2900.valid){
continue;
}
CheckValue<IkReal> x2901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2899)))),-1);
if(!x2901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2900.value)+(((1.5707963267949)*(x2901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2902=IKsin(j4);
IkReal x2903=IKcos(j4);
IkReal x2904=(cj5*r10);
IkReal x2905=(r01*sj5);
IkReal x2906=((1.0)*cj2);
IkReal x2907=(cj5*r00);
IkReal x2908=(cj5*r20);
IkReal x2909=((1.0)*x2903);
IkReal x2910=((1.0)*x2902);
IkReal x2911=(sj5*x2902);
evalcond[0]=(((r21*x2911))+(((-1.0)*x2908*x2910))+(((-1.0)*r22*x2909)));
evalcond[1]=((((-1.0)*r02*x2909))+((x2902*x2905))+(((-1.0)*x2907*x2910)));
evalcond[2]=((((-1.0)*r12*x2910))+((x2903*x2904))+(((-1.0)*r11*sj5*x2909)));
evalcond[3]=((1.0)+((r11*x2911))+(((-1.0)*x2904*x2910))+(((-1.0)*r12*x2909)));
evalcond[4]=((((-1.0)*r21*sj5*x2909))+((sj1*sj2))+((x2903*x2908))+(((-1.0)*cj1*x2906))+(((-1.0)*r22*x2910)));
evalcond[5]=((((-1.0)*x2905*x2909))+(((-1.0)*cj1*sj2))+((x2903*x2907))+(((-1.0)*sj1*x2906))+(((-1.0)*r02*x2910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2912=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2912.valid){
continue;
}
CheckValue<IkReal> x2913 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2912.value)))+(x2913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2914=IKsin(j4);
IkReal x2915=IKcos(j4);
IkReal x2916=(cj5*r10);
IkReal x2917=(r01*sj5);
IkReal x2918=((1.0)*cj2);
IkReal x2919=(cj5*r00);
IkReal x2920=(cj5*r20);
IkReal x2921=((1.0)*x2915);
IkReal x2922=((1.0)*x2914);
IkReal x2923=(sj5*x2914);
evalcond[0]=((((-1.0)*x2920*x2922))+((r21*x2923))+(((-1.0)*r22*x2921)));
evalcond[1]=(((x2914*x2917))+(((-1.0)*r02*x2921))+(((-1.0)*x2919*x2922)));
evalcond[2]=((((-1.0)*r11*sj5*x2921))+((x2915*x2916))+(((-1.0)*r12*x2922)));
evalcond[3]=((1.0)+(((-1.0)*x2916*x2922))+(((-1.0)*r12*x2921))+((r11*x2923)));
evalcond[4]=(((x2915*x2920))+((sj1*sj2))+(((-1.0)*cj1*x2918))+(((-1.0)*r22*x2922))+(((-1.0)*r21*sj5*x2921)));
evalcond[5]=((((-1.0)*r02*x2922))+(((-1.0)*sj1*x2918))+(((-1.0)*cj1*sj2))+((x2915*x2919))+(((-1.0)*x2917*x2921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2924=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2924);
rxp0_2=(py*r00);
rxp1_0=(r21*x2924);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2925=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2925);
rxp0_2=(py*r00);
rxp1_0=(r21*x2925);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2926=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2926);
rxp0_2=(py*r00);
rxp1_0=(r21*x2926);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2929=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2929.valid){
continue;
}
IkReal x2927=x2929.value;
IkReal x2928=((1.0)*cj0*x2927);
cj4array[0]=((((-1.0)*cj1*sj2*x2928))+(((-1.0)*cj2*sj1*x2928)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2930=IKsin(j4);
IkReal x2931=IKcos(j4);
IkReal x2932=(r21*sj5);
IkReal x2933=((1.0)*x2931);
IkReal x2934=((1.0)*cj5*x2930);
evalcond[0]=((-1.0)*r12*x2930);
evalcond[1]=((((-1.0)*r12*x2933))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x2934))+((x2930*x2932)));
evalcond[3]=((((-1.0)*r00*x2934))+((r01*sj5*x2930)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2932*x2933))+((cj5*r20*x2931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2936=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2936.valid){
continue;
}
IkReal x2935=x2936.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2935))+((cj1*cj2*x2935)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2937=IKsin(j4);
IkReal x2938=IKcos(j4);
IkReal x2939=(cj5*r00);
IkReal x2940=((1.0)*x2937);
IkReal x2941=(sj5*x2937);
IkReal x2942=((1.0)*x2938);
evalcond[0]=((-1.0)*r12*x2937);
evalcond[1]=((((-1.0)*r12*x2942))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x2941))+(((-1.0)*cj5*r20*x2940)));
evalcond[3]=((((-1.0)*x2939*x2940))+((r01*x2941)));
evalcond[4]=(((x2938*x2939))+((cj0*cj2*sj1))+(((-1.0)*r01*sj5*x2942))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2943=IKPowWithIntegerCheck(r12,-1);
if(!x2943.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2943.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2944=IKsin(j4);
IkReal x2945=IKcos(j4);
IkReal x2946=(cj5*r00);
IkReal x2947=(cj5*r20);
IkReal x2948=(r21*sj5);
IkReal x2949=(r01*sj5);
IkReal x2950=((1.0)*x2944);
IkReal x2951=((1.0)*x2945);
evalcond[0]=((-1.0)*r12*x2944);
evalcond[1]=((((-1.0)*x2947*x2950))+((x2944*x2948)));
evalcond[2]=(((x2944*x2949))+(((-1.0)*x2946*x2950)));
evalcond[3]=((((-1.0)*x2948*x2951))+((x2945*x2947))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((x2945*x2946))+((cj0*cj2*sj1))+(((-1.0)*x2949*x2951))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2952=((1.0)*cj5);
CheckValue<IkReal> x2953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2952))+(((-1.0)*r20*sj5)))),-1);
if(!x2953.valid){
continue;
}
CheckValue<IkReal> x2954 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2952))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2953.value)))+(x2954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2955=IKsin(j4);
IkReal x2956=IKcos(j4);
IkReal x2957=(cj5*r10);
IkReal x2958=(cj2*sj1);
IkReal x2959=(r01*sj5);
IkReal x2960=(cj5*r00);
IkReal x2961=(cj5*r20);
IkReal x2962=(cj1*sj2);
IkReal x2963=((1.0)*x2956);
IkReal x2964=((1.0)*x2955);
IkReal x2965=(sj5*x2955);
evalcond[0]=(((r21*x2965))+(((-1.0)*r22*x2963))+(((-1.0)*x2961*x2964)));
evalcond[1]=(sj0+(((-1.0)*r02*x2963))+(((-1.0)*x2960*x2964))+((x2955*x2959)));
evalcond[2]=((((-1.0)*x2957*x2964))+((r11*x2965))+(((-1.0)*cj0))+(((-1.0)*r12*x2963)));
evalcond[3]=(((x2956*x2961))+(((-1.0)*r21*sj5*x2963))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2964)));
evalcond[4]=(((x2956*x2960))+((cj0*x2958))+(((-1.0)*x2959*x2963))+(((-1.0)*r02*x2964))+((cj0*x2962)));
evalcond[5]=(((sj0*x2962))+((sj0*x2958))+(((-1.0)*r11*sj5*x2963))+((x2956*x2957))+(((-1.0)*r12*x2964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2966=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2966.valid){
continue;
}
CheckValue<IkReal> x2967 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2966.value)))+(x2967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2968=IKsin(j4);
IkReal x2969=IKcos(j4);
IkReal x2970=(cj5*r10);
IkReal x2971=(cj2*sj1);
IkReal x2972=(r01*sj5);
IkReal x2973=(cj5*r00);
IkReal x2974=(cj5*r20);
IkReal x2975=(cj1*sj2);
IkReal x2976=((1.0)*x2969);
IkReal x2977=((1.0)*x2968);
IkReal x2978=(sj5*x2968);
evalcond[0]=((((-1.0)*x2974*x2977))+(((-1.0)*r22*x2976))+((r21*x2978)));
evalcond[1]=(sj0+(((-1.0)*r02*x2976))+((x2968*x2972))+(((-1.0)*x2973*x2977)));
evalcond[2]=((((-1.0)*r12*x2976))+((r11*x2978))+(((-1.0)*cj0))+(((-1.0)*x2970*x2977)));
evalcond[3]=((((-1.0)*r21*sj5*x2976))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2969*x2974))+(((-1.0)*r22*x2977)));
evalcond[4]=((((-1.0)*x2972*x2976))+(((-1.0)*r02*x2977))+((cj0*x2975))+((cj0*x2971))+((x2969*x2973)));
evalcond[5]=((((-1.0)*r12*x2977))+(((-1.0)*r11*sj5*x2976))+((x2969*x2970))+((sj0*x2971))+((sj0*x2975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2979=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2979.valid){
continue;
}
CheckValue<IkReal> x2980 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2979.value)))+(x2980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2981=IKsin(j4);
IkReal x2982=IKcos(j4);
IkReal x2983=(cj5*r10);
IkReal x2984=(cj2*sj1);
IkReal x2985=(r01*sj5);
IkReal x2986=(cj5*r00);
IkReal x2987=(cj5*r20);
IkReal x2988=(cj1*sj2);
IkReal x2989=((1.0)*x2982);
IkReal x2990=((1.0)*x2981);
IkReal x2991=(sj5*x2981);
evalcond[0]=((((-1.0)*x2987*x2990))+(((-1.0)*r22*x2989))+((r21*x2991)));
evalcond[1]=(sj0+((x2981*x2985))+(((-1.0)*x2986*x2990))+(((-1.0)*r02*x2989)));
evalcond[2]=((((-1.0)*r12*x2989))+(((-1.0)*x2983*x2990))+(((-1.0)*cj0))+((r11*x2991)));
evalcond[3]=((((-1.0)*r22*x2990))+(((-1.0)*r21*sj5*x2989))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2982*x2987)));
evalcond[4]=((((-1.0)*x2985*x2989))+((cj0*x2984))+((cj0*x2988))+((x2982*x2986))+(((-1.0)*r02*x2990)));
evalcond[5]=((((-1.0)*r12*x2990))+((x2982*x2983))+(((-1.0)*r11*sj5*x2989))+((sj0*x2988))+((sj0*x2984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2992=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x2992;
j0eval[1]=IKsign(x2992);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2993=r21*r21;
IkReal x2994=cj5*cj5;
IkReal x2995=(sj1*sj2);
IkReal x2996=(r21*sj5);
IkReal x2997=(cj5*r20);
IkReal x2998=(cj1*cj2);
IkReal x2999=((((2.0)*x2996*x2997))+(((-1.0)*x2994*(r20*r20)))+(((-1.0)*(r22*r22)))+((x2993*x2994))+(((-1.0)*x2993)));
j4eval[0]=x2999;
j4eval[1]=((IKabs(((((-1.0)*r22*x2998))+((r22*x2995)))))+(IKabs((((x2995*x2996))+(((-1.0)*x2995*x2997))+(((-1.0)*x2996*x2998))+((x2997*x2998))))));
j4eval[2]=IKsign(x2999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.566898951975751)*px))+(((-2.20734818680435)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.566898951975751)*px))+(((-2.20734818680435)*py))))+IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.566898951975751)*px))+(((-2.20734818680435)*py))), ((((-2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3000=IKsin(j0);
IkReal x3001=IKcos(j0);
evalcond[0]=((((0.10915)*x3000))+(((-0.425)*x3001))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x3000))+(((-0.10915)*x3001))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3002=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3002;
j4eval[1]=IKsign(x3002);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3003=((1.0)*cj5);
IkReal x3004=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3003)));
j4eval[0]=x3004;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3003))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3005=cj5*cj5;
IkReal x3006=((1.0)*r20);
IkReal x3007=(r01*r21);
IkReal x3008=(r21*sj5);
IkReal x3009=(((cj5*r01*r20*sj5))+(((-1.0)*x3007))+(((-1.0)*r02*r22))+((cj5*r00*x3008))+((x3005*x3007))+(((-1.0)*r00*x3005*x3006)));
j4eval[0]=x3009;
j4eval[1]=((IKabs((((cj0*x3008))+(((-1.0)*cj0*cj5*x3006)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3010=cj5*cj5;
IkReal x3011=((1.0)*r20);
IkReal x3012=(r01*r21);
IkReal x3013=(r21*sj5);
CheckValue<IkReal> x3014=IKPowWithIntegerCheck(IKsign((((x3010*x3012))+((cj5*r01*r20*sj5))+((cj5*r00*x3013))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3010*x3011))+(((-1.0)*x3012)))),-1);
if(!x3014.valid){
continue;
}
CheckValue<IkReal> x3015 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3013))+(((-1.0)*cj0*cj5*x3011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3014.value)))+(x3015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3016=IKcos(j4);
IkReal x3017=IKsin(j4);
IkReal x3018=(cj5*r00);
IkReal x3019=(cj5*r10);
IkReal x3020=(cj5*r20);
IkReal x3021=((1.0)*x3016);
IkReal x3022=((1.0)*x3017);
IkReal x3023=(sj5*x3016);
IkReal x3024=(sj5*x3017);
evalcond[0]=((((-1.0)*x3020*x3021))+((r22*x3017))+((r21*x3023)));
evalcond[1]=((((-1.0)*x3020*x3022))+((r21*x3024))+(((-1.0)*r22*x3021)));
evalcond[2]=((((-1.0)*x3018*x3021))+cj0+((r01*x3023))+((r02*x3017)));
evalcond[3]=(sj0+((r11*x3023))+(((-1.0)*x3019*x3021))+((r12*x3017)));
evalcond[4]=((((-1.0)*x3018*x3022))+sj0+((r01*x3024))+(((-1.0)*r02*x3021)));
evalcond[5]=((((-1.0)*r12*x3021))+((r11*x3024))+(((-1.0)*x3019*x3022))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3025=((1.0)*cj5);
CheckValue<IkReal> x3026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3025))+(((-1.0)*r10*sj5)))),-1);
if(!x3026.valid){
continue;
}
CheckValue<IkReal> x3027 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3025)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3026.value)))+(x3027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3028=IKcos(j4);
IkReal x3029=IKsin(j4);
IkReal x3030=(cj5*r00);
IkReal x3031=(cj5*r10);
IkReal x3032=(cj5*r20);
IkReal x3033=((1.0)*x3028);
IkReal x3034=((1.0)*x3029);
IkReal x3035=(sj5*x3028);
IkReal x3036=(sj5*x3029);
evalcond[0]=(((r21*x3035))+((r22*x3029))+(((-1.0)*x3032*x3033)));
evalcond[1]=(((r21*x3036))+(((-1.0)*r22*x3033))+(((-1.0)*x3032*x3034)));
evalcond[2]=(cj0+(((-1.0)*x3030*x3033))+((r02*x3029))+((r01*x3035)));
evalcond[3]=(((r12*x3029))+sj0+((r11*x3035))+(((-1.0)*x3031*x3033)));
evalcond[4]=(sj0+(((-1.0)*x3030*x3034))+((r01*x3036))+(((-1.0)*r02*x3033)));
evalcond[5]=(((r11*x3036))+(((-1.0)*r12*x3033))+(((-1.0)*x3031*x3034))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3037 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3037.valid){
continue;
}
CheckValue<IkReal> x3038=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3037.value)+(((1.5707963267949)*(x3038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3039=IKcos(j4);
IkReal x3040=IKsin(j4);
IkReal x3041=(cj5*r00);
IkReal x3042=(cj5*r10);
IkReal x3043=(cj5*r20);
IkReal x3044=((1.0)*x3039);
IkReal x3045=((1.0)*x3040);
IkReal x3046=(sj5*x3039);
IkReal x3047=(sj5*x3040);
evalcond[0]=(((r22*x3040))+((r21*x3046))+(((-1.0)*x3043*x3044)));
evalcond[1]=(((r21*x3047))+(((-1.0)*r22*x3044))+(((-1.0)*x3043*x3045)));
evalcond[2]=(cj0+(((-1.0)*x3041*x3044))+((r02*x3040))+((r01*x3046)));
evalcond[3]=((((-1.0)*x3042*x3044))+sj0+((r12*x3040))+((r11*x3046)));
evalcond[4]=(sj0+(((-1.0)*x3041*x3045))+(((-1.0)*r02*x3044))+((r01*x3047)));
evalcond[5]=((((-1.0)*x3042*x3045))+(((-1.0)*r12*x3044))+(((-1.0)*cj0))+((r11*x3047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.566898951975751)*px))+(((-2.20734818680435)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.566898951975751)*px))+(((-2.20734818680435)*py))))+IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.566898951975751)*px))+(((-2.20734818680435)*py))), ((((-2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3048=IKsin(j0);
IkReal x3049=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x3049))+(((0.10915)*x3048)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*x3049))+(((-0.425)*x3048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3050=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3050;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3051=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3051;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3052=((1.0)*cj5);
IkReal x3053=((((-1.0)*r01*x3052))+(((-1.0)*r00*sj5)));
j4eval[0]=x3053;
j4eval[1]=IKsign(x3053);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3052))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3054=((1.0)*cj5);
CheckValue<IkReal> x3055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3054))+(((-1.0)*r00*sj5)))),-1);
if(!x3055.valid){
continue;
}
CheckValue<IkReal> x3056 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3054))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3055.value)))+(x3056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3057=IKcos(j4);
IkReal x3058=IKsin(j4);
IkReal x3059=((1.0)*cj0);
IkReal x3060=(cj5*r00);
IkReal x3061=(cj5*r10);
IkReal x3062=(cj5*r20);
IkReal x3063=((1.0)*x3057);
IkReal x3064=((1.0)*x3058);
IkReal x3065=(sj5*x3057);
IkReal x3066=(sj5*x3058);
evalcond[0]=((((-1.0)*x3062*x3063))+((r22*x3058))+((r21*x3065)));
evalcond[1]=((((-1.0)*r22*x3063))+(((-1.0)*x3062*x3064))+((r21*x3066)));
evalcond[2]=((((-1.0)*x3060*x3064))+sj0+((r01*x3066))+(((-1.0)*r02*x3063)));
evalcond[3]=((((-1.0)*x3060*x3063))+((r02*x3058))+((r01*x3065))+(((-1.0)*x3059)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3061*x3063))+((r12*x3058))+((r11*x3065)));
evalcond[5]=((((-1.0)*x3061*x3064))+(((-1.0)*r12*x3063))+((r11*x3066))+(((-1.0)*x3059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3067 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3067.valid){
continue;
}
CheckValue<IkReal> x3068=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3067.value)+(((1.5707963267949)*(x3068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3069=IKcos(j4);
IkReal x3070=IKsin(j4);
IkReal x3071=((1.0)*cj0);
IkReal x3072=(cj5*r00);
IkReal x3073=(cj5*r10);
IkReal x3074=(cj5*r20);
IkReal x3075=((1.0)*x3069);
IkReal x3076=((1.0)*x3070);
IkReal x3077=(sj5*x3069);
IkReal x3078=(sj5*x3070);
evalcond[0]=((((-1.0)*x3074*x3075))+((r22*x3070))+((r21*x3077)));
evalcond[1]=((((-1.0)*r22*x3075))+(((-1.0)*x3074*x3076))+((r21*x3078)));
evalcond[2]=(((r01*x3078))+(((-1.0)*x3072*x3076))+sj0+(((-1.0)*r02*x3075)));
evalcond[3]=(((r01*x3077))+(((-1.0)*x3072*x3075))+(((-1.0)*x3071))+((r02*x3070)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3073*x3075))+((r12*x3070))+((r11*x3077)));
evalcond[5]=((((-1.0)*x3073*x3076))+(((-1.0)*x3071))+(((-1.0)*r12*x3075))+((r11*x3078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3079=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3079.valid){
continue;
}
CheckValue<IkReal> x3080 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3079.value)))+(x3080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3081=IKcos(j4);
IkReal x3082=IKsin(j4);
IkReal x3083=((1.0)*cj0);
IkReal x3084=(cj5*r00);
IkReal x3085=(cj5*r10);
IkReal x3086=(cj5*r20);
IkReal x3087=((1.0)*x3081);
IkReal x3088=((1.0)*x3082);
IkReal x3089=(sj5*x3081);
IkReal x3090=(sj5*x3082);
evalcond[0]=(((r21*x3089))+((r22*x3082))+(((-1.0)*x3086*x3087)));
evalcond[1]=(((r21*x3090))+(((-1.0)*r22*x3087))+(((-1.0)*x3086*x3088)));
evalcond[2]=(((r01*x3090))+sj0+(((-1.0)*r02*x3087))+(((-1.0)*x3084*x3088)));
evalcond[3]=((((-1.0)*x3083))+((r02*x3082))+((r01*x3089))+(((-1.0)*x3084*x3087)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3082))+((r11*x3089))+(((-1.0)*x3085*x3087)));
evalcond[5]=((((-1.0)*x3083))+(((-1.0)*x3085*x3088))+((r11*x3090))+(((-1.0)*r12*x3087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3091=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3091;
j4eval[1]=IKsign(x3091);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3092=((1.0)*cj5);
IkReal x3093=((((-1.0)*r11*x3092))+(((-1.0)*r10*sj5)));
j4eval[0]=x3093;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3092)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3094=cj5*cj5;
IkReal x3095=((1.0)*r20);
IkReal x3096=(r01*r21);
IkReal x3097=(r21*sj5);
IkReal x3098=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3094*x3095))+(((-1.0)*x3096))+((cj5*r00*x3097))+((x3094*x3096)));
j4eval[0]=x3098;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3097))+(((-1.0)*cj0*cj5*x3095))))));
j4eval[2]=IKsign(x3098);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3099=cj5*cj5;
IkReal x3100=((1.0)*r20);
IkReal x3101=(r01*r21);
IkReal x3102=(r21*sj5);
CheckValue<IkReal> x3103=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3099*x3101))+(((-1.0)*r02*r22))+(((-1.0)*x3101))+(((-1.0)*r00*x3099*x3100))+((cj5*r00*x3102)))),-1);
if(!x3103.valid){
continue;
}
CheckValue<IkReal> x3104 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3102))+(((-1.0)*cj0*cj5*x3100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3103.value)))+(x3104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3105=IKcos(j4);
IkReal x3106=IKsin(j4);
IkReal x3107=(cj5*r00);
IkReal x3108=(cj5*r10);
IkReal x3109=(cj5*r20);
IkReal x3110=((1.0)*x3105);
IkReal x3111=((1.0)*x3106);
IkReal x3112=(sj5*x3105);
IkReal x3113=(sj5*x3106);
evalcond[0]=((((-1.0)*x3109*x3110))+((r22*x3106))+((r21*x3112)));
evalcond[1]=((((-1.0)*x3109*x3111))+((r21*x3113))+(((-1.0)*r22*x3110)));
evalcond[2]=(cj0+((r02*x3106))+((r01*x3112))+(((-1.0)*x3107*x3110)));
evalcond[3]=(sj0+(((-1.0)*x3108*x3110))+((r12*x3106))+((r11*x3112)));
evalcond[4]=((((-1.0)*r02*x3110))+sj0+((r01*x3113))+(((-1.0)*x3107*x3111)));
evalcond[5]=((((-1.0)*r12*x3110))+(((-1.0)*x3108*x3111))+((r11*x3113))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3114=((1.0)*cj5);
CheckValue<IkReal> x3115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3114)))),-1);
if(!x3115.valid){
continue;
}
CheckValue<IkReal> x3116 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3114)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3115.value)))+(x3116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3117=IKcos(j4);
IkReal x3118=IKsin(j4);
IkReal x3119=(cj5*r00);
IkReal x3120=(cj5*r10);
IkReal x3121=(cj5*r20);
IkReal x3122=((1.0)*x3117);
IkReal x3123=((1.0)*x3118);
IkReal x3124=(sj5*x3117);
IkReal x3125=(sj5*x3118);
evalcond[0]=(((r22*x3118))+((r21*x3124))+(((-1.0)*x3121*x3122)));
evalcond[1]=(((r21*x3125))+(((-1.0)*x3121*x3123))+(((-1.0)*r22*x3122)));
evalcond[2]=(((r01*x3124))+cj0+((r02*x3118))+(((-1.0)*x3119*x3122)));
evalcond[3]=(((r12*x3118))+sj0+(((-1.0)*x3120*x3122))+((r11*x3124)));
evalcond[4]=(sj0+((r01*x3125))+(((-1.0)*r02*x3122))+(((-1.0)*x3119*x3123)));
evalcond[5]=((((-1.0)*r12*x3122))+(((-1.0)*x3120*x3123))+((r11*x3125))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3126 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3126.valid){
continue;
}
CheckValue<IkReal> x3127=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3126.value)+(((1.5707963267949)*(x3127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3128=IKcos(j4);
IkReal x3129=IKsin(j4);
IkReal x3130=(cj5*r00);
IkReal x3131=(cj5*r10);
IkReal x3132=(cj5*r20);
IkReal x3133=((1.0)*x3128);
IkReal x3134=((1.0)*x3129);
IkReal x3135=(sj5*x3128);
IkReal x3136=(sj5*x3129);
evalcond[0]=((((-1.0)*x3132*x3133))+((r21*x3135))+((r22*x3129)));
evalcond[1]=((((-1.0)*x3132*x3134))+((r21*x3136))+(((-1.0)*r22*x3133)));
evalcond[2]=(((r01*x3135))+(((-1.0)*x3130*x3133))+cj0+((r02*x3129)));
evalcond[3]=((((-1.0)*x3131*x3133))+sj0+((r12*x3129))+((r11*x3135)));
evalcond[4]=(sj0+((r01*x3136))+(((-1.0)*x3130*x3134))+(((-1.0)*r02*x3133)));
evalcond[5]=((((-1.0)*x3131*x3134))+(((-1.0)*r12*x3133))+((r11*x3136))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3137=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3137;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3138=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3138;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3139=((1.0)*cj5);
IkReal x3140=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3139)));
j4eval[0]=x3140;
j4eval[1]=IKsign(x3140);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3139))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3141=((1.0)*cj5);
CheckValue<IkReal> x3142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3141)))),-1);
if(!x3142.valid){
continue;
}
CheckValue<IkReal> x3143 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3141)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3142.value)))+(x3143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3144=IKcos(j4);
IkReal x3145=IKsin(j4);
IkReal x3146=((1.0)*cj0);
IkReal x3147=(cj5*r00);
IkReal x3148=(cj5*r10);
IkReal x3149=(cj5*r20);
IkReal x3150=((1.0)*x3144);
IkReal x3151=((1.0)*x3145);
IkReal x3152=(sj5*x3144);
IkReal x3153=(sj5*x3145);
evalcond[0]=(((r22*x3145))+(((-1.0)*x3149*x3150))+((r21*x3152)));
evalcond[1]=((((-1.0)*r22*x3150))+(((-1.0)*x3149*x3151))+((r21*x3153)));
evalcond[2]=(sj0+((r01*x3153))+(((-1.0)*r02*x3150))+(((-1.0)*x3147*x3151)));
evalcond[3]=((((-1.0)*x3146))+((r02*x3145))+((r01*x3152))+(((-1.0)*x3147*x3150)));
evalcond[4]=((((-1.0)*x3148*x3150))+(((-1.0)*sj0))+((r12*x3145))+((r11*x3152)));
evalcond[5]=((((-1.0)*x3148*x3151))+(((-1.0)*x3146))+((r11*x3153))+(((-1.0)*r12*x3150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3154 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3154.valid){
continue;
}
CheckValue<IkReal> x3155=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3154.value)+(((1.5707963267949)*(x3155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3156=IKcos(j4);
IkReal x3157=IKsin(j4);
IkReal x3158=((1.0)*cj0);
IkReal x3159=(cj5*r00);
IkReal x3160=(cj5*r10);
IkReal x3161=(cj5*r20);
IkReal x3162=((1.0)*x3156);
IkReal x3163=((1.0)*x3157);
IkReal x3164=(sj5*x3156);
IkReal x3165=(sj5*x3157);
evalcond[0]=((((-1.0)*x3161*x3162))+((r22*x3157))+((r21*x3164)));
evalcond[1]=((((-1.0)*x3161*x3163))+((r21*x3165))+(((-1.0)*r22*x3162)));
evalcond[2]=(sj0+((r01*x3165))+(((-1.0)*r02*x3162))+(((-1.0)*x3159*x3163)));
evalcond[3]=((((-1.0)*x3158))+((r02*x3157))+((r01*x3164))+(((-1.0)*x3159*x3162)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3160*x3162))+((r11*x3164))+((r12*x3157)));
evalcond[5]=((((-1.0)*x3158))+(((-1.0)*r12*x3162))+(((-1.0)*x3160*x3163))+((r11*x3165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3166=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3166.valid){
continue;
}
CheckValue<IkReal> x3167 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3166.value)))+(x3167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3168=IKcos(j4);
IkReal x3169=IKsin(j4);
IkReal x3170=((1.0)*cj0);
IkReal x3171=(cj5*r00);
IkReal x3172=(cj5*r10);
IkReal x3173=(cj5*r20);
IkReal x3174=((1.0)*x3168);
IkReal x3175=((1.0)*x3169);
IkReal x3176=(sj5*x3168);
IkReal x3177=(sj5*x3169);
evalcond[0]=(((r22*x3169))+((r21*x3176))+(((-1.0)*x3173*x3174)));
evalcond[1]=(((r21*x3177))+(((-1.0)*x3173*x3175))+(((-1.0)*r22*x3174)));
evalcond[2]=(sj0+(((-1.0)*x3171*x3175))+((r01*x3177))+(((-1.0)*r02*x3174)));
evalcond[3]=(((r02*x3169))+(((-1.0)*x3170))+(((-1.0)*x3171*x3174))+((r01*x3176)));
evalcond[4]=(((r11*x3176))+(((-1.0)*sj0))+((r12*x3169))+(((-1.0)*x3172*x3174)));
evalcond[5]=(((r11*x3177))+(((-1.0)*r12*x3174))+(((-1.0)*x3170))+(((-1.0)*x3172*x3175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((0.566898951975751)*px))), ((((2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3178=IKsin(j0);
IkReal x3179=IKcos(j0);
evalcond[0]=((((0.10915)*x3178))+(((0.425)*x3179))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x3178))+(((-1.0)*py))+(((-0.10915)*x3179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3180=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3180;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3180);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3181=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3181;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3181);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3182=((1.0)*cj5);
IkReal x3183=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3182)));
j4eval[0]=x3183;
j4eval[1]=IKsign(x3183);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3182))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3184=((1.0)*cj5);
CheckValue<IkReal> x3185 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3184)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3185.valid){
continue;
}
CheckValue<IkReal> x3186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3184)))),-1);
if(!x3186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3185.value)+(((1.5707963267949)*(x3186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3187=IKcos(j4);
IkReal x3188=IKsin(j4);
IkReal x3189=((1.0)*cj0);
IkReal x3190=(cj5*r00);
IkReal x3191=(cj5*r10);
IkReal x3192=(cj5*r20);
IkReal x3193=((1.0)*x3187);
IkReal x3194=((1.0)*x3188);
IkReal x3195=(sj5*x3187);
IkReal x3196=(sj5*x3188);
evalcond[0]=(((r22*x3188))+((r21*x3195))+(((-1.0)*x3192*x3193)));
evalcond[1]=((((-1.0)*r22*x3193))+((r21*x3196))+(((-1.0)*x3192*x3194)));
evalcond[2]=((((-1.0)*x3190*x3194))+sj0+((r01*x3196))+(((-1.0)*r02*x3193)));
evalcond[3]=((((-1.0)*x3190*x3193))+((r01*x3195))+(((-1.0)*x3189))+((r02*x3188)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3191*x3193))+((r12*x3188))+((r11*x3195)));
evalcond[5]=((((-1.0)*x3191*x3194))+((r11*x3196))+(((-1.0)*r12*x3193))+(((-1.0)*x3189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3197 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3197.valid){
continue;
}
CheckValue<IkReal> x3198=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3197.value)+(((1.5707963267949)*(x3198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3199=IKcos(j4);
IkReal x3200=IKsin(j4);
IkReal x3201=((1.0)*cj0);
IkReal x3202=(cj5*r00);
IkReal x3203=(cj5*r10);
IkReal x3204=(cj5*r20);
IkReal x3205=((1.0)*x3199);
IkReal x3206=((1.0)*x3200);
IkReal x3207=(sj5*x3199);
IkReal x3208=(sj5*x3200);
evalcond[0]=(((r22*x3200))+(((-1.0)*x3204*x3205))+((r21*x3207)));
evalcond[1]=((((-1.0)*x3204*x3206))+(((-1.0)*r22*x3205))+((r21*x3208)));
evalcond[2]=((((-1.0)*r02*x3205))+sj0+((r01*x3208))+(((-1.0)*x3202*x3206)));
evalcond[3]=(((r01*x3207))+(((-1.0)*x3202*x3205))+(((-1.0)*x3201))+((r02*x3200)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3207))+((r12*x3200))+(((-1.0)*x3203*x3205)));
evalcond[5]=(((r11*x3208))+(((-1.0)*r12*x3205))+(((-1.0)*x3203*x3206))+(((-1.0)*x3201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3209=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3209.valid){
continue;
}
CheckValue<IkReal> x3210 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3209.value)))+(x3210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3211=IKcos(j4);
IkReal x3212=IKsin(j4);
IkReal x3213=((1.0)*cj0);
IkReal x3214=(cj5*r00);
IkReal x3215=(cj5*r10);
IkReal x3216=(cj5*r20);
IkReal x3217=((1.0)*x3211);
IkReal x3218=((1.0)*x3212);
IkReal x3219=(sj5*x3211);
IkReal x3220=(sj5*x3212);
evalcond[0]=(((r22*x3212))+(((-1.0)*x3216*x3217))+((r21*x3219)));
evalcond[1]=((((-1.0)*x3216*x3218))+((r21*x3220))+(((-1.0)*r22*x3217)));
evalcond[2]=(sj0+(((-1.0)*x3214*x3218))+((r01*x3220))+(((-1.0)*r02*x3217)));
evalcond[3]=(((r01*x3219))+(((-1.0)*x3214*x3217))+(((-1.0)*x3213))+((r02*x3212)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3215*x3217))+((r12*x3212))+((r11*x3219)));
evalcond[5]=((((-1.0)*x3215*x3218))+((r11*x3220))+(((-1.0)*r12*x3217))+(((-1.0)*x3213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((0.566898951975751)*px))), ((((2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3221=IKsin(j0);
IkReal x3222=IKcos(j0);
evalcond[0]=((((0.425)*x3222))+(((-1.0)*px))+(((0.10915)*x3221)));
evalcond[1]=((((0.425)*x3221))+(((-1.0)*py))+(((-0.10915)*x3222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3223=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3223;
j4eval[1]=IKsign(x3223);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3224=((1.0)*cj5);
IkReal x3225=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3224)));
j4eval[0]=x3225;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3224))))));
j4eval[2]=IKsign(x3225);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3226=cj5*cj5;
IkReal x3227=((1.0)*r20);
IkReal x3228=(r01*r21);
IkReal x3229=(r21*sj5);
IkReal x3230=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3229))+((x3226*x3228))+(((-1.0)*x3228))+(((-1.0)*r00*x3226*x3227)));
j4eval[0]=x3230;
j4eval[1]=((IKabs((((cj0*x3229))+(((-1.0)*cj0*cj5*x3227)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3231=cj5*cj5;
IkReal x3232=((1.0)*r20);
IkReal x3233=(r01*r21);
IkReal x3234=(r21*sj5);
CheckValue<IkReal> x3235 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3234))+(((-1.0)*cj0*cj5*x3232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3235.valid){
continue;
}
CheckValue<IkReal> x3236=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3233))+((x3231*x3233))+((cj5*r00*x3234))+(((-1.0)*r00*x3231*x3232)))),-1);
if(!x3236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3235.value)+(((1.5707963267949)*(x3236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3237=IKcos(j4);
IkReal x3238=IKsin(j4);
IkReal x3239=(cj5*r00);
IkReal x3240=(cj5*r10);
IkReal x3241=(cj5*r20);
IkReal x3242=((1.0)*x3237);
IkReal x3243=((1.0)*x3238);
IkReal x3244=(sj5*x3237);
IkReal x3245=(sj5*x3238);
evalcond[0]=(((r21*x3244))+((r22*x3238))+(((-1.0)*x3241*x3242)));
evalcond[1]=(((r21*x3245))+(((-1.0)*x3241*x3243))+(((-1.0)*r22*x3242)));
evalcond[2]=(((r01*x3244))+(((-1.0)*x3239*x3242))+cj0+((r02*x3238)));
evalcond[3]=(sj0+(((-1.0)*x3240*x3242))+((r12*x3238))+((r11*x3244)));
evalcond[4]=(((r01*x3245))+(((-1.0)*x3239*x3243))+sj0+(((-1.0)*r02*x3242)));
evalcond[5]=((((-1.0)*x3240*x3243))+(((-1.0)*r12*x3242))+((r11*x3245))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3246=((1.0)*cj5);
CheckValue<IkReal> x3247=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3246)))),-1);
if(!x3247.valid){
continue;
}
CheckValue<IkReal> x3248 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3246)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3247.value)))+(x3248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3249=IKcos(j4);
IkReal x3250=IKsin(j4);
IkReal x3251=(cj5*r00);
IkReal x3252=(cj5*r10);
IkReal x3253=(cj5*r20);
IkReal x3254=((1.0)*x3249);
IkReal x3255=((1.0)*x3250);
IkReal x3256=(sj5*x3249);
IkReal x3257=(sj5*x3250);
evalcond[0]=((((-1.0)*x3253*x3254))+((r21*x3256))+((r22*x3250)));
evalcond[1]=((((-1.0)*x3253*x3255))+((r21*x3257))+(((-1.0)*r22*x3254)));
evalcond[2]=(cj0+((r02*x3250))+((r01*x3256))+(((-1.0)*x3251*x3254)));
evalcond[3]=(((r12*x3250))+sj0+((r11*x3256))+(((-1.0)*x3252*x3254)));
evalcond[4]=(sj0+(((-1.0)*r02*x3254))+((r01*x3257))+(((-1.0)*x3251*x3255)));
evalcond[5]=(((r11*x3257))+(((-1.0)*x3252*x3255))+(((-1.0)*r12*x3254))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3258 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3258.valid){
continue;
}
CheckValue<IkReal> x3259=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3258.value)+(((1.5707963267949)*(x3259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3260=IKcos(j4);
IkReal x3261=IKsin(j4);
IkReal x3262=(cj5*r00);
IkReal x3263=(cj5*r10);
IkReal x3264=(cj5*r20);
IkReal x3265=((1.0)*x3260);
IkReal x3266=((1.0)*x3261);
IkReal x3267=(sj5*x3260);
IkReal x3268=(sj5*x3261);
evalcond[0]=(((r21*x3267))+(((-1.0)*x3264*x3265))+((r22*x3261)));
evalcond[1]=(((r21*x3268))+(((-1.0)*x3264*x3266))+(((-1.0)*r22*x3265)));
evalcond[2]=(((r01*x3267))+cj0+((r02*x3261))+(((-1.0)*x3262*x3265)));
evalcond[3]=(sj0+((r11*x3267))+((r12*x3261))+(((-1.0)*x3263*x3265)));
evalcond[4]=(sj0+((r01*x3268))+(((-1.0)*x3262*x3266))+(((-1.0)*r02*x3265)));
evalcond[5]=((((-1.0)*r12*x3265))+((r11*x3268))+(((-1.0)*x3263*x3266))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3269=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3269;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3270=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3270;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3270);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3271=((1.0)*cj5);
IkReal x3272=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3271)));
j4eval[0]=x3272;
j4eval[1]=IKsign(x3272);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3271))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3273=((1.0)*cj5);
CheckValue<IkReal> x3274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3273)))),-1);
if(!x3274.valid){
continue;
}
CheckValue<IkReal> x3275 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3273)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3274.value)))+(x3275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3276=IKcos(j4);
IkReal x3277=IKsin(j4);
IkReal x3278=((1.0)*cj0);
IkReal x3279=(cj5*r00);
IkReal x3280=(cj5*r10);
IkReal x3281=(cj5*r20);
IkReal x3282=((1.0)*x3276);
IkReal x3283=((1.0)*x3277);
IkReal x3284=(sj5*x3276);
IkReal x3285=(sj5*x3277);
evalcond[0]=((((-1.0)*x3281*x3282))+((r21*x3284))+((r22*x3277)));
evalcond[1]=((((-1.0)*x3281*x3283))+(((-1.0)*r22*x3282))+((r21*x3285)));
evalcond[2]=(sj0+(((-1.0)*x3279*x3283))+(((-1.0)*r02*x3282))+((r01*x3285)));
evalcond[3]=((((-1.0)*x3279*x3282))+(((-1.0)*x3278))+((r02*x3277))+((r01*x3284)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3280*x3282))+((r12*x3277))+((r11*x3284)));
evalcond[5]=((((-1.0)*r12*x3282))+(((-1.0)*x3280*x3283))+(((-1.0)*x3278))+((r11*x3285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3286 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3286.valid){
continue;
}
CheckValue<IkReal> x3287=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3286.value)+(((1.5707963267949)*(x3287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3288=IKcos(j4);
IkReal x3289=IKsin(j4);
IkReal x3290=((1.0)*cj0);
IkReal x3291=(cj5*r00);
IkReal x3292=(cj5*r10);
IkReal x3293=(cj5*r20);
IkReal x3294=((1.0)*x3288);
IkReal x3295=((1.0)*x3289);
IkReal x3296=(sj5*x3288);
IkReal x3297=(sj5*x3289);
evalcond[0]=((((-1.0)*x3293*x3294))+((r22*x3289))+((r21*x3296)));
evalcond[1]=((((-1.0)*r22*x3294))+(((-1.0)*x3293*x3295))+((r21*x3297)));
evalcond[2]=(((r01*x3297))+sj0+(((-1.0)*x3291*x3295))+(((-1.0)*r02*x3294)));
evalcond[3]=(((r01*x3296))+(((-1.0)*x3290))+((r02*x3289))+(((-1.0)*x3291*x3294)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3292*x3294))+((r11*x3296))+((r12*x3289)));
evalcond[5]=((((-1.0)*r12*x3294))+(((-1.0)*x3290))+(((-1.0)*x3292*x3295))+((r11*x3297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3298=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3298.valid){
continue;
}
CheckValue<IkReal> x3299 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3298.value)))+(x3299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3300=IKcos(j4);
IkReal x3301=IKsin(j4);
IkReal x3302=((1.0)*cj0);
IkReal x3303=(cj5*r00);
IkReal x3304=(cj5*r10);
IkReal x3305=(cj5*r20);
IkReal x3306=((1.0)*x3300);
IkReal x3307=((1.0)*x3301);
IkReal x3308=(sj5*x3300);
IkReal x3309=(sj5*x3301);
evalcond[0]=((((-1.0)*x3305*x3306))+((r21*x3308))+((r22*x3301)));
evalcond[1]=((((-1.0)*x3305*x3307))+((r21*x3309))+(((-1.0)*r22*x3306)));
evalcond[2]=(sj0+(((-1.0)*r02*x3306))+((r01*x3309))+(((-1.0)*x3303*x3307)));
evalcond[3]=(((r02*x3301))+(((-1.0)*x3302))+((r01*x3308))+(((-1.0)*x3303*x3306)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3304*x3306))+((r11*x3308))+((r12*x3301)));
evalcond[5]=((((-1.0)*x3304*x3307))+((r11*x3309))+(((-1.0)*x3302))+(((-1.0)*r12*x3306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3310=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3310;
j4eval[1]=IKsign(x3310);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3311=((1.0)*cj5);
IkReal x3312=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3311)));
j4eval[0]=x3312;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3311)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3313=cj5*cj5;
IkReal x3314=((1.0)*r20);
IkReal x3315=(r01*r21);
IkReal x3316=(r21*sj5);
IkReal x3317=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3316))+((x3313*x3315))+(((-1.0)*x3315))+(((-1.0)*r00*x3313*x3314)));
j4eval[0]=x3317;
j4eval[1]=((IKabs((((cj0*x3316))+(((-1.0)*cj0*cj5*x3314)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3318=cj5*cj5;
IkReal x3319=((1.0)*r20);
IkReal x3320=(r01*r21);
IkReal x3321=(r21*sj5);
CheckValue<IkReal> x3322=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3320))+(((-1.0)*r00*x3318*x3319))+(((-1.0)*r02*r22))+((cj5*r00*x3321))+((x3318*x3320)))),-1);
if(!x3322.valid){
continue;
}
CheckValue<IkReal> x3323 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3319))+((cj0*x3321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3322.value)))+(x3323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3324=IKcos(j4);
IkReal x3325=IKsin(j4);
IkReal x3326=(cj5*r00);
IkReal x3327=(cj5*r10);
IkReal x3328=(cj5*r20);
IkReal x3329=((1.0)*x3324);
IkReal x3330=((1.0)*x3325);
IkReal x3331=(sj5*x3324);
IkReal x3332=(sj5*x3325);
evalcond[0]=(((r22*x3325))+((r21*x3331))+(((-1.0)*x3328*x3329)));
evalcond[1]=(((r21*x3332))+(((-1.0)*r22*x3329))+(((-1.0)*x3328*x3330)));
evalcond[2]=((((-1.0)*x3326*x3329))+cj0+((r01*x3331))+((r02*x3325)));
evalcond[3]=(((r12*x3325))+(((-1.0)*x3327*x3329))+sj0+((r11*x3331)));
evalcond[4]=(sj0+(((-1.0)*r02*x3329))+((r01*x3332))+(((-1.0)*x3326*x3330)));
evalcond[5]=(((r11*x3332))+(((-1.0)*r12*x3329))+(((-1.0)*x3327*x3330))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3333=((1.0)*cj5);
CheckValue<IkReal> x3334=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3333)))),-1);
if(!x3334.valid){
continue;
}
CheckValue<IkReal> x3335 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3333)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3334.value)))+(x3335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3336=IKcos(j4);
IkReal x3337=IKsin(j4);
IkReal x3338=(cj5*r00);
IkReal x3339=(cj5*r10);
IkReal x3340=(cj5*r20);
IkReal x3341=((1.0)*x3336);
IkReal x3342=((1.0)*x3337);
IkReal x3343=(sj5*x3336);
IkReal x3344=(sj5*x3337);
evalcond[0]=((((-1.0)*x3340*x3341))+((r21*x3343))+((r22*x3337)));
evalcond[1]=((((-1.0)*x3340*x3342))+((r21*x3344))+(((-1.0)*r22*x3341)));
evalcond[2]=(cj0+((r02*x3337))+(((-1.0)*x3338*x3341))+((r01*x3343)));
evalcond[3]=(sj0+((r12*x3337))+(((-1.0)*x3339*x3341))+((r11*x3343)));
evalcond[4]=(sj0+(((-1.0)*x3338*x3342))+(((-1.0)*r02*x3341))+((r01*x3344)));
evalcond[5]=((((-1.0)*x3339*x3342))+(((-1.0)*r12*x3341))+((r11*x3344))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3345 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3345.valid){
continue;
}
CheckValue<IkReal> x3346=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3345.value)+(((1.5707963267949)*(x3346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3347=IKcos(j4);
IkReal x3348=IKsin(j4);
IkReal x3349=(cj5*r00);
IkReal x3350=(cj5*r10);
IkReal x3351=(cj5*r20);
IkReal x3352=((1.0)*x3347);
IkReal x3353=((1.0)*x3348);
IkReal x3354=(sj5*x3347);
IkReal x3355=(sj5*x3348);
evalcond[0]=(((r22*x3348))+(((-1.0)*x3351*x3352))+((r21*x3354)));
evalcond[1]=((((-1.0)*x3351*x3353))+((r21*x3355))+(((-1.0)*r22*x3352)));
evalcond[2]=(cj0+(((-1.0)*x3349*x3352))+((r01*x3354))+((r02*x3348)));
evalcond[3]=(sj0+((r11*x3354))+(((-1.0)*x3350*x3352))+((r12*x3348)));
evalcond[4]=(sj0+(((-1.0)*x3349*x3353))+(((-1.0)*r02*x3352))+((r01*x3355)));
evalcond[5]=(((r11*x3355))+(((-1.0)*x3350*x3353))+(((-1.0)*r12*x3352))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3356=(r00*sj5);
IkReal x3357=(cj5*r01);
IkReal x3358=(sj1*sj2);
IkReal x3359=(cj1*cj2);
IkReal x3360=((20000.0)*px);
IkReal x3361=((8500.0)*cj1);
IkReal x3362=((9738.0)*x3359);
CheckValue<IkReal> x3363=IKPowWithIntegerCheck(((((-2183.0)*x3358))+(((2183.0)*x3359))),-1);
if(!x3363.valid){
continue;
}
CheckValue<IkReal> x3364=IKPowWithIntegerCheck((x3359+(((-1.0)*x3358))),-1);
if(!x3364.valid){
continue;
}
if( IKabs(((x3363.value)*((((x3356*x3362))+((x3356*x3361))+(((-9738.0)*x3357*x3358))+((x3357*x3361))+((x3357*x3362))+((x3359*x3360))+(((-9738.0)*x3356*x3358))+(((-1.0)*x3358*x3360)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3364.value)*((x3357+x3356)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3363.value)*((((x3356*x3362))+((x3356*x3361))+(((-9738.0)*x3357*x3358))+((x3357*x3361))+((x3357*x3362))+((x3359*x3360))+(((-9738.0)*x3356*x3358))+(((-1.0)*x3358*x3360))))))+IKsqr(((x3364.value)*((x3357+x3356))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3363.value)*((((x3356*x3362))+((x3356*x3361))+(((-9738.0)*x3357*x3358))+((x3357*x3361))+((x3357*x3362))+((x3359*x3360))+(((-9738.0)*x3356*x3358))+(((-1.0)*x3358*x3360))))), ((x3364.value)*((x3357+x3356))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3365=IKcos(j0);
IkReal x3366=IKsin(j0);
IkReal x3367=(cj1*cj2);
IkReal x3368=(cj5*r11);
IkReal x3369=(sj1*sj2);
IkReal x3370=(cj5*r01);
IkReal x3371=((1.0)*sj5);
IkReal x3372=((0.09465)*sj5);
IkReal x3373=((0.425)*cj1);
IkReal x3374=((0.39225)*x3365);
IkReal x3375=(x3366*x3369);
evalcond[0]=((((-1.0)*x3370))+((x3365*x3367))+(((-1.0)*r00*x3371))+(((-1.0)*x3365*x3369)));
evalcond[1]=((((-1.0)*x3375))+(((-1.0)*r10*x3371))+(((-1.0)*x3368))+((x3366*x3367)));
evalcond[2]=((((0.10915)*x3366))+(((-1.0)*x3367*x3374))+(((-1.0)*x3365*x3373))+(((-1.0)*px))+((x3369*x3374))+(((-1.0)*r00*x3372))+(((-0.09465)*x3370)));
evalcond[3]=((((-1.0)*x3366*x3373))+(((-1.0)*r10*x3372))+(((0.39225)*x3375))+(((-1.0)*py))+(((-0.10915)*x3365))+(((-0.09465)*x3368))+(((-0.39225)*x3366*x3367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3376=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3376;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3377=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3377;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3378=((1.0)*cj5);
IkReal x3379=((((-1.0)*r21*x3378))+(((-1.0)*r20*sj5)));
j4eval[0]=x3379;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x3378))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x3378))))));
j4eval[2]=IKsign(x3379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3380=((-1.0)*r20);
IkReal x3382 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3382)==0){
continue;
}
IkReal x3381=pow(x3382,-0.5);
CheckValue<IkReal> x3383 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3380),IKFAST_ATAN2_MAGTHRESH);
if(!x3383.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3383.value));
IkReal gconst97=(r21*x3381);
IkReal gconst98=(x3380*x3381);
CheckValue<IkReal> x3384 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3384.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3384.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3385=((-1.0)*r20);
IkReal x3386=x3381;
CheckValue<IkReal> x3388 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3385),IKFAST_ATAN2_MAGTHRESH);
if(!x3388.valid){
continue;
}
IkReal x3387=((-1.0)*(x3388.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3387;
IkReal gconst96=x3387;
IkReal gconst97=(r21*x3386);
IkReal gconst98=(x3385*x3386);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3389=((-1.0)*r20);
IkReal x3390=x3381;
CheckValue<IkReal> x3392 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3389),IKFAST_ATAN2_MAGTHRESH);
if(!x3392.valid){
continue;
}
IkReal x3391=((-1.0)*(x3392.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3391;
IkReal gconst96=x3391;
IkReal gconst97=(r21*x3390);
IkReal gconst98=(x3389*x3390);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3393=((-1.0)*r20);
IkReal x3394=x3381;
CheckValue<IkReal> x3396 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3393),IKFAST_ATAN2_MAGTHRESH);
if(!x3396.valid){
continue;
}
IkReal x3395=((-1.0)*(x3396.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3395;
IkReal gconst96=x3395;
IkReal gconst97=(r21*x3394);
IkReal gconst98=(x3393*x3394);
IkReal x3397=((1.0)*(r22*r22));
CheckValue<IkReal> x3401=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3397))),-1);
if(!x3401.valid){
continue;
}
IkReal x3398=x3401.value;
IkReal x3399=((1.0)*x3398);
IkReal x3400=((((-1.0)*x3399*(r21*r21*r21*r21)))+(((-1.0)*x3397))+(((-1.0)*x3399*(r20*r20*r20*r20)))+(((-2.0)*x3398*(r20*r20)*(r21*r21))));
j4eval[0]=x3400;
j4eval[1]=IKsign(x3400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3402=(cj1*cj2);
IkReal x3403=(gconst98*r20);
IkReal x3404=(sj1*sj2);
IkReal x3405=(gconst97*r21);
CheckValue<IkReal> x3406 = IKatan2WithCheck(IkReal((((r22*x3404))+(((-1.0)*r22*x3402)))),IkReal(((((-1.0)*x3402*x3405))+(((-1.0)*x3403*x3404))+((x3404*x3405))+((x3402*x3403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3406.valid){
continue;
}
CheckValue<IkReal> x3407=IKPowWithIntegerCheck(IKsign(((((2.0)*x3403*x3405))+(((-1.0)*(x3405*x3405)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3403*x3403))))),-1);
if(!x3407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3406.value)+(((1.5707963267949)*(x3407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3408=IKsin(j4);
IkReal x3409=IKcos(j4);
IkReal x3410=(gconst98*r10);
IkReal x3411=(gconst97*r21);
IkReal x3412=(cj2*sj1);
IkReal x3413=(gconst98*r20);
IkReal x3414=(gconst98*r00);
IkReal x3415=(cj1*sj2);
IkReal x3416=((1.0)*x3409);
IkReal x3417=((1.0)*x3408);
IkReal x3418=(gconst97*x3408);
IkReal x3419=(gconst97*x3409);
evalcond[0]=((((-1.0)*r22*x3416))+((x3408*x3411))+(((-1.0)*x3413*x3417)));
evalcond[1]=(sj0+(((-1.0)*x3414*x3417))+(((-1.0)*r02*x3416))+((r01*x3418)));
evalcond[2]=(((r11*x3418))+(((-1.0)*r12*x3416))+(((-1.0)*x3410*x3417))+(((-1.0)*cj0)));
evalcond[3]=(((x3409*x3411))+((r22*x3408))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3413*x3416)));
evalcond[4]=(((r02*x3408))+(((-1.0)*x3414*x3416))+((cj0*x3412))+((cj0*x3415))+((r01*x3419)));
evalcond[5]=(((sj0*x3412))+((sj0*x3415))+((r11*x3419))+((r12*x3408))+(((-1.0)*x3410*x3416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3420 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3420.valid){
continue;
}
CheckValue<IkReal> x3421=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3420.value)+(((1.5707963267949)*(x3421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3422=IKsin(j4);
IkReal x3423=IKcos(j4);
IkReal x3424=(gconst98*r10);
IkReal x3425=(gconst97*r21);
IkReal x3426=(cj2*sj1);
IkReal x3427=(gconst98*r20);
IkReal x3428=(gconst98*r00);
IkReal x3429=(cj1*sj2);
IkReal x3430=((1.0)*x3423);
IkReal x3431=((1.0)*x3422);
IkReal x3432=(gconst97*x3422);
IkReal x3433=(gconst97*x3423);
evalcond[0]=((((-1.0)*x3427*x3431))+((x3422*x3425))+(((-1.0)*r22*x3430)));
evalcond[1]=((((-1.0)*x3428*x3431))+((r01*x3432))+sj0+(((-1.0)*r02*x3430)));
evalcond[2]=((((-1.0)*r12*x3430))+(((-1.0)*x3424*x3431))+((r11*x3432))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3427*x3430))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3422))+((x3423*x3425)));
evalcond[4]=((((-1.0)*x3428*x3430))+((r01*x3433))+((r02*x3422))+((cj0*x3429))+((cj0*x3426)));
evalcond[5]=((((-1.0)*x3424*x3430))+((sj0*x3426))+((sj0*x3429))+((r12*x3422))+((r11*x3433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3434 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3434.valid){
continue;
}
CheckValue<IkReal> x3435=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3434.value)+(((1.5707963267949)*(x3435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3436=IKsin(j4);
IkReal x3437=IKcos(j4);
IkReal x3438=(gconst98*r10);
IkReal x3439=(gconst97*r21);
IkReal x3440=(cj2*sj1);
IkReal x3441=(gconst98*r20);
IkReal x3442=(gconst98*r00);
IkReal x3443=(cj1*sj2);
IkReal x3444=((1.0)*x3437);
IkReal x3445=((1.0)*x3436);
IkReal x3446=(gconst97*x3436);
IkReal x3447=(gconst97*x3437);
evalcond[0]=((((-1.0)*x3441*x3445))+((x3436*x3439))+(((-1.0)*r22*x3444)));
evalcond[1]=(sj0+(((-1.0)*r02*x3444))+(((-1.0)*x3442*x3445))+((r01*x3446)));
evalcond[2]=(((r11*x3446))+(((-1.0)*x3438*x3445))+(((-1.0)*r12*x3444))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3441*x3444))+((x3437*x3439))+((r22*x3436)));
evalcond[4]=((((-1.0)*x3442*x3444))+((cj0*x3443))+((cj0*x3440))+((r01*x3447))+((r02*x3436)));
evalcond[5]=(((r11*x3447))+((sj0*x3443))+((sj0*x3440))+(((-1.0)*x3438*x3444))+((r12*x3436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3448=((-1.0)*r21);
IkReal x3450 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3450)==0){
continue;
}
IkReal x3449=pow(x3450,-0.5);
CheckValue<IkReal> x3451 = IKatan2WithCheck(IkReal(x3448),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3451.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3451.value))));
IkReal gconst100=(x3448*x3449);
IkReal gconst101=((1.0)*r20*x3449);
CheckValue<IkReal> x3452 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3452.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3452.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3453=((-1.0)*r21);
CheckValue<IkReal> x3456 = IKatan2WithCheck(IkReal(x3453),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3456.valid){
continue;
}
IkReal x3454=((1.0)*(x3456.value));
IkReal x3455=x3449;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3454)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3454)));
IkReal gconst100=(x3453*x3455);
IkReal gconst101=((1.0)*r20*x3455);
IkReal x3457=r22*r22;
IkReal x3458=((1.0)*x3457);
CheckValue<IkReal> x3462=IKPowWithIntegerCheck(((-1.0)+x3457),-1);
if(!x3462.valid){
continue;
}
IkReal x3459=x3462.value;
if((((1.0)+(((-1.0)*x3458)))) < -0.00001)
continue;
IkReal x3460=IKsqrt(((1.0)+(((-1.0)*x3458))));
IkReal x3461=(sj0*x3459*x3460);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3458*x3461))+x3461))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3463=((-1.0)*r21);
CheckValue<IkReal> x3466 = IKatan2WithCheck(IkReal(x3463),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3466.valid){
continue;
}
IkReal x3464=((1.0)*(x3466.value));
IkReal x3465=x3449;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3464)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3464)));
IkReal gconst100=(x3463*x3465);
IkReal gconst101=((1.0)*r20*x3465);
IkReal x3467=r22*r22;
IkReal x3468=((1.0)*x3467);
CheckValue<IkReal> x3472=IKPowWithIntegerCheck(((-1.0)+x3467),-1);
if(!x3472.valid){
continue;
}
IkReal x3469=x3472.value;
if((((1.0)+(((-1.0)*x3468)))) < -0.00001)
continue;
IkReal x3470=IKsqrt(((1.0)+(((-1.0)*x3468))));
IkReal x3471=(cj0*x3469*x3470);
j4eval[0]=((IKabs((x3471+(((-1.0)*x3468*x3471)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3473=((-1.0)*r21);
CheckValue<IkReal> x3476 = IKatan2WithCheck(IkReal(x3473),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3476.valid){
continue;
}
IkReal x3474=((1.0)*(x3476.value));
IkReal x3475=x3449;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3474)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3474)));
IkReal gconst100=(x3473*x3475);
IkReal gconst101=((1.0)*r20*x3475);
IkReal x3477=r22*r22;
IkReal x3478=(cj0*r02);
IkReal x3479=(r12*sj0);
CheckValue<IkReal> x3483=IKPowWithIntegerCheck(((-1.0)+x3477),-1);
if(!x3483.valid){
continue;
}
IkReal x3480=x3483.value;
if((((1.0)+(((-1.0)*x3477)))) < -0.00001)
continue;
IkReal x3481=IKsqrt(((1.0)+(((-1.0)*x3477))));
IkReal x3482=((1.0)*r22*x3480*x3481);
j4eval[0]=0;
j4eval[1]=((IKabs((x3478+x3479)))+(IKabs(((((-1.0)*x3479*x3482))+(((-1.0)*x3478*x3482))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3484=((1.0)*gconst101);
CheckValue<IkReal> x3485 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x3484))+((cj0*gconst100*r01))+((gconst100*r11*sj0))+(((-1.0)*cj0*r00*x3484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3485.valid){
continue;
}
CheckValue<IkReal> x3486=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x3484)))),-1);
if(!x3486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3485.value)+(((1.5707963267949)*(x3486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3487=IKsin(j4);
IkReal x3488=IKcos(j4);
IkReal x3489=(cj2*sj1);
IkReal x3490=(gconst101*r20);
IkReal x3491=(gconst101*r10);
IkReal x3492=(gconst101*r00);
IkReal x3493=(cj1*sj2);
IkReal x3494=((1.0)*x3488);
IkReal x3495=((1.0)*x3487);
IkReal x3496=(gconst100*x3487);
IkReal x3497=(gconst100*x3488);
evalcond[0]=((((-1.0)*r22*x3494))+(((-1.0)*x3490*x3495))+((r21*x3496)));
evalcond[1]=((((-1.0)*r02*x3494))+sj0+((r01*x3496))+(((-1.0)*x3492*x3495)));
evalcond[2]=((((-1.0)*r12*x3494))+((r11*x3496))+(((-1.0)*x3491*x3495))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3490*x3494))+((r21*x3497))+((r22*x3487)));
evalcond[4]=(((cj0*x3493))+((r01*x3497))+((cj0*x3489))+(((-1.0)*x3492*x3494))+((r02*x3487)));
evalcond[5]=(((r12*x3487))+((sj0*x3489))+((r11*x3497))+((sj0*x3493))+(((-1.0)*x3491*x3494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3498 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3498.valid){
continue;
}
CheckValue<IkReal> x3499=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3498.value)+(((1.5707963267949)*(x3499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3500=IKsin(j4);
IkReal x3501=IKcos(j4);
IkReal x3502=(cj2*sj1);
IkReal x3503=(gconst101*r20);
IkReal x3504=(gconst101*r10);
IkReal x3505=(gconst101*r00);
IkReal x3506=(cj1*sj2);
IkReal x3507=((1.0)*x3501);
IkReal x3508=((1.0)*x3500);
IkReal x3509=(gconst100*x3500);
IkReal x3510=(gconst100*x3501);
evalcond[0]=((((-1.0)*r22*x3507))+(((-1.0)*x3503*x3508))+((r21*x3509)));
evalcond[1]=(((r01*x3509))+sj0+(((-1.0)*x3505*x3508))+(((-1.0)*r02*x3507)));
evalcond[2]=((((-1.0)*r12*x3507))+((r11*x3509))+(((-1.0)*x3504*x3508))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3510))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3500))+(((-1.0)*x3503*x3507)));
evalcond[4]=(((cj0*x3502))+((cj0*x3506))+((r01*x3510))+((r02*x3500))+(((-1.0)*x3505*x3507)));
evalcond[5]=(((r12*x3500))+((r11*x3510))+((sj0*x3502))+((sj0*x3506))+(((-1.0)*x3504*x3507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3511=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3511.valid){
continue;
}
CheckValue<IkReal> x3512 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3511.value)))+(x3512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3513=IKsin(j4);
IkReal x3514=IKcos(j4);
IkReal x3515=(cj2*sj1);
IkReal x3516=(gconst101*r20);
IkReal x3517=(gconst101*r10);
IkReal x3518=(gconst101*r00);
IkReal x3519=(cj1*sj2);
IkReal x3520=((1.0)*x3514);
IkReal x3521=((1.0)*x3513);
IkReal x3522=(gconst100*x3513);
IkReal x3523=(gconst100*x3514);
evalcond[0]=(((r21*x3522))+(((-1.0)*r22*x3520))+(((-1.0)*x3516*x3521)));
evalcond[1]=((((-1.0)*r02*x3520))+sj0+((r01*x3522))+(((-1.0)*x3518*x3521)));
evalcond[2]=((((-1.0)*x3517*x3521))+((r11*x3522))+(((-1.0)*r12*x3520))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3523))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3513))+(((-1.0)*x3516*x3520)));
evalcond[4]=(((r01*x3523))+((cj0*x3515))+((cj0*x3519))+((r02*x3513))+(((-1.0)*x3518*x3520)));
evalcond[5]=((((-1.0)*x3517*x3520))+((r11*x3523))+((r12*x3513))+((sj0*x3519))+((sj0*x3515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3525 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3525)==0){
continue;
}
IkReal x3524=pow(x3525,-0.5);
CheckValue<IkReal> x3526 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3526.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3526.value));
IkReal gconst103=((-1.0)*r01*x3524);
IkReal gconst104=(r00*x3524);
CheckValue<IkReal> x3527 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3527.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3527.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3530 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3530.valid){
continue;
}
IkReal x3528=((-1.0)*(x3530.value));
IkReal x3529=x3524;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3528;
IkReal gconst102=x3528;
IkReal gconst103=((-1.0)*r01*x3529);
IkReal gconst104=(r00*x3529);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3531=((1.0)*gconst104);
CheckValue<IkReal> x3532 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst103*r01))+(((-1.0)*cj0*r00*x3531))+((gconst103*r11*sj0))+(((-1.0)*r10*sj0*x3531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3532.valid){
continue;
}
CheckValue<IkReal> x3533=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x3531)))),-1);
if(!x3533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3532.value)+(((1.5707963267949)*(x3533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3534=IKsin(j4);
IkReal x3535=IKcos(j4);
IkReal x3536=(gconst103*r11);
IkReal x3537=(cj2*sj1);
IkReal x3538=(gconst104*r10);
IkReal x3539=(gconst104*r20);
IkReal x3540=(gconst104*r00);
IkReal x3541=(cj1*sj2);
IkReal x3542=((1.0)*x3535);
IkReal x3543=(gconst103*x3535);
IkReal x3544=(gconst103*x3534);
IkReal x3545=((1.0)*x3534);
evalcond[0]=((((-1.0)*x3539*x3545))+((r21*x3544))+(((-1.0)*r22*x3542)));
evalcond[1]=((((-1.0)*r02*x3542))+sj0+((r01*x3544))+(((-1.0)*x3540*x3545)));
evalcond[2]=(((x3534*x3536))+(((-1.0)*x3538*x3545))+(((-1.0)*r12*x3542))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3539*x3542))+((r22*x3534))+((r21*x3543))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r02*x3534))+((r01*x3543))+((cj0*x3541))+((cj0*x3537))+(((-1.0)*x3540*x3542)));
evalcond[5]=(((x3535*x3536))+((r12*x3534))+((sj0*x3537))+((sj0*x3541))+(((-1.0)*x3538*x3542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
CheckValue<IkReal> x3547=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x3547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3546.value)+(((1.5707963267949)*(x3547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3548=IKsin(j4);
IkReal x3549=IKcos(j4);
IkReal x3550=(gconst103*r11);
IkReal x3551=(cj2*sj1);
IkReal x3552=(gconst104*r10);
IkReal x3553=(gconst104*r20);
IkReal x3554=(gconst104*r00);
IkReal x3555=(cj1*sj2);
IkReal x3556=((1.0)*x3549);
IkReal x3557=(gconst103*x3549);
IkReal x3558=(gconst103*x3548);
IkReal x3559=((1.0)*x3548);
evalcond[0]=(((r21*x3558))+(((-1.0)*x3553*x3559))+(((-1.0)*r22*x3556)));
evalcond[1]=(sj0+(((-1.0)*x3554*x3559))+((r01*x3558))+(((-1.0)*r02*x3556)));
evalcond[2]=(((x3548*x3550))+(((-1.0)*r12*x3556))+(((-1.0)*x3552*x3559))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3557))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3553*x3556))+((r22*x3548)));
evalcond[4]=(((r02*x3548))+(((-1.0)*x3554*x3556))+((r01*x3557))+((cj0*x3555))+((cj0*x3551)));
evalcond[5]=(((sj0*x3555))+((sj0*x3551))+((r12*x3548))+(((-1.0)*x3552*x3556))+((x3549*x3550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3561 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3561)==0){
continue;
}
IkReal x3560=pow(x3561,-0.5);
CheckValue<IkReal> x3562 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3562.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3562.value))));
IkReal gconst106=((1.0)*r01*x3560);
IkReal gconst107=((-1.0)*r00*x3560);
CheckValue<IkReal> x3563 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3563.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3563.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3566 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3566.valid){
continue;
}
IkReal x3564=((1.0)*(x3566.value));
IkReal x3565=x3560;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3564)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3564)));
IkReal gconst106=((1.0)*r01*x3565);
IkReal gconst107=((-1.0)*r00*x3565);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3569 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3569.valid){
continue;
}
IkReal x3567=((1.0)*(x3569.value));
IkReal x3568=x3560;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3567)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3567)));
IkReal gconst106=((1.0)*r01*x3568);
IkReal gconst107=((-1.0)*r00*x3568);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3572 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3572.valid){
continue;
}
IkReal x3570=((1.0)*(x3572.value));
IkReal x3571=x3560;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3570)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3570)));
IkReal gconst106=((1.0)*r01*x3571);
IkReal gconst107=((-1.0)*r00*x3571);
IkReal x3573=r02*r02;
IkReal x3574=(r12*sj0);
IkReal x3575=x3560;
IkReal x3576=(cj0*x3575);
j4eval[0]=((IKabs((((x3573*x3576))+((r02*x3574*x3575))+(((-1.0)*x3576)))))+(IKabs((x3574+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3577=((1.0)*gconst107);
CheckValue<IkReal> x3578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3577))+(((-1.0)*gconst106*r20)))),-1);
if(!x3578.valid){
continue;
}
CheckValue<IkReal> x3579 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3577))+((cj0*gconst106*r01))+(((-1.0)*r10*sj0*x3577))+((gconst106*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3578.value)))+(x3579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3580=IKsin(j4);
IkReal x3581=IKcos(j4);
IkReal x3582=(gconst107*r10);
IkReal x3583=(gconst107*r00);
IkReal x3584=(gconst107*r20);
IkReal x3585=(cj2*sj1);
IkReal x3586=(cj1*sj2);
IkReal x3587=((1.0)*x3581);
IkReal x3588=(gconst106*x3581);
IkReal x3589=(gconst106*x3580);
IkReal x3590=((1.0)*x3580);
evalcond[0]=((((-1.0)*r22*x3587))+(((-1.0)*x3584*x3590))+((r21*x3589)));
evalcond[1]=(sj0+(((-1.0)*r02*x3587))+((r01*x3589))+(((-1.0)*x3583*x3590)));
evalcond[2]=((((-1.0)*x3582*x3590))+((r11*x3589))+(((-1.0)*r12*x3587))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3584*x3587))+((r22*x3580))+((r21*x3588)));
evalcond[4]=(((r02*x3580))+((r01*x3588))+(((-1.0)*x3583*x3587))+((cj0*x3586))+((cj0*x3585)));
evalcond[5]=(((r12*x3580))+((r11*x3588))+(((-1.0)*x3582*x3587))+((sj0*x3586))+((sj0*x3585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3591 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3591.valid){
continue;
}
CheckValue<IkReal> x3592=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3591.value)+(((1.5707963267949)*(x3592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3593=IKsin(j4);
IkReal x3594=IKcos(j4);
IkReal x3595=(gconst107*r10);
IkReal x3596=(gconst107*r00);
IkReal x3597=(gconst107*r20);
IkReal x3598=(cj2*sj1);
IkReal x3599=(cj1*sj2);
IkReal x3600=((1.0)*x3594);
IkReal x3601=(gconst106*x3594);
IkReal x3602=(gconst106*x3593);
IkReal x3603=((1.0)*x3593);
evalcond[0]=(((r21*x3602))+(((-1.0)*r22*x3600))+(((-1.0)*x3597*x3603)));
evalcond[1]=(sj0+(((-1.0)*r02*x3600))+((r01*x3602))+(((-1.0)*x3596*x3603)));
evalcond[2]=(((r11*x3602))+(((-1.0)*r12*x3600))+(((-1.0)*x3595*x3603))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x3601))+((r22*x3593))+(((-1.0)*x3597*x3600)));
evalcond[4]=(((r02*x3593))+((r01*x3601))+(((-1.0)*x3596*x3600))+((cj0*x3599))+((cj0*x3598)));
evalcond[5]=(((sj0*x3599))+((sj0*x3598))+((r11*x3601))+((r12*x3593))+(((-1.0)*x3595*x3600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3604=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3604.valid){
continue;
}
CheckValue<IkReal> x3605 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3604.value)))+(x3605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3606=IKsin(j4);
IkReal x3607=IKcos(j4);
IkReal x3608=(gconst107*r10);
IkReal x3609=(gconst107*r00);
IkReal x3610=(gconst107*r20);
IkReal x3611=(cj2*sj1);
IkReal x3612=(cj1*sj2);
IkReal x3613=((1.0)*x3607);
IkReal x3614=(gconst106*x3607);
IkReal x3615=(gconst106*x3606);
IkReal x3616=((1.0)*x3606);
evalcond[0]=(((r21*x3615))+(((-1.0)*r22*x3613))+(((-1.0)*x3610*x3616)));
evalcond[1]=(sj0+(((-1.0)*r02*x3613))+((r01*x3615))+(((-1.0)*x3609*x3616)));
evalcond[2]=(((r11*x3615))+(((-1.0)*r12*x3613))+(((-1.0)*x3608*x3616))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((r22*x3606))+((sj1*sj2))+((r21*x3614))+(((-1.0)*x3610*x3613)));
evalcond[4]=(((r02*x3606))+((r01*x3614))+(((-1.0)*x3609*x3613))+((cj0*x3612))+((cj0*x3611)));
evalcond[5]=(((r11*x3614))+(((-1.0)*x3608*x3613))+((sj0*x3612))+((sj0*x3611))+((r12*x3606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3617=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3617;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3617);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3618=((1.0)*cj5);
IkReal x3619=((((-1.0)*r21*x3618))+(((-1.0)*r20*sj5)));
j4eval[0]=x3619;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3618))+((r11*sj5))))));
j4eval[2]=IKsign(x3619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3620=cj5*cj5;
IkReal x3621=r01*r01;
IkReal x3622=(r01*sj5);
IkReal x3623=(cj5*r00);
IkReal x3624=((((-1.0)*(r02*r02)))+((x3620*x3621))+(((2.0)*x3622*x3623))+(((-1.0)*x3620*(r00*r00)))+(((-1.0)*x3621)));
j4eval[0]=x3624;
j4eval[1]=IKsign(x3624);
j4eval[2]=((IKabs(r02))+(IKabs((x3622+(((-1.0)*x3623))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3625=cj5*cj5;
IkReal x3626=r01*r01;
IkReal x3627=(r01*sj5);
IkReal x3628=(cj5*r00);
CheckValue<IkReal> x3629=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3625*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x3627*x3628))+((x3625*x3626))+(((-1.0)*x3626)))),-1);
if(!x3629.valid){
continue;
}
CheckValue<IkReal> x3630 = IKatan2WithCheck(IkReal((x3627+(((-1.0)*x3628)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3629.value)))+(x3630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3631=IKcos(j4);
IkReal x3632=IKsin(j4);
IkReal x3633=(cj5*r00);
IkReal x3634=(cj5*r10);
IkReal x3635=(r21*sj5);
IkReal x3636=(cj5*r20);
IkReal x3637=((1.0)*x3631);
IkReal x3638=((1.0)*x3632);
IkReal x3639=(sj5*x3632);
IkReal x3640=(sj5*x3631);
evalcond[0]=(((r02*x3632))+((r01*x3640))+(((-1.0)*x3633*x3637)));
evalcond[1]=(((x3632*x3635))+(((-1.0)*r22*x3637))+(((-1.0)*x3636*x3638)));
evalcond[2]=(((r11*x3639))+(((-1.0)*x3634*x3638))+(((-1.0)*r12*x3637)));
evalcond[3]=((1.0)+(((-1.0)*x3633*x3638))+(((-1.0)*r02*x3637))+((r01*x3639)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3634*x3637))+((r12*x3632))+((r11*x3640))+((cj1*sj2)));
evalcond[5]=(((r22*x3632))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3631*x3635))+(((-1.0)*x3636*x3637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3641=((1.0)*cj5);
CheckValue<IkReal> x3642 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3642.valid){
continue;
}
CheckValue<IkReal> x3643=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3641))+(((-1.0)*r20*sj5)))),-1);
if(!x3643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3642.value)+(((1.5707963267949)*(x3643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3644=IKcos(j4);
IkReal x3645=IKsin(j4);
IkReal x3646=(cj5*r00);
IkReal x3647=(cj5*r10);
IkReal x3648=(r21*sj5);
IkReal x3649=(cj5*r20);
IkReal x3650=((1.0)*x3644);
IkReal x3651=((1.0)*x3645);
IkReal x3652=(sj5*x3645);
IkReal x3653=(sj5*x3644);
evalcond[0]=((((-1.0)*x3646*x3650))+((r02*x3645))+((r01*x3653)));
evalcond[1]=((((-1.0)*x3649*x3651))+(((-1.0)*r22*x3650))+((x3645*x3648)));
evalcond[2]=(((r11*x3652))+(((-1.0)*r12*x3650))+(((-1.0)*x3647*x3651)));
evalcond[3]=((1.0)+(((-1.0)*x3646*x3651))+(((-1.0)*r02*x3650))+((r01*x3652)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x3645))+((r11*x3653))+(((-1.0)*x3647*x3650)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3649*x3650))+((r22*x3645))+((x3644*x3648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3654 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3654.valid){
continue;
}
CheckValue<IkReal> x3655=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3654.value)+(((1.5707963267949)*(x3655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3656=IKcos(j4);
IkReal x3657=IKsin(j4);
IkReal x3658=(cj5*r00);
IkReal x3659=(cj5*r10);
IkReal x3660=(r21*sj5);
IkReal x3661=(cj5*r20);
IkReal x3662=((1.0)*x3656);
IkReal x3663=((1.0)*x3657);
IkReal x3664=(sj5*x3657);
IkReal x3665=(sj5*x3656);
evalcond[0]=(((r01*x3665))+(((-1.0)*x3658*x3662))+((r02*x3657)));
evalcond[1]=((((-1.0)*x3661*x3663))+((x3657*x3660))+(((-1.0)*r22*x3662)));
evalcond[2]=(((r11*x3664))+(((-1.0)*x3659*x3663))+(((-1.0)*r12*x3662)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3662))+((r01*x3664))+(((-1.0)*x3658*x3663)));
evalcond[4]=(((cj2*sj1))+((r12*x3657))+((cj1*sj2))+((r11*x3665))+(((-1.0)*x3659*x3662)));
evalcond[5]=(((x3656*x3660))+(((-1.0)*x3661*x3662))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3666=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3666;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3667=((1.0)*cj5);
IkReal x3668=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3667)));
j4eval[0]=x3668;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3667))))));
j4eval[2]=IKsign(x3668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3669=cj5*cj5;
IkReal x3670=r01*r01;
IkReal x3671=(cj5*r00);
IkReal x3672=(r01*sj5);
IkReal x3673=((((-2.0)*x3671*x3672))+((x3669*(r00*r00)))+x3670+(((-1.0)*x3669*x3670))+(r02*r02));
j4eval[0]=x3673;
j4eval[1]=IKsign(x3673);
j4eval[2]=((IKabs(r02))+(IKabs((x3672+(((-1.0)*x3671))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3674=cj5*cj5;
IkReal x3675=r01*r01;
IkReal x3676=(r01*sj5);
IkReal x3677=(cj5*r00);
CheckValue<IkReal> x3678 = IKatan2WithCheck(IkReal((x3676+(((-1.0)*x3677)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3678.valid){
continue;
}
CheckValue<IkReal> x3679=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3676*x3677))+x3675+((x3674*(r00*r00)))+(r02*r02)+(((-1.0)*x3674*x3675)))),-1);
if(!x3679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3678.value)+(((1.5707963267949)*(x3679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3680=IKcos(j4);
IkReal x3681=IKsin(j4);
IkReal x3682=(cj5*r00);
IkReal x3683=(cj5*r10);
IkReal x3684=(r21*sj5);
IkReal x3685=((1.0)*cj2);
IkReal x3686=(cj5*r20);
IkReal x3687=((1.0)*x3680);
IkReal x3688=((1.0)*x3681);
IkReal x3689=(sj5*x3681);
IkReal x3690=(sj5*x3680);
evalcond[0]=(((r01*x3690))+(((-1.0)*x3682*x3687))+((r02*x3681)));
evalcond[1]=((((-1.0)*r22*x3687))+((x3681*x3684))+(((-1.0)*x3686*x3688)));
evalcond[2]=((((-1.0)*x3683*x3688))+(((-1.0)*r12*x3687))+((r11*x3689)));
evalcond[3]=((-1.0)+((r01*x3689))+(((-1.0)*x3682*x3688))+(((-1.0)*r02*x3687)));
evalcond[4]=(((x3680*x3684))+((sj1*sj2))+(((-1.0)*cj1*x3685))+(((-1.0)*x3686*x3687))+((r22*x3681)));
evalcond[5]=((((-1.0)*x3683*x3687))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3685))+((r12*x3681))+((r11*x3690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3691=((1.0)*cj5);
CheckValue<IkReal> x3692 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3691))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3692.valid){
continue;
}
CheckValue<IkReal> x3693=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3691)))),-1);
if(!x3693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3692.value)+(((1.5707963267949)*(x3693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3694=IKcos(j4);
IkReal x3695=IKsin(j4);
IkReal x3696=(cj5*r00);
IkReal x3697=(cj5*r10);
IkReal x3698=(r21*sj5);
IkReal x3699=((1.0)*cj2);
IkReal x3700=(cj5*r20);
IkReal x3701=((1.0)*x3694);
IkReal x3702=((1.0)*x3695);
IkReal x3703=(sj5*x3695);
IkReal x3704=(sj5*x3694);
evalcond[0]=(((r01*x3704))+((r02*x3695))+(((-1.0)*x3696*x3701)));
evalcond[1]=(((x3695*x3698))+(((-1.0)*x3700*x3702))+(((-1.0)*r22*x3701)));
evalcond[2]=((((-1.0)*x3697*x3702))+((r11*x3703))+(((-1.0)*r12*x3701)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3701))+((r01*x3703))+(((-1.0)*x3696*x3702)));
evalcond[4]=((((-1.0)*x3700*x3701))+(((-1.0)*cj1*x3699))+((sj1*sj2))+((x3694*x3698))+((r22*x3695)));
evalcond[5]=((((-1.0)*sj1*x3699))+(((-1.0)*x3697*x3701))+((r11*x3704))+(((-1.0)*cj1*sj2))+((r12*x3695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3705=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3705.valid){
continue;
}
CheckValue<IkReal> x3706 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3705.value)))+(x3706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3707=IKcos(j4);
IkReal x3708=IKsin(j4);
IkReal x3709=(cj5*r00);
IkReal x3710=(cj5*r10);
IkReal x3711=(r21*sj5);
IkReal x3712=((1.0)*cj2);
IkReal x3713=(cj5*r20);
IkReal x3714=((1.0)*x3707);
IkReal x3715=((1.0)*x3708);
IkReal x3716=(sj5*x3708);
IkReal x3717=(sj5*x3707);
evalcond[0]=(((r01*x3717))+(((-1.0)*x3709*x3714))+((r02*x3708)));
evalcond[1]=((((-1.0)*x3713*x3715))+((x3708*x3711))+(((-1.0)*r22*x3714)));
evalcond[2]=(((r11*x3716))+(((-1.0)*x3710*x3715))+(((-1.0)*r12*x3714)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3714))+((r01*x3716))+(((-1.0)*x3709*x3715)));
evalcond[4]=((((-1.0)*x3713*x3714))+(((-1.0)*cj1*x3712))+((sj1*sj2))+((x3707*x3711))+((r22*x3708)));
evalcond[5]=(((r11*x3717))+((r12*x3708))+(((-1.0)*x3710*x3714))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3719 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3719)==0){
continue;
}
IkReal x3718=pow(x3719,-0.5);
CheckValue<IkReal> x3720 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3720.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3720.value));
IkReal gconst109=((-1.0)*r11*x3718);
IkReal gconst110=(r10*x3718);
CheckValue<IkReal> x3721 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3721.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3721.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3724 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3724.valid){
continue;
}
IkReal x3722=((-1.0)*(x3724.value));
IkReal x3723=x3718;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3722;
IkReal gconst108=x3722;
IkReal gconst109=((-1.0)*r11*x3723);
IkReal gconst110=(r10*x3723);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3725=((1.0)*gconst110);
CheckValue<IkReal> x3726 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x3725))+(((-1.0)*cj0*r00*x3725))+((cj0*gconst109*r01))+((gconst109*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3726.valid){
continue;
}
CheckValue<IkReal> x3727=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3725))+(((-1.0)*gconst109*r20)))),-1);
if(!x3727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3726.value)+(((1.5707963267949)*(x3727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3728=IKsin(j4);
IkReal x3729=IKcos(j4);
IkReal x3730=(gconst109*r21);
IkReal x3731=(cj2*sj1);
IkReal x3732=(cj1*sj2);
IkReal x3733=((1.0)*x3729);
IkReal x3734=(gconst109*x3728);
IkReal x3735=(gconst109*x3729);
IkReal x3736=((1.0)*gconst110*x3728);
evalcond[0]=((((-1.0)*r20*x3736))+((x3728*x3730))+(((-1.0)*r22*x3733)));
evalcond[1]=(sj0+((r01*x3734))+(((-1.0)*r00*x3736))+(((-1.0)*r02*x3733)));
evalcond[2]=((((-1.0)*r12*x3733))+((r11*x3734))+(((-1.0)*r10*x3736))+(((-1.0)*cj0)));
evalcond[3]=(((x3729*x3730))+((r22*x3728))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3733)));
evalcond[4]=((((-1.0)*gconst110*r00*x3733))+((r01*x3735))+((cj0*x3731))+((cj0*x3732))+((r02*x3728)));
evalcond[5]=((((-1.0)*gconst110*r10*x3733))+((sj0*x3731))+((sj0*x3732))+((r11*x3735))+((r12*x3728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3737=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x3737.valid){
continue;
}
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3737.value)))+(x3738.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3739=IKsin(j4);
IkReal x3740=IKcos(j4);
IkReal x3741=(gconst109*r21);
IkReal x3742=(cj2*sj1);
IkReal x3743=(cj1*sj2);
IkReal x3744=((1.0)*x3740);
IkReal x3745=(gconst109*x3739);
IkReal x3746=(gconst109*x3740);
IkReal x3747=((1.0)*gconst110*x3739);
evalcond[0]=((((-1.0)*r22*x3744))+(((-1.0)*r20*x3747))+((x3739*x3741)));
evalcond[1]=(((r01*x3745))+sj0+(((-1.0)*r00*x3747))+(((-1.0)*r02*x3744)));
evalcond[2]=((((-1.0)*r12*x3744))+((r11*x3745))+(((-1.0)*r10*x3747))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3739))+(((-1.0)*gconst110*r20*x3744))+((x3740*x3741)));
evalcond[4]=((((-1.0)*gconst110*r00*x3744))+((r01*x3746))+((cj0*x3743))+((cj0*x3742))+((r02*x3739)));
evalcond[5]=(((sj0*x3743))+((sj0*x3742))+((r12*x3739))+((r11*x3746))+(((-1.0)*gconst110*r10*x3744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3749 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3749)==0){
continue;
}
IkReal x3748=pow(x3749,-0.5);
CheckValue<IkReal> x3750 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3750.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3750.value))));
IkReal gconst112=((1.0)*r11*x3748);
IkReal gconst113=((-1.0)*r10*x3748);
CheckValue<IkReal> x3751 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3751.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3751.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3754 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3754.valid){
continue;
}
IkReal x3752=((1.0)*(x3754.value));
IkReal x3753=x3748;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3752)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3752)));
IkReal gconst112=((1.0)*r11*x3753);
IkReal gconst113=((-1.0)*r10*x3753);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3757 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3757.valid){
continue;
}
IkReal x3755=((1.0)*(x3757.value));
IkReal x3756=x3748;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3755)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3755)));
IkReal gconst112=((1.0)*r11*x3756);
IkReal gconst113=((-1.0)*r10*x3756);
IkReal x3758=r12*r12;
IkReal x3759=(cj0*r02);
IkReal x3760=x3748;
IkReal x3761=(sj0*x3760);
j4eval[0]=((IKabs((((x3758*x3761))+(((-1.0)*x3761))+((r12*x3759*x3760)))))+(IKabs((x3759+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3764 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3764.valid){
continue;
}
IkReal x3762=((1.0)*(x3764.value));
IkReal x3763=x3748;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3762)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3762)));
IkReal gconst112=((1.0)*r11*x3763);
IkReal gconst113=((-1.0)*r10*x3763);
IkReal x3765=r12*r12;
IkReal x3766=(sj1*sj2);
IkReal x3767=((1.0)+(((-1.0)*x3765)));
IkReal x3768=((1.0)*cj1*cj2);
CheckValue<IkReal> x3775=IKPowWithIntegerCheck(x3767,-1);
if(!x3775.valid){
continue;
}
IkReal x3769=x3775.value;
CheckValue<IkReal> x3776=IKPowWithIntegerCheck(((-1.0)+x3765),-1);
if(!x3776.valid){
continue;
}
IkReal x3770=x3776.value;
IkReal x3771=((1.0)*x3769);
if((x3767) < -0.00001)
continue;
IkReal x3772=IKsqrt(x3767);
IkReal x3773=(r12*r22*x3770*x3772);
IkReal x3774=((((-1.0)*x3771*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x3769))+(((-1.0)*(r22*r22)))+(((-1.0)*x3771*(r10*r10)*(r20*r20))));
j4eval[0]=x3774;
j4eval[1]=((IKabs((((x3766*x3773))+(((-1.0)*x3768*x3773)))))+(IKabs((((r22*x3766))+(((-1.0)*r22*x3768))))));
j4eval[2]=IKsign(x3774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3777=(sj1*sj2);
IkReal x3778=(gconst112*r21);
IkReal x3779=(gconst113*r20);
IkReal x3780=(cj1*cj2);
CheckValue<IkReal> x3781 = IKatan2WithCheck(IkReal((((r22*x3777))+(((-1.0)*r22*x3780)))),IkReal((((x3777*x3778))+(((-1.0)*x3777*x3779))+((x3779*x3780))+(((-1.0)*x3778*x3780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3781.valid){
continue;
}
CheckValue<IkReal> x3782=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x3779*x3779)))+(((-1.0)*(x3778*x3778)))+(((2.0)*x3778*x3779)))),-1);
if(!x3782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3781.value)+(((1.5707963267949)*(x3782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3783=IKsin(j4);
IkReal x3784=IKcos(j4);
IkReal x3785=(cj2*sj1);
IkReal x3786=(gconst113*r20);
IkReal x3787=(gconst112*r21);
IkReal x3788=(gconst113*r00);
IkReal x3789=(gconst113*r10);
IkReal x3790=(cj1*sj2);
IkReal x3791=((1.0)*x3784);
IkReal x3792=((1.0)*x3783);
IkReal x3793=(gconst112*x3784);
IkReal x3794=(gconst112*x3783);
evalcond[0]=((((-1.0)*x3786*x3792))+(((-1.0)*r22*x3791))+((x3783*x3787)));
evalcond[1]=(sj0+(((-1.0)*r02*x3791))+((r01*x3794))+(((-1.0)*x3788*x3792)));
evalcond[2]=((((-1.0)*r12*x3791))+(((-1.0)*x3789*x3792))+((r11*x3794))+(((-1.0)*cj0)));
evalcond[3]=(((x3784*x3787))+((r22*x3783))+(((-1.0)*x3786*x3791))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r02*x3783))+((cj0*x3790))+((cj0*x3785))+((r01*x3793))+(((-1.0)*x3788*x3791)));
evalcond[5]=(((r12*x3783))+((sj0*x3790))+(((-1.0)*x3789*x3791))+((r11*x3793))+((sj0*x3785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3795=((1.0)*gconst113);
CheckValue<IkReal> x3796=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r20))+(((-1.0)*r21*x3795)))),-1);
if(!x3796.valid){
continue;
}
CheckValue<IkReal> x3797 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*r10*sj0*x3795))+(((-1.0)*cj0*r00*x3795))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3796.value)))+(x3797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3798=IKsin(j4);
IkReal x3799=IKcos(j4);
IkReal x3800=(cj2*sj1);
IkReal x3801=(gconst113*r20);
IkReal x3802=(gconst112*r21);
IkReal x3803=(gconst113*r00);
IkReal x3804=(gconst113*r10);
IkReal x3805=(cj1*sj2);
IkReal x3806=((1.0)*x3799);
IkReal x3807=((1.0)*x3798);
IkReal x3808=(gconst112*x3799);
IkReal x3809=(gconst112*x3798);
evalcond[0]=((((-1.0)*x3801*x3807))+((x3798*x3802))+(((-1.0)*r22*x3806)));
evalcond[1]=(((r01*x3809))+sj0+(((-1.0)*r02*x3806))+(((-1.0)*x3803*x3807)));
evalcond[2]=(((r11*x3809))+(((-1.0)*r12*x3806))+(((-1.0)*x3804*x3807))+(((-1.0)*cj0)));
evalcond[3]=(((x3799*x3802))+((r22*x3798))+(((-1.0)*x3801*x3806))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r01*x3808))+((r02*x3798))+(((-1.0)*x3803*x3806))+((cj0*x3805))+((cj0*x3800)));
evalcond[5]=(((r11*x3808))+((r12*x3798))+(((-1.0)*x3804*x3806))+((sj0*x3805))+((sj0*x3800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3810=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x3810.valid){
continue;
}
CheckValue<IkReal> x3811 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3810.value)))+(x3811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3812=IKsin(j4);
IkReal x3813=IKcos(j4);
IkReal x3814=(cj2*sj1);
IkReal x3815=(gconst113*r20);
IkReal x3816=(gconst112*r21);
IkReal x3817=(gconst113*r00);
IkReal x3818=(gconst113*r10);
IkReal x3819=(cj1*sj2);
IkReal x3820=((1.0)*x3813);
IkReal x3821=((1.0)*x3812);
IkReal x3822=(gconst112*x3813);
IkReal x3823=(gconst112*x3812);
evalcond[0]=((((-1.0)*r22*x3820))+(((-1.0)*x3815*x3821))+((x3812*x3816)));
evalcond[1]=(sj0+(((-1.0)*r02*x3820))+(((-1.0)*x3817*x3821))+((r01*x3823)));
evalcond[2]=((((-1.0)*r12*x3820))+((r11*x3823))+(((-1.0)*x3818*x3821))+(((-1.0)*cj0)));
evalcond[3]=(((x3813*x3816))+(((-1.0)*x3815*x3820))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3812)));
evalcond[4]=((((-1.0)*x3817*x3820))+((r02*x3812))+((cj0*x3819))+((cj0*x3814))+((r01*x3822)));
evalcond[5]=(((r12*x3812))+((r11*x3822))+((sj0*x3814))+((sj0*x3819))+(((-1.0)*x3818*x3820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3824=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3824;
j4eval[1]=IKsign(x3824);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3825=((1.0)*cj5);
IkReal x3826=((((-1.0)*r21*x3825))+(((-1.0)*r20*sj5)));
j4eval[0]=x3826;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3825))))));
j4eval[2]=IKsign(x3826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3827=cj5*cj5;
IkReal x3828=r11*r11;
IkReal x3829=(r11*sj5);
IkReal x3830=(cj5*r10);
IkReal x3831=((r12*r12)+((x3827*(r10*r10)))+(((-2.0)*x3829*x3830))+x3828+(((-1.0)*x3827*x3828)));
j4eval[0]=x3831;
j4eval[1]=IKsign(x3831);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3830))+x3829))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3832=cj5*cj5;
IkReal x3833=r11*r11;
IkReal x3834=(cj5*r10);
IkReal x3835=(r11*sj5);
CheckValue<IkReal> x3836 = IKatan2WithCheck(IkReal(((((-1.0)*x3834))+x3835)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3836.valid){
continue;
}
CheckValue<IkReal> x3837=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3832*x3833))+(((-2.0)*x3834*x3835))+x3833+((x3832*(r10*r10))))),-1);
if(!x3837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3836.value)+(((1.5707963267949)*(x3837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3838=IKcos(j4);
IkReal x3839=IKsin(j4);
IkReal x3840=(cj5*r00);
IkReal x3841=(cj5*r10);
IkReal x3842=(r21*sj5);
IkReal x3843=(cj5*r20);
IkReal x3844=((1.0)*x3838);
IkReal x3845=((1.0)*x3839);
IkReal x3846=(sj5*x3839);
IkReal x3847=(sj5*x3838);
evalcond[0]=((((-1.0)*x3841*x3844))+((r12*x3839))+((r11*x3847)));
evalcond[1]=(((x3839*x3842))+(((-1.0)*x3843*x3845))+(((-1.0)*r22*x3844)));
evalcond[2]=((((-1.0)*r02*x3844))+(((-1.0)*x3840*x3845))+((r01*x3846)));
evalcond[3]=((-1.0)+(((-1.0)*x3841*x3845))+(((-1.0)*r12*x3844))+((r11*x3846)));
evalcond[4]=(((cj2*sj1))+((r02*x3839))+(((-1.0)*x3840*x3844))+((cj1*sj2))+((r01*x3847)));
evalcond[5]=((((-1.0)*x3843*x3844))+((x3838*x3842))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3848=((1.0)*cj5);
CheckValue<IkReal> x3849 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3849.valid){
continue;
}
CheckValue<IkReal> x3850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3848))+(((-1.0)*r20*sj5)))),-1);
if(!x3850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3849.value)+(((1.5707963267949)*(x3850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3851=IKcos(j4);
IkReal x3852=IKsin(j4);
IkReal x3853=(cj5*r00);
IkReal x3854=(cj5*r10);
IkReal x3855=(r21*sj5);
IkReal x3856=(cj5*r20);
IkReal x3857=((1.0)*x3851);
IkReal x3858=((1.0)*x3852);
IkReal x3859=(sj5*x3852);
IkReal x3860=(sj5*x3851);
evalcond[0]=(((r11*x3860))+(((-1.0)*x3854*x3857))+((r12*x3852)));
evalcond[1]=(((x3852*x3855))+(((-1.0)*x3856*x3858))+(((-1.0)*r22*x3857)));
evalcond[2]=(((r01*x3859))+(((-1.0)*x3853*x3858))+(((-1.0)*r02*x3857)));
evalcond[3]=((-1.0)+((r11*x3859))+(((-1.0)*x3854*x3858))+(((-1.0)*r12*x3857)));
evalcond[4]=(((r02*x3852))+((cj2*sj1))+((cj1*sj2))+((r01*x3860))+(((-1.0)*x3853*x3857)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3856*x3857))+((x3851*x3855))+((r22*x3852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3861 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3861.valid){
continue;
}
CheckValue<IkReal> x3862=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3861.value)+(((1.5707963267949)*(x3862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3863=IKcos(j4);
IkReal x3864=IKsin(j4);
IkReal x3865=(cj5*r00);
IkReal x3866=(cj5*r10);
IkReal x3867=(r21*sj5);
IkReal x3868=(cj5*r20);
IkReal x3869=((1.0)*x3863);
IkReal x3870=((1.0)*x3864);
IkReal x3871=(sj5*x3864);
IkReal x3872=(sj5*x3863);
evalcond[0]=((((-1.0)*x3866*x3869))+((r11*x3872))+((r12*x3864)));
evalcond[1]=(((x3864*x3867))+(((-1.0)*x3868*x3870))+(((-1.0)*r22*x3869)));
evalcond[2]=((((-1.0)*r02*x3869))+(((-1.0)*x3865*x3870))+((r01*x3871)));
evalcond[3]=((-1.0)+(((-1.0)*x3866*x3870))+(((-1.0)*r12*x3869))+((r11*x3871)));
evalcond[4]=(((cj2*sj1))+((r02*x3864))+(((-1.0)*x3865*x3869))+((r01*x3872))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x3868*x3869))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3863*x3867))+((r22*x3864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3873=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3873;
j4eval[1]=IKsign(x3873);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3874=((1.0)*cj5);
IkReal x3875=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3874)));
j4eval[0]=x3875;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3874))))));
j4eval[2]=IKsign(x3875);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3876=(sj1*sj2);
IkReal x3877=(cj5*r10);
IkReal x3878=(r11*sj5);
IkReal x3879=(cj1*cj2);
IkReal x3880=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3880;
j4eval[1]=((IKabs(((((-1.0)*x3878*x3879))+((x3876*x3878))+(((-1.0)*x3876*x3877))+((x3877*x3879)))))+(IKabs(((((-1.0)*r12*x3876))+((r12*x3879))))));
j4eval[2]=IKsign(x3880);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3881=(sj1*sj2);
IkReal x3882=(cj5*r10);
IkReal x3883=(r11*sj5);
IkReal x3884=(cj1*cj2);
CheckValue<IkReal> x3885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3885.valid){
continue;
}
CheckValue<IkReal> x3886 = IKatan2WithCheck(IkReal((((x3882*x3884))+(((-1.0)*x3881*x3882))+(((-1.0)*x3883*x3884))+((x3881*x3883)))),IkReal(((((-1.0)*r12*x3881))+((r12*x3884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3885.value)))+(x3886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3887=IKcos(j4);
IkReal x3888=IKsin(j4);
IkReal x3889=(cj5*r00);
IkReal x3890=(cj5*r10);
IkReal x3891=(r21*sj5);
IkReal x3892=((1.0)*cj2);
IkReal x3893=(cj5*r20);
IkReal x3894=((1.0)*x3887);
IkReal x3895=((1.0)*x3888);
IkReal x3896=(sj5*x3888);
IkReal x3897=(sj5*x3887);
evalcond[0]=(((r12*x3888))+((r11*x3897))+(((-1.0)*x3890*x3894)));
evalcond[1]=(((x3888*x3891))+(((-1.0)*r22*x3894))+(((-1.0)*x3893*x3895)));
evalcond[2]=((((-1.0)*x3889*x3895))+((r01*x3896))+(((-1.0)*r02*x3894)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3894))+((r11*x3896))+(((-1.0)*x3890*x3895)));
evalcond[4]=(((r22*x3888))+((sj1*sj2))+(((-1.0)*x3893*x3894))+((x3887*x3891))+(((-1.0)*cj1*x3892)));
evalcond[5]=((((-1.0)*x3889*x3894))+(((-1.0)*cj1*sj2))+((r01*x3897))+((r02*x3888))+(((-1.0)*sj1*x3892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3898=((1.0)*cj5);
CheckValue<IkReal> x3899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3898)))),-1);
if(!x3899.valid){
continue;
}
CheckValue<IkReal> x3900 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3899.value)))+(x3900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3901=IKcos(j4);
IkReal x3902=IKsin(j4);
IkReal x3903=(cj5*r00);
IkReal x3904=(cj5*r10);
IkReal x3905=(r21*sj5);
IkReal x3906=((1.0)*cj2);
IkReal x3907=(cj5*r20);
IkReal x3908=((1.0)*x3901);
IkReal x3909=((1.0)*x3902);
IkReal x3910=(sj5*x3902);
IkReal x3911=(sj5*x3901);
evalcond[0]=((((-1.0)*x3904*x3908))+((r12*x3902))+((r11*x3911)));
evalcond[1]=(((x3902*x3905))+(((-1.0)*r22*x3908))+(((-1.0)*x3907*x3909)));
evalcond[2]=((((-1.0)*x3903*x3909))+((r01*x3910))+(((-1.0)*r02*x3908)));
evalcond[3]=((1.0)+(((-1.0)*x3904*x3909))+(((-1.0)*r12*x3908))+((r11*x3910)));
evalcond[4]=(((x3901*x3905))+((r22*x3902))+(((-1.0)*x3907*x3908))+((sj1*sj2))+(((-1.0)*cj1*x3906)));
evalcond[5]=((((-1.0)*x3903*x3908))+(((-1.0)*sj1*x3906))+(((-1.0)*cj1*sj2))+((r01*x3911))+((r02*x3902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3912=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3912.valid){
continue;
}
CheckValue<IkReal> x3913 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3912.value)))+(x3913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3914=IKcos(j4);
IkReal x3915=IKsin(j4);
IkReal x3916=(cj5*r00);
IkReal x3917=(cj5*r10);
IkReal x3918=(r21*sj5);
IkReal x3919=((1.0)*cj2);
IkReal x3920=(cj5*r20);
IkReal x3921=((1.0)*x3914);
IkReal x3922=((1.0)*x3915);
IkReal x3923=(sj5*x3915);
IkReal x3924=(sj5*x3914);
evalcond[0]=(((r11*x3924))+(((-1.0)*x3917*x3921))+((r12*x3915)));
evalcond[1]=(((x3915*x3918))+(((-1.0)*x3920*x3922))+(((-1.0)*r22*x3921)));
evalcond[2]=((((-1.0)*r02*x3921))+(((-1.0)*x3916*x3922))+((r01*x3923)));
evalcond[3]=((1.0)+((r11*x3923))+(((-1.0)*r12*x3921))+(((-1.0)*x3917*x3922)));
evalcond[4]=(((x3914*x3918))+((sj1*sj2))+(((-1.0)*x3920*x3921))+(((-1.0)*cj1*x3919))+((r22*x3915)));
evalcond[5]=((((-1.0)*sj1*x3919))+(((-1.0)*cj1*sj2))+(((-1.0)*x3916*x3921))+((r02*x3915))+((r01*x3924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3925=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3925);
rxp0_2=(py*r00);
rxp1_0=(r21*x3925);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3926=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3926);
rxp0_2=(py*r00);
rxp1_0=(r21*x3926);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3927=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3927);
rxp0_2=(py*r00);
rxp1_0=(r21*x3927);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3930=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x3930.valid){
continue;
}
IkReal x3928=x3930.value;
IkReal x3929=((1.0)*cj0*x3928);
cj4array[0]=((((-1.0)*cj2*sj1*x3929))+(((-1.0)*cj1*sj2*x3929)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3931=IKsin(j4);
IkReal x3932=IKcos(j4);
IkReal x3933=(r21*sj5);
IkReal x3934=((1.0)*x3932);
IkReal x3935=((1.0)*cj5*x3931);
evalcond[0]=(r12*x3931);
evalcond[1]=((((-1.0)*r12*x3934))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x3935))+((x3931*x3933)));
evalcond[3]=((((-1.0)*r00*x3935))+((r01*sj5*x3931)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x3934))+((x3932*x3933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3937=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3937.valid){
continue;
}
IkReal x3936=x3937.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3936))+((cj1*cj2*x3936)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3938=IKsin(j4);
IkReal x3939=IKcos(j4);
IkReal x3940=(r01*sj5);
IkReal x3941=((1.0)*cj5*r00);
evalcond[0]=(r12*x3938);
evalcond[1]=((((-1.0)*r12*x3939))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x3938))+(((-1.0)*cj5*r20*x3938)));
evalcond[3]=(((x3938*x3940))+(((-1.0)*x3938*x3941)));
evalcond[4]=(((x3939*x3940))+(((-1.0)*x3939*x3941))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3942=IKPowWithIntegerCheck(r12,-1);
if(!x3942.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3942.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3943=IKsin(j4);
IkReal x3944=IKcos(j4);
IkReal x3945=(sj5*x3944);
IkReal x3946=(sj5*x3943);
IkReal x3947=((1.0)*cj5*x3943);
IkReal x3948=((1.0)*cj5*x3944);
evalcond[0]=(r12*x3943);
evalcond[1]=((((-1.0)*r20*x3947))+((r21*x3946)));
evalcond[2]=(((r01*x3946))+(((-1.0)*r00*x3947)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x3948))+((r21*x3945)));
evalcond[4]=(((r01*x3945))+(((-1.0)*r00*x3948))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3949=((1.0)*cj5);
CheckValue<IkReal> x3950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3949))+(((-1.0)*r20*sj5)))),-1);
if(!x3950.valid){
continue;
}
CheckValue<IkReal> x3951 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x3949))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x3949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3950.value)))+(x3951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3952=IKsin(j4);
IkReal x3953=IKcos(j4);
IkReal x3954=(cj5*r00);
IkReal x3955=(cj5*r10);
IkReal x3956=(cj2*sj1);
IkReal x3957=(r21*sj5);
IkReal x3958=(cj5*r20);
IkReal x3959=(cj1*sj2);
IkReal x3960=((1.0)*x3953);
IkReal x3961=((1.0)*x3952);
IkReal x3962=(sj5*x3952);
IkReal x3963=(sj5*x3953);
evalcond[0]=((((-1.0)*x3958*x3961))+((x3952*x3957))+(((-1.0)*r22*x3960)));
evalcond[1]=(sj0+(((-1.0)*r02*x3960))+(((-1.0)*x3954*x3961))+((r01*x3962)));
evalcond[2]=(((r11*x3962))+(((-1.0)*x3955*x3961))+(((-1.0)*cj0))+(((-1.0)*r12*x3960)));
evalcond[3]=((((-1.0)*cj1*cj2))+((x3953*x3957))+((sj1*sj2))+(((-1.0)*x3958*x3960))+((r22*x3952)));
evalcond[4]=(((cj0*x3956))+((cj0*x3959))+(((-1.0)*x3954*x3960))+((r02*x3952))+((r01*x3963)));
evalcond[5]=(((r11*x3963))+(((-1.0)*x3955*x3960))+((sj0*x3959))+((sj0*x3956))+((r12*x3952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3964=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3964.valid){
continue;
}
CheckValue<IkReal> x3965 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3964.value)))+(x3965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3966=IKsin(j4);
IkReal x3967=IKcos(j4);
IkReal x3968=(cj5*r00);
IkReal x3969=(cj5*r10);
IkReal x3970=(cj2*sj1);
IkReal x3971=(r21*sj5);
IkReal x3972=(cj5*r20);
IkReal x3973=(cj1*sj2);
IkReal x3974=((1.0)*x3967);
IkReal x3975=((1.0)*x3966);
IkReal x3976=(sj5*x3966);
IkReal x3977=(sj5*x3967);
evalcond[0]=((((-1.0)*x3972*x3975))+(((-1.0)*r22*x3974))+((x3966*x3971)));
evalcond[1]=((((-1.0)*r02*x3974))+sj0+(((-1.0)*x3968*x3975))+((r01*x3976)));
evalcond[2]=((((-1.0)*r12*x3974))+(((-1.0)*x3969*x3975))+((r11*x3976))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3972*x3974))+((r22*x3966))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3967*x3971)));
evalcond[4]=(((r02*x3966))+(((-1.0)*x3968*x3974))+((r01*x3977))+((cj0*x3973))+((cj0*x3970)));
evalcond[5]=((((-1.0)*x3969*x3974))+((r11*x3977))+((r12*x3966))+((sj0*x3973))+((sj0*x3970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3978=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3978.valid){
continue;
}
CheckValue<IkReal> x3979 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3978.value)))+(x3979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3980=IKsin(j4);
IkReal x3981=IKcos(j4);
IkReal x3982=(cj5*r00);
IkReal x3983=(cj5*r10);
IkReal x3984=(cj2*sj1);
IkReal x3985=(r21*sj5);
IkReal x3986=(cj5*r20);
IkReal x3987=(cj1*sj2);
IkReal x3988=((1.0)*x3981);
IkReal x3989=((1.0)*x3980);
IkReal x3990=(sj5*x3980);
IkReal x3991=(sj5*x3981);
evalcond[0]=((((-1.0)*x3986*x3989))+(((-1.0)*r22*x3988))+((x3980*x3985)));
evalcond[1]=(sj0+(((-1.0)*x3982*x3989))+((r01*x3990))+(((-1.0)*r02*x3988)));
evalcond[2]=((((-1.0)*r12*x3988))+(((-1.0)*x3983*x3989))+((r11*x3990))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3986*x3988))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3981*x3985))+((r22*x3980)));
evalcond[4]=((((-1.0)*x3982*x3988))+((cj0*x3987))+((cj0*x3984))+((r01*x3991))+((r02*x3980)));
evalcond[5]=(((sj0*x3987))+((sj0*x3984))+(((-1.0)*x3983*x3988))+((r11*x3991))+((r12*x3980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3992=r21*r21;
IkReal x3993=cj5*cj5;
IkReal x3994=(sj1*sj2);
IkReal x3995=(r21*sj5);
IkReal x3996=(cj1*cj2);
IkReal x3997=(cj5*r20);
CheckValue<IkReal> x3998 = IKatan2WithCheck(IkReal((((r22*x3994))+(((-1.0)*r22*x3996)))),IkReal((((x3994*x3995))+(((-1.0)*x3994*x3997))+((x3996*x3997))+(((-1.0)*x3995*x3996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3998.valid){
continue;
}
CheckValue<IkReal> x3999=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3993*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3992))+(((2.0)*x3995*x3997))+((x3992*x3993)))),-1);
if(!x3999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3998.value)+(((1.5707963267949)*(x3999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4000=IKsin(j4);
IkReal x4001=IKcos(j4);
IkReal x4002=(r21*sj5);
IkReal x4003=(cj5*r20);
IkReal x4004=((1.0)*x4001);
evalcond[0]=(((x4000*x4002))+(((-1.0)*r22*x4004))+(((-1.0)*x4000*x4003)));
evalcond[1]=(((x4001*x4002))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4000))+(((-1.0)*x4003*x4004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4005=(cj5*sj4);
IkReal x4006=(sj4*sj5);
if( IKabs((((r00*x4005))+(((-1.0)*r01*x4006))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r12))+(((-1.0)*r10*x4005))+((r11*x4006)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x4005))+(((-1.0)*r01*x4006))+((cj4*r02))))+IKsqr(((((-1.0)*cj4*r12))+(((-1.0)*r10*x4005))+((r11*x4006))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x4005))+(((-1.0)*r01*x4006))+((cj4*r02))), ((((-1.0)*cj4*r12))+(((-1.0)*r10*x4005))+((r11*x4006))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4007=IKcos(j0);
IkReal x4008=IKsin(j0);
IkReal x4009=(r11*sj5);
IkReal x4010=(cj1*cj2);
IkReal x4011=(cj5*r11);
IkReal x4012=((1.0)*r00);
IkReal x4013=(cj4*cj5);
IkReal x4014=(cj5*r01);
IkReal x4015=((1.0)*r10);
IkReal x4016=((0.09465)*sj5);
IkReal x4017=(cj5*sj4);
IkReal x4018=((1.0)*cj4);
IkReal x4019=(r01*sj5);
IkReal x4020=(sj1*x4007);
IkReal x4021=(cj1*x4008);
IkReal x4022=(cj1*x4007);
IkReal x4023=(sj1*sj2*x4008);
evalcond[0]=((((-1.0)*x4012*x4017))+(((-1.0)*r02*x4018))+((sj4*x4019))+x4008);
evalcond[1]=((((-1.0)*r12*x4018))+((sj4*x4009))+(((-1.0)*x4007))+(((-1.0)*x4015*x4017)));
evalcond[2]=((((-1.0)*x4014))+(((-1.0)*sj5*x4012))+(((-1.0)*sj2*x4020))+((x4007*x4010)));
evalcond[3]=((((-1.0)*x4011))+(((-1.0)*x4023))+(((-1.0)*sj5*x4015))+((x4008*x4010)));
evalcond[4]=(((cj4*x4019))+(((-1.0)*x4012*x4013))+((r02*sj4))+((cj2*x4020))+((sj2*x4022)));
evalcond[5]=((((-1.0)*x4013*x4015))+((r12*sj4))+((cj2*sj1*x4008))+((cj4*x4009))+((sj2*x4021)));
evalcond[6]=((((-0.09465)*x4014))+(((0.39225)*sj2*x4020))+(((-0.425)*x4022))+(((0.10915)*x4008))+(((-1.0)*px))+(((-1.0)*r00*x4016))+(((-0.39225)*x4007*x4010)));
evalcond[7]=((((-0.09465)*x4011))+(((-0.39225)*x4008*x4010))+(((-0.425)*x4021))+(((-1.0)*py))+(((-0.10915)*x4007))+(((-1.0)*r10*x4016))+(((0.39225)*x4023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4024=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x4024.valid){
continue;
}
CheckValue<IkReal> x4025 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4025.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4024.value)))+(x4025.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4026=IKcos(j0);
IkReal x4027=IKsin(j0);
IkReal x4028=(cj1*cj2);
IkReal x4029=(cj5*r11);
IkReal x4030=(sj1*sj2);
IkReal x4031=(cj5*r01);
IkReal x4032=((1.0)*sj5);
IkReal x4033=((0.09465)*sj5);
IkReal x4034=((0.425)*cj1);
IkReal x4035=((0.39225)*x4026);
IkReal x4036=(x4027*x4030);
evalcond[0]=((((-1.0)*r00*x4032))+(((-1.0)*x4031))+(((-1.0)*x4026*x4030))+((x4026*x4028)));
evalcond[1]=((((-1.0)*x4029))+(((-1.0)*x4036))+(((-1.0)*r10*x4032))+((x4027*x4028)));
evalcond[2]=((((-1.0)*r00*x4033))+(((-0.09465)*x4031))+(((-1.0)*x4026*x4034))+(((0.10915)*x4027))+(((-1.0)*px))+(((-1.0)*x4028*x4035))+((x4030*x4035)));
evalcond[3]=((((-0.09465)*x4029))+(((0.39225)*x4036))+(((-1.0)*x4027*x4034))+(((-0.39225)*x4027*x4028))+(((-1.0)*py))+(((-0.10915)*x4026))+(((-1.0)*r10*x4033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4037=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4037;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4038=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4038;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4039=((1.0)*cj5);
IkReal x4040=((((-1.0)*r21*x4039))+(((-1.0)*r20*sj5)));
j4eval[0]=x4040;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x4039))+(((-1.0)*cj0*r00*x4039))))));
j4eval[2]=IKsign(x4040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4041=((-1.0)*r20);
IkReal x4043 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4043)==0){
continue;
}
IkReal x4042=pow(x4043,-0.5);
CheckValue<IkReal> x4044 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4041),IKFAST_ATAN2_MAGTHRESH);
if(!x4044.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4044.value));
IkReal gconst97=(r21*x4042);
IkReal gconst98=(x4041*x4042);
CheckValue<IkReal> x4045 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4045.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4045.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4046=((-1.0)*r20);
IkReal x4047=x4042;
CheckValue<IkReal> x4049 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4046),IKFAST_ATAN2_MAGTHRESH);
if(!x4049.valid){
continue;
}
IkReal x4048=((-1.0)*(x4049.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4048;
IkReal gconst96=x4048;
IkReal gconst97=(r21*x4047);
IkReal gconst98=(x4046*x4047);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4050=((-1.0)*r20);
IkReal x4051=x4042;
CheckValue<IkReal> x4053 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4050),IKFAST_ATAN2_MAGTHRESH);
if(!x4053.valid){
continue;
}
IkReal x4052=((-1.0)*(x4053.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4052;
IkReal gconst96=x4052;
IkReal gconst97=(r21*x4051);
IkReal gconst98=(x4050*x4051);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4054=((-1.0)*r20);
IkReal x4055=x4042;
CheckValue<IkReal> x4057 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4054),IKFAST_ATAN2_MAGTHRESH);
if(!x4057.valid){
continue;
}
IkReal x4056=((-1.0)*(x4057.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4056;
IkReal gconst96=x4056;
IkReal gconst97=(r21*x4055);
IkReal gconst98=(x4054*x4055);
IkReal x4058=((1.0)*(r22*r22));
CheckValue<IkReal> x4062=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4058))),-1);
if(!x4062.valid){
continue;
}
IkReal x4059=x4062.value;
IkReal x4060=((1.0)*x4059);
IkReal x4061=((((-1.0)*x4060*(r21*r21*r21*r21)))+(((-1.0)*x4060*(r20*r20*r20*r20)))+(((-2.0)*x4059*(r20*r20)*(r21*r21)))+(((-1.0)*x4058)));
j4eval[0]=x4061;
j4eval[1]=IKsign(x4061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4063=(cj1*cj2);
IkReal x4064=(gconst98*r20);
IkReal x4065=(sj1*sj2);
IkReal x4066=(gconst97*r21);
CheckValue<IkReal> x4067=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4064*x4064)))+(((-1.0)*(x4066*x4066)))+(((2.0)*x4064*x4066))+(((-1.0)*(r22*r22))))),-1);
if(!x4067.valid){
continue;
}
CheckValue<IkReal> x4068 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4063))+((r22*x4065)))),IkReal(((((-1.0)*x4064*x4065))+(((-1.0)*x4063*x4066))+((x4063*x4064))+((x4065*x4066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4067.value)))+(x4068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4069=IKsin(j4);
IkReal x4070=IKcos(j4);
IkReal x4071=(gconst98*r10);
IkReal x4072=(gconst97*r21);
IkReal x4073=(cj2*sj1);
IkReal x4074=(gconst98*r20);
IkReal x4075=(gconst98*r00);
IkReal x4076=(cj1*sj2);
IkReal x4077=((1.0)*x4070);
IkReal x4078=((1.0)*x4069);
IkReal x4079=(gconst97*x4069);
IkReal x4080=(gconst97*x4070);
evalcond[0]=((((-1.0)*r22*x4077))+(((-1.0)*x4074*x4078))+((x4069*x4072)));
evalcond[1]=((((-1.0)*x4075*x4078))+sj0+(((-1.0)*r02*x4077))+((r01*x4079)));
evalcond[2]=((((-1.0)*x4071*x4078))+(((-1.0)*r12*x4077))+((r11*x4079))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4074*x4077))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4070*x4072))+((r22*x4069)));
evalcond[4]=(((r01*x4080))+(((-1.0)*x4075*x4077))+((cj0*x4076))+((cj0*x4073))+((r02*x4069)));
evalcond[5]=((((-1.0)*x4071*x4077))+((sj0*x4073))+((sj0*x4076))+((r12*x4069))+((r11*x4080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4081 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4081.valid){
continue;
}
CheckValue<IkReal> x4082=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x4082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4081.value)+(((1.5707963267949)*(x4082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4083=IKsin(j4);
IkReal x4084=IKcos(j4);
IkReal x4085=(gconst98*r10);
IkReal x4086=(gconst97*r21);
IkReal x4087=(cj2*sj1);
IkReal x4088=(gconst98*r20);
IkReal x4089=(gconst98*r00);
IkReal x4090=(cj1*sj2);
IkReal x4091=((1.0)*x4084);
IkReal x4092=((1.0)*x4083);
IkReal x4093=(gconst97*x4083);
IkReal x4094=(gconst97*x4084);
evalcond[0]=(((x4083*x4086))+(((-1.0)*r22*x4091))+(((-1.0)*x4088*x4092)));
evalcond[1]=((((-1.0)*x4089*x4092))+sj0+((r01*x4093))+(((-1.0)*r02*x4091)));
evalcond[2]=((((-1.0)*r12*x4091))+((r11*x4093))+(((-1.0)*x4085*x4092))+(((-1.0)*cj0)));
evalcond[3]=(((x4084*x4086))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4083))+(((-1.0)*x4088*x4091)));
evalcond[4]=((((-1.0)*x4089*x4091))+((cj0*x4087))+((r01*x4094))+((cj0*x4090))+((r02*x4083)));
evalcond[5]=(((r11*x4094))+((r12*x4083))+(((-1.0)*x4085*x4091))+((sj0*x4087))+((sj0*x4090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4095 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4095.valid){
continue;
}
CheckValue<IkReal> x4096=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x4096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4095.value)+(((1.5707963267949)*(x4096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4097=IKsin(j4);
IkReal x4098=IKcos(j4);
IkReal x4099=(gconst98*r10);
IkReal x4100=(gconst97*r21);
IkReal x4101=(cj2*sj1);
IkReal x4102=(gconst98*r20);
IkReal x4103=(gconst98*r00);
IkReal x4104=(cj1*sj2);
IkReal x4105=((1.0)*x4098);
IkReal x4106=((1.0)*x4097);
IkReal x4107=(gconst97*x4097);
IkReal x4108=(gconst97*x4098);
evalcond[0]=((((-1.0)*r22*x4105))+(((-1.0)*x4102*x4106))+((x4097*x4100)));
evalcond[1]=(sj0+(((-1.0)*x4103*x4106))+((r01*x4107))+(((-1.0)*r02*x4105)));
evalcond[2]=((((-1.0)*r12*x4105))+((r11*x4107))+(((-1.0)*cj0))+(((-1.0)*x4099*x4106)));
evalcond[3]=(((x4098*x4100))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4097))+(((-1.0)*x4102*x4105)));
evalcond[4]=(((cj0*x4101))+((cj0*x4104))+((r02*x4097))+(((-1.0)*x4103*x4105))+((r01*x4108)));
evalcond[5]=(((r12*x4097))+((sj0*x4101))+((sj0*x4104))+((r11*x4108))+(((-1.0)*x4099*x4105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4109=((-1.0)*r21);
IkReal x4111 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4111)==0){
continue;
}
IkReal x4110=pow(x4111,-0.5);
CheckValue<IkReal> x4112 = IKatan2WithCheck(IkReal(x4109),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4112.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4112.value))));
IkReal gconst100=(x4109*x4110);
IkReal gconst101=((1.0)*r20*x4110);
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4113.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4114=((-1.0)*r21);
CheckValue<IkReal> x4117 = IKatan2WithCheck(IkReal(x4114),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4117.valid){
continue;
}
IkReal x4115=((1.0)*(x4117.value));
IkReal x4116=x4110;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4115)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4115)));
IkReal gconst100=(x4114*x4116);
IkReal gconst101=((1.0)*r20*x4116);
IkReal x4118=r22*r22;
IkReal x4119=((1.0)*x4118);
CheckValue<IkReal> x4123=IKPowWithIntegerCheck(((-1.0)+x4118),-1);
if(!x4123.valid){
continue;
}
IkReal x4120=x4123.value;
if((((1.0)+(((-1.0)*x4119)))) < -0.00001)
continue;
IkReal x4121=IKsqrt(((1.0)+(((-1.0)*x4119))));
IkReal x4122=(sj0*x4120*x4121);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4119*x4122))+x4122))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4124=((-1.0)*r21);
CheckValue<IkReal> x4127 = IKatan2WithCheck(IkReal(x4124),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4127.valid){
continue;
}
IkReal x4125=((1.0)*(x4127.value));
IkReal x4126=x4110;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4125)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4125)));
IkReal gconst100=(x4124*x4126);
IkReal gconst101=((1.0)*r20*x4126);
IkReal x4128=r22*r22;
IkReal x4129=((1.0)*x4128);
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(((-1.0)+x4128),-1);
if(!x4133.valid){
continue;
}
IkReal x4130=x4133.value;
if((((1.0)+(((-1.0)*x4129)))) < -0.00001)
continue;
IkReal x4131=IKsqrt(((1.0)+(((-1.0)*x4129))));
IkReal x4132=(cj0*x4130*x4131);
j4eval[0]=((IKabs(((((-1.0)*x4129*x4132))+x4132)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4134=((-1.0)*r21);
CheckValue<IkReal> x4137 = IKatan2WithCheck(IkReal(x4134),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4137.valid){
continue;
}
IkReal x4135=((1.0)*(x4137.value));
IkReal x4136=x4110;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4135)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4135)));
IkReal gconst100=(x4134*x4136);
IkReal gconst101=((1.0)*r20*x4136);
IkReal x4138=r22*r22;
IkReal x4139=(cj0*r02);
IkReal x4140=(r12*sj0);
CheckValue<IkReal> x4144=IKPowWithIntegerCheck(((-1.0)+x4138),-1);
if(!x4144.valid){
continue;
}
IkReal x4141=x4144.value;
if((((1.0)+(((-1.0)*x4138)))) < -0.00001)
continue;
IkReal x4142=IKsqrt(((1.0)+(((-1.0)*x4138))));
IkReal x4143=((1.0)*r22*x4141*x4142);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4140*x4143))+(((-1.0)*x4139*x4143)))))+(IKabs((x4140+x4139))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4145=((1.0)*gconst101);
CheckValue<IkReal> x4146 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x4145))+(((-1.0)*cj0*r00*x4145))+((cj0*gconst100*r01))+((gconst100*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4146.valid){
continue;
}
CheckValue<IkReal> x4147=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x4145)))),-1);
if(!x4147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4146.value)+(((1.5707963267949)*(x4147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4148=IKsin(j4);
IkReal x4149=IKcos(j4);
IkReal x4150=(cj2*sj1);
IkReal x4151=(gconst101*r20);
IkReal x4152=(gconst101*r10);
IkReal x4153=(gconst101*r00);
IkReal x4154=(cj1*sj2);
IkReal x4155=((1.0)*x4149);
IkReal x4156=((1.0)*x4148);
IkReal x4157=(gconst100*x4148);
IkReal x4158=(gconst100*x4149);
evalcond[0]=(((r21*x4157))+(((-1.0)*x4151*x4156))+(((-1.0)*r22*x4155)));
evalcond[1]=(sj0+((r01*x4157))+(((-1.0)*r02*x4155))+(((-1.0)*x4153*x4156)));
evalcond[2]=(((r11*x4157))+(((-1.0)*x4152*x4156))+(((-1.0)*r12*x4155))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x4158))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4148))+(((-1.0)*x4151*x4155)));
evalcond[4]=(((r02*x4148))+((r01*x4158))+(((-1.0)*x4153*x4155))+((cj0*x4154))+((cj0*x4150)));
evalcond[5]=(((r12*x4148))+((r11*x4158))+((sj0*x4154))+((sj0*x4150))+(((-1.0)*x4152*x4155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4159 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4159.valid){
continue;
}
CheckValue<IkReal> x4160=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x4160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4159.value)+(((1.5707963267949)*(x4160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4161=IKsin(j4);
IkReal x4162=IKcos(j4);
IkReal x4163=(cj2*sj1);
IkReal x4164=(gconst101*r20);
IkReal x4165=(gconst101*r10);
IkReal x4166=(gconst101*r00);
IkReal x4167=(cj1*sj2);
IkReal x4168=((1.0)*x4162);
IkReal x4169=((1.0)*x4161);
IkReal x4170=(gconst100*x4161);
IkReal x4171=(gconst100*x4162);
evalcond[0]=(((r21*x4170))+(((-1.0)*x4164*x4169))+(((-1.0)*r22*x4168)));
evalcond[1]=((((-1.0)*r02*x4168))+sj0+((r01*x4170))+(((-1.0)*x4166*x4169)));
evalcond[2]=(((r11*x4170))+(((-1.0)*x4165*x4169))+(((-1.0)*r12*x4168))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4161))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4171))+(((-1.0)*x4164*x4168)));
evalcond[4]=(((cj0*x4167))+((cj0*x4163))+((r02*x4161))+((r01*x4171))+(((-1.0)*x4166*x4168)));
evalcond[5]=(((r11*x4171))+(((-1.0)*x4165*x4168))+((r12*x4161))+((sj0*x4163))+((sj0*x4167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4172=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x4172.valid){
continue;
}
CheckValue<IkReal> x4173 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4172.value)))+(x4173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4174=IKsin(j4);
IkReal x4175=IKcos(j4);
IkReal x4176=(cj2*sj1);
IkReal x4177=(gconst101*r20);
IkReal x4178=(gconst101*r10);
IkReal x4179=(gconst101*r00);
IkReal x4180=(cj1*sj2);
IkReal x4181=((1.0)*x4175);
IkReal x4182=((1.0)*x4174);
IkReal x4183=(gconst100*x4174);
IkReal x4184=(gconst100*x4175);
evalcond[0]=(((r21*x4183))+(((-1.0)*x4177*x4182))+(((-1.0)*r22*x4181)));
evalcond[1]=(sj0+(((-1.0)*r02*x4181))+((r01*x4183))+(((-1.0)*x4179*x4182)));
evalcond[2]=((((-1.0)*r12*x4181))+((r11*x4183))+(((-1.0)*x4178*x4182))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x4184))+((r22*x4174))+(((-1.0)*x4177*x4181))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((cj0*x4176))+((r01*x4184))+(((-1.0)*x4179*x4181))+((r02*x4174))+((cj0*x4180)));
evalcond[5]=(((sj0*x4180))+((r12*x4174))+((r11*x4184))+((sj0*x4176))+(((-1.0)*x4178*x4181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4186 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4186)==0){
continue;
}
IkReal x4185=pow(x4186,-0.5);
CheckValue<IkReal> x4187 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4187.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4187.value));
IkReal gconst103=((-1.0)*r01*x4185);
IkReal gconst104=(r00*x4185);
CheckValue<IkReal> x4188 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4188.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4188.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4191 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4191.valid){
continue;
}
IkReal x4189=((-1.0)*(x4191.value));
IkReal x4190=x4185;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4189;
IkReal gconst102=x4189;
IkReal gconst103=((-1.0)*r01*x4190);
IkReal gconst104=(r00*x4190);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4192=((1.0)*gconst104);
CheckValue<IkReal> x4193=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x4192)))),-1);
if(!x4193.valid){
continue;
}
CheckValue<IkReal> x4194 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x4192))+((cj0*gconst103*r01))+(((-1.0)*r10*sj0*x4192))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4193.value)))+(x4194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4195=IKsin(j4);
IkReal x4196=IKcos(j4);
IkReal x4197=(gconst103*r11);
IkReal x4198=(cj2*sj1);
IkReal x4199=(gconst104*r10);
IkReal x4200=(gconst104*r20);
IkReal x4201=(gconst104*r00);
IkReal x4202=(cj1*sj2);
IkReal x4203=((1.0)*x4196);
IkReal x4204=(gconst103*x4196);
IkReal x4205=(gconst103*x4195);
IkReal x4206=((1.0)*x4195);
evalcond[0]=((((-1.0)*r22*x4203))+((r21*x4205))+(((-1.0)*x4200*x4206)));
evalcond[1]=(sj0+(((-1.0)*r02*x4203))+(((-1.0)*x4201*x4206))+((r01*x4205)));
evalcond[2]=((((-1.0)*r12*x4203))+(((-1.0)*x4199*x4206))+((x4195*x4197))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4195))+((r21*x4204))+(((-1.0)*x4200*x4203)));
evalcond[4]=(((cj0*x4198))+((cj0*x4202))+((r02*x4195))+(((-1.0)*x4201*x4203))+((r01*x4204)));
evalcond[5]=(((x4196*x4197))+((r12*x4195))+((sj0*x4198))+((sj0*x4202))+(((-1.0)*x4199*x4203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4207 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4207.valid){
continue;
}
CheckValue<IkReal> x4208=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x4208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4207.value)+(((1.5707963267949)*(x4208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4209=IKsin(j4);
IkReal x4210=IKcos(j4);
IkReal x4211=(gconst103*r11);
IkReal x4212=(cj2*sj1);
IkReal x4213=(gconst104*r10);
IkReal x4214=(gconst104*r20);
IkReal x4215=(gconst104*r00);
IkReal x4216=(cj1*sj2);
IkReal x4217=((1.0)*x4210);
IkReal x4218=(gconst103*x4210);
IkReal x4219=(gconst103*x4209);
IkReal x4220=((1.0)*x4209);
evalcond[0]=((((-1.0)*x4214*x4220))+(((-1.0)*r22*x4217))+((r21*x4219)));
evalcond[1]=(sj0+(((-1.0)*r02*x4217))+(((-1.0)*x4215*x4220))+((r01*x4219)));
evalcond[2]=((((-1.0)*r12*x4217))+((x4209*x4211))+(((-1.0)*x4213*x4220))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4209))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4214*x4217))+((r21*x4218)));
evalcond[4]=(((r02*x4209))+((cj0*x4216))+((cj0*x4212))+(((-1.0)*x4215*x4217))+((r01*x4218)));
evalcond[5]=((((-1.0)*x4213*x4217))+((x4210*x4211))+((sj0*x4216))+((sj0*x4212))+((r12*x4209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4222 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4222)==0){
continue;
}
IkReal x4221=pow(x4222,-0.5);
CheckValue<IkReal> x4223 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4223.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4223.value))));
IkReal gconst106=((1.0)*r01*x4221);
IkReal gconst107=((-1.0)*r00*x4221);
CheckValue<IkReal> x4224 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4224.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4224.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4227 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4227.valid){
continue;
}
IkReal x4225=((1.0)*(x4227.value));
IkReal x4226=x4221;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4225)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4225)));
IkReal gconst106=((1.0)*r01*x4226);
IkReal gconst107=((-1.0)*r00*x4226);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x4230 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4230.valid){
continue;
}
IkReal x4228=((1.0)*(x4230.value));
IkReal x4229=x4221;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4228)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4228)));
IkReal gconst106=((1.0)*r01*x4229);
IkReal gconst107=((-1.0)*r00*x4229);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4233 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4233.valid){
continue;
}
IkReal x4231=((1.0)*(x4233.value));
IkReal x4232=x4221;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4231)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4231)));
IkReal gconst106=((1.0)*r01*x4232);
IkReal gconst107=((-1.0)*r00*x4232);
IkReal x4234=r02*r02;
IkReal x4235=(r12*sj0);
IkReal x4236=x4221;
IkReal x4237=(cj0*x4236);
j4eval[0]=((IKabs((((r02*x4235*x4236))+(((-1.0)*x4237))+((x4234*x4237)))))+(IKabs((x4235+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4238=((1.0)*gconst107);
CheckValue<IkReal> x4239 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst106*r01))+((gconst106*r11*sj0))+(((-1.0)*cj0*r00*x4238))+(((-1.0)*r10*sj0*x4238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4239.valid){
continue;
}
CheckValue<IkReal> x4240=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4238))+(((-1.0)*gconst106*r20)))),-1);
if(!x4240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4239.value)+(((1.5707963267949)*(x4240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4241=IKsin(j4);
IkReal x4242=IKcos(j4);
IkReal x4243=(gconst107*r10);
IkReal x4244=(gconst107*r00);
IkReal x4245=(gconst107*r20);
IkReal x4246=(cj2*sj1);
IkReal x4247=(cj1*sj2);
IkReal x4248=((1.0)*x4242);
IkReal x4249=(gconst106*x4242);
IkReal x4250=(gconst106*x4241);
IkReal x4251=((1.0)*x4241);
evalcond[0]=((((-1.0)*x4245*x4251))+(((-1.0)*r22*x4248))+((r21*x4250)));
evalcond[1]=(sj0+((r01*x4250))+(((-1.0)*x4244*x4251))+(((-1.0)*r02*x4248)));
evalcond[2]=((((-1.0)*r12*x4248))+((r11*x4250))+(((-1.0)*x4243*x4251))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4241))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4249))+(((-1.0)*x4245*x4248)));
evalcond[4]=((((-1.0)*x4244*x4248))+((r01*x4249))+((r02*x4241))+((cj0*x4247))+((cj0*x4246)));
evalcond[5]=(((sj0*x4246))+((sj0*x4247))+(((-1.0)*x4243*x4248))+((r12*x4241))+((r11*x4249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4252 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4252.valid){
continue;
}
CheckValue<IkReal> x4253=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x4253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4252.value)+(((1.5707963267949)*(x4253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4254=IKsin(j4);
IkReal x4255=IKcos(j4);
IkReal x4256=(gconst107*r10);
IkReal x4257=(gconst107*r00);
IkReal x4258=(gconst107*r20);
IkReal x4259=(cj2*sj1);
IkReal x4260=(cj1*sj2);
IkReal x4261=((1.0)*x4255);
IkReal x4262=(gconst106*x4255);
IkReal x4263=(gconst106*x4254);
IkReal x4264=((1.0)*x4254);
evalcond[0]=(((r21*x4263))+(((-1.0)*x4258*x4264))+(((-1.0)*r22*x4261)));
evalcond[1]=(((r01*x4263))+sj0+(((-1.0)*r02*x4261))+(((-1.0)*x4257*x4264)));
evalcond[2]=((((-1.0)*r12*x4261))+((r11*x4263))+(((-1.0)*x4256*x4264))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x4262))+((r22*x4254))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4258*x4261)));
evalcond[4]=(((r01*x4262))+((cj0*x4259))+((r02*x4254))+((cj0*x4260))+(((-1.0)*x4257*x4261)));
evalcond[5]=(((r11*x4262))+(((-1.0)*x4256*x4261))+((r12*x4254))+((sj0*x4259))+((sj0*x4260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4265=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x4265.valid){
continue;
}
CheckValue<IkReal> x4266 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4265.value)))+(x4266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4267=IKsin(j4);
IkReal x4268=IKcos(j4);
IkReal x4269=(gconst107*r10);
IkReal x4270=(gconst107*r00);
IkReal x4271=(gconst107*r20);
IkReal x4272=(cj2*sj1);
IkReal x4273=(cj1*sj2);
IkReal x4274=((1.0)*x4268);
IkReal x4275=(gconst106*x4268);
IkReal x4276=(gconst106*x4267);
IkReal x4277=((1.0)*x4267);
evalcond[0]=(((r21*x4276))+(((-1.0)*r22*x4274))+(((-1.0)*x4271*x4277)));
evalcond[1]=(sj0+(((-1.0)*r02*x4274))+(((-1.0)*x4270*x4277))+((r01*x4276)));
evalcond[2]=((((-1.0)*r12*x4274))+((r11*x4276))+(((-1.0)*x4269*x4277))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x4275))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4271*x4274))+((r22*x4267)));
evalcond[4]=(((r02*x4267))+((cj0*x4272))+((cj0*x4273))+(((-1.0)*x4270*x4274))+((r01*x4275)));
evalcond[5]=(((r11*x4275))+((r12*x4267))+((sj0*x4272))+((sj0*x4273))+(((-1.0)*x4269*x4274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4278=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4278;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4279=((1.0)*cj5);
IkReal x4280=((((-1.0)*r21*x4279))+(((-1.0)*r20*sj5)));
j4eval[0]=x4280;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4279))+((r11*sj5))))));
j4eval[2]=IKsign(x4280);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4281=cj5*cj5;
IkReal x4282=r01*r01;
IkReal x4283=(r01*sj5);
IkReal x4284=(cj5*r00);
IkReal x4285=((((2.0)*x4283*x4284))+((x4281*x4282))+(((-1.0)*(r02*r02)))+(((-1.0)*x4281*(r00*r00)))+(((-1.0)*x4282)));
j4eval[0]=x4285;
j4eval[1]=IKsign(x4285);
j4eval[2]=((IKabs(r02))+(IKabs((x4283+(((-1.0)*x4284))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4286=cj5*cj5;
IkReal x4287=r01*r01;
IkReal x4288=(r01*sj5);
IkReal x4289=(cj5*r00);
CheckValue<IkReal> x4290=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x4286*x4287))+(((2.0)*x4288*x4289))+(((-1.0)*x4287))+(((-1.0)*x4286*(r00*r00))))),-1);
if(!x4290.valid){
continue;
}
CheckValue<IkReal> x4291 = IKatan2WithCheck(IkReal((x4288+(((-1.0)*x4289)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4290.value)))+(x4291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4292=IKcos(j4);
IkReal x4293=IKsin(j4);
IkReal x4294=(cj5*r00);
IkReal x4295=(cj5*r10);
IkReal x4296=(r21*sj5);
IkReal x4297=(cj5*r20);
IkReal x4298=((1.0)*x4292);
IkReal x4299=((1.0)*x4293);
IkReal x4300=(sj5*x4293);
IkReal x4301=(sj5*x4292);
evalcond[0]=((((-1.0)*x4294*x4298))+((r01*x4301))+((r02*x4293)));
evalcond[1]=(((x4293*x4296))+(((-1.0)*r22*x4298))+(((-1.0)*x4297*x4299)));
evalcond[2]=(((r11*x4300))+(((-1.0)*x4295*x4299))+(((-1.0)*r12*x4298)));
evalcond[3]=((1.0)+(((-1.0)*x4294*x4299))+((r01*x4300))+(((-1.0)*r02*x4298)));
evalcond[4]=(((cj2*sj1))+((r11*x4301))+((cj1*sj2))+(((-1.0)*x4295*x4298))+((r12*x4293)));
evalcond[5]=(((x4292*x4296))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4297*x4298))+((r22*x4293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4302=((1.0)*cj5);
CheckValue<IkReal> x4303=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4302))+(((-1.0)*r20*sj5)))),-1);
if(!x4303.valid){
continue;
}
CheckValue<IkReal> x4304 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4303.value)))+(x4304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4305=IKcos(j4);
IkReal x4306=IKsin(j4);
IkReal x4307=(cj5*r00);
IkReal x4308=(cj5*r10);
IkReal x4309=(r21*sj5);
IkReal x4310=(cj5*r20);
IkReal x4311=((1.0)*x4305);
IkReal x4312=((1.0)*x4306);
IkReal x4313=(sj5*x4306);
IkReal x4314=(sj5*x4305);
evalcond[0]=((((-1.0)*x4307*x4311))+((r02*x4306))+((r01*x4314)));
evalcond[1]=((((-1.0)*r22*x4311))+(((-1.0)*x4310*x4312))+((x4306*x4309)));
evalcond[2]=(((r11*x4313))+(((-1.0)*r12*x4311))+(((-1.0)*x4308*x4312)));
evalcond[3]=((1.0)+(((-1.0)*x4307*x4312))+((r01*x4313))+(((-1.0)*r02*x4311)));
evalcond[4]=(((cj2*sj1))+((r12*x4306))+((cj1*sj2))+((r11*x4314))+(((-1.0)*x4308*x4311)));
evalcond[5]=(((r22*x4306))+(((-1.0)*x4310*x4311))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4305*x4309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4315 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4315.valid){
continue;
}
CheckValue<IkReal> x4316=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4315.value)+(((1.5707963267949)*(x4316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4317=IKcos(j4);
IkReal x4318=IKsin(j4);
IkReal x4319=(cj5*r00);
IkReal x4320=(cj5*r10);
IkReal x4321=(r21*sj5);
IkReal x4322=(cj5*r20);
IkReal x4323=((1.0)*x4317);
IkReal x4324=((1.0)*x4318);
IkReal x4325=(sj5*x4318);
IkReal x4326=(sj5*x4317);
evalcond[0]=(((r02*x4318))+(((-1.0)*x4319*x4323))+((r01*x4326)));
evalcond[1]=(((x4318*x4321))+(((-1.0)*r22*x4323))+(((-1.0)*x4322*x4324)));
evalcond[2]=((((-1.0)*r12*x4323))+(((-1.0)*x4320*x4324))+((r11*x4325)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4323))+(((-1.0)*x4319*x4324))+((r01*x4325)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4318))+(((-1.0)*x4320*x4323))+((r11*x4326)));
evalcond[5]=(((x4317*x4321))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4322*x4323))+((r22*x4318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4327=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4327;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4328=((1.0)*cj5);
IkReal x4329=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4328)));
j4eval[0]=x4329;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4328))+((r21*sj5))))));
j4eval[2]=IKsign(x4329);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4330=cj5*cj5;
IkReal x4331=r01*r01;
IkReal x4332=(cj5*r00);
IkReal x4333=(r01*sj5);
IkReal x4334=(((x4330*(r00*r00)))+(((-2.0)*x4332*x4333))+(((-1.0)*x4330*x4331))+x4331+(r02*r02));
j4eval[0]=x4334;
j4eval[1]=IKsign(x4334);
j4eval[2]=((IKabs(((((-1.0)*x4332))+x4333)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4335=cj5*cj5;
IkReal x4336=r01*r01;
IkReal x4337=(r01*sj5);
IkReal x4338=(cj5*r00);
CheckValue<IkReal> x4339=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4337*x4338))+((x4335*(r00*r00)))+(((-1.0)*x4335*x4336))+x4336+(r02*r02))),-1);
if(!x4339.valid){
continue;
}
CheckValue<IkReal> x4340 = IKatan2WithCheck(IkReal(((((-1.0)*x4338))+x4337)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4339.value)))+(x4340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4341=IKcos(j4);
IkReal x4342=IKsin(j4);
IkReal x4343=(cj5*r00);
IkReal x4344=(cj5*r10);
IkReal x4345=(r21*sj5);
IkReal x4346=((1.0)*cj2);
IkReal x4347=(cj5*r20);
IkReal x4348=((1.0)*x4341);
IkReal x4349=((1.0)*x4342);
IkReal x4350=(sj5*x4342);
IkReal x4351=(sj5*x4341);
evalcond[0]=((((-1.0)*x4343*x4348))+((r02*x4342))+((r01*x4351)));
evalcond[1]=(((x4342*x4345))+(((-1.0)*r22*x4348))+(((-1.0)*x4347*x4349)));
evalcond[2]=((((-1.0)*x4344*x4349))+(((-1.0)*r12*x4348))+((r11*x4350)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4348))+(((-1.0)*x4343*x4349))+((r01*x4350)));
evalcond[4]=(((sj1*sj2))+((r22*x4342))+((x4341*x4345))+(((-1.0)*cj1*x4346))+(((-1.0)*x4347*x4348)));
evalcond[5]=((((-1.0)*x4344*x4348))+(((-1.0)*cj1*sj2))+((r12*x4342))+((r11*x4351))+(((-1.0)*sj1*x4346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4352=((1.0)*cj5);
CheckValue<IkReal> x4353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4352)))),-1);
if(!x4353.valid){
continue;
}
CheckValue<IkReal> x4354 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4353.value)))+(x4354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4355=IKcos(j4);
IkReal x4356=IKsin(j4);
IkReal x4357=(cj5*r00);
IkReal x4358=(cj5*r10);
IkReal x4359=(r21*sj5);
IkReal x4360=((1.0)*cj2);
IkReal x4361=(cj5*r20);
IkReal x4362=((1.0)*x4355);
IkReal x4363=((1.0)*x4356);
IkReal x4364=(sj5*x4356);
IkReal x4365=(sj5*x4355);
evalcond[0]=((((-1.0)*x4357*x4362))+((r01*x4365))+((r02*x4356)));
evalcond[1]=((((-1.0)*x4361*x4363))+(((-1.0)*r22*x4362))+((x4356*x4359)));
evalcond[2]=(((r11*x4364))+(((-1.0)*x4358*x4363))+(((-1.0)*r12*x4362)));
evalcond[3]=((-1.0)+(((-1.0)*x4357*x4363))+((r01*x4364))+(((-1.0)*r02*x4362)));
evalcond[4]=((((-1.0)*x4361*x4362))+(((-1.0)*cj1*x4360))+((r22*x4356))+((sj1*sj2))+((x4355*x4359)));
evalcond[5]=(((r11*x4365))+(((-1.0)*sj1*x4360))+(((-1.0)*cj1*sj2))+(((-1.0)*x4358*x4362))+((r12*x4356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4366=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4366.valid){
continue;
}
CheckValue<IkReal> x4367 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4366.value)))+(x4367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4368=IKcos(j4);
IkReal x4369=IKsin(j4);
IkReal x4370=(cj5*r00);
IkReal x4371=(cj5*r10);
IkReal x4372=(r21*sj5);
IkReal x4373=((1.0)*cj2);
IkReal x4374=(cj5*r20);
IkReal x4375=((1.0)*x4368);
IkReal x4376=((1.0)*x4369);
IkReal x4377=(sj5*x4369);
IkReal x4378=(sj5*x4368);
evalcond[0]=((((-1.0)*x4370*x4375))+((r01*x4378))+((r02*x4369)));
evalcond[1]=((((-1.0)*r22*x4375))+(((-1.0)*x4374*x4376))+((x4369*x4372)));
evalcond[2]=((((-1.0)*x4371*x4376))+((r11*x4377))+(((-1.0)*r12*x4375)));
evalcond[3]=((-1.0)+(((-1.0)*x4370*x4376))+((r01*x4377))+(((-1.0)*r02*x4375)));
evalcond[4]=(((x4368*x4372))+((sj1*sj2))+(((-1.0)*x4374*x4375))+((r22*x4369))+(((-1.0)*cj1*x4373)));
evalcond[5]=((((-1.0)*x4371*x4375))+(((-1.0)*cj1*sj2))+((r11*x4378))+((r12*x4369))+(((-1.0)*sj1*x4373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4380 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4380)==0){
continue;
}
IkReal x4379=pow(x4380,-0.5);
CheckValue<IkReal> x4381 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4381.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4381.value));
IkReal gconst109=((-1.0)*r11*x4379);
IkReal gconst110=(r10*x4379);
CheckValue<IkReal> x4382 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4382.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4382.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4385 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4385.valid){
continue;
}
IkReal x4383=((-1.0)*(x4385.value));
IkReal x4384=x4379;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4383;
IkReal gconst108=x4383;
IkReal gconst109=((-1.0)*r11*x4384);
IkReal gconst110=(r10*x4384);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4386=((1.0)*gconst110);
CheckValue<IkReal> x4387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x4386)))),-1);
if(!x4387.valid){
continue;
}
CheckValue<IkReal> x4388 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst109*r01))+(((-1.0)*r10*sj0*x4386))+((gconst109*r11*sj0))+(((-1.0)*cj0*r00*x4386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4387.value)))+(x4388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4389=IKsin(j4);
IkReal x4390=IKcos(j4);
IkReal x4391=(gconst109*r21);
IkReal x4392=(cj2*sj1);
IkReal x4393=(cj1*sj2);
IkReal x4394=((1.0)*x4390);
IkReal x4395=(gconst109*x4389);
IkReal x4396=(gconst109*x4390);
IkReal x4397=((1.0)*gconst110*x4389);
evalcond[0]=(((x4389*x4391))+(((-1.0)*r22*x4394))+(((-1.0)*r20*x4397)));
evalcond[1]=(((r01*x4395))+(((-1.0)*r02*x4394))+sj0+(((-1.0)*r00*x4397)));
evalcond[2]=((((-1.0)*r12*x4394))+(((-1.0)*r10*x4397))+((r11*x4395))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4389))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4390*x4391))+(((-1.0)*gconst110*r20*x4394)));
evalcond[4]=(((r01*x4396))+((cj0*x4393))+((cj0*x4392))+(((-1.0)*gconst110*r00*x4394))+((r02*x4389)));
evalcond[5]=((((-1.0)*gconst110*r10*x4394))+((r11*x4396))+((sj0*x4393))+((sj0*x4392))+((r12*x4389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4398=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x4398.valid){
continue;
}
CheckValue<IkReal> x4399 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4398.value)))+(x4399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4400=IKsin(j4);
IkReal x4401=IKcos(j4);
IkReal x4402=(gconst109*r21);
IkReal x4403=(cj2*sj1);
IkReal x4404=(cj1*sj2);
IkReal x4405=((1.0)*x4401);
IkReal x4406=(gconst109*x4400);
IkReal x4407=(gconst109*x4401);
IkReal x4408=((1.0)*gconst110*x4400);
evalcond[0]=(((x4400*x4402))+(((-1.0)*r20*x4408))+(((-1.0)*r22*x4405)));
evalcond[1]=(sj0+(((-1.0)*r00*x4408))+((r01*x4406))+(((-1.0)*r02*x4405)));
evalcond[2]=(((r11*x4406))+(((-1.0)*r10*x4408))+(((-1.0)*r12*x4405))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4400))+((x4401*x4402))+(((-1.0)*gconst110*r20*x4405))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*gconst110*r00*x4405))+((r01*x4407))+((cj0*x4404))+((cj0*x4403))+((r02*x4400)));
evalcond[5]=(((r11*x4407))+(((-1.0)*gconst110*r10*x4405))+((r12*x4400))+((sj0*x4403))+((sj0*x4404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4410 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4410)==0){
continue;
}
IkReal x4409=pow(x4410,-0.5);
CheckValue<IkReal> x4411 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4411.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4411.value))));
IkReal gconst112=((1.0)*r11*x4409);
IkReal gconst113=((-1.0)*r10*x4409);
CheckValue<IkReal> x4412 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4412.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4412.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4415 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4415.valid){
continue;
}
IkReal x4413=((1.0)*(x4415.value));
IkReal x4414=x4409;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4413)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4413)));
IkReal gconst112=((1.0)*r11*x4414);
IkReal gconst113=((-1.0)*r10*x4414);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4418 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4418.valid){
continue;
}
IkReal x4416=((1.0)*(x4418.value));
IkReal x4417=x4409;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4416)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4416)));
IkReal gconst112=((1.0)*r11*x4417);
IkReal gconst113=((-1.0)*r10*x4417);
IkReal x4419=r12*r12;
IkReal x4420=(cj0*r02);
IkReal x4421=x4409;
IkReal x4422=(sj0*x4421);
j4eval[0]=((IKabs((((x4419*x4422))+(((-1.0)*x4422))+((r12*x4420*x4421)))))+(IKabs((x4420+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4425 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4425.valid){
continue;
}
IkReal x4423=((1.0)*(x4425.value));
IkReal x4424=x4409;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4423)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4423)));
IkReal gconst112=((1.0)*r11*x4424);
IkReal gconst113=((-1.0)*r10*x4424);
IkReal x4426=r12*r12;
IkReal x4427=(sj1*sj2);
IkReal x4428=((1.0)+(((-1.0)*x4426)));
IkReal x4429=((1.0)*cj1*cj2);
CheckValue<IkReal> x4436=IKPowWithIntegerCheck(x4428,-1);
if(!x4436.valid){
continue;
}
IkReal x4430=x4436.value;
CheckValue<IkReal> x4437=IKPowWithIntegerCheck(((-1.0)+x4426),-1);
if(!x4437.valid){
continue;
}
IkReal x4431=x4437.value;
IkReal x4432=((1.0)*x4430);
if((x4428) < -0.00001)
continue;
IkReal x4433=IKsqrt(x4428);
IkReal x4434=(r12*r22*x4431*x4433);
IkReal x4435=((((-1.0)*(r22*r22)))+(((-1.0)*x4432*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4430))+(((-1.0)*x4432*(r10*r10)*(r20*r20))));
j4eval[0]=x4435;
j4eval[1]=((IKabs((((r22*x4427))+(((-1.0)*r22*x4429)))))+(IKabs(((((-1.0)*x4429*x4434))+((x4427*x4434))))));
j4eval[2]=IKsign(x4435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4438=(sj1*sj2);
IkReal x4439=(gconst112*r21);
IkReal x4440=(gconst113*r20);
IkReal x4441=(cj1*cj2);
CheckValue<IkReal> x4442=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4440*x4440)))+(((-1.0)*(r22*r22)))+(((2.0)*x4439*x4440))+(((-1.0)*(x4439*x4439))))),-1);
if(!x4442.valid){
continue;
}
CheckValue<IkReal> x4443 = IKatan2WithCheck(IkReal((((r22*x4438))+(((-1.0)*r22*x4441)))),IkReal((((x4440*x4441))+((x4438*x4439))+(((-1.0)*x4439*x4441))+(((-1.0)*x4438*x4440)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4442.value)))+(x4443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4444=IKsin(j4);
IkReal x4445=IKcos(j4);
IkReal x4446=(cj2*sj1);
IkReal x4447=(gconst113*r20);
IkReal x4448=(gconst112*r21);
IkReal x4449=(gconst113*r00);
IkReal x4450=(gconst113*r10);
IkReal x4451=(cj1*sj2);
IkReal x4452=((1.0)*x4445);
IkReal x4453=((1.0)*x4444);
IkReal x4454=(gconst112*x4445);
IkReal x4455=(gconst112*x4444);
evalcond[0]=((((-1.0)*r22*x4452))+((x4444*x4448))+(((-1.0)*x4447*x4453)));
evalcond[1]=(sj0+((r01*x4455))+(((-1.0)*r02*x4452))+(((-1.0)*x4449*x4453)));
evalcond[2]=((((-1.0)*r12*x4452))+((r11*x4455))+(((-1.0)*x4450*x4453))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4447*x4452))+((x4445*x4448))+((r22*x4444)));
evalcond[4]=(((r01*x4454))+((cj0*x4451))+(((-1.0)*x4449*x4452))+((cj0*x4446))+((r02*x4444)));
evalcond[5]=(((sj0*x4446))+((r11*x4454))+((r12*x4444))+(((-1.0)*x4450*x4452))+((sj0*x4451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4456=((1.0)*gconst113);
CheckValue<IkReal> x4457 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*r10*sj0*x4456))+(((-1.0)*cj0*r00*x4456))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4457.valid){
continue;
}
CheckValue<IkReal> x4458=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r20))+(((-1.0)*r21*x4456)))),-1);
if(!x4458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4457.value)+(((1.5707963267949)*(x4458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4459=IKsin(j4);
IkReal x4460=IKcos(j4);
IkReal x4461=(cj2*sj1);
IkReal x4462=(gconst113*r20);
IkReal x4463=(gconst112*r21);
IkReal x4464=(gconst113*r00);
IkReal x4465=(gconst113*r10);
IkReal x4466=(cj1*sj2);
IkReal x4467=((1.0)*x4460);
IkReal x4468=((1.0)*x4459);
IkReal x4469=(gconst112*x4460);
IkReal x4470=(gconst112*x4459);
evalcond[0]=((((-1.0)*x4462*x4468))+(((-1.0)*r22*x4467))+((x4459*x4463)));
evalcond[1]=((((-1.0)*x4464*x4468))+sj0+(((-1.0)*r02*x4467))+((r01*x4470)));
evalcond[2]=((((-1.0)*x4465*x4468))+(((-1.0)*r12*x4467))+(((-1.0)*cj0))+((r11*x4470)));
evalcond[3]=((((-1.0)*x4462*x4467))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4460*x4463))+((r22*x4459)));
evalcond[4]=((((-1.0)*x4464*x4467))+((r01*x4469))+((r02*x4459))+((cj0*x4466))+((cj0*x4461)));
evalcond[5]=((((-1.0)*x4465*x4467))+((r11*x4469))+((sj0*x4461))+((sj0*x4466))+((r12*x4459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4471=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4471.valid){
continue;
}
CheckValue<IkReal> x4472 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4471.value)))+(x4472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4473=IKsin(j4);
IkReal x4474=IKcos(j4);
IkReal x4475=(cj2*sj1);
IkReal x4476=(gconst113*r20);
IkReal x4477=(gconst112*r21);
IkReal x4478=(gconst113*r00);
IkReal x4479=(gconst113*r10);
IkReal x4480=(cj1*sj2);
IkReal x4481=((1.0)*x4474);
IkReal x4482=((1.0)*x4473);
IkReal x4483=(gconst112*x4474);
IkReal x4484=(gconst112*x4473);
evalcond[0]=((((-1.0)*x4476*x4482))+((x4473*x4477))+(((-1.0)*r22*x4481)));
evalcond[1]=(sj0+(((-1.0)*x4478*x4482))+((r01*x4484))+(((-1.0)*r02*x4481)));
evalcond[2]=(((r11*x4484))+(((-1.0)*r12*x4481))+(((-1.0)*x4479*x4482))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4476*x4481))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4473))+((x4474*x4477)));
evalcond[4]=(((cj0*x4480))+((cj0*x4475))+(((-1.0)*x4478*x4481))+((r02*x4473))+((r01*x4483)));
evalcond[5]=(((r11*x4483))+((sj0*x4480))+((sj0*x4475))+(((-1.0)*x4479*x4481))+((r12*x4473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4485=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4485;
j4eval[1]=IKsign(x4485);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4486=((1.0)*cj5);
IkReal x4487=((((-1.0)*r21*x4486))+(((-1.0)*r20*sj5)));
j4eval[0]=x4487;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4486))))));
j4eval[2]=IKsign(x4487);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4488=cj5*cj5;
IkReal x4489=r11*r11;
IkReal x4490=(r11*sj5);
IkReal x4491=(cj5*r10);
IkReal x4492=((((-1.0)*x4488*x4489))+(r12*r12)+x4489+((x4488*(r10*r10)))+(((-2.0)*x4490*x4491)));
j4eval[0]=x4492;
j4eval[1]=IKsign(x4492);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4491))+x4490))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4493=cj5*cj5;
IkReal x4494=r11*r11;
IkReal x4495=(cj5*r10);
IkReal x4496=(r11*sj5);
CheckValue<IkReal> x4497 = IKatan2WithCheck(IkReal(((((-1.0)*x4495))+x4496)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4497.valid){
continue;
}
CheckValue<IkReal> x4498=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4494+((x4493*(r10*r10)))+(((-1.0)*x4493*x4494))+(((-2.0)*x4495*x4496)))),-1);
if(!x4498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4497.value)+(((1.5707963267949)*(x4498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4499=IKcos(j4);
IkReal x4500=IKsin(j4);
IkReal x4501=(cj5*r00);
IkReal x4502=(cj5*r10);
IkReal x4503=(r21*sj5);
IkReal x4504=(cj5*r20);
IkReal x4505=((1.0)*x4499);
IkReal x4506=((1.0)*x4500);
IkReal x4507=(sj5*x4500);
IkReal x4508=(sj5*x4499);
evalcond[0]=(((r12*x4500))+((r11*x4508))+(((-1.0)*x4502*x4505)));
evalcond[1]=(((x4500*x4503))+(((-1.0)*r22*x4505))+(((-1.0)*x4504*x4506)));
evalcond[2]=((((-1.0)*r02*x4505))+(((-1.0)*x4501*x4506))+((r01*x4507)));
evalcond[3]=((-1.0)+((r11*x4507))+(((-1.0)*r12*x4505))+(((-1.0)*x4502*x4506)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4500))+(((-1.0)*x4501*x4505))+((r01*x4508)));
evalcond[5]=(((r22*x4500))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4504*x4505))+((x4499*x4503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4509=((1.0)*cj5);
CheckValue<IkReal> x4510 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x4509))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4510.valid){
continue;
}
CheckValue<IkReal> x4511=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4509))+(((-1.0)*r20*sj5)))),-1);
if(!x4511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4510.value)+(((1.5707963267949)*(x4511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4512=IKcos(j4);
IkReal x4513=IKsin(j4);
IkReal x4514=(cj5*r00);
IkReal x4515=(cj5*r10);
IkReal x4516=(r21*sj5);
IkReal x4517=(cj5*r20);
IkReal x4518=((1.0)*x4512);
IkReal x4519=((1.0)*x4513);
IkReal x4520=(sj5*x4513);
IkReal x4521=(sj5*x4512);
evalcond[0]=(((r11*x4521))+(((-1.0)*x4515*x4518))+((r12*x4513)));
evalcond[1]=(((x4513*x4516))+(((-1.0)*r22*x4518))+(((-1.0)*x4517*x4519)));
evalcond[2]=(((r01*x4520))+(((-1.0)*r02*x4518))+(((-1.0)*x4514*x4519)));
evalcond[3]=((-1.0)+((r11*x4520))+(((-1.0)*r12*x4518))+(((-1.0)*x4515*x4519)));
evalcond[4]=(((r02*x4513))+((r01*x4521))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4514*x4518)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4512*x4516))+((r22*x4513))+(((-1.0)*x4517*x4518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4522 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4522.valid){
continue;
}
CheckValue<IkReal> x4523=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4522.value)+(((1.5707963267949)*(x4523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4524=IKcos(j4);
IkReal x4525=IKsin(j4);
IkReal x4526=(cj5*r00);
IkReal x4527=(cj5*r10);
IkReal x4528=(r21*sj5);
IkReal x4529=(cj5*r20);
IkReal x4530=((1.0)*x4524);
IkReal x4531=((1.0)*x4525);
IkReal x4532=(sj5*x4525);
IkReal x4533=(sj5*x4524);
evalcond[0]=(((r12*x4525))+(((-1.0)*x4527*x4530))+((r11*x4533)));
evalcond[1]=(((x4525*x4528))+(((-1.0)*r22*x4530))+(((-1.0)*x4529*x4531)));
evalcond[2]=(((r01*x4532))+(((-1.0)*x4526*x4531))+(((-1.0)*r02*x4530)));
evalcond[3]=((-1.0)+(((-1.0)*x4527*x4531))+(((-1.0)*r12*x4530))+((r11*x4532)));
evalcond[4]=(((cj2*sj1))+((r01*x4533))+((cj1*sj2))+((r02*x4525))+(((-1.0)*x4526*x4530)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4524*x4528))+((r22*x4525))+(((-1.0)*x4529*x4530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4534=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4534;
j4eval[1]=IKsign(x4534);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4535=((1.0)*cj5);
IkReal x4536=((((-1.0)*r01*x4535))+(((-1.0)*r00*sj5)));
j4eval[0]=x4536;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4535)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4537=(sj1*sj2);
IkReal x4538=(cj5*r10);
IkReal x4539=(r11*sj5);
IkReal x4540=(cj1*cj2);
IkReal x4541=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4541;
j4eval[1]=((IKabs(((((-1.0)*r12*x4537))+((r12*x4540)))))+(IKabs(((((-1.0)*x4537*x4538))+((x4537*x4539))+(((-1.0)*x4539*x4540))+((x4538*x4540))))));
j4eval[2]=IKsign(x4541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4542=(sj1*sj2);
IkReal x4543=(cj5*r10);
IkReal x4544=(r11*sj5);
IkReal x4545=(cj1*cj2);
CheckValue<IkReal> x4546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4546.valid){
continue;
}
CheckValue<IkReal> x4547 = IKatan2WithCheck(IkReal(((((-1.0)*x4542*x4543))+((x4542*x4544))+((x4543*x4545))+(((-1.0)*x4544*x4545)))),IkReal((((r12*x4545))+(((-1.0)*r12*x4542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4546.value)))+(x4547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4548=IKcos(j4);
IkReal x4549=IKsin(j4);
IkReal x4550=(cj5*r00);
IkReal x4551=(cj5*r10);
IkReal x4552=(r21*sj5);
IkReal x4553=((1.0)*cj2);
IkReal x4554=(cj5*r20);
IkReal x4555=((1.0)*x4548);
IkReal x4556=((1.0)*x4549);
IkReal x4557=(sj5*x4549);
IkReal x4558=(sj5*x4548);
evalcond[0]=((((-1.0)*x4551*x4555))+((r11*x4558))+((r12*x4549)));
evalcond[1]=((((-1.0)*r22*x4555))+(((-1.0)*x4554*x4556))+((x4549*x4552)));
evalcond[2]=(((r01*x4557))+(((-1.0)*x4550*x4556))+(((-1.0)*r02*x4555)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4555))+(((-1.0)*x4551*x4556))+((r11*x4557)));
evalcond[4]=(((r22*x4549))+(((-1.0)*cj1*x4553))+((sj1*sj2))+(((-1.0)*x4554*x4555))+((x4548*x4552)));
evalcond[5]=(((r01*x4558))+((r02*x4549))+(((-1.0)*x4550*x4555))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4559=((1.0)*cj5);
CheckValue<IkReal> x4560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4559))+(((-1.0)*r00*sj5)))),-1);
if(!x4560.valid){
continue;
}
CheckValue<IkReal> x4561 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4560.value)))+(x4561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4562=IKcos(j4);
IkReal x4563=IKsin(j4);
IkReal x4564=(cj5*r00);
IkReal x4565=(cj5*r10);
IkReal x4566=(r21*sj5);
IkReal x4567=((1.0)*cj2);
IkReal x4568=(cj5*r20);
IkReal x4569=((1.0)*x4562);
IkReal x4570=((1.0)*x4563);
IkReal x4571=(sj5*x4563);
IkReal x4572=(sj5*x4562);
evalcond[0]=(((r12*x4563))+((r11*x4572))+(((-1.0)*x4565*x4569)));
evalcond[1]=((((-1.0)*r22*x4569))+(((-1.0)*x4568*x4570))+((x4563*x4566)));
evalcond[2]=((((-1.0)*x4564*x4570))+(((-1.0)*r02*x4569))+((r01*x4571)));
evalcond[3]=((1.0)+((r11*x4571))+(((-1.0)*r12*x4569))+(((-1.0)*x4565*x4570)));
evalcond[4]=(((r22*x4563))+(((-1.0)*cj1*x4567))+((sj1*sj2))+(((-1.0)*x4568*x4569))+((x4562*x4566)));
evalcond[5]=((((-1.0)*sj1*x4567))+((r02*x4563))+(((-1.0)*cj1*sj2))+(((-1.0)*x4564*x4569))+((r01*x4572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4573=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4573.valid){
continue;
}
CheckValue<IkReal> x4574 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4573.value)))+(x4574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4575=IKcos(j4);
IkReal x4576=IKsin(j4);
IkReal x4577=(cj5*r00);
IkReal x4578=(cj5*r10);
IkReal x4579=(r21*sj5);
IkReal x4580=((1.0)*cj2);
IkReal x4581=(cj5*r20);
IkReal x4582=((1.0)*x4575);
IkReal x4583=((1.0)*x4576);
IkReal x4584=(sj5*x4576);
IkReal x4585=(sj5*x4575);
evalcond[0]=(((r12*x4576))+((r11*x4585))+(((-1.0)*x4578*x4582)));
evalcond[1]=((((-1.0)*r22*x4582))+(((-1.0)*x4581*x4583))+((x4576*x4579)));
evalcond[2]=((((-1.0)*r02*x4582))+(((-1.0)*x4577*x4583))+((r01*x4584)));
evalcond[3]=((1.0)+((r11*x4584))+(((-1.0)*r12*x4582))+(((-1.0)*x4578*x4583)));
evalcond[4]=(((r22*x4576))+((sj1*sj2))+(((-1.0)*x4581*x4582))+((x4575*x4579))+(((-1.0)*cj1*x4580)));
evalcond[5]=(((r02*x4576))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4580))+(((-1.0)*x4577*x4582))+((r01*x4585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4586=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4586);
rxp0_2=(py*r00);
rxp1_0=(r21*x4586);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4587=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4587);
rxp0_2=(py*r00);
rxp1_0=(r21*x4587);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4588=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4588);
rxp0_2=(py*r00);
rxp1_0=(r21*x4588);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4591=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x4591.valid){
continue;
}
IkReal x4589=x4591.value;
IkReal x4590=((1.0)*cj0*x4589);
cj4array[0]=((((-1.0)*cj1*sj2*x4590))+(((-1.0)*cj2*sj1*x4590)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4592=IKsin(j4);
IkReal x4593=IKcos(j4);
IkReal x4594=(r21*sj5);
IkReal x4595=((1.0)*x4593);
IkReal x4596=((1.0)*cj5*x4592);
evalcond[0]=(r12*x4592);
evalcond[1]=((((-1.0)*r12*x4595))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x4596))+((x4592*x4594)));
evalcond[3]=((((-1.0)*r00*x4596))+((r01*sj5*x4592)));
evalcond[4]=(((x4593*x4594))+(((-1.0)*cj5*r20*x4595))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4598=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4598.valid){
continue;
}
IkReal x4597=x4598.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4597))+((cj1*cj2*x4597)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4599=IKsin(j4);
IkReal x4600=IKcos(j4);
IkReal x4601=(r01*sj5);
IkReal x4602=((1.0)*cj5*r00);
evalcond[0]=(r12*x4599);
evalcond[1]=((((-1.0)*r12*x4600))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x4599))+(((-1.0)*cj5*r20*x4599)));
evalcond[3]=(((x4599*x4601))+(((-1.0)*x4599*x4602)));
evalcond[4]=((((-1.0)*x4600*x4602))+((x4600*x4601))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4603=IKPowWithIntegerCheck(r12,-1);
if(!x4603.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4603.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4604=IKsin(j4);
IkReal x4605=IKcos(j4);
IkReal x4606=(sj5*x4605);
IkReal x4607=(sj5*x4604);
IkReal x4608=((1.0)*cj5*x4604);
IkReal x4609=((1.0)*cj5*x4605);
evalcond[0]=(r12*x4604);
evalcond[1]=(((r21*x4607))+(((-1.0)*r20*x4608)));
evalcond[2]=(((r01*x4607))+(((-1.0)*r00*x4608)));
evalcond[3]=(((r21*x4606))+(((-1.0)*r20*x4609))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r01*x4606))+((cj0*cj2*sj1))+(((-1.0)*r00*x4609))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4610=((1.0)*cj5);
CheckValue<IkReal> x4611 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x4610))+(((-1.0)*cj0*r00*x4610))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4611.valid){
continue;
}
CheckValue<IkReal> x4612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4610))+(((-1.0)*r20*sj5)))),-1);
if(!x4612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4611.value)+(((1.5707963267949)*(x4612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4613=IKsin(j4);
IkReal x4614=IKcos(j4);
IkReal x4615=(cj5*r00);
IkReal x4616=(cj5*r10);
IkReal x4617=(cj2*sj1);
IkReal x4618=(r21*sj5);
IkReal x4619=(cj5*r20);
IkReal x4620=(cj1*sj2);
IkReal x4621=((1.0)*x4614);
IkReal x4622=((1.0)*x4613);
IkReal x4623=(sj5*x4613);
IkReal x4624=(sj5*x4614);
evalcond[0]=((((-1.0)*r22*x4621))+(((-1.0)*x4619*x4622))+((x4613*x4618)));
evalcond[1]=(sj0+(((-1.0)*r02*x4621))+((r01*x4623))+(((-1.0)*x4615*x4622)));
evalcond[2]=(((r11*x4623))+(((-1.0)*x4616*x4622))+(((-1.0)*r12*x4621))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4613))+((x4614*x4618))+(((-1.0)*x4619*x4621)));
evalcond[4]=(((cj0*x4620))+((r02*x4613))+((r01*x4624))+(((-1.0)*x4615*x4621))+((cj0*x4617)));
evalcond[5]=(((r11*x4624))+((sj0*x4617))+((r12*x4613))+(((-1.0)*x4616*x4621))+((sj0*x4620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4625=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4625.valid){
continue;
}
CheckValue<IkReal> x4626 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4625.value)))+(x4626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4627=IKsin(j4);
IkReal x4628=IKcos(j4);
IkReal x4629=(cj5*r00);
IkReal x4630=(cj5*r10);
IkReal x4631=(cj2*sj1);
IkReal x4632=(r21*sj5);
IkReal x4633=(cj5*r20);
IkReal x4634=(cj1*sj2);
IkReal x4635=((1.0)*x4628);
IkReal x4636=((1.0)*x4627);
IkReal x4637=(sj5*x4627);
IkReal x4638=(sj5*x4628);
evalcond[0]=((((-1.0)*x4633*x4636))+((x4627*x4632))+(((-1.0)*r22*x4635)));
evalcond[1]=(((r01*x4637))+sj0+(((-1.0)*r02*x4635))+(((-1.0)*x4629*x4636)));
evalcond[2]=(((r11*x4637))+(((-1.0)*x4630*x4636))+(((-1.0)*r12*x4635))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4627))+((x4628*x4632))+(((-1.0)*x4633*x4635)));
evalcond[4]=(((r01*x4638))+((r02*x4627))+(((-1.0)*x4629*x4635))+((cj0*x4631))+((cj0*x4634)));
evalcond[5]=(((r12*x4627))+((r11*x4638))+((sj0*x4631))+((sj0*x4634))+(((-1.0)*x4630*x4635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4639=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4639.valid){
continue;
}
CheckValue<IkReal> x4640 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4639.value)))+(x4640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4641=IKsin(j4);
IkReal x4642=IKcos(j4);
IkReal x4643=(cj5*r00);
IkReal x4644=(cj5*r10);
IkReal x4645=(cj2*sj1);
IkReal x4646=(r21*sj5);
IkReal x4647=(cj5*r20);
IkReal x4648=(cj1*sj2);
IkReal x4649=((1.0)*x4642);
IkReal x4650=((1.0)*x4641);
IkReal x4651=(sj5*x4641);
IkReal x4652=(sj5*x4642);
evalcond[0]=((((-1.0)*x4647*x4650))+((x4641*x4646))+(((-1.0)*r22*x4649)));
evalcond[1]=(sj0+(((-1.0)*r02*x4649))+(((-1.0)*x4643*x4650))+((r01*x4651)));
evalcond[2]=(((r11*x4651))+(((-1.0)*x4644*x4650))+(((-1.0)*r12*x4649))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4647*x4649))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4641))+((x4642*x4646)));
evalcond[4]=(((r02*x4641))+((r01*x4652))+(((-1.0)*x4643*x4649))+((cj0*x4645))+((cj0*x4648)));
evalcond[5]=(((r11*x4652))+((sj0*x4648))+((sj0*x4645))+((r12*x4641))+(((-1.0)*x4644*x4649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4653=((1.0)*cj5);
IkReal x4654=((1.0)*sj5);
IkReal x4655=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x4655;
j0eval[1]=((IKabs(((((-1.0)*r00*x4654))+(((-1.0)*r01*x4653)))))+(IKabs(((((-1.0)*r11*x4653))+(((-1.0)*r10*x4654))))));
j0eval[2]=IKsign(x4655);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4656=r21*r21;
IkReal x4657=cj5*cj5;
IkReal x4658=(cj2*sj1);
IkReal x4659=(cj1*sj2);
IkReal x4660=(r21*sj5);
IkReal x4661=((1.0)*cj5*r20);
IkReal x4662=((((-1.0)*x4657*(r20*r20)))+(((-1.0)*x4656))+(((-1.0)*(r22*r22)))+((x4656*x4657))+(((2.0)*cj5*r20*x4660)));
j4eval[0]=x4662;
j4eval[1]=((IKabs((((r22*x4659))+((r22*x4658)))))+(IKabs(((((-1.0)*x4659*x4661))+(((-1.0)*x4658*x4661))+((x4658*x4660))+((x4659*x4660))))));
j4eval[2]=IKsign(x4662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4663=cj1*cj1;
IkReal x4664=(cj2*sj2);
IkReal x4665=(cj1*sj1);
j0eval[0]=(x4664+x4665+(((-1.08349267049076)*cj2*x4665))+(((-2.0)*x4663*x4664))+(((-1.08349267049076)*sj2*x4663))+(((-2.0)*x4665*(cj2*cj2))));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((-0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((-0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4666=IKsin(j0);
IkReal x4667=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x4667))+(((0.10915)*x4666)));
evalcond[1]=((((-1.0)*py))+(((-0.81725)*x4666))+(((-0.10915)*x4667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4668=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4668;
j4eval[1]=IKsign(x4668);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4669=((1.0)*cj5);
IkReal x4670=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4669)));
j4eval[0]=x4670;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4669))))));
j4eval[2]=IKsign(x4670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4671=cj5*cj5;
IkReal x4672=((1.0)*r20);
IkReal x4673=(r01*r21);
IkReal x4674=(r21*sj5);
IkReal x4675=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4673))+((cj5*r00*x4674))+(((-1.0)*r00*x4671*x4672))+((x4671*x4673)));
j4eval[0]=x4675;
j4eval[1]=((IKabs((((cj0*x4674))+(((-1.0)*cj0*cj5*x4672)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4676=cj5*cj5;
IkReal x4677=((1.0)*r20);
IkReal x4678=(r01*r21);
IkReal x4679=(r21*sj5);
CheckValue<IkReal> x4680=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x4676*x4678))+(((-1.0)*r02*r22))+(((-1.0)*x4678))+(((-1.0)*r00*x4676*x4677))+((cj5*r00*x4679)))),-1);
if(!x4680.valid){
continue;
}
CheckValue<IkReal> x4681 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4679))+(((-1.0)*cj0*cj5*x4677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4680.value)))+(x4681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4682=IKcos(j4);
IkReal x4683=IKsin(j4);
IkReal x4684=(cj5*r00);
IkReal x4685=(cj5*r10);
IkReal x4686=(cj5*r20);
IkReal x4687=((1.0)*x4682);
IkReal x4688=((1.0)*x4683);
IkReal x4689=(sj5*x4682);
IkReal x4690=(sj5*x4683);
evalcond[0]=((((-1.0)*x4686*x4687))+((r22*x4683))+((r21*x4689)));
evalcond[1]=((((-1.0)*x4686*x4688))+((r21*x4690))+(((-1.0)*r22*x4687)));
evalcond[2]=((((-1.0)*x4684*x4687))+cj0+((r02*x4683))+((r01*x4689)));
evalcond[3]=(sj0+(((-1.0)*x4685*x4687))+((r12*x4683))+((r11*x4689)));
evalcond[4]=(sj0+(((-1.0)*x4684*x4688))+((r01*x4690))+(((-1.0)*r02*x4687)));
evalcond[5]=((((-1.0)*x4685*x4688))+((r11*x4690))+(((-1.0)*cj0))+(((-1.0)*r12*x4687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4691=((1.0)*cj5);
CheckValue<IkReal> x4692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4691)))),-1);
if(!x4692.valid){
continue;
}
CheckValue<IkReal> x4693 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4691)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4692.value)))+(x4693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4694=IKcos(j4);
IkReal x4695=IKsin(j4);
IkReal x4696=(cj5*r00);
IkReal x4697=(cj5*r10);
IkReal x4698=(cj5*r20);
IkReal x4699=((1.0)*x4694);
IkReal x4700=((1.0)*x4695);
IkReal x4701=(sj5*x4694);
IkReal x4702=(sj5*x4695);
evalcond[0]=((((-1.0)*x4698*x4699))+((r21*x4701))+((r22*x4695)));
evalcond[1]=(((r21*x4702))+(((-1.0)*x4698*x4700))+(((-1.0)*r22*x4699)));
evalcond[2]=(((r02*x4695))+cj0+(((-1.0)*x4696*x4699))+((r01*x4701)));
evalcond[3]=(sj0+((r12*x4695))+(((-1.0)*x4697*x4699))+((r11*x4701)));
evalcond[4]=(sj0+(((-1.0)*x4696*x4700))+(((-1.0)*r02*x4699))+((r01*x4702)));
evalcond[5]=((((-1.0)*r12*x4699))+(((-1.0)*x4697*x4700))+((r11*x4702))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4703 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4703.valid){
continue;
}
CheckValue<IkReal> x4704=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4703.value)+(((1.5707963267949)*(x4704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4705=IKcos(j4);
IkReal x4706=IKsin(j4);
IkReal x4707=(cj5*r00);
IkReal x4708=(cj5*r10);
IkReal x4709=(cj5*r20);
IkReal x4710=((1.0)*x4705);
IkReal x4711=((1.0)*x4706);
IkReal x4712=(sj5*x4705);
IkReal x4713=(sj5*x4706);
evalcond[0]=((((-1.0)*x4709*x4710))+((r21*x4712))+((r22*x4706)));
evalcond[1]=((((-1.0)*x4709*x4711))+(((-1.0)*r22*x4710))+((r21*x4713)));
evalcond[2]=(cj0+((r01*x4712))+(((-1.0)*x4707*x4710))+((r02*x4706)));
evalcond[3]=(sj0+(((-1.0)*x4708*x4710))+((r11*x4712))+((r12*x4706)));
evalcond[4]=((((-1.0)*r02*x4710))+sj0+((r01*x4713))+(((-1.0)*x4707*x4711)));
evalcond[5]=((((-1.0)*r12*x4710))+(((-1.0)*x4708*x4711))+(((-1.0)*cj0))+((r11*x4713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4050211434602)*px))+(((-2.52189136462044)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4050211434602)*px))+(((-2.52189136462044)*py))))+IKsqr(((((-2.52189136462044)*px))+(((-8.4050211434602)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4050211434602)*px))+(((-2.52189136462044)*py))), ((((-2.52189136462044)*px))+(((-8.4050211434602)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4714=IKsin(j0);
IkReal x4715=IKcos(j0);
evalcond[0]=((((-0.03275)*x4715))+(((-1.0)*px))+(((0.10915)*x4714)));
evalcond[1]=((((-0.03275)*x4714))+(((-0.10915)*x4715))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4716=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4716;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4717=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4717;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4718=((1.0)*cj5);
IkReal x4719=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4718)));
j4eval[0]=x4719;
j4eval[1]=IKsign(x4719);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4718))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4720=((1.0)*cj5);
CheckValue<IkReal> x4721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4720)))),-1);
if(!x4721.valid){
continue;
}
CheckValue<IkReal> x4722 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4720))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4721.value)))+(x4722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4723=IKcos(j4);
IkReal x4724=IKsin(j4);
IkReal x4725=((1.0)*cj0);
IkReal x4726=(cj5*r00);
IkReal x4727=(cj5*r10);
IkReal x4728=(cj5*r20);
IkReal x4729=((1.0)*x4723);
IkReal x4730=((1.0)*x4724);
IkReal x4731=(sj5*x4723);
IkReal x4732=(sj5*x4724);
evalcond[0]=((((-1.0)*x4728*x4729))+((r21*x4731))+((r22*x4724)));
evalcond[1]=((((-1.0)*x4728*x4730))+((r21*x4732))+(((-1.0)*r22*x4729)));
evalcond[2]=(sj0+(((-1.0)*x4726*x4730))+(((-1.0)*r02*x4729))+((r01*x4732)));
evalcond[3]=((((-1.0)*x4725))+((r02*x4724))+(((-1.0)*x4726*x4729))+((r01*x4731)));
evalcond[4]=(((r11*x4731))+(((-1.0)*sj0))+(((-1.0)*x4727*x4729))+((r12*x4724)));
evalcond[5]=(((r11*x4732))+(((-1.0)*x4725))+(((-1.0)*r12*x4729))+(((-1.0)*x4727*x4730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4733 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4733.valid){
continue;
}
CheckValue<IkReal> x4734=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4733.value)+(((1.5707963267949)*(x4734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4735=IKcos(j4);
IkReal x4736=IKsin(j4);
IkReal x4737=((1.0)*cj0);
IkReal x4738=(cj5*r00);
IkReal x4739=(cj5*r10);
IkReal x4740=(cj5*r20);
IkReal x4741=((1.0)*x4735);
IkReal x4742=((1.0)*x4736);
IkReal x4743=(sj5*x4735);
IkReal x4744=(sj5*x4736);
evalcond[0]=((((-1.0)*x4740*x4741))+((r22*x4736))+((r21*x4743)));
evalcond[1]=((((-1.0)*r22*x4741))+(((-1.0)*x4740*x4742))+((r21*x4744)));
evalcond[2]=(sj0+((r01*x4744))+(((-1.0)*x4738*x4742))+(((-1.0)*r02*x4741)));
evalcond[3]=(((r01*x4743))+(((-1.0)*x4737))+((r02*x4736))+(((-1.0)*x4738*x4741)));
evalcond[4]=(((r11*x4743))+(((-1.0)*sj0))+(((-1.0)*x4739*x4741))+((r12*x4736)));
evalcond[5]=(((r11*x4744))+(((-1.0)*r12*x4741))+(((-1.0)*x4737))+(((-1.0)*x4739*x4742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4745=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4745.valid){
continue;
}
CheckValue<IkReal> x4746 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4745.value)))+(x4746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4747=IKcos(j4);
IkReal x4748=IKsin(j4);
IkReal x4749=((1.0)*cj0);
IkReal x4750=(cj5*r00);
IkReal x4751=(cj5*r10);
IkReal x4752=(cj5*r20);
IkReal x4753=((1.0)*x4747);
IkReal x4754=((1.0)*x4748);
IkReal x4755=(sj5*x4747);
IkReal x4756=(sj5*x4748);
evalcond[0]=((((-1.0)*x4752*x4753))+((r21*x4755))+((r22*x4748)));
evalcond[1]=((((-1.0)*x4752*x4754))+(((-1.0)*r22*x4753))+((r21*x4756)));
evalcond[2]=(((r01*x4756))+sj0+(((-1.0)*x4750*x4754))+(((-1.0)*r02*x4753)));
evalcond[3]=(((r01*x4755))+(((-1.0)*x4750*x4753))+((r02*x4748))+(((-1.0)*x4749)));
evalcond[4]=((((-1.0)*sj0))+((r11*x4755))+((r12*x4748))+(((-1.0)*x4751*x4753)));
evalcond[5]=(((r11*x4756))+(((-1.0)*r12*x4753))+(((-1.0)*x4751*x4754))+(((-1.0)*x4749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4757=((1.0)*sj5);
IkReal x4758=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x4758))+(((-1.0)*r10*x4757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4758))+(((-1.0)*r00*x4757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x4758))+(((-1.0)*r10*x4757))))+IKsqr(((((-1.0)*r01*x4758))+(((-1.0)*r00*x4757))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x4758))+(((-1.0)*r10*x4757))), ((((-1.0)*r01*x4758))+(((-1.0)*r00*x4757))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4759=IKsin(j0);
IkReal x4760=IKcos(j0);
IkReal x4761=(r00*sj5);
IkReal x4762=(r10*sj5);
IkReal x4763=(cj5*r11);
IkReal x4764=(cj5*r01);
evalcond[0]=(x4761+x4760+x4764);
evalcond[1]=(x4759+x4763+x4762);
evalcond[2]=((((0.10915)*x4759))+(((-1.0)*px))+(((-0.09465)*x4764))+(((-0.09465)*x4761)));
evalcond[3]=((((-0.10915)*x4760))+(((-1.0)*py))+(((-0.09465)*x4763))+(((-0.09465)*x4762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4765=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4765;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4766=((1.0)*cj5);
IkReal x4767=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4766)));
j4eval[0]=x4767;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4766))))));
j4eval[2]=IKsign(x4767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4768=cj5*cj5;
IkReal x4769=r01*r01;
IkReal x4770=(cj5*r00);
IkReal x4771=(r01*sj5);
IkReal x4772=((((2.0)*x4770*x4771))+(((-1.0)*x4769))+(((-1.0)*(r02*r02)))+((x4768*x4769))+(((-1.0)*x4768*(r00*r00))));
j4eval[0]=x4772;
j4eval[1]=IKsign(x4772);
j4eval[2]=((IKabs((((sj0*x4771))+(((-1.0)*sj0*x4770)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4773=cj5*cj5;
IkReal x4774=r01*r01;
IkReal x4775=(cj5*r00);
IkReal x4776=(r01*sj5);
CheckValue<IkReal> x4777 = IKatan2WithCheck(IkReal((((sj0*x4776))+(((-1.0)*sj0*x4775)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4777.valid){
continue;
}
CheckValue<IkReal> x4778=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4774))+(((-1.0)*(r02*r02)))+((x4773*x4774))+(((-1.0)*x4773*(r00*r00)))+(((2.0)*x4775*x4776)))),-1);
if(!x4778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4777.value)+(((1.5707963267949)*(x4778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4779=IKcos(j4);
IkReal x4780=IKsin(j4);
IkReal x4781=(cj5*r00);
IkReal x4782=(r01*sj5);
IkReal x4783=(cj5*r10);
IkReal x4784=(cj5*r20);
IkReal x4785=((1.0)*x4779);
IkReal x4786=((1.0)*x4780);
IkReal x4787=(sj5*x4780);
IkReal x4788=(sj5*x4779);
evalcond[0]=(((r02*x4780))+((x4779*x4782))+(((-1.0)*x4781*x4785)));
evalcond[1]=(((r12*x4780))+(((-1.0)*x4783*x4785))+((r11*x4788)));
evalcond[2]=((((-1.0)*r22*x4785))+((r21*x4787))+(((-1.0)*x4784*x4786)));
evalcond[3]=((1.0)+((r22*x4780))+((r21*x4788))+(((-1.0)*x4784*x4785)));
evalcond[4]=(((x4780*x4782))+sj0+(((-1.0)*x4781*x4786))+(((-1.0)*r02*x4785)));
evalcond[5]=((((-1.0)*x4783*x4786))+((r11*x4787))+(((-1.0)*cj0))+(((-1.0)*r12*x4785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4789=((1.0)*cj5);
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x4789)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
CheckValue<IkReal> x4791=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4789)))),-1);
if(!x4791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4790.value)+(((1.5707963267949)*(x4791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4792=IKcos(j4);
IkReal x4793=IKsin(j4);
IkReal x4794=(cj5*r00);
IkReal x4795=(r01*sj5);
IkReal x4796=(cj5*r10);
IkReal x4797=(cj5*r20);
IkReal x4798=((1.0)*x4792);
IkReal x4799=((1.0)*x4793);
IkReal x4800=(sj5*x4793);
IkReal x4801=(sj5*x4792);
evalcond[0]=((((-1.0)*x4794*x4798))+((x4792*x4795))+((r02*x4793)));
evalcond[1]=((((-1.0)*x4796*x4798))+((r12*x4793))+((r11*x4801)));
evalcond[2]=((((-1.0)*r22*x4798))+(((-1.0)*x4797*x4799))+((r21*x4800)));
evalcond[3]=((1.0)+(((-1.0)*x4797*x4798))+((r21*x4801))+((r22*x4793)));
evalcond[4]=(sj0+(((-1.0)*r02*x4798))+((x4793*x4795))+(((-1.0)*x4794*x4799)));
evalcond[5]=((((-1.0)*r12*x4798))+(((-1.0)*x4796*x4799))+((r11*x4800))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4802 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4802.valid){
continue;
}
CheckValue<IkReal> x4803=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4802.value)+(((1.5707963267949)*(x4803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4804=IKcos(j4);
IkReal x4805=IKsin(j4);
IkReal x4806=(cj5*r00);
IkReal x4807=(r01*sj5);
IkReal x4808=(cj5*r10);
IkReal x4809=(cj5*r20);
IkReal x4810=((1.0)*x4804);
IkReal x4811=((1.0)*x4805);
IkReal x4812=(sj5*x4805);
IkReal x4813=(sj5*x4804);
evalcond[0]=(((r02*x4805))+(((-1.0)*x4806*x4810))+((x4804*x4807)));
evalcond[1]=((((-1.0)*x4808*x4810))+((r11*x4813))+((r12*x4805)));
evalcond[2]=((((-1.0)*x4809*x4811))+((r21*x4812))+(((-1.0)*r22*x4810)));
evalcond[3]=((1.0)+(((-1.0)*x4809*x4810))+((r21*x4813))+((r22*x4805)));
evalcond[4]=(sj0+((x4805*x4807))+(((-1.0)*r02*x4810))+(((-1.0)*x4806*x4811)));
evalcond[5]=((((-1.0)*x4808*x4811))+((r11*x4812))+(((-1.0)*r12*x4810))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((2.36617629259053)*py))))+IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((2.36617629259053)*py))), ((((2.36617629259053)*px))+(((-0.658427386453172)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4814=IKsin(j0);
IkReal x4815=IKcos(j0);
evalcond[0]=((((0.39225)*x4815))+(((-1.0)*px))+(((0.10915)*x4814)));
evalcond[1]=((((0.39225)*x4814))+(((-0.10915)*x4815))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4816=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4816;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4817=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4817;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4817);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4818=((1.0)*cj5);
IkReal x4819=((((-1.0)*r01*x4818))+(((-1.0)*r00*sj5)));
j4eval[0]=x4819;
j4eval[1]=IKsign(x4819);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4818))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4820=((1.0)*cj5);
CheckValue<IkReal> x4821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4820))+(((-1.0)*r00*sj5)))),-1);
if(!x4821.valid){
continue;
}
CheckValue<IkReal> x4822 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4820))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4821.value)))+(x4822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4823=IKcos(j4);
IkReal x4824=IKsin(j4);
IkReal x4825=((1.0)*cj0);
IkReal x4826=(cj5*r00);
IkReal x4827=(cj5*r10);
IkReal x4828=(cj5*r20);
IkReal x4829=((1.0)*x4823);
IkReal x4830=((1.0)*x4824);
IkReal x4831=(sj5*x4823);
IkReal x4832=(sj5*x4824);
evalcond[0]=(((r22*x4824))+(((-1.0)*x4828*x4829))+((r21*x4831)));
evalcond[1]=((((-1.0)*r22*x4829))+(((-1.0)*x4828*x4830))+((r21*x4832)));
evalcond[2]=(((r01*x4832))+sj0+(((-1.0)*r02*x4829))+(((-1.0)*x4826*x4830)));
evalcond[3]=(((r01*x4831))+(((-1.0)*x4826*x4829))+(((-1.0)*x4825))+((r02*x4824)));
evalcond[4]=((((-1.0)*x4827*x4829))+(((-1.0)*sj0))+((r11*x4831))+((r12*x4824)));
evalcond[5]=(((r11*x4832))+(((-1.0)*x4825))+(((-1.0)*x4827*x4830))+(((-1.0)*r12*x4829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4833 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4833.valid){
continue;
}
CheckValue<IkReal> x4834=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4833.value)+(((1.5707963267949)*(x4834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4835=IKcos(j4);
IkReal x4836=IKsin(j4);
IkReal x4837=((1.0)*cj0);
IkReal x4838=(cj5*r00);
IkReal x4839=(cj5*r10);
IkReal x4840=(cj5*r20);
IkReal x4841=((1.0)*x4835);
IkReal x4842=((1.0)*x4836);
IkReal x4843=(sj5*x4835);
IkReal x4844=(sj5*x4836);
evalcond[0]=((((-1.0)*x4840*x4841))+((r22*x4836))+((r21*x4843)));
evalcond[1]=((((-1.0)*x4840*x4842))+((r21*x4844))+(((-1.0)*r22*x4841)));
evalcond[2]=(sj0+(((-1.0)*x4838*x4842))+(((-1.0)*r02*x4841))+((r01*x4844)));
evalcond[3]=((((-1.0)*x4838*x4841))+(((-1.0)*x4837))+((r01*x4843))+((r02*x4836)));
evalcond[4]=(((r12*x4836))+(((-1.0)*sj0))+(((-1.0)*x4839*x4841))+((r11*x4843)));
evalcond[5]=((((-1.0)*x4839*x4842))+((r11*x4844))+(((-1.0)*x4837))+(((-1.0)*r12*x4841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4845=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4845.valid){
continue;
}
CheckValue<IkReal> x4846 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4845.value)))+(x4846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4847=IKcos(j4);
IkReal x4848=IKsin(j4);
IkReal x4849=((1.0)*cj0);
IkReal x4850=(cj5*r00);
IkReal x4851=(cj5*r10);
IkReal x4852=(cj5*r20);
IkReal x4853=((1.0)*x4847);
IkReal x4854=((1.0)*x4848);
IkReal x4855=(sj5*x4847);
IkReal x4856=(sj5*x4848);
evalcond[0]=(((r21*x4855))+((r22*x4848))+(((-1.0)*x4852*x4853)));
evalcond[1]=(((r21*x4856))+(((-1.0)*r22*x4853))+(((-1.0)*x4852*x4854)));
evalcond[2]=(sj0+((r01*x4856))+(((-1.0)*r02*x4853))+(((-1.0)*x4850*x4854)));
evalcond[3]=(((r02*x4848))+(((-1.0)*x4849))+((r01*x4855))+(((-1.0)*x4850*x4853)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4848))+(((-1.0)*x4851*x4853))+((r11*x4855)));
evalcond[5]=((((-1.0)*x4849))+(((-1.0)*r12*x4853))+(((-1.0)*x4851*x4854))+((r11*x4856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4857=IKsin(j0);
IkReal x4858=IKcos(j0);
IkReal x4859=(r00*sj5);
IkReal x4860=(r10*sj5);
IkReal x4861=(cj5*r11);
IkReal x4862=(cj5*r01);
evalcond[0]=((((-1.0)*x4858))+x4859+x4862);
evalcond[1]=((((-1.0)*x4857))+x4860+x4861);
evalcond[2]=((((-1.0)*px))+(((-0.09465)*x4859))+(((-0.09465)*x4862))+(((0.10915)*x4857)));
evalcond[3]=((((-0.10915)*x4858))+(((-1.0)*py))+(((-0.09465)*x4860))+(((-0.09465)*x4861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4863=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4863;
j4eval[1]=IKsign(x4863);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4864=((1.0)*cj5);
IkReal x4865=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4864)));
j4eval[0]=x4865;
j4eval[1]=IKsign(x4865);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4864))+((r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4866=cj5*cj5;
IkReal x4867=r01*r01;
IkReal x4868=(cj5*r00);
IkReal x4869=(r01*sj5);
IkReal x4870=((((2.0)*x4868*x4869))+(((-1.0)*(r02*r02)))+(((-1.0)*x4867))+((x4866*x4867))+(((-1.0)*x4866*(r00*r00))));
j4eval[0]=x4870;
j4eval[1]=IKsign(x4870);
j4eval[2]=((IKabs(((((-1.0)*sj0*x4868))+((sj0*x4869)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4871=cj5*cj5;
IkReal x4872=r01*r01;
IkReal x4873=(cj5*r00);
IkReal x4874=(r01*sj5);
CheckValue<IkReal> x4875 = IKatan2WithCheck(IkReal((((sj0*x4874))+(((-1.0)*sj0*x4873)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4875.valid){
continue;
}
CheckValue<IkReal> x4876=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4871*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x4872))+((x4871*x4872))+(((2.0)*x4873*x4874)))),-1);
if(!x4876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4875.value)+(((1.5707963267949)*(x4876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4877=IKcos(j4);
IkReal x4878=IKsin(j4);
IkReal x4879=(cj5*r00);
IkReal x4880=(r01*sj5);
IkReal x4881=(cj5*r10);
IkReal x4882=(cj5*r20);
IkReal x4883=((1.0)*x4877);
IkReal x4884=((1.0)*x4878);
IkReal x4885=(sj5*x4878);
IkReal x4886=(sj5*x4877);
evalcond[0]=(((r02*x4878))+(((-1.0)*x4879*x4883))+((x4877*x4880)));
evalcond[1]=(((r11*x4886))+(((-1.0)*x4881*x4883))+((r12*x4878)));
evalcond[2]=((((-1.0)*x4882*x4884))+(((-1.0)*r22*x4883))+((r21*x4885)));
evalcond[3]=((-1.0)+(((-1.0)*x4882*x4883))+((r22*x4878))+((r21*x4886)));
evalcond[4]=(sj0+(((-1.0)*x4879*x4884))+(((-1.0)*r02*x4883))+((x4878*x4880)));
evalcond[5]=(((r11*x4885))+(((-1.0)*r12*x4883))+(((-1.0)*x4881*x4884))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4887=((1.0)*cj5);
CheckValue<IkReal> x4888 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x4887)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4888.valid){
continue;
}
CheckValue<IkReal> x4889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4887)))),-1);
if(!x4889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4888.value)+(((1.5707963267949)*(x4889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4890=IKcos(j4);
IkReal x4891=IKsin(j4);
IkReal x4892=(cj5*r00);
IkReal x4893=(r01*sj5);
IkReal x4894=(cj5*r10);
IkReal x4895=(cj5*r20);
IkReal x4896=((1.0)*x4890);
IkReal x4897=((1.0)*x4891);
IkReal x4898=(sj5*x4891);
IkReal x4899=(sj5*x4890);
evalcond[0]=(((x4890*x4893))+((r02*x4891))+(((-1.0)*x4892*x4896)));
evalcond[1]=(((r11*x4899))+((r12*x4891))+(((-1.0)*x4894*x4896)));
evalcond[2]=(((r21*x4898))+(((-1.0)*x4895*x4897))+(((-1.0)*r22*x4896)));
evalcond[3]=((-1.0)+((r21*x4899))+((r22*x4891))+(((-1.0)*x4895*x4896)));
evalcond[4]=(sj0+((x4891*x4893))+(((-1.0)*r02*x4896))+(((-1.0)*x4892*x4897)));
evalcond[5]=(((r11*x4898))+(((-1.0)*r12*x4896))+(((-1.0)*x4894*x4897))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4900=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4900.valid){
continue;
}
CheckValue<IkReal> x4901 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4900.value)))+(x4901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4902=IKcos(j4);
IkReal x4903=IKsin(j4);
IkReal x4904=(cj5*r00);
IkReal x4905=(r01*sj5);
IkReal x4906=(cj5*r10);
IkReal x4907=(cj5*r20);
IkReal x4908=((1.0)*x4902);
IkReal x4909=((1.0)*x4903);
IkReal x4910=(sj5*x4903);
IkReal x4911=(sj5*x4902);
evalcond[0]=(((r02*x4903))+(((-1.0)*x4904*x4908))+((x4902*x4905)));
evalcond[1]=((((-1.0)*x4906*x4908))+((r11*x4911))+((r12*x4903)));
evalcond[2]=(((r21*x4910))+(((-1.0)*r22*x4908))+(((-1.0)*x4907*x4909)));
evalcond[3]=((-1.0)+((r21*x4911))+(((-1.0)*x4907*x4908))+((r22*x4903)));
evalcond[4]=(sj0+(((-1.0)*x4904*x4909))+((x4903*x4905))+(((-1.0)*r02*x4908)));
evalcond[5]=((((-1.0)*r12*x4908))+(((-1.0)*x4906*x4909))+((r11*x4910))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((-0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4912=IKsin(j0);
IkReal x4913=IKcos(j0);
evalcond[0]=((((0.10915)*x4912))+(((-0.39225)*x4913))+(((-1.0)*px)));
evalcond[1]=((((-0.39225)*x4912))+(((-1.0)*py))+(((-0.10915)*x4913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4914=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4914;
j4eval[1]=IKsign(x4914);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4915=((1.0)*cj5);
IkReal x4916=((((-1.0)*r11*x4915))+(((-1.0)*r10*sj5)));
j4eval[0]=x4916;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4915))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4917=cj5*cj5;
IkReal x4918=((1.0)*r20);
IkReal x4919=(r01*r21);
IkReal x4920=(r21*sj5);
IkReal x4921=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4919))+((x4917*x4919))+(((-1.0)*r00*x4917*x4918))+((cj5*r00*x4920)));
j4eval[0]=x4921;
j4eval[1]=((IKabs((((cj0*x4920))+(((-1.0)*cj0*cj5*x4918)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4922=cj5*cj5;
IkReal x4923=((1.0)*r20);
IkReal x4924=(r01*r21);
IkReal x4925=(r21*sj5);
CheckValue<IkReal> x4926 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4923))+((cj0*x4925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4926.valid){
continue;
}
CheckValue<IkReal> x4927=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4924))+(((-1.0)*r00*x4922*x4923))+((x4922*x4924))+((cj5*r00*x4925)))),-1);
if(!x4927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4926.value)+(((1.5707963267949)*(x4927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4928=IKcos(j4);
IkReal x4929=IKsin(j4);
IkReal x4930=(cj5*r00);
IkReal x4931=(cj5*r10);
IkReal x4932=(cj5*r20);
IkReal x4933=((1.0)*x4928);
IkReal x4934=((1.0)*x4929);
IkReal x4935=(sj5*x4928);
IkReal x4936=(sj5*x4929);
evalcond[0]=((((-1.0)*x4932*x4933))+((r22*x4929))+((r21*x4935)));
evalcond[1]=((((-1.0)*x4932*x4934))+((r21*x4936))+(((-1.0)*r22*x4933)));
evalcond[2]=(cj0+(((-1.0)*x4930*x4933))+((r01*x4935))+((r02*x4929)));
evalcond[3]=(sj0+(((-1.0)*x4931*x4933))+((r11*x4935))+((r12*x4929)));
evalcond[4]=(sj0+(((-1.0)*r02*x4933))+(((-1.0)*x4930*x4934))+((r01*x4936)));
evalcond[5]=((((-1.0)*x4931*x4934))+(((-1.0)*r12*x4933))+((r11*x4936))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4937=((1.0)*cj5);
CheckValue<IkReal> x4938=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4937)))),-1);
if(!x4938.valid){
continue;
}
CheckValue<IkReal> x4939 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4937)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4938.value)))+(x4939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4940=IKcos(j4);
IkReal x4941=IKsin(j4);
IkReal x4942=(cj5*r00);
IkReal x4943=(cj5*r10);
IkReal x4944=(cj5*r20);
IkReal x4945=((1.0)*x4940);
IkReal x4946=((1.0)*x4941);
IkReal x4947=(sj5*x4940);
IkReal x4948=(sj5*x4941);
evalcond[0]=(((r21*x4947))+(((-1.0)*x4944*x4945))+((r22*x4941)));
evalcond[1]=(((r21*x4948))+(((-1.0)*r22*x4945))+(((-1.0)*x4944*x4946)));
evalcond[2]=((((-1.0)*x4942*x4945))+((r01*x4947))+cj0+((r02*x4941)));
evalcond[3]=((((-1.0)*x4943*x4945))+sj0+((r11*x4947))+((r12*x4941)));
evalcond[4]=((((-1.0)*x4942*x4946))+((r01*x4948))+sj0+(((-1.0)*r02*x4945)));
evalcond[5]=((((-1.0)*x4943*x4946))+((r11*x4948))+(((-1.0)*r12*x4945))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4949 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4949.valid){
continue;
}
CheckValue<IkReal> x4950=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4949.value)+(((1.5707963267949)*(x4950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4951=IKcos(j4);
IkReal x4952=IKsin(j4);
IkReal x4953=(cj5*r00);
IkReal x4954=(cj5*r10);
IkReal x4955=(cj5*r20);
IkReal x4956=((1.0)*x4951);
IkReal x4957=((1.0)*x4952);
IkReal x4958=(sj5*x4951);
IkReal x4959=(sj5*x4952);
evalcond[0]=(((r22*x4952))+(((-1.0)*x4955*x4956))+((r21*x4958)));
evalcond[1]=((((-1.0)*x4955*x4957))+(((-1.0)*r22*x4956))+((r21*x4959)));
evalcond[2]=(cj0+((r02*x4952))+((r01*x4958))+(((-1.0)*x4953*x4956)));
evalcond[3]=(sj0+((r12*x4952))+((r11*x4958))+(((-1.0)*x4954*x4956)));
evalcond[4]=(sj0+(((-1.0)*r02*x4956))+((r01*x4959))+(((-1.0)*x4953*x4957)));
evalcond[5]=(((r11*x4959))+(((-1.0)*r12*x4956))+(((-1.0)*x4954*x4957))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((-0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.160559264620033)*px))+(((1.20217186450501)*py))), ((((-0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4960=IKsin(j0);
IkReal x4961=IKcos(j0);
evalcond[0]=((((0.10915)*x4960))+(((-1.0)*px))+(((0.81725)*x4961)));
evalcond[1]=((((-1.0)*py))+(((0.81725)*x4960))+(((-0.10915)*x4961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4962=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4962;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4963=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4963;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4963);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4964=((1.0)*cj5);
IkReal x4965=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4964)));
j4eval[0]=x4965;
j4eval[1]=IKsign(x4965);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4964))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4966=((1.0)*cj5);
CheckValue<IkReal> x4967 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4966))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4967.valid){
continue;
}
CheckValue<IkReal> x4968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4966)))),-1);
if(!x4968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4967.value)+(((1.5707963267949)*(x4968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4969=IKcos(j4);
IkReal x4970=IKsin(j4);
IkReal x4971=((1.0)*cj0);
IkReal x4972=(cj5*r00);
IkReal x4973=(cj5*r10);
IkReal x4974=(cj5*r20);
IkReal x4975=((1.0)*x4969);
IkReal x4976=((1.0)*x4970);
IkReal x4977=(sj5*x4969);
IkReal x4978=(sj5*x4970);
evalcond[0]=(((r22*x4970))+((r21*x4977))+(((-1.0)*x4974*x4975)));
evalcond[1]=((((-1.0)*r22*x4975))+((r21*x4978))+(((-1.0)*x4974*x4976)));
evalcond[2]=(sj0+(((-1.0)*r02*x4975))+(((-1.0)*x4972*x4976))+((r01*x4978)));
evalcond[3]=((((-1.0)*x4971))+((r02*x4970))+(((-1.0)*x4972*x4975))+((r01*x4977)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4970))+((r11*x4977))+(((-1.0)*x4973*x4975)));
evalcond[5]=(((r11*x4978))+(((-1.0)*r12*x4975))+(((-1.0)*x4971))+(((-1.0)*x4973*x4976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4979 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4979.valid){
continue;
}
CheckValue<IkReal> x4980=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4979.value)+(((1.5707963267949)*(x4980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4981=IKcos(j4);
IkReal x4982=IKsin(j4);
IkReal x4983=((1.0)*cj0);
IkReal x4984=(cj5*r00);
IkReal x4985=(cj5*r10);
IkReal x4986=(cj5*r20);
IkReal x4987=((1.0)*x4981);
IkReal x4988=((1.0)*x4982);
IkReal x4989=(sj5*x4981);
IkReal x4990=(sj5*x4982);
evalcond[0]=((((-1.0)*x4986*x4987))+((r22*x4982))+((r21*x4989)));
evalcond[1]=((((-1.0)*r22*x4987))+(((-1.0)*x4986*x4988))+((r21*x4990)));
evalcond[2]=(sj0+(((-1.0)*r02*x4987))+(((-1.0)*x4984*x4988))+((r01*x4990)));
evalcond[3]=(((r01*x4989))+(((-1.0)*x4983))+(((-1.0)*x4984*x4987))+((r02*x4982)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4982))+(((-1.0)*x4985*x4987))+((r11*x4989)));
evalcond[5]=((((-1.0)*x4985*x4988))+((r11*x4990))+(((-1.0)*r12*x4987))+(((-1.0)*x4983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4991=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4991.valid){
continue;
}
CheckValue<IkReal> x4992 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4991.value)))+(x4992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4993=IKcos(j4);
IkReal x4994=IKsin(j4);
IkReal x4995=((1.0)*cj0);
IkReal x4996=(cj5*r00);
IkReal x4997=(cj5*r10);
IkReal x4998=(cj5*r20);
IkReal x4999=((1.0)*x4993);
IkReal x5000=((1.0)*x4994);
IkReal x5001=(sj5*x4993);
IkReal x5002=(sj5*x4994);
evalcond[0]=(((r22*x4994))+((r21*x5001))+(((-1.0)*x4998*x4999)));
evalcond[1]=((((-1.0)*r22*x4999))+(((-1.0)*x4998*x5000))+((r21*x5002)));
evalcond[2]=(sj0+(((-1.0)*r02*x4999))+((r01*x5002))+(((-1.0)*x4996*x5000)));
evalcond[3]=((((-1.0)*x4995))+((r02*x4994))+((r01*x5001))+(((-1.0)*x4996*x4999)));
evalcond[4]=((((-1.0)*sj0))+((r11*x5001))+(((-1.0)*x4997*x4999))+((r12*x4994)));
evalcond[5]=(((r11*x5002))+(((-1.0)*x4995))+(((-1.0)*r12*x4999))+(((-1.0)*x4997*x5000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4050211434602)*px))+(((2.52189136462044)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4050211434602)*px))+(((2.52189136462044)*py))))+IKsqr(((((2.52189136462044)*px))+(((-8.4050211434602)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4050211434602)*px))+(((2.52189136462044)*py))), ((((2.52189136462044)*px))+(((-8.4050211434602)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5003=IKsin(j0);
IkReal x5004=IKcos(j0);
evalcond[0]=((((0.03275)*x5004))+(((0.10915)*x5003))+(((-1.0)*px)));
evalcond[1]=((((0.03275)*x5003))+(((-1.0)*py))+(((-0.10915)*x5004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5005=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5005;
j4eval[1]=IKsign(x5005);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5006=((1.0)*cj5);
IkReal x5007=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5006)));
j4eval[0]=x5007;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5006))))));
j4eval[2]=IKsign(x5007);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5008=cj5*cj5;
IkReal x5009=((1.0)*r20);
IkReal x5010=(r01*r21);
IkReal x5011=(r21*sj5);
IkReal x5012=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5008*x5009))+((x5008*x5010))+(((-1.0)*x5010))+((cj5*r00*x5011)));
j4eval[0]=x5012;
j4eval[1]=((IKabs((((cj0*x5011))+(((-1.0)*cj0*cj5*x5009)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5013=cj5*cj5;
IkReal x5014=((1.0)*r20);
IkReal x5015=(r01*r21);
IkReal x5016=(r21*sj5);
CheckValue<IkReal> x5017=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5013*x5014))+((x5013*x5015))+(((-1.0)*x5015))+((cj5*r00*x5016)))),-1);
if(!x5017.valid){
continue;
}
CheckValue<IkReal> x5018 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5016))+(((-1.0)*cj0*cj5*x5014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5017.value)))+(x5018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5019=IKcos(j4);
IkReal x5020=IKsin(j4);
IkReal x5021=(cj5*r00);
IkReal x5022=(cj5*r10);
IkReal x5023=(cj5*r20);
IkReal x5024=((1.0)*x5019);
IkReal x5025=((1.0)*x5020);
IkReal x5026=(sj5*x5019);
IkReal x5027=(sj5*x5020);
evalcond[0]=(((r22*x5020))+(((-1.0)*x5023*x5024))+((r21*x5026)));
evalcond[1]=((((-1.0)*x5023*x5025))+(((-1.0)*r22*x5024))+((r21*x5027)));
evalcond[2]=(((r02*x5020))+cj0+(((-1.0)*x5021*x5024))+((r01*x5026)));
evalcond[3]=(((r11*x5026))+sj0+((r12*x5020))+(((-1.0)*x5022*x5024)));
evalcond[4]=((((-1.0)*r02*x5024))+sj0+(((-1.0)*x5021*x5025))+((r01*x5027)));
evalcond[5]=(((r11*x5027))+(((-1.0)*r12*x5024))+(((-1.0)*x5022*x5025))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5028=((1.0)*cj5);
CheckValue<IkReal> x5029 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5028)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5029.valid){
continue;
}
CheckValue<IkReal> x5030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5028)))),-1);
if(!x5030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5029.value)+(((1.5707963267949)*(x5030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5031=IKcos(j4);
IkReal x5032=IKsin(j4);
IkReal x5033=(cj5*r00);
IkReal x5034=(cj5*r10);
IkReal x5035=(cj5*r20);
IkReal x5036=((1.0)*x5031);
IkReal x5037=((1.0)*x5032);
IkReal x5038=(sj5*x5031);
IkReal x5039=(sj5*x5032);
evalcond[0]=(((r21*x5038))+(((-1.0)*x5035*x5036))+((r22*x5032)));
evalcond[1]=(((r21*x5039))+(((-1.0)*x5035*x5037))+(((-1.0)*r22*x5036)));
evalcond[2]=(cj0+((r02*x5032))+(((-1.0)*x5033*x5036))+((r01*x5038)));
evalcond[3]=(((r12*x5032))+sj0+((r11*x5038))+(((-1.0)*x5034*x5036)));
evalcond[4]=(sj0+(((-1.0)*x5033*x5037))+((r01*x5039))+(((-1.0)*r02*x5036)));
evalcond[5]=(((r11*x5039))+(((-1.0)*r12*x5036))+(((-1.0)*x5034*x5037))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5040 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5040.valid){
continue;
}
CheckValue<IkReal> x5041=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5040.value)+(((1.5707963267949)*(x5041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5042=IKcos(j4);
IkReal x5043=IKsin(j4);
IkReal x5044=(cj5*r00);
IkReal x5045=(cj5*r10);
IkReal x5046=(cj5*r20);
IkReal x5047=((1.0)*x5042);
IkReal x5048=((1.0)*x5043);
IkReal x5049=(sj5*x5042);
IkReal x5050=(sj5*x5043);
evalcond[0]=(((r21*x5049))+(((-1.0)*x5046*x5047))+((r22*x5043)));
evalcond[1]=(((r21*x5050))+(((-1.0)*r22*x5047))+(((-1.0)*x5046*x5048)));
evalcond[2]=(cj0+((r02*x5043))+((r01*x5049))+(((-1.0)*x5044*x5047)));
evalcond[3]=(sj0+(((-1.0)*x5045*x5047))+((r12*x5043))+((r11*x5049)));
evalcond[4]=(sj0+(((-1.0)*r02*x5047))+((r01*x5050))+(((-1.0)*x5044*x5048)));
evalcond[5]=(((r11*x5050))+(((-1.0)*r12*x5047))+(((-1.0)*x5045*x5048))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5051=IKsin(j0);
IkReal x5052=IKcos(j0);
IkReal x5053=(r00*sj5);
IkReal x5054=(r10*sj5);
IkReal x5055=(cj5*r11);
IkReal x5056=(cj5*r01);
evalcond[0]=(x5056+x5053+(((-1.0)*x5052)));
evalcond[1]=(x5054+x5055+(((-1.0)*x5051)));
evalcond[2]=((((-1.0)*px))+(((-0.09465)*x5053))+(((-0.09465)*x5056))+(((0.10915)*x5051)));
evalcond[3]=((((-1.0)*py))+(((-0.09465)*x5054))+(((-0.09465)*x5055))+(((-0.10915)*x5052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5057=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5057;
j4eval[1]=IKsign(x5057);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5058=((1.0)*cj5);
IkReal x5059=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5058)));
j4eval[0]=x5059;
j4eval[1]=IKsign(x5059);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5058))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5060=cj5*cj5;
IkReal x5061=r01*r01;
IkReal x5062=(cj5*r00);
IkReal x5063=(r01*sj5);
IkReal x5064=(((x5060*x5061))+(((-1.0)*(r02*r02)))+(((-1.0)*x5061))+(((2.0)*x5062*x5063))+(((-1.0)*x5060*(r00*r00))));
j4eval[0]=x5064;
j4eval[1]=IKsign(x5064);
j4eval[2]=((IKabs((r02*sj0)))+(IKabs(((((-1.0)*sj0*x5062))+((sj0*x5063))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5065=cj5*cj5;
IkReal x5066=r01*r01;
IkReal x5067=(cj5*r00);
IkReal x5068=(r01*sj5);
CheckValue<IkReal> x5069=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5065*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x5067*x5068))+(((-1.0)*x5066))+((x5065*x5066)))),-1);
if(!x5069.valid){
continue;
}
CheckValue<IkReal> x5070 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x5067))+((sj0*x5068)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5069.value)))+(x5070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5071=IKcos(j4);
IkReal x5072=IKsin(j4);
IkReal x5073=(cj5*r00);
IkReal x5074=(r01*sj5);
IkReal x5075=(cj5*r10);
IkReal x5076=(cj5*r20);
IkReal x5077=((1.0)*x5071);
IkReal x5078=((1.0)*x5072);
IkReal x5079=(sj5*x5072);
IkReal x5080=(sj5*x5071);
evalcond[0]=(((r02*x5072))+((x5071*x5074))+(((-1.0)*x5073*x5077)));
evalcond[1]=(((r11*x5080))+((r12*x5072))+(((-1.0)*x5075*x5077)));
evalcond[2]=(((r21*x5079))+(((-1.0)*x5076*x5078))+(((-1.0)*r22*x5077)));
evalcond[3]=((-1.0)+((r21*x5080))+(((-1.0)*x5076*x5077))+((r22*x5072)));
evalcond[4]=((((-1.0)*r02*x5077))+sj0+(((-1.0)*x5073*x5078))+((x5072*x5074)));
evalcond[5]=((((-1.0)*r12*x5077))+(((-1.0)*x5075*x5078))+(((-1.0)*cj0))+((r11*x5079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5081=((1.0)*cj5);
CheckValue<IkReal> x5082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5081))+(((-1.0)*r10*sj5)))),-1);
if(!x5082.valid){
continue;
}
CheckValue<IkReal> x5083 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5081)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5082.value)))+(x5083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5084=IKcos(j4);
IkReal x5085=IKsin(j4);
IkReal x5086=(cj5*r00);
IkReal x5087=(r01*sj5);
IkReal x5088=(cj5*r10);
IkReal x5089=(cj5*r20);
IkReal x5090=((1.0)*x5084);
IkReal x5091=((1.0)*x5085);
IkReal x5092=(sj5*x5085);
IkReal x5093=(sj5*x5084);
evalcond[0]=(((x5084*x5087))+(((-1.0)*x5086*x5090))+((r02*x5085)));
evalcond[1]=((((-1.0)*x5088*x5090))+((r11*x5093))+((r12*x5085)));
evalcond[2]=((((-1.0)*r22*x5090))+((r21*x5092))+(((-1.0)*x5089*x5091)));
evalcond[3]=((-1.0)+((r21*x5093))+((r22*x5085))+(((-1.0)*x5089*x5090)));
evalcond[4]=(sj0+(((-1.0)*x5086*x5091))+((x5085*x5087))+(((-1.0)*r02*x5090)));
evalcond[5]=((((-1.0)*x5088*x5091))+((r11*x5092))+(((-1.0)*cj0))+(((-1.0)*r12*x5090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5094=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5094.valid){
continue;
}
CheckValue<IkReal> x5095 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5094.value)))+(x5095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5096=IKcos(j4);
IkReal x5097=IKsin(j4);
IkReal x5098=(cj5*r00);
IkReal x5099=(r01*sj5);
IkReal x5100=(cj5*r10);
IkReal x5101=(cj5*r20);
IkReal x5102=((1.0)*x5096);
IkReal x5103=((1.0)*x5097);
IkReal x5104=(sj5*x5097);
IkReal x5105=(sj5*x5096);
evalcond[0]=(((x5096*x5099))+(((-1.0)*x5098*x5102))+((r02*x5097)));
evalcond[1]=((((-1.0)*x5100*x5102))+((r12*x5097))+((r11*x5105)));
evalcond[2]=((((-1.0)*x5101*x5103))+(((-1.0)*r22*x5102))+((r21*x5104)));
evalcond[3]=((-1.0)+(((-1.0)*x5101*x5102))+((r22*x5097))+((r21*x5105)));
evalcond[4]=(sj0+(((-1.0)*r02*x5102))+(((-1.0)*x5098*x5103))+((x5097*x5099)));
evalcond[5]=((((-1.0)*x5100*x5103))+((r11*x5104))+(((-1.0)*r12*x5102))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((-0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5106=IKsin(j0);
IkReal x5107=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x5107))+(((0.10915)*x5106)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x5106))+(((-0.10915)*x5107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5108=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5108;
j4eval[1]=IKsign(x5108);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5109=((1.0)*cj5);
IkReal x5110=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5109)));
j4eval[0]=x5110;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5109)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5111=cj5*cj5;
IkReal x5112=((1.0)*r20);
IkReal x5113=(r01*r21);
IkReal x5114=(r21*sj5);
IkReal x5115=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5113))+((x5111*x5113))+((cj5*r00*x5114))+(((-1.0)*r00*x5111*x5112)));
j4eval[0]=x5115;
j4eval[1]=((IKabs((((cj0*x5114))+(((-1.0)*cj0*cj5*x5112)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5116=cj5*cj5;
IkReal x5117=((1.0)*r20);
IkReal x5118=(r01*r21);
IkReal x5119=(r21*sj5);
CheckValue<IkReal> x5120=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5116*x5118))+(((-1.0)*x5118))+(((-1.0)*r00*x5116*x5117))+((cj5*r00*x5119)))),-1);
if(!x5120.valid){
continue;
}
CheckValue<IkReal> x5121 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5119))+(((-1.0)*cj0*cj5*x5117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5120.value)))+(x5121.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5122=IKcos(j4);
IkReal x5123=IKsin(j4);
IkReal x5124=(cj5*r00);
IkReal x5125=(cj5*r10);
IkReal x5126=(cj5*r20);
IkReal x5127=((1.0)*x5122);
IkReal x5128=((1.0)*x5123);
IkReal x5129=(sj5*x5122);
IkReal x5130=(sj5*x5123);
evalcond[0]=(((r22*x5123))+(((-1.0)*x5126*x5127))+((r21*x5129)));
evalcond[1]=((((-1.0)*x5126*x5128))+((r21*x5130))+(((-1.0)*r22*x5127)));
evalcond[2]=((((-1.0)*x5124*x5127))+cj0+((r01*x5129))+((r02*x5123)));
evalcond[3]=(sj0+(((-1.0)*x5125*x5127))+((r12*x5123))+((r11*x5129)));
evalcond[4]=((((-1.0)*x5124*x5128))+sj0+((r01*x5130))+(((-1.0)*r02*x5127)));
evalcond[5]=((((-1.0)*x5125*x5128))+((r11*x5130))+(((-1.0)*r12*x5127))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5131=((1.0)*cj5);
CheckValue<IkReal> x5132=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5131)))),-1);
if(!x5132.valid){
continue;
}
CheckValue<IkReal> x5133 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5131))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5132.value)))+(x5133.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5134=IKcos(j4);
IkReal x5135=IKsin(j4);
IkReal x5136=(cj5*r00);
IkReal x5137=(cj5*r10);
IkReal x5138=(cj5*r20);
IkReal x5139=((1.0)*x5134);
IkReal x5140=((1.0)*x5135);
IkReal x5141=(sj5*x5134);
IkReal x5142=(sj5*x5135);
evalcond[0]=(((r21*x5141))+((r22*x5135))+(((-1.0)*x5138*x5139)));
evalcond[1]=(((r21*x5142))+(((-1.0)*r22*x5139))+(((-1.0)*x5138*x5140)));
evalcond[2]=(((r01*x5141))+cj0+(((-1.0)*x5136*x5139))+((r02*x5135)));
evalcond[3]=(sj0+((r12*x5135))+(((-1.0)*x5137*x5139))+((r11*x5141)));
evalcond[4]=((((-1.0)*x5136*x5140))+sj0+((r01*x5142))+(((-1.0)*r02*x5139)));
evalcond[5]=((((-1.0)*x5137*x5140))+((r11*x5142))+(((-1.0)*r12*x5139))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5143 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5143.valid){
continue;
}
CheckValue<IkReal> x5144=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5143.value)+(((1.5707963267949)*(x5144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5145=IKcos(j4);
IkReal x5146=IKsin(j4);
IkReal x5147=(cj5*r00);
IkReal x5148=(cj5*r10);
IkReal x5149=(cj5*r20);
IkReal x5150=((1.0)*x5145);
IkReal x5151=((1.0)*x5146);
IkReal x5152=(sj5*x5145);
IkReal x5153=(sj5*x5146);
evalcond[0]=(((r21*x5152))+(((-1.0)*x5149*x5150))+((r22*x5146)));
evalcond[1]=(((r21*x5153))+(((-1.0)*r22*x5150))+(((-1.0)*x5149*x5151)));
evalcond[2]=(((r01*x5152))+cj0+((r02*x5146))+(((-1.0)*x5147*x5150)));
evalcond[3]=(((r11*x5152))+sj0+((r12*x5146))+(((-1.0)*x5148*x5150)));
evalcond[4]=(((r01*x5153))+sj0+(((-1.0)*x5147*x5151))+(((-1.0)*r02*x5150)));
evalcond[5]=(((r11*x5153))+(((-1.0)*r12*x5150))+(((-1.0)*x5148*x5151))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5154=((1.0)*sj5);
IkReal x5155=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5155))+(((-1.0)*r10*x5154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5154))+(((-1.0)*r01*x5155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5155))+(((-1.0)*r10*x5154))))+IKsqr(((((-1.0)*r00*x5154))+(((-1.0)*r01*x5155))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5155))+(((-1.0)*r10*x5154))), ((((-1.0)*r00*x5154))+(((-1.0)*r01*x5155))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5156=IKsin(j0);
IkReal x5157=IKcos(j0);
IkReal x5158=(r00*sj5);
IkReal x5159=(r10*sj5);
IkReal x5160=(cj5*r11);
IkReal x5161=(cj5*r01);
evalcond[0]=(x5158+x5157+x5161);
evalcond[1]=(x5159+x5156+x5160);
evalcond[2]=((((-0.09465)*x5158))+(((-0.09465)*x5161))+(((-1.0)*px))+(((0.10915)*x5156)));
evalcond[3]=((((-0.09465)*x5159))+(((-0.09465)*x5160))+(((-0.10915)*x5157))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5162=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5162;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5163=((1.0)*cj5);
IkReal x5164=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5163)));
j4eval[0]=x5164;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5163))))));
j4eval[2]=IKsign(x5164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5165=cj5*cj5;
IkReal x5166=r01*r01;
IkReal x5167=(cj5*r00);
IkReal x5168=(r01*sj5);
IkReal x5169=(((x5165*x5166))+(((-1.0)*x5165*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x5166))+(((2.0)*x5167*x5168)));
j4eval[0]=x5169;
j4eval[1]=IKsign(x5169);
j4eval[2]=((IKabs(((((-1.0)*sj0*x5167))+((sj0*x5168)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5170=cj5*cj5;
IkReal x5171=r01*r01;
IkReal x5172=(cj5*r00);
IkReal x5173=(r01*sj5);
CheckValue<IkReal> x5174 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x5172))+((sj0*x5173)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5174.valid){
continue;
}
CheckValue<IkReal> x5175=IKPowWithIntegerCheck(IKsign(((((2.0)*x5172*x5173))+(((-1.0)*(r02*r02)))+(((-1.0)*x5171))+((x5170*x5171))+(((-1.0)*x5170*(r00*r00))))),-1);
if(!x5175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5174.value)+(((1.5707963267949)*(x5175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5176=IKcos(j4);
IkReal x5177=IKsin(j4);
IkReal x5178=(cj5*r00);
IkReal x5179=(r01*sj5);
IkReal x5180=(cj5*r10);
IkReal x5181=(cj5*r20);
IkReal x5182=((1.0)*x5176);
IkReal x5183=((1.0)*x5177);
IkReal x5184=(sj5*x5177);
IkReal x5185=(sj5*x5176);
evalcond[0]=(((r02*x5177))+((x5176*x5179))+(((-1.0)*x5178*x5182)));
evalcond[1]=(((r12*x5177))+((r11*x5185))+(((-1.0)*x5180*x5182)));
evalcond[2]=((((-1.0)*r22*x5182))+((r21*x5184))+(((-1.0)*x5181*x5183)));
evalcond[3]=((1.0)+((r21*x5185))+((r22*x5177))+(((-1.0)*x5181*x5182)));
evalcond[4]=(sj0+(((-1.0)*r02*x5182))+((x5177*x5179))+(((-1.0)*x5178*x5183)));
evalcond[5]=((((-1.0)*r12*x5182))+((r11*x5184))+(((-1.0)*x5180*x5183))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5186=((1.0)*cj5);
CheckValue<IkReal> x5187 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5186)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5187.valid){
continue;
}
CheckValue<IkReal> x5188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5186)))),-1);
if(!x5188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5187.value)+(((1.5707963267949)*(x5188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5189=IKcos(j4);
IkReal x5190=IKsin(j4);
IkReal x5191=(cj5*r00);
IkReal x5192=(r01*sj5);
IkReal x5193=(cj5*r10);
IkReal x5194=(cj5*r20);
IkReal x5195=((1.0)*x5189);
IkReal x5196=((1.0)*x5190);
IkReal x5197=(sj5*x5190);
IkReal x5198=(sj5*x5189);
evalcond[0]=(((r02*x5190))+(((-1.0)*x5191*x5195))+((x5189*x5192)));
evalcond[1]=(((r11*x5198))+(((-1.0)*x5193*x5195))+((r12*x5190)));
evalcond[2]=(((r21*x5197))+(((-1.0)*r22*x5195))+(((-1.0)*x5194*x5196)));
evalcond[3]=((1.0)+((r21*x5198))+((r22*x5190))+(((-1.0)*x5194*x5195)));
evalcond[4]=(sj0+(((-1.0)*x5191*x5196))+(((-1.0)*r02*x5195))+((x5190*x5192)));
evalcond[5]=((((-1.0)*r12*x5195))+((r11*x5197))+(((-1.0)*x5193*x5196))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5199 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5199.valid){
continue;
}
CheckValue<IkReal> x5200=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5199.value)+(((1.5707963267949)*(x5200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5201=IKcos(j4);
IkReal x5202=IKsin(j4);
IkReal x5203=(cj5*r00);
IkReal x5204=(r01*sj5);
IkReal x5205=(cj5*r10);
IkReal x5206=(cj5*r20);
IkReal x5207=((1.0)*x5201);
IkReal x5208=((1.0)*x5202);
IkReal x5209=(sj5*x5202);
IkReal x5210=(sj5*x5201);
evalcond[0]=((((-1.0)*x5203*x5207))+((x5201*x5204))+((r02*x5202)));
evalcond[1]=(((r11*x5210))+(((-1.0)*x5205*x5207))+((r12*x5202)));
evalcond[2]=((((-1.0)*x5206*x5208))+(((-1.0)*r22*x5207))+((r21*x5209)));
evalcond[3]=((1.0)+(((-1.0)*x5206*x5207))+((r22*x5202))+((r21*x5210)));
evalcond[4]=((((-1.0)*x5203*x5208))+(((-1.0)*r02*x5207))+sj0+((x5202*x5204)));
evalcond[5]=(((r11*x5209))+(((-1.0)*x5205*x5208))+(((-1.0)*r12*x5207))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((2.36617629259053)*py))))+IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((2.36617629259053)*py))), ((((2.36617629259053)*px))+(((-0.658427386453172)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5211=IKsin(j0);
IkReal x5212=IKcos(j0);
evalcond[0]=((((0.10915)*x5211))+(((-1.0)*px))+(((0.39225)*x5212)));
evalcond[1]=((((-0.10915)*x5212))+(((-1.0)*py))+(((0.39225)*x5211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5213=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5213;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5213);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5214=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5214;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5214);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5215=((1.0)*cj5);
IkReal x5216=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5215)));
j4eval[0]=x5216;
j4eval[1]=IKsign(x5216);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5215))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5217=((1.0)*cj5);
CheckValue<IkReal> x5218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5217)))),-1);
if(!x5218.valid){
continue;
}
CheckValue<IkReal> x5219 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5217))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5218.value)))+(x5219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5220=IKcos(j4);
IkReal x5221=IKsin(j4);
IkReal x5222=((1.0)*cj0);
IkReal x5223=(cj5*r00);
IkReal x5224=(cj5*r10);
IkReal x5225=(cj5*r20);
IkReal x5226=((1.0)*x5220);
IkReal x5227=((1.0)*x5221);
IkReal x5228=(sj5*x5220);
IkReal x5229=(sj5*x5221);
evalcond[0]=(((r21*x5228))+((r22*x5221))+(((-1.0)*x5225*x5226)));
evalcond[1]=(((r21*x5229))+(((-1.0)*x5225*x5227))+(((-1.0)*r22*x5226)));
evalcond[2]=((((-1.0)*x5223*x5227))+sj0+(((-1.0)*r02*x5226))+((r01*x5229)));
evalcond[3]=((((-1.0)*x5223*x5226))+((r02*x5221))+(((-1.0)*x5222))+((r01*x5228)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x5224*x5226))+((r11*x5228))+((r12*x5221)));
evalcond[5]=((((-1.0)*x5224*x5227))+(((-1.0)*r12*x5226))+(((-1.0)*x5222))+((r11*x5229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5230 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5230.valid){
continue;
}
CheckValue<IkReal> x5231=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5230.value)+(((1.5707963267949)*(x5231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5232=IKcos(j4);
IkReal x5233=IKsin(j4);
IkReal x5234=((1.0)*cj0);
IkReal x5235=(cj5*r00);
IkReal x5236=(cj5*r10);
IkReal x5237=(cj5*r20);
IkReal x5238=((1.0)*x5232);
IkReal x5239=((1.0)*x5233);
IkReal x5240=(sj5*x5232);
IkReal x5241=(sj5*x5233);
evalcond[0]=(((r21*x5240))+(((-1.0)*x5237*x5238))+((r22*x5233)));
evalcond[1]=((((-1.0)*r22*x5238))+((r21*x5241))+(((-1.0)*x5237*x5239)));
evalcond[2]=(sj0+(((-1.0)*x5235*x5239))+(((-1.0)*r02*x5238))+((r01*x5241)));
evalcond[3]=((((-1.0)*x5234))+(((-1.0)*x5235*x5238))+((r01*x5240))+((r02*x5233)));
evalcond[4]=((((-1.0)*x5236*x5238))+(((-1.0)*sj0))+((r11*x5240))+((r12*x5233)));
evalcond[5]=((((-1.0)*x5236*x5239))+(((-1.0)*x5234))+((r11*x5241))+(((-1.0)*r12*x5238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5242=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5242.valid){
continue;
}
CheckValue<IkReal> x5243 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5242.value)))+(x5243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5244=IKcos(j4);
IkReal x5245=IKsin(j4);
IkReal x5246=((1.0)*cj0);
IkReal x5247=(cj5*r00);
IkReal x5248=(cj5*r10);
IkReal x5249=(cj5*r20);
IkReal x5250=((1.0)*x5244);
IkReal x5251=((1.0)*x5245);
IkReal x5252=(sj5*x5244);
IkReal x5253=(sj5*x5245);
evalcond[0]=((((-1.0)*x5249*x5250))+((r21*x5252))+((r22*x5245)));
evalcond[1]=((((-1.0)*x5249*x5251))+((r21*x5253))+(((-1.0)*r22*x5250)));
evalcond[2]=(sj0+(((-1.0)*r02*x5250))+((r01*x5253))+(((-1.0)*x5247*x5251)));
evalcond[3]=(((r01*x5252))+(((-1.0)*x5246))+(((-1.0)*x5247*x5250))+((r02*x5245)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x5248*x5250))+((r12*x5245))+((r11*x5252)));
evalcond[5]=((((-1.0)*x5248*x5251))+(((-1.0)*x5246))+(((-1.0)*r12*x5250))+((r11*x5253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5254=cj1*cj1;
IkReal x5255=(cj1*sj1);
IkReal x5256=(r00*sj5);
IkReal x5257=(cj1*sj2);
IkReal x5258=(r10*sj5);
IkReal x5259=(cj5*r11);
IkReal x5260=((20000.0)*py);
IkReal x5261=(cj2*sj1);
IkReal x5262=(cj5*r01);
IkReal x5263=((1893.0)*x5261);
IkReal x5264=(sj2*x5254);
CheckValue<IkReal> x5265=IKPowWithIntegerCheck(((((-8500.0)*x5264))+(((-8500.0)*cj2*x5255))+(((-15690.0)*x5255*(cj2*cj2)))+(((7845.0)*cj2*sj2))+(((7845.0)*x5255))+(((-15690.0)*cj2*x5264))),-1);
if(!x5265.valid){
continue;
}
CheckValue<IkReal> x5266=IKPowWithIntegerCheck((x5261+x5257),-1);
if(!x5266.valid){
continue;
}
if( IKabs(((x5265.value)*((((x5260*x5261))+(((-2183.0)*x5256))+(((1893.0)*x5257*x5258))+(((1893.0)*x5257*x5259))+((x5257*x5260))+(((-2183.0)*x5262))+((x5258*x5263))+((x5259*x5263)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5266.value)*(((((-1.0)*x5262))+(((-1.0)*x5256)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5265.value)*((((x5260*x5261))+(((-2183.0)*x5256))+(((1893.0)*x5257*x5258))+(((1893.0)*x5257*x5259))+((x5257*x5260))+(((-2183.0)*x5262))+((x5258*x5263))+((x5259*x5263))))))+IKsqr(((x5266.value)*(((((-1.0)*x5262))+(((-1.0)*x5256))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5265.value)*((((x5260*x5261))+(((-2183.0)*x5256))+(((1893.0)*x5257*x5258))+(((1893.0)*x5257*x5259))+((x5257*x5260))+(((-2183.0)*x5262))+((x5258*x5263))+((x5259*x5263))))), ((x5266.value)*(((((-1.0)*x5262))+(((-1.0)*x5256))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5267=IKcos(j0);
IkReal x5268=IKsin(j0);
IkReal x5269=(cj5*r01);
IkReal x5270=(cj2*sj1);
IkReal x5271=(r00*sj5);
IkReal x5272=(cj5*r11);
IkReal x5273=((0.39225)*cj2);
IkReal x5274=(r10*sj5);
IkReal x5275=((0.39225)*sj1*sj2);
IkReal x5276=(cj1*x5267);
IkReal x5277=(cj1*x5268);
evalcond[0]=(((sj2*x5276))+((x5267*x5270))+x5269+x5271);
evalcond[1]=(((sj2*x5277))+x5274+x5272+((x5268*x5270)));
evalcond[2]=((((-0.09465)*x5271))+((x5267*x5275))+(((0.10915)*x5268))+(((-1.0)*px))+(((-0.425)*x5276))+(((-0.09465)*x5269))+(((-1.0)*x5273*x5276)));
evalcond[3]=((((-0.10915)*x5267))+(((-0.09465)*x5272))+(((-0.09465)*x5274))+((x5268*x5275))+(((-1.0)*py))+(((-0.425)*x5277))+(((-1.0)*x5273*x5277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5278=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5278;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5279=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5279;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5280=((1.0)*cj5);
IkReal x5281=((((-1.0)*r21*x5280))+(((-1.0)*r20*sj5)));
j4eval[0]=x5281;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x5280))+(((-1.0)*r10*sj0*x5280))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x5281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5282=((-1.0)*r20);
IkReal x5284 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5284)==0){
continue;
}
IkReal x5283=pow(x5284,-0.5);
CheckValue<IkReal> x5285 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5282),IKFAST_ATAN2_MAGTHRESH);
if(!x5285.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5285.value));
IkReal gconst115=(r21*x5283);
IkReal gconst116=(x5282*x5283);
CheckValue<IkReal> x5286 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5286.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5286.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5287=((-1.0)*r20);
IkReal x5288=x5283;
CheckValue<IkReal> x5290 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5287),IKFAST_ATAN2_MAGTHRESH);
if(!x5290.valid){
continue;
}
IkReal x5289=((-1.0)*(x5290.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5289;
IkReal gconst114=x5289;
IkReal gconst115=(r21*x5288);
IkReal gconst116=(x5287*x5288);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5291=((-1.0)*r20);
IkReal x5292=x5283;
CheckValue<IkReal> x5294 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5291),IKFAST_ATAN2_MAGTHRESH);
if(!x5294.valid){
continue;
}
IkReal x5293=((-1.0)*(x5294.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5293;
IkReal gconst114=x5293;
IkReal gconst115=(r21*x5292);
IkReal gconst116=(x5291*x5292);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5295=((-1.0)*r20);
IkReal x5296=x5283;
CheckValue<IkReal> x5298 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5295),IKFAST_ATAN2_MAGTHRESH);
if(!x5298.valid){
continue;
}
IkReal x5297=((-1.0)*(x5298.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5297;
IkReal gconst114=x5297;
IkReal gconst115=(r21*x5296);
IkReal gconst116=(x5295*x5296);
IkReal x5299=((1.0)*(r22*r22));
CheckValue<IkReal> x5303=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5299))),-1);
if(!x5303.valid){
continue;
}
IkReal x5300=x5303.value;
IkReal x5301=((1.0)*x5300);
IkReal x5302=((((-2.0)*x5300*(r20*r20)*(r21*r21)))+(((-1.0)*x5299))+(((-1.0)*x5301*(r21*r21*r21*r21)))+(((-1.0)*x5301*(r20*r20*r20*r20))));
j4eval[0]=x5302;
j4eval[1]=IKsign(x5302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5304=(cj2*sj1);
IkReal x5305=(gconst115*r21);
IkReal x5306=(cj1*sj2);
IkReal x5307=((1.0)*gconst116*r20);
CheckValue<IkReal> x5308=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5305))+(((-1.0)*(x5305*x5305)))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst116*r20*x5307)))),-1);
if(!x5308.valid){
continue;
}
CheckValue<IkReal> x5309 = IKatan2WithCheck(IkReal((((r22*x5304))+((r22*x5306)))),IkReal(((((-1.0)*x5306*x5307))+((x5304*x5305))+(((-1.0)*x5304*x5307))+((x5305*x5306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5308.value)))+(x5309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5310=IKsin(j4);
IkReal x5311=IKcos(j4);
IkReal x5312=(cj1*cj2);
IkReal x5313=((1.0)*x5311);
IkReal x5314=(gconst115*x5310);
IkReal x5315=(gconst115*x5311);
IkReal x5316=((1.0)*sj1*sj2);
IkReal x5317=((1.0)*gconst116*x5310);
evalcond[0]=(((r21*x5314))+(((-1.0)*r20*x5317))+(((-1.0)*r22*x5313)));
evalcond[1]=(((r01*x5314))+sj0+(((-1.0)*r00*x5317))+(((-1.0)*r02*x5313)));
evalcond[2]=((((-1.0)*r12*x5313))+((r11*x5314))+(((-1.0)*cj0))+(((-1.0)*r10*x5317)));
evalcond[3]=(((cj2*sj1))+((r22*x5310))+((r21*x5315))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5313)));
evalcond[4]=(((r01*x5315))+((cj0*x5312))+((r02*x5310))+(((-1.0)*cj0*x5316))+(((-1.0)*gconst116*r00*x5313)));
evalcond[5]=((((-1.0)*sj0*x5316))+((sj0*x5312))+((r11*x5315))+(((-1.0)*gconst116*r10*x5313))+((r12*x5310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5318 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5318.valid){
continue;
}
CheckValue<IkReal> x5319=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5318.value)+(((1.5707963267949)*(x5319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5320=IKsin(j4);
IkReal x5321=IKcos(j4);
IkReal x5322=(cj1*cj2);
IkReal x5323=((1.0)*x5321);
IkReal x5324=(gconst115*x5320);
IkReal x5325=(gconst115*x5321);
IkReal x5326=((1.0)*sj1*sj2);
IkReal x5327=((1.0)*gconst116*x5320);
evalcond[0]=((((-1.0)*r20*x5327))+(((-1.0)*r22*x5323))+((r21*x5324)));
evalcond[1]=(sj0+(((-1.0)*r02*x5323))+((r01*x5324))+(((-1.0)*r00*x5327)));
evalcond[2]=(((r11*x5324))+(((-1.0)*r12*x5323))+(((-1.0)*r10*x5327))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5323))+((cj1*sj2))+((r22*x5320))+((r21*x5325)));
evalcond[4]=((((-1.0)*gconst116*r00*x5323))+((r01*x5325))+((cj0*x5322))+((r02*x5320))+(((-1.0)*cj0*x5326)));
evalcond[5]=((((-1.0)*gconst116*r10*x5323))+((r11*x5325))+((r12*x5320))+(((-1.0)*sj0*x5326))+((sj0*x5322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5328=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5328.valid){
continue;
}
CheckValue<IkReal> x5329 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5328.value)))+(x5329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5330=IKsin(j4);
IkReal x5331=IKcos(j4);
IkReal x5332=(cj1*cj2);
IkReal x5333=((1.0)*x5331);
IkReal x5334=(gconst115*x5330);
IkReal x5335=(gconst115*x5331);
IkReal x5336=((1.0)*sj1*sj2);
IkReal x5337=((1.0)*gconst116*x5330);
evalcond[0]=((((-1.0)*r20*x5337))+(((-1.0)*r22*x5333))+((r21*x5334)));
evalcond[1]=((((-1.0)*r00*x5337))+sj0+(((-1.0)*r02*x5333))+((r01*x5334)));
evalcond[2]=(((r11*x5334))+(((-1.0)*r10*x5337))+(((-1.0)*r12*x5333))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5333))+((cj1*sj2))+((r21*x5335))+((r22*x5330)));
evalcond[4]=((((-1.0)*gconst116*r00*x5333))+((r01*x5335))+(((-1.0)*cj0*x5336))+((cj0*x5332))+((r02*x5330)));
evalcond[5]=((((-1.0)*gconst116*r10*x5333))+((r11*x5335))+((r12*x5330))+(((-1.0)*sj0*x5336))+((sj0*x5332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5338=((-1.0)*r21);
IkReal x5340 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5340)==0){
continue;
}
IkReal x5339=pow(x5340,-0.5);
CheckValue<IkReal> x5341 = IKatan2WithCheck(IkReal(x5338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5341.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5341.value))));
IkReal gconst118=(x5338*x5339);
IkReal gconst119=((1.0)*r20*x5339);
CheckValue<IkReal> x5342 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5342.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5342.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5343=((-1.0)*r21);
CheckValue<IkReal> x5346 = IKatan2WithCheck(IkReal(x5343),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5346.valid){
continue;
}
IkReal x5344=((1.0)*(x5346.value));
IkReal x5345=x5339;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5344)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5344)));
IkReal gconst118=(x5343*x5345);
IkReal gconst119=((1.0)*r20*x5345);
IkReal x5347=r22*r22;
IkReal x5348=((1.0)*x5347);
CheckValue<IkReal> x5352=IKPowWithIntegerCheck(((-1.0)+x5347),-1);
if(!x5352.valid){
continue;
}
IkReal x5349=x5352.value;
if((((1.0)+(((-1.0)*x5348)))) < -0.00001)
continue;
IkReal x5350=IKsqrt(((1.0)+(((-1.0)*x5348))));
IkReal x5351=(sj0*x5349*x5350);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5351+(((-1.0)*x5348*x5351))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5353=((-1.0)*r21);
CheckValue<IkReal> x5356 = IKatan2WithCheck(IkReal(x5353),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5356.valid){
continue;
}
IkReal x5354=((1.0)*(x5356.value));
IkReal x5355=x5339;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5354)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5354)));
IkReal gconst118=(x5353*x5355);
IkReal gconst119=((1.0)*r20*x5355);
IkReal x5357=r22*r22;
IkReal x5358=((1.0)*x5357);
CheckValue<IkReal> x5362=IKPowWithIntegerCheck(((-1.0)+x5357),-1);
if(!x5362.valid){
continue;
}
IkReal x5359=x5362.value;
if((((1.0)+(((-1.0)*x5358)))) < -0.00001)
continue;
IkReal x5360=IKsqrt(((1.0)+(((-1.0)*x5358))));
IkReal x5361=(cj0*x5359*x5360);
j4eval[0]=((IKabs((x5361+(((-1.0)*x5358*x5361)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5363=((-1.0)*r21);
CheckValue<IkReal> x5366 = IKatan2WithCheck(IkReal(x5363),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5366.valid){
continue;
}
IkReal x5364=((1.0)*(x5366.value));
IkReal x5365=x5339;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5364)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5364)));
IkReal gconst118=(x5363*x5365);
IkReal gconst119=((1.0)*r20*x5365);
IkReal x5367=r22*r22;
IkReal x5368=(cj0*r02);
IkReal x5369=(r12*sj0);
CheckValue<IkReal> x5373=IKPowWithIntegerCheck(((-1.0)+x5367),-1);
if(!x5373.valid){
continue;
}
IkReal x5370=x5373.value;
if((((1.0)+(((-1.0)*x5367)))) < -0.00001)
continue;
IkReal x5371=IKsqrt(((1.0)+(((-1.0)*x5367))));
IkReal x5372=((1.0)*r22*x5370*x5371);
j4eval[0]=0;
j4eval[1]=((IKabs((x5368+x5369)))+(IKabs(((((-1.0)*x5368*x5372))+(((-1.0)*x5369*x5372))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5374=((1.0)*gconst119);
CheckValue<IkReal> x5375 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5374))+(((-1.0)*cj0*r00*x5374))+((gconst118*r11*sj0))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5375.valid){
continue;
}
CheckValue<IkReal> x5376=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x5374)))),-1);
if(!x5376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5375.value)+(((1.5707963267949)*(x5376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5377=IKsin(j4);
IkReal x5378=IKcos(j4);
IkReal x5379=(cj1*cj2);
IkReal x5380=(gconst118*r01);
IkReal x5381=(gconst119*r20);
IkReal x5382=(gconst119*r10);
IkReal x5383=(gconst119*r00);
IkReal x5384=(gconst118*r21);
IkReal x5385=(gconst118*r11);
IkReal x5386=((1.0)*cj0);
IkReal x5387=(sj1*sj2);
IkReal x5388=((1.0)*x5378);
IkReal x5389=((1.0)*x5377);
evalcond[0]=(((x5377*x5384))+(((-1.0)*r22*x5388))+(((-1.0)*x5381*x5389)));
evalcond[1]=(((x5377*x5380))+sj0+(((-1.0)*r02*x5388))+(((-1.0)*x5383*x5389)));
evalcond[2]=(((x5377*x5385))+(((-1.0)*x5382*x5389))+(((-1.0)*r12*x5388))+(((-1.0)*x5386)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5377))+((x5378*x5384))+(((-1.0)*x5381*x5388)));
evalcond[4]=(((cj0*x5379))+((x5378*x5380))+((r02*x5377))+(((-1.0)*x5386*x5387))+(((-1.0)*x5383*x5388)));
evalcond[5]=((((-1.0)*x5382*x5388))+(((-1.0)*sj0*x5387))+((sj0*x5379))+((x5378*x5385))+((r12*x5377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5390=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5390.valid){
continue;
}
CheckValue<IkReal> x5391 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5390.value)))+(x5391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5392=IKsin(j4);
IkReal x5393=IKcos(j4);
IkReal x5394=(cj1*cj2);
IkReal x5395=(gconst118*r01);
IkReal x5396=(gconst119*r20);
IkReal x5397=(gconst119*r10);
IkReal x5398=(gconst119*r00);
IkReal x5399=(gconst118*r21);
IkReal x5400=(gconst118*r11);
IkReal x5401=((1.0)*cj0);
IkReal x5402=(sj1*sj2);
IkReal x5403=((1.0)*x5393);
IkReal x5404=((1.0)*x5392);
evalcond[0]=(((x5392*x5399))+(((-1.0)*x5396*x5404))+(((-1.0)*r22*x5403)));
evalcond[1]=(sj0+(((-1.0)*x5398*x5404))+((x5392*x5395))+(((-1.0)*r02*x5403)));
evalcond[2]=(((x5392*x5400))+(((-1.0)*x5397*x5404))+(((-1.0)*r12*x5403))+(((-1.0)*x5401)));
evalcond[3]=(((cj2*sj1))+((r22*x5392))+((cj1*sj2))+((x5393*x5399))+(((-1.0)*x5396*x5403)));
evalcond[4]=(((r02*x5392))+(((-1.0)*x5398*x5403))+((x5393*x5395))+((cj0*x5394))+(((-1.0)*x5401*x5402)));
evalcond[5]=((((-1.0)*sj0*x5402))+(((-1.0)*x5397*x5403))+((x5393*x5400))+((r12*x5392))+((sj0*x5394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5405=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5405.valid){
continue;
}
CheckValue<IkReal> x5406 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5405.value)))+(x5406.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5407=IKsin(j4);
IkReal x5408=IKcos(j4);
IkReal x5409=(cj1*cj2);
IkReal x5410=(gconst118*r01);
IkReal x5411=(gconst119*r20);
IkReal x5412=(gconst119*r10);
IkReal x5413=(gconst119*r00);
IkReal x5414=(gconst118*r21);
IkReal x5415=(gconst118*r11);
IkReal x5416=((1.0)*cj0);
IkReal x5417=(sj1*sj2);
IkReal x5418=((1.0)*x5408);
IkReal x5419=((1.0)*x5407);
evalcond[0]=(((x5407*x5414))+(((-1.0)*x5411*x5419))+(((-1.0)*r22*x5418)));
evalcond[1]=((((-1.0)*r02*x5418))+sj0+((x5407*x5410))+(((-1.0)*x5413*x5419)));
evalcond[2]=((((-1.0)*x5412*x5419))+((x5407*x5415))+(((-1.0)*x5416))+(((-1.0)*r12*x5418)));
evalcond[3]=(((cj2*sj1))+((r22*x5407))+((x5408*x5414))+((cj1*sj2))+(((-1.0)*x5411*x5418)));
evalcond[4]=((((-1.0)*x5416*x5417))+((x5408*x5410))+((r02*x5407))+((cj0*x5409))+(((-1.0)*x5413*x5418)));
evalcond[5]=(((r12*x5407))+(((-1.0)*x5412*x5418))+(((-1.0)*sj0*x5417))+((x5408*x5415))+((sj0*x5409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5421 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5421)==0){
continue;
}
IkReal x5420=pow(x5421,-0.5);
CheckValue<IkReal> x5422 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5422.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5422.value));
IkReal gconst121=((-1.0)*r01*x5420);
IkReal gconst122=(r00*x5420);
CheckValue<IkReal> x5423 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5423.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5423.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5426 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5426.valid){
continue;
}
IkReal x5424=((-1.0)*(x5426.value));
IkReal x5425=x5420;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5424;
IkReal gconst120=x5424;
IkReal gconst121=((-1.0)*r01*x5425);
IkReal gconst122=(r00*x5425);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5427=((1.0)*gconst122);
CheckValue<IkReal> x5428=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x5427)))),-1);
if(!x5428.valid){
continue;
}
CheckValue<IkReal> x5429 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5427))+(((-1.0)*cj0*r00*x5427))+((cj0*gconst121*r01))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5428.value)))+(x5429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5430=IKsin(j4);
IkReal x5431=IKcos(j4);
IkReal x5432=(cj1*cj2);
IkReal x5433=(gconst121*r11);
IkReal x5434=(gconst122*r00);
IkReal x5435=(gconst122*r10);
IkReal x5436=(gconst122*r20);
IkReal x5437=((1.0)*cj0);
IkReal x5438=(sj1*sj2);
IkReal x5439=((1.0)*x5431);
IkReal x5440=((1.0)*x5430);
IkReal x5441=(gconst121*x5430);
IkReal x5442=(gconst121*x5431);
evalcond[0]=((((-1.0)*x5436*x5440))+(((-1.0)*r22*x5439))+((r21*x5441)));
evalcond[1]=(sj0+(((-1.0)*r02*x5439))+((r01*x5441))+(((-1.0)*x5434*x5440)));
evalcond[2]=((((-1.0)*x5435*x5440))+(((-1.0)*r12*x5439))+(((-1.0)*x5437))+((x5430*x5433)));
evalcond[3]=(((cj2*sj1))+((r22*x5430))+((cj1*sj2))+(((-1.0)*x5436*x5439))+((r21*x5442)));
evalcond[4]=(((r02*x5430))+((r01*x5442))+(((-1.0)*x5434*x5439))+(((-1.0)*x5437*x5438))+((cj0*x5432)));
evalcond[5]=(((sj0*x5432))+(((-1.0)*sj0*x5438))+((x5431*x5433))+(((-1.0)*x5435*x5439))+((r12*x5430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5443 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5443.valid){
continue;
}
CheckValue<IkReal> x5444=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x5444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5443.value)+(((1.5707963267949)*(x5444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5445=IKsin(j4);
IkReal x5446=IKcos(j4);
IkReal x5447=(cj1*cj2);
IkReal x5448=(gconst121*r11);
IkReal x5449=(gconst122*r00);
IkReal x5450=(gconst122*r10);
IkReal x5451=(gconst122*r20);
IkReal x5452=((1.0)*cj0);
IkReal x5453=(sj1*sj2);
IkReal x5454=((1.0)*x5446);
IkReal x5455=((1.0)*x5445);
IkReal x5456=(gconst121*x5445);
IkReal x5457=(gconst121*x5446);
evalcond[0]=((((-1.0)*x5451*x5455))+((r21*x5456))+(((-1.0)*r22*x5454)));
evalcond[1]=(sj0+((r01*x5456))+(((-1.0)*r02*x5454))+(((-1.0)*x5449*x5455)));
evalcond[2]=((((-1.0)*r12*x5454))+(((-1.0)*x5450*x5455))+((x5445*x5448))+(((-1.0)*x5452)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5451*x5454))+((cj1*sj2))+((r21*x5457))+((r22*x5445)));
evalcond[4]=((((-1.0)*x5452*x5453))+((r01*x5457))+((cj0*x5447))+(((-1.0)*x5449*x5454))+((r02*x5445)));
evalcond[5]=((((-1.0)*sj0*x5453))+(((-1.0)*x5450*x5454))+((sj0*x5447))+((x5446*x5448))+((r12*x5445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5459 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5459)==0){
continue;
}
IkReal x5458=pow(x5459,-0.5);
CheckValue<IkReal> x5460 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5460.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5460.value))));
IkReal gconst124=((1.0)*r01*x5458);
IkReal gconst125=((-1.0)*r00*x5458);
CheckValue<IkReal> x5461 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5461.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5461.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5464 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5464.valid){
continue;
}
IkReal x5462=((1.0)*(x5464.value));
IkReal x5463=x5458;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5462)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5462)));
IkReal gconst124=((1.0)*r01*x5463);
IkReal gconst125=((-1.0)*r00*x5463);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5467 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5467.valid){
continue;
}
IkReal x5465=((1.0)*(x5467.value));
IkReal x5466=x5458;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5465)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5465)));
IkReal gconst124=((1.0)*r01*x5466);
IkReal gconst125=((-1.0)*r00*x5466);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5470 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5470.valid){
continue;
}
IkReal x5468=((1.0)*(x5470.value));
IkReal x5469=x5458;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5468)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5468)));
IkReal gconst124=((1.0)*r01*x5469);
IkReal gconst125=((-1.0)*r00*x5469);
IkReal x5471=r02*r02;
IkReal x5472=(r12*sj0);
IkReal x5473=x5458;
IkReal x5474=(cj0*x5473);
j4eval[0]=((IKabs(((((-1.0)*x5474))+((x5471*x5474))+((r02*x5472*x5473)))))+(IKabs((x5472+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5475=((1.0)*gconst125);
CheckValue<IkReal> x5476 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5475))+((cj0*gconst124*r01))+(((-1.0)*cj0*r00*x5475))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5476.valid){
continue;
}
CheckValue<IkReal> x5477=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5475)))),-1);
if(!x5477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5476.value)+(((1.5707963267949)*(x5477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5478=IKsin(j4);
IkReal x5479=IKcos(j4);
IkReal x5480=(cj1*cj2);
IkReal x5481=(gconst125*r20);
IkReal x5482=(gconst124*r01);
IkReal x5483=(gconst125*r00);
IkReal x5484=(gconst125*r10);
IkReal x5485=((1.0)*cj0);
IkReal x5486=(sj1*sj2);
IkReal x5487=((1.0)*x5479);
IkReal x5488=((1.0)*x5478);
IkReal x5489=(gconst124*x5478);
IkReal x5490=(gconst124*x5479);
evalcond[0]=((((-1.0)*x5481*x5488))+(((-1.0)*r22*x5487))+((r21*x5489)));
evalcond[1]=(sj0+(((-1.0)*x5483*x5488))+((x5478*x5482))+(((-1.0)*r02*x5487)));
evalcond[2]=((((-1.0)*x5485))+(((-1.0)*r12*x5487))+((r11*x5489))+(((-1.0)*x5484*x5488)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5481*x5487))+((cj1*sj2))+((r21*x5490))+((r22*x5478)));
evalcond[4]=((((-1.0)*x5483*x5487))+((cj0*x5480))+(((-1.0)*x5485*x5486))+((x5479*x5482))+((r02*x5478)));
evalcond[5]=((((-1.0)*x5484*x5487))+((r11*x5490))+((r12*x5478))+(((-1.0)*sj0*x5486))+((sj0*x5480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5491=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5491.valid){
continue;
}
CheckValue<IkReal> x5492 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5491.value)))+(x5492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5493=IKsin(j4);
IkReal x5494=IKcos(j4);
IkReal x5495=(cj1*cj2);
IkReal x5496=(gconst125*r20);
IkReal x5497=(gconst124*r01);
IkReal x5498=(gconst125*r00);
IkReal x5499=(gconst125*r10);
IkReal x5500=((1.0)*cj0);
IkReal x5501=(sj1*sj2);
IkReal x5502=((1.0)*x5494);
IkReal x5503=((1.0)*x5493);
IkReal x5504=(gconst124*x5493);
IkReal x5505=(gconst124*x5494);
evalcond[0]=((((-1.0)*r22*x5502))+(((-1.0)*x5496*x5503))+((r21*x5504)));
evalcond[1]=(sj0+(((-1.0)*x5498*x5503))+(((-1.0)*r02*x5502))+((x5493*x5497)));
evalcond[2]=((((-1.0)*r12*x5502))+((r11*x5504))+(((-1.0)*x5500))+(((-1.0)*x5499*x5503)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5496*x5502))+((cj1*sj2))+((r21*x5505))+((r22*x5493)));
evalcond[4]=(((cj0*x5495))+((x5494*x5497))+(((-1.0)*x5500*x5501))+(((-1.0)*x5498*x5502))+((r02*x5493)));
evalcond[5]=(((r12*x5493))+(((-1.0)*sj0*x5501))+((r11*x5505))+((sj0*x5495))+(((-1.0)*x5499*x5502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5506 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5506.valid){
continue;
}
CheckValue<IkReal> x5507=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5506.value)+(((1.5707963267949)*(x5507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5508=IKsin(j4);
IkReal x5509=IKcos(j4);
IkReal x5510=(cj1*cj2);
IkReal x5511=(gconst125*r20);
IkReal x5512=(gconst124*r01);
IkReal x5513=(gconst125*r00);
IkReal x5514=(gconst125*r10);
IkReal x5515=((1.0)*cj0);
IkReal x5516=(sj1*sj2);
IkReal x5517=((1.0)*x5509);
IkReal x5518=((1.0)*x5508);
IkReal x5519=(gconst124*x5508);
IkReal x5520=(gconst124*x5509);
evalcond[0]=((((-1.0)*r22*x5517))+((r21*x5519))+(((-1.0)*x5511*x5518)));
evalcond[1]=(sj0+(((-1.0)*x5513*x5518))+(((-1.0)*r02*x5517))+((x5508*x5512)));
evalcond[2]=((((-1.0)*r12*x5517))+(((-1.0)*x5515))+((r11*x5519))+(((-1.0)*x5514*x5518)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5511*x5517))+((cj1*sj2))+((r22*x5508))+((r21*x5520)));
evalcond[4]=((((-1.0)*x5513*x5517))+((r02*x5508))+((x5509*x5512))+(((-1.0)*x5515*x5516))+((cj0*x5510)));
evalcond[5]=(((sj0*x5510))+((r12*x5508))+(((-1.0)*sj0*x5516))+(((-1.0)*x5514*x5517))+((r11*x5520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5521=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5521;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5522=((1.0)*cj5);
IkReal x5523=((((-1.0)*r21*x5522))+(((-1.0)*r20*sj5)));
j4eval[0]=x5523;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5522))+((r11*sj5))))));
j4eval[2]=IKsign(x5523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5524=(r01*sj5);
IkReal x5525=(cj1*sj2);
IkReal x5526=(cj2*sj1);
IkReal x5527=((1.0)*r02);
IkReal x5528=((1.0)*cj5*r00);
IkReal x5529=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5529;
j4eval[1]=((IKabs(((((-1.0)*x5526*x5527))+(((-1.0)*x5525*x5527)))))+(IKabs(((((-1.0)*x5526*x5528))+((x5524*x5525))+((x5524*x5526))+(((-1.0)*x5525*x5528))))));
j4eval[2]=IKsign(x5529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5530=(r01*sj5);
IkReal x5531=(cj1*sj2);
IkReal x5532=(cj2*sj1);
IkReal x5533=((1.0)*r02);
IkReal x5534=((1.0)*cj5*r00);
CheckValue<IkReal> x5535 = IKatan2WithCheck(IkReal((((x5530*x5531))+((x5530*x5532))+(((-1.0)*x5531*x5534))+(((-1.0)*x5532*x5534)))),IkReal(((((-1.0)*x5531*x5533))+(((-1.0)*x5532*x5533)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5535.valid){
continue;
}
CheckValue<IkReal> x5536=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5535.value)+(((1.5707963267949)*(x5536.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5537=IKcos(j4);
IkReal x5538=IKsin(j4);
IkReal x5539=(cj5*r00);
IkReal x5540=(cj5*r10);
IkReal x5541=(r21*sj5);
IkReal x5542=(cj5*r20);
IkReal x5543=((1.0)*x5537);
IkReal x5544=((1.0)*x5538);
IkReal x5545=(sj5*x5538);
IkReal x5546=(sj5*x5537);
evalcond[0]=((((-1.0)*x5539*x5543))+((r02*x5538))+((r01*x5546)));
evalcond[1]=(((x5538*x5541))+(((-1.0)*x5542*x5544))+(((-1.0)*r22*x5543)));
evalcond[2]=(((r11*x5545))+(((-1.0)*x5540*x5544))+(((-1.0)*r12*x5543)));
evalcond[3]=((1.0)+(((-1.0)*x5539*x5544))+(((-1.0)*r02*x5543))+((r01*x5545)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5542*x5543))+((cj1*sj2))+((r22*x5538))+((x5537*x5541)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x5546))+(((-1.0)*x5540*x5543))+((cj1*cj2))+((r12*x5538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5547=((1.0)*cj5);
CheckValue<IkReal> x5548 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x5547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5548.valid){
continue;
}
CheckValue<IkReal> x5549=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5547))+(((-1.0)*r20*sj5)))),-1);
if(!x5549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5548.value)+(((1.5707963267949)*(x5549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5550=IKcos(j4);
IkReal x5551=IKsin(j4);
IkReal x5552=(cj5*r00);
IkReal x5553=(cj5*r10);
IkReal x5554=(r21*sj5);
IkReal x5555=(cj5*r20);
IkReal x5556=((1.0)*x5550);
IkReal x5557=((1.0)*x5551);
IkReal x5558=(sj5*x5551);
IkReal x5559=(sj5*x5550);
evalcond[0]=(((r01*x5559))+(((-1.0)*x5552*x5556))+((r02*x5551)));
evalcond[1]=((((-1.0)*x5555*x5557))+((x5551*x5554))+(((-1.0)*r22*x5556)));
evalcond[2]=(((r11*x5558))+(((-1.0)*x5553*x5557))+(((-1.0)*r12*x5556)));
evalcond[3]=((1.0)+((r01*x5558))+(((-1.0)*x5552*x5557))+(((-1.0)*r02*x5556)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5555*x5556))+((cj1*sj2))+((r22*x5551))+((x5550*x5554)));
evalcond[5]=(((r11*x5559))+(((-1.0)*x5553*x5556))+(((-1.0)*sj1*sj2))+((r12*x5551))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5560 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5560.valid){
continue;
}
CheckValue<IkReal> x5561=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5560.value)+(((1.5707963267949)*(x5561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5562=IKcos(j4);
IkReal x5563=IKsin(j4);
IkReal x5564=(cj5*r00);
IkReal x5565=(cj5*r10);
IkReal x5566=(r21*sj5);
IkReal x5567=(cj5*r20);
IkReal x5568=((1.0)*x5562);
IkReal x5569=((1.0)*x5563);
IkReal x5570=(sj5*x5563);
IkReal x5571=(sj5*x5562);
evalcond[0]=((((-1.0)*x5564*x5568))+((r02*x5563))+((r01*x5571)));
evalcond[1]=((((-1.0)*r22*x5568))+((x5563*x5566))+(((-1.0)*x5567*x5569)));
evalcond[2]=((((-1.0)*r12*x5568))+((r11*x5570))+(((-1.0)*x5565*x5569)));
evalcond[3]=((1.0)+(((-1.0)*x5564*x5569))+(((-1.0)*r02*x5568))+((r01*x5570)));
evalcond[4]=(((cj2*sj1))+((x5562*x5566))+((cj1*sj2))+((r22*x5563))+(((-1.0)*x5567*x5568)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x5571))+((r12*x5563))+((cj1*cj2))+(((-1.0)*x5565*x5568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5572=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5572;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5573=((1.0)*cj5);
IkReal x5574=((((-1.0)*r11*x5573))+(((-1.0)*r10*sj5)));
j4eval[0]=x5574;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5573)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5575=cj5*cj5;
IkReal x5576=r01*r01;
IkReal x5577=(cj5*r00);
IkReal x5578=(r01*sj5);
IkReal x5579=(x5576+(((-1.0)*x5575*x5576))+(((-2.0)*x5577*x5578))+((x5575*(r00*r00)))+(r02*r02));
j4eval[0]=x5579;
j4eval[1]=IKsign(x5579);
j4eval[2]=((IKabs(r02))+(IKabs((x5578+(((-1.0)*x5577))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5580=cj5*cj5;
IkReal x5581=r01*r01;
IkReal x5582=(r01*sj5);
IkReal x5583=(cj5*r00);
CheckValue<IkReal> x5584=IKPowWithIntegerCheck(IKsign((x5581+(((-1.0)*x5580*x5581))+(r02*r02)+((x5580*(r00*r00)))+(((-2.0)*x5582*x5583)))),-1);
if(!x5584.valid){
continue;
}
CheckValue<IkReal> x5585 = IKatan2WithCheck(IkReal((x5582+(((-1.0)*x5583)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5584.value)))+(x5585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5586=IKcos(j4);
IkReal x5587=IKsin(j4);
IkReal x5588=(cj5*r00);
IkReal x5589=(cj5*r10);
IkReal x5590=(r21*sj5);
IkReal x5591=(cj5*r20);
IkReal x5592=((1.0)*x5586);
IkReal x5593=((1.0)*x5587);
IkReal x5594=(sj5*x5587);
IkReal x5595=(sj5*x5586);
evalcond[0]=((((-1.0)*x5588*x5592))+((r02*x5587))+((r01*x5595)));
evalcond[1]=(((x5587*x5590))+(((-1.0)*x5591*x5593))+(((-1.0)*r22*x5592)));
evalcond[2]=((((-1.0)*r12*x5592))+((r11*x5594))+(((-1.0)*x5589*x5593)));
evalcond[3]=((-1.0)+(((-1.0)*x5588*x5593))+(((-1.0)*r02*x5592))+((r01*x5594)));
evalcond[4]=(((cj2*sj1))+((x5586*x5590))+((cj1*sj2))+(((-1.0)*x5591*x5592))+((r22*x5587)));
evalcond[5]=(((r11*x5595))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5587))+(((-1.0)*x5589*x5592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5596=((1.0)*cj5);
CheckValue<IkReal> x5597 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5597.valid){
continue;
}
CheckValue<IkReal> x5598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5596))+(((-1.0)*r10*sj5)))),-1);
if(!x5598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5597.value)+(((1.5707963267949)*(x5598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5599=IKcos(j4);
IkReal x5600=IKsin(j4);
IkReal x5601=(cj5*r00);
IkReal x5602=(cj5*r10);
IkReal x5603=(r21*sj5);
IkReal x5604=(cj5*r20);
IkReal x5605=((1.0)*x5599);
IkReal x5606=((1.0)*x5600);
IkReal x5607=(sj5*x5600);
IkReal x5608=(sj5*x5599);
evalcond[0]=(((r02*x5600))+((r01*x5608))+(((-1.0)*x5601*x5605)));
evalcond[1]=(((x5600*x5603))+(((-1.0)*r22*x5605))+(((-1.0)*x5604*x5606)));
evalcond[2]=((((-1.0)*x5602*x5606))+(((-1.0)*r12*x5605))+((r11*x5607)));
evalcond[3]=((-1.0)+((r01*x5607))+(((-1.0)*x5601*x5606))+(((-1.0)*r02*x5605)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5599*x5603))+((r22*x5600))+(((-1.0)*x5604*x5605)));
evalcond[5]=((((-1.0)*x5602*x5605))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5600))+((r11*x5608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5609=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5609.valid){
continue;
}
CheckValue<IkReal> x5610 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5609.value)))+(x5610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5611=IKcos(j4);
IkReal x5612=IKsin(j4);
IkReal x5613=(cj5*r00);
IkReal x5614=(cj5*r10);
IkReal x5615=(r21*sj5);
IkReal x5616=(cj5*r20);
IkReal x5617=((1.0)*x5611);
IkReal x5618=((1.0)*x5612);
IkReal x5619=(sj5*x5612);
IkReal x5620=(sj5*x5611);
evalcond[0]=((((-1.0)*x5613*x5617))+((r02*x5612))+((r01*x5620)));
evalcond[1]=((((-1.0)*r22*x5617))+((x5612*x5615))+(((-1.0)*x5616*x5618)));
evalcond[2]=((((-1.0)*r12*x5617))+((r11*x5619))+(((-1.0)*x5614*x5618)));
evalcond[3]=((-1.0)+(((-1.0)*x5613*x5618))+((r01*x5619))+(((-1.0)*r02*x5617)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5611*x5615))+(((-1.0)*x5616*x5617))+((r22*x5612)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5612))+((r11*x5620))+(((-1.0)*x5614*x5617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5622 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5622)==0){
continue;
}
IkReal x5621=pow(x5622,-0.5);
CheckValue<IkReal> x5623 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5623.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5623.value));
IkReal gconst127=((-1.0)*r11*x5621);
IkReal gconst128=(r10*x5621);
CheckValue<IkReal> x5624 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5624.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5624.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5627 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5627.valid){
continue;
}
IkReal x5625=((-1.0)*(x5627.value));
IkReal x5626=x5621;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5625;
IkReal gconst126=x5625;
IkReal gconst127=((-1.0)*r11*x5626);
IkReal gconst128=(r10*x5626);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5628=((1.0)*gconst128);
CheckValue<IkReal> x5629 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst127*r01))+((gconst127*r11*sj0))+(((-1.0)*r10*sj0*x5628))+(((-1.0)*cj0*r00*x5628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5629.valid){
continue;
}
CheckValue<IkReal> x5630=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x5628)))),-1);
if(!x5630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5629.value)+(((1.5707963267949)*(x5630.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5631=IKsin(j4);
IkReal x5632=IKcos(j4);
IkReal x5633=(cj1*cj2);
IkReal x5634=(gconst127*r01);
IkReal x5635=(gconst128*r10);
IkReal x5636=(gconst128*r00);
IkReal x5637=(gconst128*r20);
IkReal x5638=((1.0)*cj0);
IkReal x5639=(sj1*sj2);
IkReal x5640=((1.0)*x5632);
IkReal x5641=((1.0)*x5631);
IkReal x5642=(gconst127*x5632);
IkReal x5643=(gconst127*x5631);
evalcond[0]=((((-1.0)*r22*x5640))+((r21*x5643))+(((-1.0)*x5637*x5641)));
evalcond[1]=(sj0+(((-1.0)*r02*x5640))+((x5631*x5634))+(((-1.0)*x5636*x5641)));
evalcond[2]=((((-1.0)*r12*x5640))+(((-1.0)*x5638))+((r11*x5643))+(((-1.0)*x5635*x5641)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5631))+((r21*x5642))+(((-1.0)*x5637*x5640)));
evalcond[4]=((((-1.0)*x5638*x5639))+((cj0*x5633))+((x5632*x5634))+(((-1.0)*x5636*x5640))+((r02*x5631)));
evalcond[5]=(((r12*x5631))+(((-1.0)*sj0*x5639))+((r11*x5642))+((sj0*x5633))+(((-1.0)*x5635*x5640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5644 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5644.valid){
continue;
}
CheckValue<IkReal> x5645=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x5645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5644.value)+(((1.5707963267949)*(x5645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5646=IKsin(j4);
IkReal x5647=IKcos(j4);
IkReal x5648=(cj1*cj2);
IkReal x5649=(gconst127*r01);
IkReal x5650=(gconst128*r10);
IkReal x5651=(gconst128*r00);
IkReal x5652=(gconst128*r20);
IkReal x5653=((1.0)*cj0);
IkReal x5654=(sj1*sj2);
IkReal x5655=((1.0)*x5647);
IkReal x5656=((1.0)*x5646);
IkReal x5657=(gconst127*x5647);
IkReal x5658=(gconst127*x5646);
evalcond[0]=((((-1.0)*x5652*x5656))+(((-1.0)*r22*x5655))+((r21*x5658)));
evalcond[1]=(sj0+(((-1.0)*x5651*x5656))+(((-1.0)*r02*x5655))+((x5646*x5649)));
evalcond[2]=((((-1.0)*r12*x5655))+((r11*x5658))+(((-1.0)*x5653))+(((-1.0)*x5650*x5656)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5652*x5655))+((cj1*sj2))+((r22*x5646))+((r21*x5657)));
evalcond[4]=(((cj0*x5648))+(((-1.0)*x5651*x5655))+(((-1.0)*x5653*x5654))+((x5647*x5649))+((r02*x5646)));
evalcond[5]=(((sj0*x5648))+((r12*x5646))+(((-1.0)*sj0*x5654))+((r11*x5657))+(((-1.0)*x5650*x5655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5660 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5660)==0){
continue;
}
IkReal x5659=pow(x5660,-0.5);
CheckValue<IkReal> x5661 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5661.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5661.value))));
IkReal gconst130=((1.0)*r11*x5659);
IkReal gconst131=((-1.0)*r10*x5659);
CheckValue<IkReal> x5662 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5662.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5662.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5665 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5665.valid){
continue;
}
IkReal x5663=((1.0)*(x5665.value));
IkReal x5664=x5659;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5663)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5663)));
IkReal gconst130=((1.0)*r11*x5664);
IkReal gconst131=((-1.0)*r10*x5664);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5668 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5668.valid){
continue;
}
IkReal x5666=((1.0)*(x5668.value));
IkReal x5667=x5659;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5666)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5666)));
IkReal gconst130=((1.0)*r11*x5667);
IkReal gconst131=((-1.0)*r10*x5667);
IkReal x5669=r12*r12;
IkReal x5670=(cj0*r02);
IkReal x5671=x5659;
IkReal x5672=(sj0*x5671);
j4eval[0]=((IKabs((x5670+((r12*sj0)))))+(IKabs(((((-1.0)*x5672))+((x5669*x5672))+((r12*x5670*x5671))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5675 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5675.valid){
continue;
}
IkReal x5673=((1.0)*(x5675.value));
IkReal x5674=x5659;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5673)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5673)));
IkReal gconst130=((1.0)*r11*x5674);
IkReal gconst131=((-1.0)*r10*x5674);
IkReal x5676=(cj1*sj2);
IkReal x5677=(cj2*sj1);
IkReal x5678=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x5684=IKPowWithIntegerCheck(x5678,-1);
if(!x5684.valid){
continue;
}
IkReal x5679=x5684.value;
IkReal x5680=((1.0)*x5679);
IkReal x5681=x5659;
IkReal x5682=(r12*r22*x5681);
IkReal x5683=((((-1.0)*x5680*(r11*r11)*(r21*r21)))+(((-1.0)*x5680*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x5679)));
j4eval[0]=x5683;
j4eval[1]=((IKabs((((x5677*x5682))+((x5676*x5682)))))+(IKabs((((r22*x5676))+((r22*x5677))))));
j4eval[2]=IKsign(x5683);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5685=(cj2*sj1);
IkReal x5686=(cj1*sj2);
IkReal x5687=(gconst130*r21);
IkReal x5688=((1.0)*gconst131*r20);
CheckValue<IkReal> x5689=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst131*r20*x5687))+(((-1.0)*(x5687*x5687)))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst131*r20*x5688)))),-1);
if(!x5689.valid){
continue;
}
CheckValue<IkReal> x5690 = IKatan2WithCheck(IkReal((((r22*x5685))+((r22*x5686)))),IkReal(((((-1.0)*x5686*x5688))+((x5686*x5687))+((x5685*x5687))+(((-1.0)*x5685*x5688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5689.value)))+(x5690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5691=IKsin(j4);
IkReal x5692=IKcos(j4);
IkReal x5693=(cj1*cj2);
IkReal x5694=(gconst131*r10);
IkReal x5695=(gconst130*r11);
IkReal x5696=(gconst131*r20);
IkReal x5697=(gconst131*r00);
IkReal x5698=((1.0)*cj0);
IkReal x5699=(sj1*sj2);
IkReal x5700=((1.0)*x5692);
IkReal x5701=((1.0)*x5691);
IkReal x5702=(gconst130*x5692);
IkReal x5703=(gconst130*x5691);
evalcond[0]=((((-1.0)*r22*x5700))+((r21*x5703))+(((-1.0)*x5696*x5701)));
evalcond[1]=(sj0+(((-1.0)*x5697*x5701))+((r01*x5703))+(((-1.0)*r02*x5700)));
evalcond[2]=((((-1.0)*x5694*x5701))+(((-1.0)*r12*x5700))+(((-1.0)*x5698))+((x5691*x5695)));
evalcond[3]=(((cj2*sj1))+((r22*x5691))+((cj1*sj2))+((r21*x5702))+(((-1.0)*x5696*x5700)));
evalcond[4]=((((-1.0)*x5697*x5700))+((r02*x5691))+(((-1.0)*x5698*x5699))+((r01*x5702))+((cj0*x5693)));
evalcond[5]=((((-1.0)*x5694*x5700))+((x5692*x5695))+((sj0*x5693))+((r12*x5691))+(((-1.0)*sj0*x5699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5704=((1.0)*gconst131);
CheckValue<IkReal> x5705 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*cj0*r00*x5704))+((gconst130*r11*sj0))+(((-1.0)*r10*sj0*x5704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5705.valid){
continue;
}
CheckValue<IkReal> x5706=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5704))+(((-1.0)*gconst130*r20)))),-1);
if(!x5706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5705.value)+(((1.5707963267949)*(x5706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5707=IKsin(j4);
IkReal x5708=IKcos(j4);
IkReal x5709=(cj1*cj2);
IkReal x5710=(gconst131*r10);
IkReal x5711=(gconst130*r11);
IkReal x5712=(gconst131*r20);
IkReal x5713=(gconst131*r00);
IkReal x5714=((1.0)*cj0);
IkReal x5715=(sj1*sj2);
IkReal x5716=((1.0)*x5708);
IkReal x5717=((1.0)*x5707);
IkReal x5718=(gconst130*x5708);
IkReal x5719=(gconst130*x5707);
evalcond[0]=((((-1.0)*r22*x5716))+(((-1.0)*x5712*x5717))+((r21*x5719)));
evalcond[1]=(sj0+(((-1.0)*x5713*x5717))+((r01*x5719))+(((-1.0)*r02*x5716)));
evalcond[2]=(((x5707*x5711))+(((-1.0)*x5710*x5717))+(((-1.0)*r12*x5716))+(((-1.0)*x5714)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5707))+(((-1.0)*x5712*x5716))+((r21*x5718)));
evalcond[4]=(((r02*x5707))+(((-1.0)*x5714*x5715))+(((-1.0)*x5713*x5716))+((r01*x5718))+((cj0*x5709)));
evalcond[5]=(((sj0*x5709))+((r12*x5707))+(((-1.0)*x5710*x5716))+(((-1.0)*sj0*x5715))+((x5708*x5711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5720=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5720.valid){
continue;
}
CheckValue<IkReal> x5721 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5720.value)))+(x5721.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5722=IKsin(j4);
IkReal x5723=IKcos(j4);
IkReal x5724=(cj1*cj2);
IkReal x5725=(gconst131*r10);
IkReal x5726=(gconst130*r11);
IkReal x5727=(gconst131*r20);
IkReal x5728=(gconst131*r00);
IkReal x5729=((1.0)*cj0);
IkReal x5730=(sj1*sj2);
IkReal x5731=((1.0)*x5723);
IkReal x5732=((1.0)*x5722);
IkReal x5733=(gconst130*x5723);
IkReal x5734=(gconst130*x5722);
evalcond[0]=(((r21*x5734))+(((-1.0)*x5727*x5732))+(((-1.0)*r22*x5731)));
evalcond[1]=(sj0+((r01*x5734))+(((-1.0)*x5728*x5732))+(((-1.0)*r02*x5731)));
evalcond[2]=((((-1.0)*x5725*x5732))+(((-1.0)*x5729))+(((-1.0)*r12*x5731))+((x5722*x5726)));
evalcond[3]=(((cj2*sj1))+((r21*x5733))+((cj1*sj2))+(((-1.0)*x5727*x5731))+((r22*x5722)));
evalcond[4]=(((r01*x5733))+(((-1.0)*x5729*x5730))+(((-1.0)*x5728*x5731))+((cj0*x5724))+((r02*x5722)));
evalcond[5]=(((sj0*x5724))+((x5723*x5726))+(((-1.0)*x5725*x5731))+((r12*x5722))+(((-1.0)*sj0*x5730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5735=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5735;
j4eval[1]=IKsign(x5735);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5736=((1.0)*cj5);
IkReal x5737=((((-1.0)*r21*x5736))+(((-1.0)*r20*sj5)));
j4eval[0]=x5737;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5736))))));
j4eval[2]=IKsign(x5737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5738=cj5*cj5;
IkReal x5739=r11*r11;
IkReal x5740=(r11*sj5);
IkReal x5741=(cj5*r10);
IkReal x5742=((((-1.0)*x5738*x5739))+(((-2.0)*x5740*x5741))+(r12*r12)+((x5738*(r10*r10)))+x5739);
j4eval[0]=x5742;
j4eval[1]=IKsign(x5742);
j4eval[2]=((IKabs(((((-1.0)*x5741))+x5740)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5743=cj5*cj5;
IkReal x5744=r11*r11;
IkReal x5745=(cj5*r10);
IkReal x5746=(r11*sj5);
CheckValue<IkReal> x5747=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5745*x5746))+((x5743*(r10*r10)))+(((-1.0)*x5743*x5744))+x5744)),-1);
if(!x5747.valid){
continue;
}
CheckValue<IkReal> x5748 = IKatan2WithCheck(IkReal(((((-1.0)*x5745))+x5746)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5747.value)))+(x5748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5749=IKcos(j4);
IkReal x5750=IKsin(j4);
IkReal x5751=(cj5*r00);
IkReal x5752=(cj5*r10);
IkReal x5753=(r21*sj5);
IkReal x5754=(cj5*r20);
IkReal x5755=((1.0)*x5749);
IkReal x5756=((1.0)*x5750);
IkReal x5757=(sj5*x5750);
IkReal x5758=(sj5*x5749);
evalcond[0]=((((-1.0)*x5752*x5755))+((r11*x5758))+((r12*x5750)));
evalcond[1]=(((x5750*x5753))+(((-1.0)*r22*x5755))+(((-1.0)*x5754*x5756)));
evalcond[2]=((((-1.0)*x5751*x5756))+((r01*x5757))+(((-1.0)*r02*x5755)));
evalcond[3]=((-1.0)+(((-1.0)*x5752*x5756))+(((-1.0)*r12*x5755))+((r11*x5757)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5749*x5753))+(((-1.0)*x5754*x5755))+((r22*x5750)));
evalcond[5]=((((-1.0)*x5751*x5755))+(((-1.0)*sj1*sj2))+((r01*x5758))+((cj1*cj2))+((r02*x5750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5759=((1.0)*cj5);
CheckValue<IkReal> x5760=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5759))+(((-1.0)*r20*sj5)))),-1);
if(!x5760.valid){
continue;
}
CheckValue<IkReal> x5761 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5760.value)))+(x5761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5762=IKcos(j4);
IkReal x5763=IKsin(j4);
IkReal x5764=(cj5*r00);
IkReal x5765=(cj5*r10);
IkReal x5766=(r21*sj5);
IkReal x5767=(cj5*r20);
IkReal x5768=((1.0)*x5762);
IkReal x5769=((1.0)*x5763);
IkReal x5770=(sj5*x5763);
IkReal x5771=(sj5*x5762);
evalcond[0]=(((r11*x5771))+(((-1.0)*x5765*x5768))+((r12*x5763)));
evalcond[1]=((((-1.0)*x5767*x5769))+(((-1.0)*r22*x5768))+((x5763*x5766)));
evalcond[2]=(((r01*x5770))+(((-1.0)*r02*x5768))+(((-1.0)*x5764*x5769)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5768))+((r11*x5770))+(((-1.0)*x5765*x5769)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5767*x5768))+((cj1*sj2))+((r22*x5763))+((x5762*x5766)));
evalcond[5]=(((r01*x5771))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x5763))+(((-1.0)*x5764*x5768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5772 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5772.valid){
continue;
}
CheckValue<IkReal> x5773=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5772.value)+(((1.5707963267949)*(x5773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5774=IKcos(j4);
IkReal x5775=IKsin(j4);
IkReal x5776=(cj5*r00);
IkReal x5777=(cj5*r10);
IkReal x5778=(r21*sj5);
IkReal x5779=(cj5*r20);
IkReal x5780=((1.0)*x5774);
IkReal x5781=((1.0)*x5775);
IkReal x5782=(sj5*x5775);
IkReal x5783=(sj5*x5774);
evalcond[0]=(((r11*x5783))+(((-1.0)*x5777*x5780))+((r12*x5775)));
evalcond[1]=((((-1.0)*x5779*x5781))+((x5775*x5778))+(((-1.0)*r22*x5780)));
evalcond[2]=(((r01*x5782))+(((-1.0)*x5776*x5781))+(((-1.0)*r02*x5780)));
evalcond[3]=((-1.0)+((r11*x5782))+(((-1.0)*x5777*x5781))+(((-1.0)*r12*x5780)));
evalcond[4]=(((cj2*sj1))+((x5774*x5778))+((cj1*sj2))+((r22*x5775))+(((-1.0)*x5779*x5780)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x5783))+(((-1.0)*x5776*x5780))+((r02*x5775))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5784=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5784;
j4eval[1]=IKsign(x5784);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5785=((1.0)*cj5);
IkReal x5786=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5785)));
j4eval[0]=x5786;
j4eval[1]=((IKabs(((((-1.0)*r20*x5785))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5786);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5787=cj5*cj5;
IkReal x5788=r11*r11;
IkReal x5789=(cj5*r10);
IkReal x5790=(r11*sj5);
IkReal x5791=((((-1.0)*x5787*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x5788))+(((2.0)*x5789*x5790))+((x5787*x5788)));
j4eval[0]=x5791;
j4eval[1]=IKsign(x5791);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5789))+x5790))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5792=cj5*cj5;
IkReal x5793=r11*r11;
IkReal x5794=(cj5*r10);
IkReal x5795=(r11*sj5);
CheckValue<IkReal> x5796 = IKatan2WithCheck(IkReal(((((-1.0)*x5794))+x5795)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5796.valid){
continue;
}
CheckValue<IkReal> x5797=IKPowWithIntegerCheck(IKsign((((x5792*x5793))+(((-1.0)*x5792*(r10*r10)))+(((2.0)*x5794*x5795))+(((-1.0)*(r12*r12)))+(((-1.0)*x5793)))),-1);
if(!x5797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5796.value)+(((1.5707963267949)*(x5797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5798=IKcos(j4);
IkReal x5799=IKsin(j4);
IkReal x5800=(cj5*r00);
IkReal x5801=(cj5*r10);
IkReal x5802=(r21*sj5);
IkReal x5803=(cj5*r20);
IkReal x5804=((1.0)*x5798);
IkReal x5805=((1.0)*x5799);
IkReal x5806=(sj5*x5799);
IkReal x5807=(sj5*x5798);
evalcond[0]=(((r12*x5799))+((r11*x5807))+(((-1.0)*x5801*x5804)));
evalcond[1]=((((-1.0)*r22*x5804))+((x5799*x5802))+(((-1.0)*x5803*x5805)));
evalcond[2]=((((-1.0)*x5800*x5805))+((r01*x5806))+(((-1.0)*r02*x5804)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5804))+((r11*x5806))+(((-1.0)*x5801*x5805)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5799))+(((-1.0)*x5803*x5804))+((x5798*x5802)));
evalcond[5]=((((-1.0)*x5800*x5804))+((r01*x5807))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5808=((1.0)*cj5);
CheckValue<IkReal> x5809 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5808))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5809.valid){
continue;
}
CheckValue<IkReal> x5810=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5808)))),-1);
if(!x5810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5809.value)+(((1.5707963267949)*(x5810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5811=IKcos(j4);
IkReal x5812=IKsin(j4);
IkReal x5813=(cj5*r00);
IkReal x5814=(cj5*r10);
IkReal x5815=(r21*sj5);
IkReal x5816=(cj5*r20);
IkReal x5817=((1.0)*x5811);
IkReal x5818=((1.0)*x5812);
IkReal x5819=(sj5*x5812);
IkReal x5820=(sj5*x5811);
evalcond[0]=((((-1.0)*x5814*x5817))+((r11*x5820))+((r12*x5812)));
evalcond[1]=(((x5812*x5815))+(((-1.0)*r22*x5817))+(((-1.0)*x5816*x5818)));
evalcond[2]=((((-1.0)*x5813*x5818))+(((-1.0)*r02*x5817))+((r01*x5819)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5817))+(((-1.0)*x5814*x5818))+((r11*x5819)));
evalcond[4]=(((cj2*sj1))+((r22*x5812))+((cj1*sj2))+((x5811*x5815))+(((-1.0)*x5816*x5817)));
evalcond[5]=((((-1.0)*x5813*x5817))+((r02*x5812))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5821=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5821.valid){
continue;
}
CheckValue<IkReal> x5822 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5821.value)))+(x5822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5823=IKcos(j4);
IkReal x5824=IKsin(j4);
IkReal x5825=(cj5*r00);
IkReal x5826=(cj5*r10);
IkReal x5827=(r21*sj5);
IkReal x5828=(cj5*r20);
IkReal x5829=((1.0)*x5823);
IkReal x5830=((1.0)*x5824);
IkReal x5831=(sj5*x5824);
IkReal x5832=(sj5*x5823);
evalcond[0]=(((r12*x5824))+((r11*x5832))+(((-1.0)*x5826*x5829)));
evalcond[1]=((((-1.0)*r22*x5829))+(((-1.0)*x5828*x5830))+((x5824*x5827)));
evalcond[2]=((((-1.0)*r02*x5829))+((r01*x5831))+(((-1.0)*x5825*x5830)));
evalcond[3]=((1.0)+((r11*x5831))+(((-1.0)*x5826*x5830))+(((-1.0)*r12*x5829)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5828*x5829))+((r22*x5824))+((x5823*x5827)));
evalcond[5]=(((r02*x5824))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5832))+(((-1.0)*x5825*x5829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5833=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5833);
rxp0_2=(py*r00);
rxp1_0=(r21*x5833);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5834=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5834);
rxp0_2=(py*r00);
rxp1_0=(r21*x5834);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5835=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5835);
rxp0_2=(py*r00);
rxp1_0=(r21*x5835);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5838=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x5838.valid){
continue;
}
IkReal x5836=x5838.value;
IkReal x5837=(cj0*x5836);
cj4array[0]=(((sj1*sj2*x5837))+(((-1.0)*cj1*cj2*x5837)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5839=IKsin(j4);
IkReal x5840=IKcos(j4);
IkReal x5841=(r21*sj5);
IkReal x5842=((1.0)*x5840);
IkReal x5843=((1.0)*cj5*x5839);
evalcond[0]=(r12*x5839);
evalcond[1]=((((-1.0)*r12*x5842))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x5843))+((x5839*x5841)));
evalcond[3]=((((-1.0)*r00*x5843))+((r01*sj5*x5839)));
evalcond[4]=(((cj2*sj1))+((x5840*x5841))+((cj1*sj2))+(((-1.0)*cj5*r20*x5842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5846=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5846.valid){
continue;
}
IkReal x5844=x5846.value;
IkReal x5845=((1.0)*x5844);
cj4array[0]=((((-1.0)*cj1*sj2*x5845))+(((-1.0)*cj2*sj1*x5845)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5847=IKsin(j4);
IkReal x5848=IKcos(j4);
IkReal x5849=((1.0)*cj0);
IkReal x5850=(r01*sj5);
IkReal x5851=((1.0)*cj5*r00);
evalcond[0]=(r12*x5847);
evalcond[1]=((((-1.0)*r12*x5848))+(((-1.0)*x5849)));
evalcond[2]=((((-1.0)*cj5*r20*x5847))+((r21*sj5*x5847)));
evalcond[3]=((((-1.0)*x5847*x5851))+((x5847*x5850)));
evalcond[4]=(((x5848*x5850))+((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x5849))+(((-1.0)*x5848*x5851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5852=IKPowWithIntegerCheck(r12,-1);
if(!x5852.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5852.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5853=IKsin(j4);
IkReal x5854=IKcos(j4);
IkReal x5855=((1.0)*cj5*r00);
IkReal x5856=(sj5*x5854);
IkReal x5857=(sj5*x5853);
IkReal x5858=((1.0)*cj5*r20);
evalcond[0]=(r12*x5853);
evalcond[1]=((((-1.0)*x5853*x5858))+((r21*x5857)));
evalcond[2]=((((-1.0)*x5853*x5855))+((r01*x5857)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5854*x5858))+((r21*x5856)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((r01*x5856))+((cj0*cj1*cj2))+(((-1.0)*x5854*x5855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5859=((1.0)*cj5);
CheckValue<IkReal> x5860=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5859))+(((-1.0)*r20*sj5)))),-1);
if(!x5860.valid){
continue;
}
CheckValue<IkReal> x5861 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x5859))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x5859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5860.value)))+(x5861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5862=IKsin(j4);
IkReal x5863=IKcos(j4);
IkReal x5864=(cj5*r00);
IkReal x5865=(cj1*cj2);
IkReal x5866=(cj5*r10);
IkReal x5867=(r21*sj5);
IkReal x5868=(cj5*r20);
IkReal x5869=((1.0)*x5863);
IkReal x5870=((1.0)*x5862);
IkReal x5871=(sj5*x5862);
IkReal x5872=(sj5*x5863);
IkReal x5873=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x5869))+((x5862*x5867))+(((-1.0)*x5868*x5870)));
evalcond[1]=(sj0+(((-1.0)*r02*x5869))+((r01*x5871))+(((-1.0)*x5864*x5870)));
evalcond[2]=((((-1.0)*x5866*x5870))+((r11*x5871))+(((-1.0)*cj0))+(((-1.0)*r12*x5869)));
evalcond[3]=(((cj2*sj1))+((r22*x5862))+((cj1*sj2))+(((-1.0)*x5868*x5869))+((x5863*x5867)));
evalcond[4]=((((-1.0)*cj0*x5873))+((r02*x5862))+((cj0*x5865))+(((-1.0)*x5864*x5869))+((r01*x5872)));
evalcond[5]=((((-1.0)*sj0*x5873))+(((-1.0)*x5866*x5869))+((sj0*x5865))+((r11*x5872))+((r12*x5862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5874=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5874.valid){
continue;
}
CheckValue<IkReal> x5875 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5874.value)))+(x5875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5876=IKsin(j4);
IkReal x5877=IKcos(j4);
IkReal x5878=(cj5*r00);
IkReal x5879=(cj1*cj2);
IkReal x5880=(cj5*r10);
IkReal x5881=(r21*sj5);
IkReal x5882=(cj5*r20);
IkReal x5883=((1.0)*x5877);
IkReal x5884=((1.0)*x5876);
IkReal x5885=(sj5*x5876);
IkReal x5886=(sj5*x5877);
IkReal x5887=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x5882*x5884))+((x5876*x5881))+(((-1.0)*r22*x5883)));
evalcond[1]=(sj0+((r01*x5885))+(((-1.0)*r02*x5883))+(((-1.0)*x5878*x5884)));
evalcond[2]=(((r11*x5885))+(((-1.0)*r12*x5883))+(((-1.0)*x5880*x5884))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5882*x5883))+((cj1*sj2))+((r22*x5876))+((x5877*x5881)));
evalcond[4]=(((r01*x5886))+((r02*x5876))+(((-1.0)*cj0*x5887))+((cj0*x5879))+(((-1.0)*x5878*x5883)));
evalcond[5]=(((sj0*x5879))+((r11*x5886))+(((-1.0)*x5880*x5883))+((r12*x5876))+(((-1.0)*sj0*x5887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5888=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5888.valid){
continue;
}
CheckValue<IkReal> x5889 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5888.value)))+(x5889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5890=IKsin(j4);
IkReal x5891=IKcos(j4);
IkReal x5892=(cj5*r00);
IkReal x5893=(cj1*cj2);
IkReal x5894=(cj5*r10);
IkReal x5895=(r21*sj5);
IkReal x5896=(cj5*r20);
IkReal x5897=((1.0)*x5891);
IkReal x5898=((1.0)*x5890);
IkReal x5899=(sj5*x5890);
IkReal x5900=(sj5*x5891);
IkReal x5901=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x5896*x5898))+(((-1.0)*r22*x5897))+((x5890*x5895)));
evalcond[1]=(sj0+(((-1.0)*x5892*x5898))+(((-1.0)*r02*x5897))+((r01*x5899)));
evalcond[2]=((((-1.0)*r12*x5897))+(((-1.0)*x5894*x5898))+((r11*x5899))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x5890))+((cj2*sj1))+(((-1.0)*x5896*x5897))+((cj1*sj2))+((x5891*x5895)));
evalcond[4]=(((cj0*x5893))+(((-1.0)*cj0*x5901))+(((-1.0)*x5892*x5897))+((r02*x5890))+((r01*x5900)));
evalcond[5]=(((sj0*x5893))+(((-1.0)*x5894*x5897))+(((-1.0)*sj0*x5901))+((r12*x5890))+((r11*x5900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5902=r21*r21;
IkReal x5903=cj5*cj5;
IkReal x5904=(cj2*sj1);
IkReal x5905=(cj1*sj2);
IkReal x5906=(r21*sj5);
IkReal x5907=((1.0)*cj5*r20);
CheckValue<IkReal> x5908 = IKatan2WithCheck(IkReal((((r22*x5904))+((r22*x5905)))),IkReal(((((-1.0)*x5904*x5907))+(((-1.0)*x5905*x5907))+((x5905*x5906))+((x5904*x5906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5908.valid){
continue;
}
CheckValue<IkReal> x5909=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*x5903*(r20*r20)))+((x5902*x5903))+(((2.0)*cj5*r20*x5906))+(((-1.0)*x5902)))),-1);
if(!x5909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5908.value)+(((1.5707963267949)*(x5909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5910=IKsin(j4);
IkReal x5911=IKcos(j4);
IkReal x5912=(r21*sj5);
IkReal x5913=(cj5*r20);
IkReal x5914=((1.0)*x5911);
evalcond[0]=((((-1.0)*r22*x5914))+((x5910*x5912))+(((-1.0)*x5910*x5913)));
evalcond[1]=(((cj2*sj1))+((x5911*x5912))+((r22*x5910))+((cj1*sj2))+(((-1.0)*x5913*x5914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5915=(cj5*sj4);
IkReal x5916=(sj4*sj5);
if( IKabs((((r00*x5915))+(((-1.0)*r01*x5916))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x5915))+((r11*x5916))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x5915))+(((-1.0)*r01*x5916))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x5915))+((r11*x5916))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x5915))+(((-1.0)*r01*x5916))+((cj4*r02))), ((((-1.0)*r10*x5915))+((r11*x5916))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5917=IKcos(j0);
IkReal x5918=IKsin(j0);
IkReal x5919=(cj5*r01);
IkReal x5920=(r11*sj5);
IkReal x5921=(cj1*cj2);
IkReal x5922=(r00*sj5);
IkReal x5923=(cj5*r11);
IkReal x5924=((1.0)*cj4);
IkReal x5925=(r01*sj5);
IkReal x5926=(r10*sj5);
IkReal x5927=(sj1*x5917);
IkReal x5928=(cj1*x5918);
IkReal x5929=(cj5*x5924);
IkReal x5930=(cj1*x5917);
IkReal x5931=((1.0)*cj5*sj4);
IkReal x5932=(sj1*sj2*x5918);
evalcond[0]=((((-1.0)*r02*x5924))+(((-1.0)*r00*x5931))+((sj4*x5925))+x5918);
evalcond[1]=((((-1.0)*r12*x5924))+(((-1.0)*r10*x5931))+((sj4*x5920))+(((-1.0)*x5917)));
evalcond[2]=(((sj2*x5930))+((cj2*x5927))+x5919+x5922);
evalcond[3]=(((sj2*x5928))+((cj2*sj1*x5918))+x5926+x5923);
evalcond[4]=(((cj4*x5925))+(((-1.0)*sj2*x5927))+(((-1.0)*r00*x5929))+((x5917*x5921))+((r02*sj4)));
evalcond[5]=(((cj4*x5920))+(((-1.0)*x5932))+((x5918*x5921))+((r12*sj4))+(((-1.0)*r10*x5929)));
evalcond[6]=((((-0.09465)*x5919))+(((-0.39225)*x5917*x5921))+(((0.10915)*x5918))+(((0.39225)*sj2*x5927))+(((-1.0)*px))+(((-0.09465)*x5922))+(((-0.425)*x5930)));
evalcond[7]=((((-0.39225)*x5918*x5921))+(((-0.10915)*x5917))+(((-1.0)*py))+(((-0.09465)*x5926))+(((-0.09465)*x5923))+(((-0.425)*x5928))+(((0.39225)*x5932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5933=((1.0)*cj5);
IkReal x5934=((1.0)*sj5);
CheckValue<IkReal> x5935=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x5935.valid){
continue;
}
CheckValue<IkReal> x5936 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5933))+(((-1.0)*r10*x5934)))),IkReal(((((-1.0)*r01*x5933))+(((-1.0)*r00*x5934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5936.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5935.value)))+(x5936.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5937=IKcos(j0);
IkReal x5938=IKsin(j0);
IkReal x5939=(cj5*r01);
IkReal x5940=(cj2*sj1);
IkReal x5941=(r00*sj5);
IkReal x5942=(cj5*r11);
IkReal x5943=((0.39225)*cj2);
IkReal x5944=(r10*sj5);
IkReal x5945=((0.39225)*sj1*sj2);
IkReal x5946=(cj1*x5937);
IkReal x5947=(cj1*x5938);
evalcond[0]=(((x5937*x5940))+x5941+x5939+((sj2*x5946)));
evalcond[1]=(x5944+x5942+((x5938*x5940))+((sj2*x5947)));
evalcond[2]=((((-0.425)*x5946))+(((-1.0)*px))+((x5937*x5945))+(((-0.09465)*x5941))+(((0.10915)*x5938))+(((-1.0)*x5943*x5946))+(((-0.09465)*x5939)));
evalcond[3]=((((-0.425)*x5947))+(((-1.0)*py))+(((-0.09465)*x5944))+(((-0.09465)*x5942))+(((-0.10915)*x5937))+(((-1.0)*x5943*x5947))+((x5938*x5945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5948=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5948;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5949=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5949;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5950=((1.0)*cj5);
IkReal x5951=((((-1.0)*r21*x5950))+(((-1.0)*r20*sj5)));
j4eval[0]=x5951;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x5950))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x5950)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x5951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5952=((-1.0)*r20);
IkReal x5954 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5954)==0){
continue;
}
IkReal x5953=pow(x5954,-0.5);
CheckValue<IkReal> x5955 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5952),IKFAST_ATAN2_MAGTHRESH);
if(!x5955.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5955.value));
IkReal gconst115=(r21*x5953);
IkReal gconst116=(x5952*x5953);
CheckValue<IkReal> x5956 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5956.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5956.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5957=((-1.0)*r20);
IkReal x5958=x5953;
CheckValue<IkReal> x5960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5957),IKFAST_ATAN2_MAGTHRESH);
if(!x5960.valid){
continue;
}
IkReal x5959=((-1.0)*(x5960.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5959;
IkReal gconst114=x5959;
IkReal gconst115=(r21*x5958);
IkReal gconst116=(x5957*x5958);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5961=((-1.0)*r20);
IkReal x5962=x5953;
CheckValue<IkReal> x5964 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5961),IKFAST_ATAN2_MAGTHRESH);
if(!x5964.valid){
continue;
}
IkReal x5963=((-1.0)*(x5964.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5963;
IkReal gconst114=x5963;
IkReal gconst115=(r21*x5962);
IkReal gconst116=(x5961*x5962);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5965=((-1.0)*r20);
IkReal x5966=x5953;
CheckValue<IkReal> x5968 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5965),IKFAST_ATAN2_MAGTHRESH);
if(!x5968.valid){
continue;
}
IkReal x5967=((-1.0)*(x5968.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5967;
IkReal gconst114=x5967;
IkReal gconst115=(r21*x5966);
IkReal gconst116=(x5965*x5966);
IkReal x5969=((1.0)*(r22*r22));
CheckValue<IkReal> x5973=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5969))),-1);
if(!x5973.valid){
continue;
}
IkReal x5970=x5973.value;
IkReal x5971=((1.0)*x5970);
IkReal x5972=((((-1.0)*x5971*(r21*r21*r21*r21)))+(((-2.0)*x5970*(r20*r20)*(r21*r21)))+(((-1.0)*x5969))+(((-1.0)*x5971*(r20*r20*r20*r20))));
j4eval[0]=x5972;
j4eval[1]=IKsign(x5972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5974=(cj2*sj1);
IkReal x5975=(gconst115*r21);
IkReal x5976=(cj1*sj2);
IkReal x5977=((1.0)*gconst116*r20);
CheckValue<IkReal> x5978 = IKatan2WithCheck(IkReal((((r22*x5976))+((r22*x5974)))),IkReal(((((-1.0)*x5976*x5977))+(((-1.0)*x5974*x5977))+((x5974*x5975))+((x5975*x5976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5978.valid){
continue;
}
CheckValue<IkReal> x5979=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x5977))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x5975))+(((-1.0)*(x5975*x5975))))),-1);
if(!x5979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5978.value)+(((1.5707963267949)*(x5979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5980=IKsin(j4);
IkReal x5981=IKcos(j4);
IkReal x5982=(cj1*cj2);
IkReal x5983=((1.0)*x5981);
IkReal x5984=(gconst115*x5980);
IkReal x5985=(gconst115*x5981);
IkReal x5986=((1.0)*sj1*sj2);
IkReal x5987=((1.0)*gconst116*x5980);
evalcond[0]=(((r21*x5984))+(((-1.0)*r22*x5983))+(((-1.0)*r20*x5987)));
evalcond[1]=(sj0+(((-1.0)*r02*x5983))+(((-1.0)*r00*x5987))+((r01*x5984)));
evalcond[2]=((((-1.0)*r12*x5983))+((r11*x5984))+(((-1.0)*r10*x5987))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r21*x5985))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5983))+((r22*x5980)));
evalcond[4]=((((-1.0)*gconst116*r00*x5983))+((r02*x5980))+((cj0*x5982))+(((-1.0)*cj0*x5986))+((r01*x5985)));
evalcond[5]=(((r12*x5980))+((r11*x5985))+((sj0*x5982))+(((-1.0)*gconst116*r10*x5983))+(((-1.0)*sj0*x5986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5988 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5988.valid){
continue;
}
CheckValue<IkReal> x5989=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5988.value)+(((1.5707963267949)*(x5989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5990=IKsin(j4);
IkReal x5991=IKcos(j4);
IkReal x5992=(cj1*cj2);
IkReal x5993=((1.0)*x5991);
IkReal x5994=(gconst115*x5990);
IkReal x5995=(gconst115*x5991);
IkReal x5996=((1.0)*sj1*sj2);
IkReal x5997=((1.0)*gconst116*x5990);
evalcond[0]=((((-1.0)*r20*x5997))+((r21*x5994))+(((-1.0)*r22*x5993)));
evalcond[1]=(sj0+(((-1.0)*r02*x5993))+((r01*x5994))+(((-1.0)*r00*x5997)));
evalcond[2]=((((-1.0)*r12*x5993))+(((-1.0)*r10*x5997))+((r11*x5994))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5995))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5993))+((r22*x5990)));
evalcond[4]=(((r02*x5990))+((cj0*x5992))+(((-1.0)*cj0*x5996))+((r01*x5995))+(((-1.0)*gconst116*r00*x5993)));
evalcond[5]=(((r12*x5990))+((sj0*x5992))+((r11*x5995))+(((-1.0)*sj0*x5996))+(((-1.0)*gconst116*r10*x5993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5998=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5998.valid){
continue;
}
CheckValue<IkReal> x5999 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5998.value)))+(x5999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6000=IKsin(j4);
IkReal x6001=IKcos(j4);
IkReal x6002=(cj1*cj2);
IkReal x6003=((1.0)*x6001);
IkReal x6004=(gconst115*x6000);
IkReal x6005=(gconst115*x6001);
IkReal x6006=((1.0)*sj1*sj2);
IkReal x6007=((1.0)*gconst116*x6000);
evalcond[0]=(((r21*x6004))+(((-1.0)*r22*x6003))+(((-1.0)*r20*x6007)));
evalcond[1]=(sj0+(((-1.0)*r00*x6007))+((r01*x6004))+(((-1.0)*r02*x6003)));
evalcond[2]=(((r11*x6004))+(((-1.0)*r12*x6003))+(((-1.0)*r10*x6007))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6005))+((cj2*sj1))+(((-1.0)*gconst116*r20*x6003))+((r22*x6000))+((cj1*sj2)));
evalcond[4]=(((cj0*x6002))+(((-1.0)*cj0*x6006))+((r02*x6000))+((r01*x6005))+(((-1.0)*gconst116*r00*x6003)));
evalcond[5]=((((-1.0)*sj0*x6006))+((r12*x6000))+(((-1.0)*gconst116*r10*x6003))+((r11*x6005))+((sj0*x6002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6008=((-1.0)*r21);
IkReal x6010 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6010)==0){
continue;
}
IkReal x6009=pow(x6010,-0.5);
CheckValue<IkReal> x6011 = IKatan2WithCheck(IkReal(x6008),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6011.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6011.value))));
IkReal gconst118=(x6008*x6009);
IkReal gconst119=((1.0)*r20*x6009);
CheckValue<IkReal> x6012 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6012.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6012.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6013=((-1.0)*r21);
CheckValue<IkReal> x6016 = IKatan2WithCheck(IkReal(x6013),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6016.valid){
continue;
}
IkReal x6014=((1.0)*(x6016.value));
IkReal x6015=x6009;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6014)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6014)));
IkReal gconst118=(x6013*x6015);
IkReal gconst119=((1.0)*r20*x6015);
IkReal x6017=r22*r22;
IkReal x6018=((1.0)*x6017);
CheckValue<IkReal> x6022=IKPowWithIntegerCheck(((-1.0)+x6017),-1);
if(!x6022.valid){
continue;
}
IkReal x6019=x6022.value;
if((((1.0)+(((-1.0)*x6018)))) < -0.00001)
continue;
IkReal x6020=IKsqrt(((1.0)+(((-1.0)*x6018))));
IkReal x6021=(sj0*x6019*x6020);
j4eval[0]=((IKabs((x6021+(((-1.0)*x6018*x6021)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6023=((-1.0)*r21);
CheckValue<IkReal> x6026 = IKatan2WithCheck(IkReal(x6023),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6026.valid){
continue;
}
IkReal x6024=((1.0)*(x6026.value));
IkReal x6025=x6009;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6024)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6024)));
IkReal gconst118=(x6023*x6025);
IkReal gconst119=((1.0)*r20*x6025);
IkReal x6027=r22*r22;
IkReal x6028=((1.0)*x6027);
CheckValue<IkReal> x6032=IKPowWithIntegerCheck(((-1.0)+x6027),-1);
if(!x6032.valid){
continue;
}
IkReal x6029=x6032.value;
if((((1.0)+(((-1.0)*x6028)))) < -0.00001)
continue;
IkReal x6030=IKsqrt(((1.0)+(((-1.0)*x6028))));
IkReal x6031=(cj0*x6029*x6030);
j4eval[0]=((IKabs((x6031+(((-1.0)*x6028*x6031)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6033=((-1.0)*r21);
CheckValue<IkReal> x6036 = IKatan2WithCheck(IkReal(x6033),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6036.valid){
continue;
}
IkReal x6034=((1.0)*(x6036.value));
IkReal x6035=x6009;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6034)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6034)));
IkReal gconst118=(x6033*x6035);
IkReal gconst119=((1.0)*r20*x6035);
IkReal x6037=r22*r22;
IkReal x6038=(cj0*r02);
IkReal x6039=(r12*sj0);
CheckValue<IkReal> x6043=IKPowWithIntegerCheck(((-1.0)+x6037),-1);
if(!x6043.valid){
continue;
}
IkReal x6040=x6043.value;
if((((1.0)+(((-1.0)*x6037)))) < -0.00001)
continue;
IkReal x6041=IKsqrt(((1.0)+(((-1.0)*x6037))));
IkReal x6042=((1.0)*r22*x6040*x6041);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x6039*x6042))+(((-1.0)*x6038*x6042)))))+(IKabs((x6039+x6038))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6044=((1.0)*gconst119);
CheckValue<IkReal> x6045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6044))+(((-1.0)*gconst118*r20)))),-1);
if(!x6045.valid){
continue;
}
CheckValue<IkReal> x6046 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x6044))+(((-1.0)*r10*sj0*x6044))+((gconst118*r11*sj0))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6045.value)))+(x6046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6047=IKsin(j4);
IkReal x6048=IKcos(j4);
IkReal x6049=(cj1*cj2);
IkReal x6050=(gconst118*r01);
IkReal x6051=(gconst119*r20);
IkReal x6052=(gconst119*r10);
IkReal x6053=(gconst119*r00);
IkReal x6054=(gconst118*r21);
IkReal x6055=(gconst118*r11);
IkReal x6056=((1.0)*cj0);
IkReal x6057=(sj1*sj2);
IkReal x6058=((1.0)*x6048);
IkReal x6059=((1.0)*x6047);
evalcond[0]=((((-1.0)*x6051*x6059))+((x6047*x6054))+(((-1.0)*r22*x6058)));
evalcond[1]=((((-1.0)*x6053*x6059))+sj0+((x6047*x6050))+(((-1.0)*r02*x6058)));
evalcond[2]=((((-1.0)*x6052*x6059))+(((-1.0)*x6056))+((x6047*x6055))+(((-1.0)*r12*x6058)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6051*x6058))+((cj1*sj2))+((r22*x6047))+((x6048*x6054)));
evalcond[4]=((((-1.0)*x6053*x6058))+((cj0*x6049))+((x6048*x6050))+(((-1.0)*x6056*x6057))+((r02*x6047)));
evalcond[5]=((((-1.0)*x6052*x6058))+((sj0*x6049))+((x6048*x6055))+(((-1.0)*sj0*x6057))+((r12*x6047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6060=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x6060.valid){
continue;
}
CheckValue<IkReal> x6061 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6060.value)))+(x6061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6062=IKsin(j4);
IkReal x6063=IKcos(j4);
IkReal x6064=(cj1*cj2);
IkReal x6065=(gconst118*r01);
IkReal x6066=(gconst119*r20);
IkReal x6067=(gconst119*r10);
IkReal x6068=(gconst119*r00);
IkReal x6069=(gconst118*r21);
IkReal x6070=(gconst118*r11);
IkReal x6071=((1.0)*cj0);
IkReal x6072=(sj1*sj2);
IkReal x6073=((1.0)*x6063);
IkReal x6074=((1.0)*x6062);
evalcond[0]=((((-1.0)*x6066*x6074))+((x6062*x6069))+(((-1.0)*r22*x6073)));
evalcond[1]=(sj0+(((-1.0)*r02*x6073))+((x6062*x6065))+(((-1.0)*x6068*x6074)));
evalcond[2]=((((-1.0)*x6067*x6074))+(((-1.0)*x6071))+((x6062*x6070))+(((-1.0)*r12*x6073)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6066*x6073))+((cj1*sj2))+((x6063*x6069))+((r22*x6062)));
evalcond[4]=(((x6063*x6065))+((cj0*x6064))+(((-1.0)*x6068*x6073))+(((-1.0)*x6071*x6072))+((r02*x6062)));
evalcond[5]=((((-1.0)*x6067*x6073))+((sj0*x6064))+((x6063*x6070))+(((-1.0)*sj0*x6072))+((r12*x6062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6075=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x6075.valid){
continue;
}
CheckValue<IkReal> x6076 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6075.value)))+(x6076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6077=IKsin(j4);
IkReal x6078=IKcos(j4);
IkReal x6079=(cj1*cj2);
IkReal x6080=(gconst118*r01);
IkReal x6081=(gconst119*r20);
IkReal x6082=(gconst119*r10);
IkReal x6083=(gconst119*r00);
IkReal x6084=(gconst118*r21);
IkReal x6085=(gconst118*r11);
IkReal x6086=((1.0)*cj0);
IkReal x6087=(sj1*sj2);
IkReal x6088=((1.0)*x6078);
IkReal x6089=((1.0)*x6077);
evalcond[0]=((((-1.0)*r22*x6088))+((x6077*x6084))+(((-1.0)*x6081*x6089)));
evalcond[1]=(sj0+(((-1.0)*x6083*x6089))+(((-1.0)*r02*x6088))+((x6077*x6080)));
evalcond[2]=((((-1.0)*r12*x6088))+(((-1.0)*x6086))+(((-1.0)*x6082*x6089))+((x6077*x6085)));
evalcond[3]=(((cj2*sj1))+((x6078*x6084))+((cj1*sj2))+((r22*x6077))+(((-1.0)*x6081*x6088)));
evalcond[4]=(((x6078*x6080))+((cj0*x6079))+(((-1.0)*x6083*x6088))+(((-1.0)*x6086*x6087))+((r02*x6077)));
evalcond[5]=(((x6078*x6085))+((sj0*x6079))+(((-1.0)*sj0*x6087))+(((-1.0)*x6082*x6088))+((r12*x6077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6091 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6091)==0){
continue;
}
IkReal x6090=pow(x6091,-0.5);
CheckValue<IkReal> x6092 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6092.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6092.value));
IkReal gconst121=((-1.0)*r01*x6090);
IkReal gconst122=(r00*x6090);
CheckValue<IkReal> x6093 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6093.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6093.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6096 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6096.valid){
continue;
}
IkReal x6094=((-1.0)*(x6096.value));
IkReal x6095=x6090;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6094;
IkReal gconst120=x6094;
IkReal gconst121=((-1.0)*r01*x6095);
IkReal gconst122=(r00*x6095);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6097=((1.0)*gconst122);
CheckValue<IkReal> x6098 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst121*r01))+(((-1.0)*cj0*r00*x6097))+(((-1.0)*r10*sj0*x6097))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6098.valid){
continue;
}
CheckValue<IkReal> x6099=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x6097)))),-1);
if(!x6099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6098.value)+(((1.5707963267949)*(x6099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6100=IKsin(j4);
IkReal x6101=IKcos(j4);
IkReal x6102=(cj1*cj2);
IkReal x6103=(gconst121*r11);
IkReal x6104=(gconst122*r00);
IkReal x6105=(gconst122*r10);
IkReal x6106=(gconst122*r20);
IkReal x6107=((1.0)*cj0);
IkReal x6108=(sj1*sj2);
IkReal x6109=((1.0)*x6101);
IkReal x6110=((1.0)*x6100);
IkReal x6111=(gconst121*x6100);
IkReal x6112=(gconst121*x6101);
evalcond[0]=((((-1.0)*x6106*x6110))+(((-1.0)*r22*x6109))+((r21*x6111)));
evalcond[1]=((((-1.0)*r02*x6109))+sj0+(((-1.0)*x6104*x6110))+((r01*x6111)));
evalcond[2]=((((-1.0)*x6105*x6110))+((x6100*x6103))+(((-1.0)*r12*x6109))+(((-1.0)*x6107)));
evalcond[3]=(((cj2*sj1))+((r22*x6100))+((cj1*sj2))+(((-1.0)*x6106*x6109))+((r21*x6112)));
evalcond[4]=(((cj0*x6102))+(((-1.0)*x6104*x6109))+((r01*x6112))+(((-1.0)*x6107*x6108))+((r02*x6100)));
evalcond[5]=((((-1.0)*x6105*x6109))+((sj0*x6102))+((x6101*x6103))+(((-1.0)*sj0*x6108))+((r12*x6100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6113 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6113.valid){
continue;
}
CheckValue<IkReal> x6114=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x6114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6113.value)+(((1.5707963267949)*(x6114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6115=IKsin(j4);
IkReal x6116=IKcos(j4);
IkReal x6117=(cj1*cj2);
IkReal x6118=(gconst121*r11);
IkReal x6119=(gconst122*r00);
IkReal x6120=(gconst122*r10);
IkReal x6121=(gconst122*r20);
IkReal x6122=((1.0)*cj0);
IkReal x6123=(sj1*sj2);
IkReal x6124=((1.0)*x6116);
IkReal x6125=((1.0)*x6115);
IkReal x6126=(gconst121*x6115);
IkReal x6127=(gconst121*x6116);
evalcond[0]=((((-1.0)*x6121*x6125))+((r21*x6126))+(((-1.0)*r22*x6124)));
evalcond[1]=(((r01*x6126))+sj0+(((-1.0)*r02*x6124))+(((-1.0)*x6119*x6125)));
evalcond[2]=(((x6115*x6118))+(((-1.0)*r12*x6124))+(((-1.0)*x6122))+(((-1.0)*x6120*x6125)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6121*x6124))+((r21*x6127))+((cj1*sj2))+((r22*x6115)));
evalcond[4]=(((r01*x6127))+((r02*x6115))+(((-1.0)*x6119*x6124))+(((-1.0)*x6122*x6123))+((cj0*x6117)));
evalcond[5]=(((x6116*x6118))+(((-1.0)*sj0*x6123))+((r12*x6115))+((sj0*x6117))+(((-1.0)*x6120*x6124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6129 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6129)==0){
continue;
}
IkReal x6128=pow(x6129,-0.5);
CheckValue<IkReal> x6130 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6130.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6130.value))));
IkReal gconst124=((1.0)*r01*x6128);
IkReal gconst125=((-1.0)*r00*x6128);
CheckValue<IkReal> x6131 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6131.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6131.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6134 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6134.valid){
continue;
}
IkReal x6132=((1.0)*(x6134.value));
IkReal x6133=x6128;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6132)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6132)));
IkReal gconst124=((1.0)*r01*x6133);
IkReal gconst125=((-1.0)*r00*x6133);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6137 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6137.valid){
continue;
}
IkReal x6135=((1.0)*(x6137.value));
IkReal x6136=x6128;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6135)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6135)));
IkReal gconst124=((1.0)*r01*x6136);
IkReal gconst125=((-1.0)*r00*x6136);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6140 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6140.valid){
continue;
}
IkReal x6138=((1.0)*(x6140.value));
IkReal x6139=x6128;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6138)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6138)));
IkReal gconst124=((1.0)*r01*x6139);
IkReal gconst125=((-1.0)*r00*x6139);
IkReal x6141=r02*r02;
IkReal x6142=(r12*sj0);
IkReal x6143=x6128;
IkReal x6144=(cj0*x6143);
j4eval[0]=((IKabs((x6142+((cj0*r02)))))+(IKabs(((((-1.0)*x6144))+((r02*x6142*x6143))+((x6141*x6144))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6145=((1.0)*gconst125);
CheckValue<IkReal> x6146=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6145))+(((-1.0)*gconst124*r20)))),-1);
if(!x6146.valid){
continue;
}
CheckValue<IkReal> x6147 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x6145))+((cj0*gconst124*r01))+(((-1.0)*cj0*r00*x6145))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6146.value)))+(x6147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6148=IKsin(j4);
IkReal x6149=IKcos(j4);
IkReal x6150=(cj1*cj2);
IkReal x6151=(gconst125*r20);
IkReal x6152=(gconst124*r01);
IkReal x6153=(gconst125*r00);
IkReal x6154=(gconst125*r10);
IkReal x6155=((1.0)*cj0);
IkReal x6156=(sj1*sj2);
IkReal x6157=((1.0)*x6149);
IkReal x6158=((1.0)*x6148);
IkReal x6159=(gconst124*x6148);
IkReal x6160=(gconst124*x6149);
evalcond[0]=(((r21*x6159))+(((-1.0)*x6151*x6158))+(((-1.0)*r22*x6157)));
evalcond[1]=((((-1.0)*r02*x6157))+sj0+((x6148*x6152))+(((-1.0)*x6153*x6158)));
evalcond[2]=((((-1.0)*x6155))+(((-1.0)*r12*x6157))+(((-1.0)*x6154*x6158))+((r11*x6159)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6151*x6157))+((cj1*sj2))+((r21*x6160))+((r22*x6148)));
evalcond[4]=(((x6149*x6152))+((cj0*x6150))+(((-1.0)*x6155*x6156))+(((-1.0)*x6153*x6157))+((r02*x6148)));
evalcond[5]=(((sj0*x6150))+((r11*x6160))+(((-1.0)*sj0*x6156))+(((-1.0)*x6154*x6157))+((r12*x6148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6161=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x6161.valid){
continue;
}
CheckValue<IkReal> x6162 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6161.value)))+(x6162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6163=IKsin(j4);
IkReal x6164=IKcos(j4);
IkReal x6165=(cj1*cj2);
IkReal x6166=(gconst125*r20);
IkReal x6167=(gconst124*r01);
IkReal x6168=(gconst125*r00);
IkReal x6169=(gconst125*r10);
IkReal x6170=((1.0)*cj0);
IkReal x6171=(sj1*sj2);
IkReal x6172=((1.0)*x6164);
IkReal x6173=((1.0)*x6163);
IkReal x6174=(gconst124*x6163);
IkReal x6175=(gconst124*x6164);
evalcond[0]=((((-1.0)*x6166*x6173))+((r21*x6174))+(((-1.0)*r22*x6172)));
evalcond[1]=((((-1.0)*x6168*x6173))+sj0+((x6163*x6167))+(((-1.0)*r02*x6172)));
evalcond[2]=(((r11*x6174))+(((-1.0)*r12*x6172))+(((-1.0)*x6170))+(((-1.0)*x6169*x6173)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6166*x6172))+((cj1*sj2))+((r21*x6175))+((r22*x6163)));
evalcond[4]=((((-1.0)*x6168*x6172))+((r02*x6163))+(((-1.0)*x6170*x6171))+((x6164*x6167))+((cj0*x6165)));
evalcond[5]=(((sj0*x6165))+((r12*x6163))+((r11*x6175))+(((-1.0)*sj0*x6171))+(((-1.0)*x6169*x6172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6176 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6176.valid){
continue;
}
CheckValue<IkReal> x6177=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x6177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6176.value)+(((1.5707963267949)*(x6177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6178=IKsin(j4);
IkReal x6179=IKcos(j4);
IkReal x6180=(cj1*cj2);
IkReal x6181=(gconst125*r20);
IkReal x6182=(gconst124*r01);
IkReal x6183=(gconst125*r00);
IkReal x6184=(gconst125*r10);
IkReal x6185=((1.0)*cj0);
IkReal x6186=(sj1*sj2);
IkReal x6187=((1.0)*x6179);
IkReal x6188=((1.0)*x6178);
IkReal x6189=(gconst124*x6178);
IkReal x6190=(gconst124*x6179);
evalcond[0]=((((-1.0)*r22*x6187))+((r21*x6189))+(((-1.0)*x6181*x6188)));
evalcond[1]=(sj0+(((-1.0)*r02*x6187))+(((-1.0)*x6183*x6188))+((x6178*x6182)));
evalcond[2]=((((-1.0)*x6184*x6188))+(((-1.0)*r12*x6187))+((r11*x6189))+(((-1.0)*x6185)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6190))+((r22*x6178))+(((-1.0)*x6181*x6187)));
evalcond[4]=((((-1.0)*x6185*x6186))+((r02*x6178))+((cj0*x6180))+(((-1.0)*x6183*x6187))+((x6179*x6182)));
evalcond[5]=((((-1.0)*sj0*x6186))+((r11*x6190))+((r12*x6178))+(((-1.0)*x6184*x6187))+((sj0*x6180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6191=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6191;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6192=((1.0)*cj5);
IkReal x6193=((((-1.0)*r21*x6192))+(((-1.0)*r20*sj5)));
j4eval[0]=x6193;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6192))+((r11*sj5))))));
j4eval[2]=IKsign(x6193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6194=(r01*sj5);
IkReal x6195=(cj1*sj2);
IkReal x6196=(cj2*sj1);
IkReal x6197=((1.0)*r02);
IkReal x6198=((1.0)*cj5*r00);
IkReal x6199=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6199;
j4eval[1]=((IKabs((((x6194*x6195))+((x6194*x6196))+(((-1.0)*x6195*x6198))+(((-1.0)*x6196*x6198)))))+(IKabs(((((-1.0)*x6195*x6197))+(((-1.0)*x6196*x6197))))));
j4eval[2]=IKsign(x6199);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6200=(r01*sj5);
IkReal x6201=(cj1*sj2);
IkReal x6202=(cj2*sj1);
IkReal x6203=((1.0)*r02);
IkReal x6204=((1.0)*cj5*r00);
CheckValue<IkReal> x6205 = IKatan2WithCheck(IkReal(((((-1.0)*x6202*x6204))+(((-1.0)*x6201*x6204))+((x6200*x6202))+((x6200*x6201)))),IkReal(((((-1.0)*x6202*x6203))+(((-1.0)*x6201*x6203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6205.valid){
continue;
}
CheckValue<IkReal> x6206=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6205.value)+(((1.5707963267949)*(x6206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6207=IKcos(j4);
IkReal x6208=IKsin(j4);
IkReal x6209=(cj5*r00);
IkReal x6210=(cj5*r10);
IkReal x6211=(r21*sj5);
IkReal x6212=(cj5*r20);
IkReal x6213=((1.0)*x6207);
IkReal x6214=((1.0)*x6208);
IkReal x6215=(sj5*x6208);
IkReal x6216=(sj5*x6207);
evalcond[0]=((((-1.0)*x6209*x6213))+((r02*x6208))+((r01*x6216)));
evalcond[1]=(((x6208*x6211))+(((-1.0)*x6212*x6214))+(((-1.0)*r22*x6213)));
evalcond[2]=(((r11*x6215))+(((-1.0)*r12*x6213))+(((-1.0)*x6210*x6214)));
evalcond[3]=((1.0)+(((-1.0)*x6209*x6214))+((r01*x6215))+(((-1.0)*r02*x6213)));
evalcond[4]=(((cj2*sj1))+((r22*x6208))+((x6207*x6211))+((cj1*sj2))+(((-1.0)*x6212*x6213)));
evalcond[5]=(((r11*x6216))+(((-1.0)*x6210*x6213))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x6208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6217=((1.0)*cj5);
CheckValue<IkReal> x6218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6217))+(((-1.0)*r20*sj5)))),-1);
if(!x6218.valid){
continue;
}
CheckValue<IkReal> x6219 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6218.value)))+(x6219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6220=IKcos(j4);
IkReal x6221=IKsin(j4);
IkReal x6222=(cj5*r00);
IkReal x6223=(cj5*r10);
IkReal x6224=(r21*sj5);
IkReal x6225=(cj5*r20);
IkReal x6226=((1.0)*x6220);
IkReal x6227=((1.0)*x6221);
IkReal x6228=(sj5*x6221);
IkReal x6229=(sj5*x6220);
evalcond[0]=(((r02*x6221))+(((-1.0)*x6222*x6226))+((r01*x6229)));
evalcond[1]=(((x6221*x6224))+(((-1.0)*r22*x6226))+(((-1.0)*x6225*x6227)));
evalcond[2]=(((r11*x6228))+(((-1.0)*r12*x6226))+(((-1.0)*x6223*x6227)));
evalcond[3]=((1.0)+(((-1.0)*x6222*x6227))+((r01*x6228))+(((-1.0)*r02*x6226)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6221))+((x6220*x6224))+(((-1.0)*x6225*x6226)));
evalcond[5]=(((r11*x6229))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6223*x6226))+((r12*x6221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6230 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6230.valid){
continue;
}
CheckValue<IkReal> x6231=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6230.value)+(((1.5707963267949)*(x6231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6232=IKcos(j4);
IkReal x6233=IKsin(j4);
IkReal x6234=(cj5*r00);
IkReal x6235=(cj5*r10);
IkReal x6236=(r21*sj5);
IkReal x6237=(cj5*r20);
IkReal x6238=((1.0)*x6232);
IkReal x6239=((1.0)*x6233);
IkReal x6240=(sj5*x6233);
IkReal x6241=(sj5*x6232);
evalcond[0]=(((r02*x6233))+(((-1.0)*x6234*x6238))+((r01*x6241)));
evalcond[1]=(((x6233*x6236))+(((-1.0)*r22*x6238))+(((-1.0)*x6237*x6239)));
evalcond[2]=((((-1.0)*r12*x6238))+((r11*x6240))+(((-1.0)*x6235*x6239)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6238))+(((-1.0)*x6234*x6239))+((r01*x6240)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6233))+((x6232*x6236))+(((-1.0)*x6237*x6238)));
evalcond[5]=(((r12*x6233))+((r11*x6241))+(((-1.0)*sj1*sj2))+(((-1.0)*x6235*x6238))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6242=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6242;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6243=((1.0)*cj5);
IkReal x6244=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6243)));
j4eval[0]=x6244;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6243)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6245=cj5*cj5;
IkReal x6246=r01*r01;
IkReal x6247=(cj5*r00);
IkReal x6248=(r01*sj5);
IkReal x6249=((((-2.0)*x6247*x6248))+x6246+(((-1.0)*x6245*x6246))+((x6245*(r00*r00)))+(r02*r02));
j4eval[0]=x6249;
j4eval[1]=IKsign(x6249);
j4eval[2]=((IKabs(r02))+(IKabs((x6248+(((-1.0)*x6247))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6250=cj5*cj5;
IkReal x6251=r01*r01;
IkReal x6252=(r01*sj5);
IkReal x6253=(cj5*r00);
CheckValue<IkReal> x6254 = IKatan2WithCheck(IkReal((x6252+(((-1.0)*x6253)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6254.valid){
continue;
}
CheckValue<IkReal> x6255=IKPowWithIntegerCheck(IKsign((x6251+(((-1.0)*x6250*x6251))+(r02*r02)+((x6250*(r00*r00)))+(((-2.0)*x6252*x6253)))),-1);
if(!x6255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6254.value)+(((1.5707963267949)*(x6255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6256=IKcos(j4);
IkReal x6257=IKsin(j4);
IkReal x6258=(cj5*r00);
IkReal x6259=(cj5*r10);
IkReal x6260=(r21*sj5);
IkReal x6261=(cj5*r20);
IkReal x6262=((1.0)*x6256);
IkReal x6263=((1.0)*x6257);
IkReal x6264=(sj5*x6257);
IkReal x6265=(sj5*x6256);
evalcond[0]=(((r01*x6265))+(((-1.0)*x6258*x6262))+((r02*x6257)));
evalcond[1]=((((-1.0)*x6261*x6263))+(((-1.0)*r22*x6262))+((x6257*x6260)));
evalcond[2]=((((-1.0)*x6259*x6263))+(((-1.0)*r12*x6262))+((r11*x6264)));
evalcond[3]=((-1.0)+((r01*x6264))+(((-1.0)*r02*x6262))+(((-1.0)*x6258*x6263)));
evalcond[4]=(((cj2*sj1))+((r22*x6257))+((cj1*sj2))+(((-1.0)*x6261*x6262))+((x6256*x6260)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6259*x6262))+((r12*x6257))+((r11*x6265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6266=((1.0)*cj5);
CheckValue<IkReal> x6267=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6266)))),-1);
if(!x6267.valid){
continue;
}
CheckValue<IkReal> x6268 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6267.value)))+(x6268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6269=IKcos(j4);
IkReal x6270=IKsin(j4);
IkReal x6271=(cj5*r00);
IkReal x6272=(cj5*r10);
IkReal x6273=(r21*sj5);
IkReal x6274=(cj5*r20);
IkReal x6275=((1.0)*x6269);
IkReal x6276=((1.0)*x6270);
IkReal x6277=(sj5*x6270);
IkReal x6278=(sj5*x6269);
evalcond[0]=(((r01*x6278))+(((-1.0)*x6271*x6275))+((r02*x6270)));
evalcond[1]=((((-1.0)*x6274*x6276))+(((-1.0)*r22*x6275))+((x6270*x6273)));
evalcond[2]=((((-1.0)*x6272*x6276))+(((-1.0)*r12*x6275))+((r11*x6277)));
evalcond[3]=((-1.0)+((r01*x6277))+(((-1.0)*r02*x6275))+(((-1.0)*x6271*x6276)));
evalcond[4]=(((r22*x6270))+(((-1.0)*x6274*x6275))+((cj2*sj1))+((cj1*sj2))+((x6269*x6273)));
evalcond[5]=(((r12*x6270))+(((-1.0)*x6272*x6275))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6279=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6279.valid){
continue;
}
CheckValue<IkReal> x6280 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6279.value)))+(x6280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6281=IKcos(j4);
IkReal x6282=IKsin(j4);
IkReal x6283=(cj5*r00);
IkReal x6284=(cj5*r10);
IkReal x6285=(r21*sj5);
IkReal x6286=(cj5*r20);
IkReal x6287=((1.0)*x6281);
IkReal x6288=((1.0)*x6282);
IkReal x6289=(sj5*x6282);
IkReal x6290=(sj5*x6281);
evalcond[0]=((((-1.0)*x6283*x6287))+((r01*x6290))+((r02*x6282)));
evalcond[1]=((((-1.0)*r22*x6287))+((x6282*x6285))+(((-1.0)*x6286*x6288)));
evalcond[2]=((((-1.0)*x6284*x6288))+((r11*x6289))+(((-1.0)*r12*x6287)));
evalcond[3]=((-1.0)+(((-1.0)*x6283*x6288))+(((-1.0)*r02*x6287))+((r01*x6289)));
evalcond[4]=(((cj2*sj1))+((r22*x6282))+((cj1*sj2))+(((-1.0)*x6286*x6287))+((x6281*x6285)));
evalcond[5]=((((-1.0)*x6284*x6287))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6290))+((r12*x6282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6292 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6292)==0){
continue;
}
IkReal x6291=pow(x6292,-0.5);
CheckValue<IkReal> x6293 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6293.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6293.value));
IkReal gconst127=((-1.0)*r11*x6291);
IkReal gconst128=(r10*x6291);
CheckValue<IkReal> x6294 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6294.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6294.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6297 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6297.valid){
continue;
}
IkReal x6295=((-1.0)*(x6297.value));
IkReal x6296=x6291;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6295;
IkReal gconst126=x6295;
IkReal gconst127=((-1.0)*r11*x6296);
IkReal gconst128=(r10*x6296);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6298=((1.0)*gconst128);
CheckValue<IkReal> x6299=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6298))+(((-1.0)*gconst127*r20)))),-1);
if(!x6299.valid){
continue;
}
CheckValue<IkReal> x6300 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x6298))+((cj0*gconst127*r01))+(((-1.0)*cj0*r00*x6298))+((gconst127*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6299.value)))+(x6300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6301=IKsin(j4);
IkReal x6302=IKcos(j4);
IkReal x6303=(cj1*cj2);
IkReal x6304=(gconst127*r01);
IkReal x6305=(gconst128*r10);
IkReal x6306=(gconst128*r00);
IkReal x6307=(gconst128*r20);
IkReal x6308=((1.0)*cj0);
IkReal x6309=(sj1*sj2);
IkReal x6310=((1.0)*x6302);
IkReal x6311=((1.0)*x6301);
IkReal x6312=(gconst127*x6302);
IkReal x6313=(gconst127*x6301);
evalcond[0]=((((-1.0)*r22*x6310))+((r21*x6313))+(((-1.0)*x6307*x6311)));
evalcond[1]=((((-1.0)*x6306*x6311))+sj0+(((-1.0)*r02*x6310))+((x6301*x6304)));
evalcond[2]=((((-1.0)*x6305*x6311))+(((-1.0)*r12*x6310))+(((-1.0)*x6308))+((r11*x6313)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6301))+((r21*x6312))+(((-1.0)*x6307*x6310)));
evalcond[4]=(((x6302*x6304))+(((-1.0)*x6306*x6310))+(((-1.0)*x6308*x6309))+((r02*x6301))+((cj0*x6303)));
evalcond[5]=((((-1.0)*x6305*x6310))+(((-1.0)*sj0*x6309))+((r11*x6312))+((r12*x6301))+((sj0*x6303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6314 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6314.valid){
continue;
}
CheckValue<IkReal> x6315=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x6315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6314.value)+(((1.5707963267949)*(x6315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6316=IKsin(j4);
IkReal x6317=IKcos(j4);
IkReal x6318=(cj1*cj2);
IkReal x6319=(gconst127*r01);
IkReal x6320=(gconst128*r10);
IkReal x6321=(gconst128*r00);
IkReal x6322=(gconst128*r20);
IkReal x6323=((1.0)*cj0);
IkReal x6324=(sj1*sj2);
IkReal x6325=((1.0)*x6317);
IkReal x6326=((1.0)*x6316);
IkReal x6327=(gconst127*x6317);
IkReal x6328=(gconst127*x6316);
evalcond[0]=((((-1.0)*r22*x6325))+(((-1.0)*x6322*x6326))+((r21*x6328)));
evalcond[1]=(sj0+((x6316*x6319))+(((-1.0)*x6321*x6326))+(((-1.0)*r02*x6325)));
evalcond[2]=(((r11*x6328))+(((-1.0)*x6320*x6326))+(((-1.0)*x6323))+(((-1.0)*r12*x6325)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6316))+(((-1.0)*x6322*x6325))+((r21*x6327)));
evalcond[4]=(((r02*x6316))+(((-1.0)*x6321*x6325))+((cj0*x6318))+(((-1.0)*x6323*x6324))+((x6317*x6319)));
evalcond[5]=(((r11*x6327))+(((-1.0)*x6320*x6325))+(((-1.0)*sj0*x6324))+((r12*x6316))+((sj0*x6318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6330 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6330)==0){
continue;
}
IkReal x6329=pow(x6330,-0.5);
CheckValue<IkReal> x6331 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6331.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6331.value))));
IkReal gconst130=((1.0)*r11*x6329);
IkReal gconst131=((-1.0)*r10*x6329);
CheckValue<IkReal> x6332 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6332.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6332.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6335 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6335.valid){
continue;
}
IkReal x6333=((1.0)*(x6335.value));
IkReal x6334=x6329;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6333)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6333)));
IkReal gconst130=((1.0)*r11*x6334);
IkReal gconst131=((-1.0)*r10*x6334);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6338 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6338.valid){
continue;
}
IkReal x6336=((1.0)*(x6338.value));
IkReal x6337=x6329;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6336)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6336)));
IkReal gconst130=((1.0)*r11*x6337);
IkReal gconst131=((-1.0)*r10*x6337);
IkReal x6339=r12*r12;
IkReal x6340=(cj0*r02);
IkReal x6341=x6329;
IkReal x6342=(sj0*x6341);
j4eval[0]=((IKabs((x6340+((r12*sj0)))))+(IKabs(((((-1.0)*x6342))+((r12*x6340*x6341))+((x6339*x6342))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6345 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6345.valid){
continue;
}
IkReal x6343=((1.0)*(x6345.value));
IkReal x6344=x6329;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6343)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6343)));
IkReal gconst130=((1.0)*r11*x6344);
IkReal gconst131=((-1.0)*r10*x6344);
IkReal x6346=(cj1*sj2);
IkReal x6347=(cj2*sj1);
IkReal x6348=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x6354=IKPowWithIntegerCheck(x6348,-1);
if(!x6354.valid){
continue;
}
IkReal x6349=x6354.value;
IkReal x6350=((1.0)*x6349);
IkReal x6351=x6329;
IkReal x6352=(r12*r22*x6351);
IkReal x6353=((((-1.0)*x6350*(r11*r11)*(r21*r21)))+(((-1.0)*x6350*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6349))+(((-1.0)*(r22*r22))));
j4eval[0]=x6353;
j4eval[1]=((IKabs((((x6346*x6352))+((x6347*x6352)))))+(IKabs((((r22*x6347))+((r22*x6346))))));
j4eval[2]=IKsign(x6353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6355=(cj2*sj1);
IkReal x6356=(cj1*sj2);
IkReal x6357=(gconst130*r21);
IkReal x6358=((1.0)*gconst131*r20);
CheckValue<IkReal> x6359=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r20*x6358))+(((-1.0)*(x6357*x6357)))+(((-1.0)*(r22*r22)))+(((2.0)*gconst131*r20*x6357)))),-1);
if(!x6359.valid){
continue;
}
CheckValue<IkReal> x6360 = IKatan2WithCheck(IkReal((((r22*x6356))+((r22*x6355)))),IkReal(((((-1.0)*x6355*x6358))+((x6356*x6357))+((x6355*x6357))+(((-1.0)*x6356*x6358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6359.value)))+(x6360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6361=IKsin(j4);
IkReal x6362=IKcos(j4);
IkReal x6363=(cj1*cj2);
IkReal x6364=(gconst131*r10);
IkReal x6365=(gconst130*r11);
IkReal x6366=(gconst131*r20);
IkReal x6367=(gconst131*r00);
IkReal x6368=((1.0)*cj0);
IkReal x6369=(sj1*sj2);
IkReal x6370=((1.0)*x6362);
IkReal x6371=((1.0)*x6361);
IkReal x6372=(gconst130*x6362);
IkReal x6373=(gconst130*x6361);
evalcond[0]=(((r21*x6373))+(((-1.0)*x6366*x6371))+(((-1.0)*r22*x6370)));
evalcond[1]=(sj0+(((-1.0)*r02*x6370))+((r01*x6373))+(((-1.0)*x6367*x6371)));
evalcond[2]=(((x6361*x6365))+(((-1.0)*x6368))+(((-1.0)*r12*x6370))+(((-1.0)*x6364*x6371)));
evalcond[3]=(((r21*x6372))+((cj2*sj1))+(((-1.0)*x6366*x6370))+((cj1*sj2))+((r22*x6361)));
evalcond[4]=((((-1.0)*x6368*x6369))+((r01*x6372))+(((-1.0)*x6367*x6370))+((cj0*x6363))+((r02*x6361)));
evalcond[5]=(((x6362*x6365))+((r12*x6361))+((sj0*x6363))+(((-1.0)*x6364*x6370))+(((-1.0)*sj0*x6369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6374=((1.0)*gconst131);
CheckValue<IkReal> x6375 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*r10*sj0*x6374))+((gconst130*r11*sj0))+(((-1.0)*cj0*r00*x6374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6375.valid){
continue;
}
CheckValue<IkReal> x6376=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r20))+(((-1.0)*r21*x6374)))),-1);
if(!x6376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6375.value)+(((1.5707963267949)*(x6376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6377=IKsin(j4);
IkReal x6378=IKcos(j4);
IkReal x6379=(cj1*cj2);
IkReal x6380=(gconst131*r10);
IkReal x6381=(gconst130*r11);
IkReal x6382=(gconst131*r20);
IkReal x6383=(gconst131*r00);
IkReal x6384=((1.0)*cj0);
IkReal x6385=(sj1*sj2);
IkReal x6386=((1.0)*x6378);
IkReal x6387=((1.0)*x6377);
IkReal x6388=(gconst130*x6378);
IkReal x6389=(gconst130*x6377);
evalcond[0]=((((-1.0)*x6382*x6387))+(((-1.0)*r22*x6386))+((r21*x6389)));
evalcond[1]=(sj0+(((-1.0)*x6383*x6387))+((r01*x6389))+(((-1.0)*r02*x6386)));
evalcond[2]=((((-1.0)*x6384))+(((-1.0)*x6380*x6387))+(((-1.0)*r12*x6386))+((x6377*x6381)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6382*x6386))+((cj1*sj2))+((r21*x6388))+((r22*x6377)));
evalcond[4]=((((-1.0)*x6384*x6385))+(((-1.0)*x6383*x6386))+((cj0*x6379))+((r01*x6388))+((r02*x6377)));
evalcond[5]=((((-1.0)*x6380*x6386))+(((-1.0)*sj0*x6385))+((r12*x6377))+((sj0*x6379))+((x6378*x6381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6390=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x6390.valid){
continue;
}
CheckValue<IkReal> x6391 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6390.value)))+(x6391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6392=IKsin(j4);
IkReal x6393=IKcos(j4);
IkReal x6394=(cj1*cj2);
IkReal x6395=(gconst131*r10);
IkReal x6396=(gconst130*r11);
IkReal x6397=(gconst131*r20);
IkReal x6398=(gconst131*r00);
IkReal x6399=((1.0)*cj0);
IkReal x6400=(sj1*sj2);
IkReal x6401=((1.0)*x6393);
IkReal x6402=((1.0)*x6392);
IkReal x6403=(gconst130*x6393);
IkReal x6404=(gconst130*x6392);
evalcond[0]=(((r21*x6404))+(((-1.0)*r22*x6401))+(((-1.0)*x6397*x6402)));
evalcond[1]=(sj0+((r01*x6404))+(((-1.0)*r02*x6401))+(((-1.0)*x6398*x6402)));
evalcond[2]=(((x6392*x6396))+(((-1.0)*x6399))+(((-1.0)*r12*x6401))+(((-1.0)*x6395*x6402)));
evalcond[3]=(((cj2*sj1))+((r21*x6403))+((cj1*sj2))+(((-1.0)*x6397*x6401))+((r22*x6392)));
evalcond[4]=(((cj0*x6394))+((r01*x6403))+(((-1.0)*x6398*x6401))+(((-1.0)*x6399*x6400))+((r02*x6392)));
evalcond[5]=(((r12*x6392))+((sj0*x6394))+((x6393*x6396))+(((-1.0)*sj0*x6400))+(((-1.0)*x6395*x6401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6405=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6405;
j4eval[1]=IKsign(x6405);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6406=((1.0)*cj5);
IkReal x6407=((((-1.0)*r21*x6406))+(((-1.0)*r20*sj5)));
j4eval[0]=x6407;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6406))))));
j4eval[2]=IKsign(x6407);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6408=cj5*cj5;
IkReal x6409=r11*r11;
IkReal x6410=(r11*sj5);
IkReal x6411=(cj5*r10);
IkReal x6412=((((-1.0)*x6408*x6409))+(r12*r12)+(((-2.0)*x6410*x6411))+((x6408*(r10*r10)))+x6409);
j4eval[0]=x6412;
j4eval[1]=IKsign(x6412);
j4eval[2]=((IKabs(r12))+(IKabs((x6410+(((-1.0)*x6411))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6413=cj5*cj5;
IkReal x6414=r11*r11;
IkReal x6415=(cj5*r10);
IkReal x6416=(r11*sj5);
CheckValue<IkReal> x6417 = IKatan2WithCheck(IkReal((x6416+(((-1.0)*x6415)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6417.valid){
continue;
}
CheckValue<IkReal> x6418=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6413*x6414))+(r12*r12)+x6414+((x6413*(r10*r10)))+(((-2.0)*x6415*x6416)))),-1);
if(!x6418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6417.value)+(((1.5707963267949)*(x6418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6419=IKcos(j4);
IkReal x6420=IKsin(j4);
IkReal x6421=(cj5*r00);
IkReal x6422=(cj5*r10);
IkReal x6423=(r21*sj5);
IkReal x6424=(cj5*r20);
IkReal x6425=((1.0)*x6419);
IkReal x6426=((1.0)*x6420);
IkReal x6427=(sj5*x6420);
IkReal x6428=(sj5*x6419);
evalcond[0]=((((-1.0)*x6422*x6425))+((r11*x6428))+((r12*x6420)));
evalcond[1]=((((-1.0)*r22*x6425))+(((-1.0)*x6424*x6426))+((x6420*x6423)));
evalcond[2]=((((-1.0)*x6421*x6426))+((r01*x6427))+(((-1.0)*r02*x6425)));
evalcond[3]=((-1.0)+(((-1.0)*x6422*x6426))+((r11*x6427))+(((-1.0)*r12*x6425)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6424*x6425))+((x6419*x6423))+((r22*x6420)));
evalcond[5]=((((-1.0)*x6421*x6425))+((r02*x6420))+(((-1.0)*sj1*sj2))+((r01*x6428))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6429=((1.0)*cj5);
CheckValue<IkReal> x6430 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6430.valid){
continue;
}
CheckValue<IkReal> x6431=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6429))+(((-1.0)*r20*sj5)))),-1);
if(!x6431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6430.value)+(((1.5707963267949)*(x6431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6432=IKcos(j4);
IkReal x6433=IKsin(j4);
IkReal x6434=(cj5*r00);
IkReal x6435=(cj5*r10);
IkReal x6436=(r21*sj5);
IkReal x6437=(cj5*r20);
IkReal x6438=((1.0)*x6432);
IkReal x6439=((1.0)*x6433);
IkReal x6440=(sj5*x6433);
IkReal x6441=(sj5*x6432);
evalcond[0]=(((r11*x6441))+(((-1.0)*x6435*x6438))+((r12*x6433)));
evalcond[1]=(((x6433*x6436))+(((-1.0)*r22*x6438))+(((-1.0)*x6437*x6439)));
evalcond[2]=((((-1.0)*r02*x6438))+((r01*x6440))+(((-1.0)*x6434*x6439)));
evalcond[3]=((-1.0)+((r11*x6440))+(((-1.0)*x6435*x6439))+(((-1.0)*r12*x6438)));
evalcond[4]=(((r22*x6433))+((cj2*sj1))+((cj1*sj2))+((x6432*x6436))+(((-1.0)*x6437*x6438)));
evalcond[5]=(((r01*x6441))+(((-1.0)*x6434*x6438))+(((-1.0)*sj1*sj2))+((r02*x6433))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6442 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6442.valid){
continue;
}
CheckValue<IkReal> x6443=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6442.value)+(((1.5707963267949)*(x6443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6444=IKcos(j4);
IkReal x6445=IKsin(j4);
IkReal x6446=(cj5*r00);
IkReal x6447=(cj5*r10);
IkReal x6448=(r21*sj5);
IkReal x6449=(cj5*r20);
IkReal x6450=((1.0)*x6444);
IkReal x6451=((1.0)*x6445);
IkReal x6452=(sj5*x6445);
IkReal x6453=(sj5*x6444);
evalcond[0]=(((r12*x6445))+((r11*x6453))+(((-1.0)*x6447*x6450)));
evalcond[1]=(((x6445*x6448))+(((-1.0)*x6449*x6451))+(((-1.0)*r22*x6450)));
evalcond[2]=(((r01*x6452))+(((-1.0)*r02*x6450))+(((-1.0)*x6446*x6451)));
evalcond[3]=((-1.0)+((r11*x6452))+(((-1.0)*x6447*x6451))+(((-1.0)*r12*x6450)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6449*x6450))+((cj1*sj2))+((x6444*x6448))+((r22*x6445)));
evalcond[5]=(((r01*x6453))+(((-1.0)*x6446*x6450))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x6445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6454=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6454;
j4eval[1]=IKsign(x6454);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6455=((1.0)*cj5);
IkReal x6456=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6455)));
j4eval[0]=x6456;
j4eval[1]=((IKabs(((((-1.0)*r20*x6455))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6456);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6457=cj5*cj5;
IkReal x6458=r11*r11;
IkReal x6459=(cj5*r10);
IkReal x6460=(r11*sj5);
IkReal x6461=(((x6457*x6458))+(((-1.0)*x6458))+(((-1.0)*x6457*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x6459*x6460)));
j4eval[0]=x6461;
j4eval[1]=IKsign(x6461);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6459))+x6460))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6462=cj5*cj5;
IkReal x6463=r11*r11;
IkReal x6464=(cj5*r10);
IkReal x6465=(r11*sj5);
CheckValue<IkReal> x6466 = IKatan2WithCheck(IkReal((x6465+(((-1.0)*x6464)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6466.valid){
continue;
}
CheckValue<IkReal> x6467=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6462*(r10*r10)))+(((2.0)*x6464*x6465))+(((-1.0)*(r12*r12)))+((x6462*x6463))+(((-1.0)*x6463)))),-1);
if(!x6467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6466.value)+(((1.5707963267949)*(x6467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6468=IKcos(j4);
IkReal x6469=IKsin(j4);
IkReal x6470=(cj5*r00);
IkReal x6471=(cj5*r10);
IkReal x6472=(r21*sj5);
IkReal x6473=(cj5*r20);
IkReal x6474=((1.0)*x6468);
IkReal x6475=((1.0)*x6469);
IkReal x6476=(sj5*x6469);
IkReal x6477=(sj5*x6468);
evalcond[0]=(((r11*x6477))+(((-1.0)*x6471*x6474))+((r12*x6469)));
evalcond[1]=((((-1.0)*x6473*x6475))+(((-1.0)*r22*x6474))+((x6469*x6472)));
evalcond[2]=(((r01*x6476))+(((-1.0)*x6470*x6475))+(((-1.0)*r02*x6474)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6474))+((r11*x6476))+(((-1.0)*x6471*x6475)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6473*x6474))+((x6468*x6472))+((r22*x6469)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6477))+(((-1.0)*x6470*x6474))+((r02*x6469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6478=((1.0)*cj5);
CheckValue<IkReal> x6479 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6479.valid){
continue;
}
CheckValue<IkReal> x6480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6478)))),-1);
if(!x6480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6479.value)+(((1.5707963267949)*(x6480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6481=IKcos(j4);
IkReal x6482=IKsin(j4);
IkReal x6483=(cj5*r00);
IkReal x6484=(cj5*r10);
IkReal x6485=(r21*sj5);
IkReal x6486=(cj5*r20);
IkReal x6487=((1.0)*x6481);
IkReal x6488=((1.0)*x6482);
IkReal x6489=(sj5*x6482);
IkReal x6490=(sj5*x6481);
evalcond[0]=(((r11*x6490))+((r12*x6482))+(((-1.0)*x6484*x6487)));
evalcond[1]=(((x6482*x6485))+(((-1.0)*r22*x6487))+(((-1.0)*x6486*x6488)));
evalcond[2]=(((r01*x6489))+(((-1.0)*r02*x6487))+(((-1.0)*x6483*x6488)));
evalcond[3]=((1.0)+((r11*x6489))+(((-1.0)*r12*x6487))+(((-1.0)*x6484*x6488)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6486*x6487))+((r22*x6482))+((x6481*x6485)));
evalcond[5]=(((r01*x6490))+((r02*x6482))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6483*x6487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6491=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6491.valid){
continue;
}
CheckValue<IkReal> x6492 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6491.value)))+(x6492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6493=IKcos(j4);
IkReal x6494=IKsin(j4);
IkReal x6495=(cj5*r00);
IkReal x6496=(cj5*r10);
IkReal x6497=(r21*sj5);
IkReal x6498=(cj5*r20);
IkReal x6499=((1.0)*x6493);
IkReal x6500=((1.0)*x6494);
IkReal x6501=(sj5*x6494);
IkReal x6502=(sj5*x6493);
evalcond[0]=(((r12*x6494))+(((-1.0)*x6496*x6499))+((r11*x6502)));
evalcond[1]=((((-1.0)*r22*x6499))+((x6494*x6497))+(((-1.0)*x6498*x6500)));
evalcond[2]=((((-1.0)*r02*x6499))+((r01*x6501))+(((-1.0)*x6495*x6500)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6499))+(((-1.0)*x6496*x6500))+((r11*x6501)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6493*x6497))+(((-1.0)*x6498*x6499))+((r22*x6494)));
evalcond[5]=((((-1.0)*x6495*x6499))+((r02*x6494))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6503=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6503);
rxp0_2=(py*r00);
rxp1_0=(r21*x6503);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6504=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6504);
rxp0_2=(py*r00);
rxp1_0=(r21*x6504);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6505=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6505);
rxp0_2=(py*r00);
rxp1_0=(r21*x6505);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6508=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6508.valid){
continue;
}
IkReal x6506=x6508.value;
IkReal x6507=(cj0*x6506);
cj4array[0]=((((-1.0)*cj1*cj2*x6507))+((sj1*sj2*x6507)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6509=IKsin(j4);
IkReal x6510=IKcos(j4);
IkReal x6511=(r21*sj5);
IkReal x6512=((1.0)*x6510);
IkReal x6513=((1.0)*cj5*x6509);
evalcond[0]=(r12*x6509);
evalcond[1]=((((-1.0)*r12*x6512))+(((-1.0)*cj0)));
evalcond[2]=(((x6509*x6511))+(((-1.0)*r20*x6513)));
evalcond[3]=(((r01*sj5*x6509))+(((-1.0)*r00*x6513)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6510*x6511))+(((-1.0)*cj5*r20*x6512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6516=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6516.valid){
continue;
}
IkReal x6514=x6516.value;
IkReal x6515=((1.0)*x6514);
cj4array[0]=((((-1.0)*cj1*sj2*x6515))+(((-1.0)*cj2*sj1*x6515)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6517=IKsin(j4);
IkReal x6518=IKcos(j4);
IkReal x6519=((1.0)*cj0);
IkReal x6520=(r01*sj5);
IkReal x6521=((1.0)*cj5*r00);
evalcond[0]=(r12*x6517);
evalcond[1]=((((-1.0)*x6519))+(((-1.0)*r12*x6518)));
evalcond[2]=((((-1.0)*cj5*r20*x6517))+((r21*sj5*x6517)));
evalcond[3]=(((x6517*x6520))+(((-1.0)*x6517*x6521)));
evalcond[4]=((((-1.0)*x6518*x6521))+((cj0*cj1*cj2))+((x6518*x6520))+(((-1.0)*sj1*sj2*x6519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6522=IKPowWithIntegerCheck(r12,-1);
if(!x6522.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6522.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6523=IKsin(j4);
IkReal x6524=IKcos(j4);
IkReal x6525=((1.0)*cj5*r00);
IkReal x6526=(sj5*x6524);
IkReal x6527=(sj5*x6523);
IkReal x6528=((1.0)*cj5*r20);
evalcond[0]=(r12*x6523);
evalcond[1]=(((r21*x6527))+(((-1.0)*x6523*x6528)));
evalcond[2]=(((r01*x6527))+(((-1.0)*x6523*x6525)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6524*x6528))+((r21*x6526)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x6524*x6525))+((r01*x6526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6529=((1.0)*cj5);
CheckValue<IkReal> x6530 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x6529))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x6529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6530.valid){
continue;
}
CheckValue<IkReal> x6531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6529))+(((-1.0)*r20*sj5)))),-1);
if(!x6531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6530.value)+(((1.5707963267949)*(x6531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6532=IKsin(j4);
IkReal x6533=IKcos(j4);
IkReal x6534=(cj5*r00);
IkReal x6535=(cj1*cj2);
IkReal x6536=(cj5*r10);
IkReal x6537=(r21*sj5);
IkReal x6538=(cj5*r20);
IkReal x6539=((1.0)*x6533);
IkReal x6540=((1.0)*x6532);
IkReal x6541=(sj5*x6532);
IkReal x6542=(sj5*x6533);
IkReal x6543=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x6539))+(((-1.0)*x6538*x6540))+((x6532*x6537)));
evalcond[1]=(sj0+(((-1.0)*r02*x6539))+(((-1.0)*x6534*x6540))+((r01*x6541)));
evalcond[2]=((((-1.0)*r12*x6539))+(((-1.0)*x6536*x6540))+((r11*x6541))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x6533*x6537))+((cj1*sj2))+((r22*x6532))+(((-1.0)*x6538*x6539)));
evalcond[4]=(((r02*x6532))+(((-1.0)*x6534*x6539))+((cj0*x6535))+(((-1.0)*cj0*x6543))+((r01*x6542)));
evalcond[5]=((((-1.0)*sj0*x6543))+((sj0*x6535))+(((-1.0)*x6536*x6539))+((r11*x6542))+((r12*x6532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6544=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6544.valid){
continue;
}
CheckValue<IkReal> x6545 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6544.value)))+(x6545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6546=IKsin(j4);
IkReal x6547=IKcos(j4);
IkReal x6548=(cj5*r00);
IkReal x6549=(cj1*cj2);
IkReal x6550=(cj5*r10);
IkReal x6551=(r21*sj5);
IkReal x6552=(cj5*r20);
IkReal x6553=((1.0)*x6547);
IkReal x6554=((1.0)*x6546);
IkReal x6555=(sj5*x6546);
IkReal x6556=(sj5*x6547);
IkReal x6557=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x6552*x6554))+(((-1.0)*r22*x6553))+((x6546*x6551)));
evalcond[1]=(sj0+(((-1.0)*x6548*x6554))+(((-1.0)*r02*x6553))+((r01*x6555)));
evalcond[2]=((((-1.0)*x6550*x6554))+(((-1.0)*r12*x6553))+((r11*x6555))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6552*x6553))+((cj1*sj2))+((x6547*x6551))+((r22*x6546)));
evalcond[4]=(((r02*x6546))+(((-1.0)*x6548*x6553))+(((-1.0)*cj0*x6557))+((r01*x6556))+((cj0*x6549)));
evalcond[5]=((((-1.0)*sj0*x6557))+(((-1.0)*x6550*x6553))+((r11*x6556))+((r12*x6546))+((sj0*x6549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6558=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6558.valid){
continue;
}
CheckValue<IkReal> x6559 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6558.value)))+(x6559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6560=IKsin(j4);
IkReal x6561=IKcos(j4);
IkReal x6562=(cj5*r00);
IkReal x6563=(cj1*cj2);
IkReal x6564=(cj5*r10);
IkReal x6565=(r21*sj5);
IkReal x6566=(cj5*r20);
IkReal x6567=((1.0)*x6561);
IkReal x6568=((1.0)*x6560);
IkReal x6569=(sj5*x6560);
IkReal x6570=(sj5*x6561);
IkReal x6571=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x6566*x6568))+((x6560*x6565))+(((-1.0)*r22*x6567)));
evalcond[1]=(sj0+(((-1.0)*r02*x6567))+((r01*x6569))+(((-1.0)*x6562*x6568)));
evalcond[2]=(((r11*x6569))+(((-1.0)*cj0))+(((-1.0)*r12*x6567))+(((-1.0)*x6564*x6568)));
evalcond[3]=(((cj2*sj1))+((x6561*x6565))+((r22*x6560))+(((-1.0)*x6566*x6567))+((cj1*sj2)));
evalcond[4]=(((r01*x6570))+((r02*x6560))+(((-1.0)*cj0*x6571))+((cj0*x6563))+(((-1.0)*x6562*x6567)));
evalcond[5]=(((r12*x6560))+((r11*x6570))+((sj0*x6563))+(((-1.0)*sj0*x6571))+(((-1.0)*x6564*x6567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6572=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x6572;
j0eval[1]=IKsign(x6572);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6573=cj5*cj5;
IkReal x6574=r21*r21;
IkReal x6575=(cj2*sj1);
IkReal x6576=(cj1*sj2);
IkReal x6577=(r21*sj5);
IkReal x6578=((1.0)*cj5*r20);
IkReal x6579=((r22*r22)+(((-2.0)*cj5*r20*x6577))+x6574+(((-1.0)*x6573*x6574))+((x6573*(r20*r20))));
j4eval[0]=x6579;
j4eval[1]=IKsign(x6579);
j4eval[2]=((IKabs(((((-1.0)*x6576*x6578))+(((-1.0)*x6575*x6578))+((x6575*x6577))+((x6576*x6577)))))+(IKabs((((r22*x6576))+((r22*x6575))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6580=cj1*cj1;
IkReal x6581=(cj2*sj2);
IkReal x6582=(cj1*sj1);
j0eval[0]=((((-1.08349267049076)*cj2*x6582))+(((-1.08349267049076)*sj2*x6580))+(((-2.0)*x6582*(cj2*cj2)))+x6582+x6581+(((-2.0)*x6580*x6581)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((-0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((-0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6583=IKsin(j0);
IkReal x6584=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x6584))+(((0.10915)*x6583)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*x6584))+(((-0.81725)*x6583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6585=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6585;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6585);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6586=cj5*cj5;
IkReal x6587=((1.0)*r21);
IkReal x6588=(cj5*sj5);
IkReal x6589=((1.0)*r20);
IkReal x6590=(((r01*r21))+(((-1.0)*r01*x6586*x6587))+((r00*r20*x6586))+(((-1.0)*r00*x6587*x6588))+((r02*r22))+(((-1.0)*r01*x6588*x6589)));
j4eval[0]=x6590;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6589)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6591=cj5*cj5;
IkReal x6592=(r21*sj5);
IkReal x6593=(r11*r21);
IkReal x6594=((1.0)*cj5*r20);
IkReal x6595=(((r12*r22))+x6593+(((-1.0)*r11*sj5*x6594))+(((-1.0)*cj5*r10*x6592))+(((-1.0)*x6591*x6593))+((r10*r20*x6591)));
j4eval[0]=x6595;
j4eval[1]=((IKabs((((sj0*x6592))+(((-1.0)*sj0*x6594)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6596=cj5*cj5;
IkReal x6597=(r21*sj5);
IkReal x6598=(r11*r21);
IkReal x6599=((1.0)*cj5*r20);
CheckValue<IkReal> x6600=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6596*x6598))+((r12*r22))+x6598+(((-1.0)*r11*sj5*x6599))+(((-1.0)*cj5*r10*x6597))+((r10*r20*x6596)))),-1);
if(!x6600.valid){
continue;
}
CheckValue<IkReal> x6601 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6597))+(((-1.0)*sj0*x6599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6600.value)))+(x6601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6602=IKsin(j4);
IkReal x6603=IKcos(j4);
IkReal x6604=(r11*sj5);
IkReal x6605=(cj5*r00);
IkReal x6606=(cj5*r10);
IkReal x6607=(r21*sj5);
IkReal x6608=(cj5*r20);
IkReal x6609=(r01*sj5);
IkReal x6610=((1.0)*x6603);
IkReal x6611=((1.0)*x6602);
evalcond[0]=((((-1.0)*x6608*x6611))+(((-1.0)*r22*x6610))+((x6602*x6607)));
evalcond[1]=((((-1.0)*x6607*x6610))+(((-1.0)*r22*x6611))+((x6603*x6608)));
evalcond[2]=((((-1.0)*x6605*x6611))+sj0+(((-1.0)*r02*x6610))+((x6602*x6609)));
evalcond[3]=(cj0+(((-1.0)*x6609*x6610))+(((-1.0)*r02*x6611))+((x6603*x6605)));
evalcond[4]=((((-1.0)*r12*x6611))+sj0+(((-1.0)*x6604*x6610))+((x6603*x6606)));
evalcond[5]=((((-1.0)*r12*x6610))+(((-1.0)*x6606*x6611))+((x6602*x6604))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6612=cj5*cj5;
IkReal x6613=((1.0)*r21);
IkReal x6614=(cj5*sj5);
IkReal x6615=((1.0)*r20);
CheckValue<IkReal> x6616=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6612*x6613))+((r00*r20*x6612))+(((-1.0)*r00*x6613*x6614))+((r01*r21))+(((-1.0)*r01*x6614*x6615))+((r02*r22)))),-1);
if(!x6616.valid){
continue;
}
CheckValue<IkReal> x6617 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6616.value)))+(x6617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6618=IKsin(j4);
IkReal x6619=IKcos(j4);
IkReal x6620=(r11*sj5);
IkReal x6621=(cj5*r00);
IkReal x6622=(cj5*r10);
IkReal x6623=(r21*sj5);
IkReal x6624=(cj5*r20);
IkReal x6625=(r01*sj5);
IkReal x6626=((1.0)*x6619);
IkReal x6627=((1.0)*x6618);
evalcond[0]=((((-1.0)*r22*x6626))+((x6618*x6623))+(((-1.0)*x6624*x6627)));
evalcond[1]=((((-1.0)*r22*x6627))+((x6619*x6624))+(((-1.0)*x6623*x6626)));
evalcond[2]=(sj0+((x6618*x6625))+(((-1.0)*r02*x6626))+(((-1.0)*x6621*x6627)));
evalcond[3]=(cj0+((x6619*x6621))+(((-1.0)*r02*x6627))+(((-1.0)*x6625*x6626)));
evalcond[4]=(sj0+(((-1.0)*r12*x6627))+(((-1.0)*x6620*x6626))+((x6619*x6622)));
evalcond[5]=((((-1.0)*r12*x6626))+((x6618*x6620))+(((-1.0)*x6622*x6627))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6628=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6628.valid){
continue;
}
CheckValue<IkReal> x6629 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6628.value)))+(x6629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6630=IKsin(j4);
IkReal x6631=IKcos(j4);
IkReal x6632=(r11*sj5);
IkReal x6633=(cj5*r00);
IkReal x6634=(cj5*r10);
IkReal x6635=(r21*sj5);
IkReal x6636=(cj5*r20);
IkReal x6637=(r01*sj5);
IkReal x6638=((1.0)*x6631);
IkReal x6639=((1.0)*x6630);
evalcond[0]=((((-1.0)*r22*x6638))+(((-1.0)*x6636*x6639))+((x6630*x6635)));
evalcond[1]=((((-1.0)*r22*x6639))+((x6631*x6636))+(((-1.0)*x6635*x6638)));
evalcond[2]=(sj0+((x6630*x6637))+(((-1.0)*r02*x6638))+(((-1.0)*x6633*x6639)));
evalcond[3]=(cj0+(((-1.0)*x6637*x6638))+(((-1.0)*r02*x6639))+((x6631*x6633)));
evalcond[4]=(sj0+(((-1.0)*x6632*x6638))+((x6631*x6634))+(((-1.0)*r12*x6639)));
evalcond[5]=((((-1.0)*x6634*x6639))+((x6630*x6632))+(((-1.0)*cj0))+(((-1.0)*r12*x6638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4050211434602)*px))+(((-2.52189136462044)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4050211434602)*px))+(((-2.52189136462044)*py))))+IKsqr(((((-2.52189136462044)*px))+(((-8.4050211434602)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4050211434602)*px))+(((-2.52189136462044)*py))), ((((-2.52189136462044)*px))+(((-8.4050211434602)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6640=IKsin(j0);
IkReal x6641=IKcos(j0);
evalcond[0]=((((-0.03275)*x6641))+(((-1.0)*px))+(((0.10915)*x6640)));
evalcond[1]=((((-0.03275)*x6640))+(((-1.0)*py))+(((-0.10915)*x6641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6642=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6642;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6642);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6643=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6643;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6644=cj5*cj5;
IkReal x6645=((1.0)*r21);
IkReal x6646=(cj5*r20);
IkReal x6647=((((-1.0)*cj5*r00*sj5*x6645))+((r01*r21))+(((-1.0)*r01*x6644*x6645))+(((-1.0)*r01*sj5*x6646))+((r02*r22))+((r00*r20*x6644)));
j4eval[0]=x6647;
j4eval[1]=IKsign(x6647);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6645))+((sj0*x6646))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6648=cj5*cj5;
IkReal x6649=((1.0)*r21);
IkReal x6650=(cj5*r20);
CheckValue<IkReal> x6651=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x6649))+((r01*r21))+(((-1.0)*r01*x6648*x6649))+(((-1.0)*r01*sj5*x6650))+((r02*r22))+((r00*r20*x6648)))),-1);
if(!x6651.valid){
continue;
}
CheckValue<IkReal> x6652 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6649))+((sj0*x6650)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6651.value)))+(x6652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6653=IKsin(j4);
IkReal x6654=IKcos(j4);
IkReal x6655=((1.0)*cj0);
IkReal x6656=(cj5*r00);
IkReal x6657=(r11*sj5);
IkReal x6658=(cj5*r10);
IkReal x6659=(r21*sj5);
IkReal x6660=(cj5*r20);
IkReal x6661=(r01*sj5);
IkReal x6662=((1.0)*x6654);
IkReal x6663=((1.0)*x6653);
evalcond[0]=(((x6653*x6659))+(((-1.0)*x6660*x6663))+(((-1.0)*r22*x6662)));
evalcond[1]=((((-1.0)*x6659*x6662))+((x6654*x6660))+(((-1.0)*r22*x6663)));
evalcond[2]=(sj0+((x6653*x6661))+(((-1.0)*r02*x6662))+(((-1.0)*x6656*x6663)));
evalcond[3]=((((-1.0)*x6658*x6663))+(((-1.0)*x6655))+((x6653*x6657))+(((-1.0)*r12*x6662)));
evalcond[4]=((((-1.0)*x6661*x6662))+(((-1.0)*x6655))+(((-1.0)*r02*x6663))+((x6654*x6656)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6657*x6662))+(((-1.0)*r12*x6663))+((x6654*x6658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6664=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6664.valid){
continue;
}
CheckValue<IkReal> x6665 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6664.value)))+(x6665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6666=IKsin(j4);
IkReal x6667=IKcos(j4);
IkReal x6668=((1.0)*cj0);
IkReal x6669=(cj5*r00);
IkReal x6670=(r11*sj5);
IkReal x6671=(cj5*r10);
IkReal x6672=(r21*sj5);
IkReal x6673=(cj5*r20);
IkReal x6674=(r01*sj5);
IkReal x6675=((1.0)*x6667);
IkReal x6676=((1.0)*x6666);
evalcond[0]=((((-1.0)*x6673*x6676))+((x6666*x6672))+(((-1.0)*r22*x6675)));
evalcond[1]=((((-1.0)*x6672*x6675))+((x6667*x6673))+(((-1.0)*r22*x6676)));
evalcond[2]=((((-1.0)*r02*x6675))+(((-1.0)*x6669*x6676))+sj0+((x6666*x6674)));
evalcond[3]=((((-1.0)*x6671*x6676))+(((-1.0)*r12*x6675))+(((-1.0)*x6668))+((x6666*x6670)));
evalcond[4]=((((-1.0)*r02*x6676))+((x6667*x6669))+(((-1.0)*x6668))+(((-1.0)*x6674*x6675)));
evalcond[5]=((((-1.0)*sj0))+((x6667*x6671))+(((-1.0)*x6670*x6675))+(((-1.0)*r12*x6676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6677=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6677.valid){
continue;
}
CheckValue<IkReal> x6678 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6677.value)))+(x6678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6679=IKsin(j4);
IkReal x6680=IKcos(j4);
IkReal x6681=((1.0)*cj0);
IkReal x6682=(cj5*r00);
IkReal x6683=(r11*sj5);
IkReal x6684=(cj5*r10);
IkReal x6685=(r21*sj5);
IkReal x6686=(cj5*r20);
IkReal x6687=(r01*sj5);
IkReal x6688=((1.0)*x6680);
IkReal x6689=((1.0)*x6679);
evalcond[0]=(((x6679*x6685))+(((-1.0)*x6686*x6689))+(((-1.0)*r22*x6688)));
evalcond[1]=((((-1.0)*r22*x6689))+((x6680*x6686))+(((-1.0)*x6685*x6688)));
evalcond[2]=(sj0+(((-1.0)*r02*x6688))+(((-1.0)*x6682*x6689))+((x6679*x6687)));
evalcond[3]=((((-1.0)*x6684*x6689))+(((-1.0)*x6681))+((x6679*x6683))+(((-1.0)*r12*x6688)));
evalcond[4]=((((-1.0)*r02*x6689))+(((-1.0)*x6681))+(((-1.0)*x6687*x6688))+((x6680*x6682)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6683*x6688))+(((-1.0)*r12*x6689))+((x6680*x6684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6690=IKsin(j0);
IkReal x6691=IKcos(j0);
IkReal x6692=((1.0)*cj5);
IkReal x6693=((1.0)*sj5);
IkReal x6694=((0.09465)*cj5);
IkReal x6695=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r00*x6693))+x6691+(((-1.0)*r01*x6692)));
evalcond[1]=((((-1.0)*r10*x6693))+x6690+(((-1.0)*r11*x6692)));
evalcond[2]=((((-1.0)*r00*x6695))+(((-1.0)*r01*x6694))+(((-1.0)*px))+(((0.10915)*x6690)));
evalcond[3]=((((-1.0)*r10*x6695))+(((-0.10915)*x6691))+(((-1.0)*py))+(((-1.0)*r11*x6694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6696=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6696;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6697=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6697;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6698=cj5*cj5;
IkReal x6699=r21*r21;
IkReal x6700=(r21*sj5);
IkReal x6701=(cj5*r20);
IkReal x6702=((r22*r22)+x6699+((x6698*(r20*r20)))+(((-1.0)*x6698*x6699))+(((-2.0)*x6700*x6701)));
j4eval[0]=x6702;
j4eval[1]=IKsign(x6702);
j4eval[2]=((IKabs(r22))+(IKabs((x6700+(((-1.0)*x6701))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6703=cj5*cj5;
IkReal x6704=r21*r21;
IkReal x6705=(r21*sj5);
IkReal x6706=(cj5*r20);
CheckValue<IkReal> x6707=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x6703*x6704))+((x6703*(r20*r20)))+x6704+(((-2.0)*x6705*x6706)))),-1);
if(!x6707.valid){
continue;
}
CheckValue<IkReal> x6708 = IKatan2WithCheck(IkReal(r22),IkReal((x6705+(((-1.0)*x6706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6707.value)))+(x6708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6709=IKsin(j4);
IkReal x6710=IKcos(j4);
IkReal x6711=(r11*sj5);
IkReal x6712=(r21*sj5);
IkReal x6713=(cj5*r00);
IkReal x6714=(cj5*r10);
IkReal x6715=(cj5*r20);
IkReal x6716=(r01*sj5);
IkReal x6717=((1.0)*x6710);
IkReal x6718=((1.0)*x6709);
evalcond[0]=(((x6709*x6712))+(((-1.0)*x6715*x6718))+(((-1.0)*r22*x6717)));
evalcond[1]=((((-1.0)*r02*x6718))+((x6710*x6713))+(((-1.0)*x6716*x6717)));
evalcond[2]=((((-1.0)*x6711*x6717))+((x6710*x6714))+(((-1.0)*r12*x6718)));
evalcond[3]=(((x6709*x6716))+sj0+(((-1.0)*x6713*x6718))+(((-1.0)*r02*x6717)));
evalcond[4]=((1.0)+(((-1.0)*x6712*x6717))+((x6710*x6715))+(((-1.0)*r22*x6718)));
evalcond[5]=(((x6709*x6711))+(((-1.0)*x6714*x6718))+(((-1.0)*r12*x6717))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6719=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6719.valid){
continue;
}
CheckValue<IkReal> x6720 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6719.value)))+(x6720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6721=IKsin(j4);
IkReal x6722=IKcos(j4);
IkReal x6723=(r11*sj5);
IkReal x6724=(r21*sj5);
IkReal x6725=(cj5*r00);
IkReal x6726=(cj5*r10);
IkReal x6727=(cj5*r20);
IkReal x6728=(r01*sj5);
IkReal x6729=((1.0)*x6722);
IkReal x6730=((1.0)*x6721);
evalcond[0]=((((-1.0)*r22*x6729))+(((-1.0)*x6727*x6730))+((x6721*x6724)));
evalcond[1]=((((-1.0)*r02*x6730))+((x6722*x6725))+(((-1.0)*x6728*x6729)));
evalcond[2]=((((-1.0)*x6723*x6729))+(((-1.0)*r12*x6730))+((x6722*x6726)));
evalcond[3]=(sj0+(((-1.0)*x6725*x6730))+(((-1.0)*r02*x6729))+((x6721*x6728)));
evalcond[4]=((1.0)+(((-1.0)*x6724*x6729))+(((-1.0)*r22*x6730))+((x6722*x6727)));
evalcond[5]=((((-1.0)*x6726*x6730))+(((-1.0)*r12*x6729))+((x6721*x6723))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6731 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6731.valid){
continue;
}
CheckValue<IkReal> x6732=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6731.value)+(((1.5707963267949)*(x6732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6733=IKsin(j4);
IkReal x6734=IKcos(j4);
IkReal x6735=(r11*sj5);
IkReal x6736=(r21*sj5);
IkReal x6737=(cj5*r00);
IkReal x6738=(cj5*r10);
IkReal x6739=(cj5*r20);
IkReal x6740=(r01*sj5);
IkReal x6741=((1.0)*x6734);
IkReal x6742=((1.0)*x6733);
evalcond[0]=((((-1.0)*r22*x6741))+((x6733*x6736))+(((-1.0)*x6739*x6742)));
evalcond[1]=(((x6734*x6737))+(((-1.0)*r02*x6742))+(((-1.0)*x6740*x6741)));
evalcond[2]=(((x6734*x6738))+(((-1.0)*r12*x6742))+(((-1.0)*x6735*x6741)));
evalcond[3]=(sj0+((x6733*x6740))+(((-1.0)*r02*x6741))+(((-1.0)*x6737*x6742)));
evalcond[4]=((1.0)+((x6734*x6739))+(((-1.0)*r22*x6742))+(((-1.0)*x6736*x6741)));
evalcond[5]=((((-1.0)*r12*x6741))+((x6733*x6735))+(((-1.0)*x6738*x6742))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((2.36617629259053)*py))))+IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((2.36617629259053)*py))), ((((2.36617629259053)*px))+(((-0.658427386453172)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6743=IKsin(j0);
IkReal x6744=IKcos(j0);
evalcond[0]=((((0.39225)*x6744))+(((-1.0)*px))+(((0.10915)*x6743)));
evalcond[1]=((((0.39225)*x6743))+(((-0.10915)*x6744))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6745=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6745;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6746=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6746;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6747=cj5*cj5;
IkReal x6748=((1.0)*r21);
IkReal x6749=(cj5*r20);
IkReal x6750=((((-1.0)*cj5*r00*sj5*x6748))+((r01*r21))+(((-1.0)*r01*sj5*x6749))+(((-1.0)*r01*x6747*x6748))+((r02*r22))+((r00*r20*x6747)));
j4eval[0]=x6750;
j4eval[1]=IKsign(x6750);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6748))+((sj0*x6749))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6751=cj5*cj5;
IkReal x6752=((1.0)*r21);
IkReal x6753=(cj5*r20);
CheckValue<IkReal> x6754 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6752))+((sj0*x6753)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6754.valid){
continue;
}
CheckValue<IkReal> x6755=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*sj5*x6753))+((r00*r20*x6751))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x6752))+(((-1.0)*r01*x6751*x6752)))),-1);
if(!x6755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6754.value)+(((1.5707963267949)*(x6755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6756=IKsin(j4);
IkReal x6757=IKcos(j4);
IkReal x6758=((1.0)*cj0);
IkReal x6759=(cj5*r00);
IkReal x6760=(r11*sj5);
IkReal x6761=(cj5*r10);
IkReal x6762=(r21*sj5);
IkReal x6763=(cj5*r20);
IkReal x6764=(r01*sj5);
IkReal x6765=((1.0)*x6757);
IkReal x6766=((1.0)*x6756);
evalcond[0]=(((x6756*x6762))+(((-1.0)*r22*x6765))+(((-1.0)*x6763*x6766)));
evalcond[1]=((((-1.0)*x6762*x6765))+((x6757*x6763))+(((-1.0)*r22*x6766)));
evalcond[2]=(sj0+((x6756*x6764))+(((-1.0)*x6759*x6766))+(((-1.0)*r02*x6765)));
evalcond[3]=(((x6756*x6760))+(((-1.0)*x6758))+(((-1.0)*r12*x6765))+(((-1.0)*x6761*x6766)));
evalcond[4]=(((x6757*x6759))+(((-1.0)*x6758))+(((-1.0)*r02*x6766))+(((-1.0)*x6764*x6765)));
evalcond[5]=((((-1.0)*x6760*x6765))+(((-1.0)*sj0))+((x6757*x6761))+(((-1.0)*r12*x6766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6767=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6767.valid){
continue;
}
CheckValue<IkReal> x6768 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6767.value)))+(x6768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6769=IKsin(j4);
IkReal x6770=IKcos(j4);
IkReal x6771=((1.0)*cj0);
IkReal x6772=(cj5*r00);
IkReal x6773=(r11*sj5);
IkReal x6774=(cj5*r10);
IkReal x6775=(r21*sj5);
IkReal x6776=(cj5*r20);
IkReal x6777=(r01*sj5);
IkReal x6778=((1.0)*x6770);
IkReal x6779=((1.0)*x6769);
evalcond[0]=((((-1.0)*r22*x6778))+(((-1.0)*x6776*x6779))+((x6769*x6775)));
evalcond[1]=(((x6770*x6776))+(((-1.0)*r22*x6779))+(((-1.0)*x6775*x6778)));
evalcond[2]=(sj0+((x6769*x6777))+(((-1.0)*r02*x6778))+(((-1.0)*x6772*x6779)));
evalcond[3]=((((-1.0)*x6771))+(((-1.0)*r12*x6778))+((x6769*x6773))+(((-1.0)*x6774*x6779)));
evalcond[4]=(((x6770*x6772))+(((-1.0)*x6771))+(((-1.0)*x6777*x6778))+(((-1.0)*r02*x6779)));
evalcond[5]=(((x6770*x6774))+(((-1.0)*sj0))+(((-1.0)*r12*x6779))+(((-1.0)*x6773*x6778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6780=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6780.valid){
continue;
}
CheckValue<IkReal> x6781 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6780.value)))+(x6781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6782=IKsin(j4);
IkReal x6783=IKcos(j4);
IkReal x6784=((1.0)*cj0);
IkReal x6785=(cj5*r00);
IkReal x6786=(r11*sj5);
IkReal x6787=(cj5*r10);
IkReal x6788=(r21*sj5);
IkReal x6789=(cj5*r20);
IkReal x6790=(r01*sj5);
IkReal x6791=((1.0)*x6783);
IkReal x6792=((1.0)*x6782);
evalcond[0]=((((-1.0)*x6789*x6792))+(((-1.0)*r22*x6791))+((x6782*x6788)));
evalcond[1]=((((-1.0)*x6788*x6791))+(((-1.0)*r22*x6792))+((x6783*x6789)));
evalcond[2]=(sj0+((x6782*x6790))+(((-1.0)*x6785*x6792))+(((-1.0)*r02*x6791)));
evalcond[3]=((((-1.0)*x6784))+(((-1.0)*x6787*x6792))+(((-1.0)*r12*x6791))+((x6782*x6786)));
evalcond[4]=((((-1.0)*x6784))+(((-1.0)*x6790*x6791))+((x6783*x6785))+(((-1.0)*r02*x6792)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6786*x6791))+((x6783*x6787))+(((-1.0)*r12*x6792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6793=((1.0)*sj5);
IkReal x6794=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x6793))+(((-1.0)*r11*x6794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6793))+(((-1.0)*r01*x6794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6793))+(((-1.0)*r11*x6794))))+IKsqr(((((-1.0)*r00*x6793))+(((-1.0)*r01*x6794))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6793))+(((-1.0)*r11*x6794))), ((((-1.0)*r00*x6793))+(((-1.0)*r01*x6794))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6795=IKsin(j0);
IkReal x6796=IKcos(j0);
IkReal x6797=((1.0)*cj5);
IkReal x6798=((1.0)*sj5);
IkReal x6799=((0.09465)*cj5);
IkReal x6800=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r00*x6798))+(((-1.0)*r01*x6797))+(((-1.0)*x6796)));
evalcond[1]=((((-1.0)*r10*x6798))+(((-1.0)*r11*x6797))+(((-1.0)*x6795)));
evalcond[2]=((((-1.0)*px))+(((-1.0)*r01*x6799))+(((0.10915)*x6795))+(((-1.0)*r00*x6800)));
evalcond[3]=((((-1.0)*r11*x6799))+(((-1.0)*py))+(((-1.0)*r10*x6800))+(((-0.10915)*x6796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6801=((1.0)*sj5);
IkReal x6802=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6801)));
j4eval[0]=x6802;
j4eval[1]=IKsign(x6802);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x6801))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6803=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6803;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6804=r21*r21;
IkReal x6805=cj5*cj5;
IkReal x6806=(r21*sj5);
IkReal x6807=(cj5*r20);
IkReal x6808=((((-1.0)*x6805*(r20*r20)))+(((2.0)*x6806*x6807))+(((-1.0)*x6804))+(((-1.0)*(r22*r22)))+((x6804*x6805)));
j4eval[0]=x6808;
j4eval[1]=((IKabs(((((-1.0)*x6807))+x6806)))+(IKabs(r22)));
j4eval[2]=IKsign(x6808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6809=r21*r21;
IkReal x6810=cj5*cj5;
IkReal x6811=(r21*sj5);
IkReal x6812=(cj5*r20);
CheckValue<IkReal> x6813=IKPowWithIntegerCheck(IKsign(((((2.0)*x6811*x6812))+((x6809*x6810))+(((-1.0)*x6810*(r20*r20)))+(((-1.0)*x6809))+(((-1.0)*(r22*r22))))),-1);
if(!x6813.valid){
continue;
}
CheckValue<IkReal> x6814 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x6812))+x6811)),IKFAST_ATAN2_MAGTHRESH);
if(!x6814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6813.value)))+(x6814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6815=IKsin(j4);
IkReal x6816=IKcos(j4);
IkReal x6817=(r11*sj5);
IkReal x6818=(r21*sj5);
IkReal x6819=(cj5*r00);
IkReal x6820=(cj5*r10);
IkReal x6821=(cj5*r20);
IkReal x6822=(r01*sj5);
IkReal x6823=((1.0)*x6816);
IkReal x6824=((1.0)*x6815);
evalcond[0]=(((x6815*x6818))+(((-1.0)*r22*x6823))+(((-1.0)*x6821*x6824)));
evalcond[1]=((((-1.0)*r02*x6824))+((x6816*x6819))+(((-1.0)*x6822*x6823)));
evalcond[2]=((((-1.0)*x6817*x6823))+((x6816*x6820))+(((-1.0)*r12*x6824)));
evalcond[3]=(sj0+((x6815*x6822))+(((-1.0)*r02*x6823))+(((-1.0)*x6819*x6824)));
evalcond[4]=((-1.0)+((x6816*x6821))+(((-1.0)*x6818*x6823))+(((-1.0)*r22*x6824)));
evalcond[5]=((((-1.0)*r12*x6823))+((x6815*x6817))+(((-1.0)*x6820*x6824))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6825=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6825.valid){
continue;
}
CheckValue<IkReal> x6826 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6825.value)))+(x6826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6827=IKsin(j4);
IkReal x6828=IKcos(j4);
IkReal x6829=(r11*sj5);
IkReal x6830=(r21*sj5);
IkReal x6831=(cj5*r00);
IkReal x6832=(cj5*r10);
IkReal x6833=(cj5*r20);
IkReal x6834=(r01*sj5);
IkReal x6835=((1.0)*x6828);
IkReal x6836=((1.0)*x6827);
evalcond[0]=((((-1.0)*x6833*x6836))+(((-1.0)*r22*x6835))+((x6827*x6830)));
evalcond[1]=((((-1.0)*r02*x6836))+((x6828*x6831))+(((-1.0)*x6834*x6835)));
evalcond[2]=((((-1.0)*r12*x6836))+((x6828*x6832))+(((-1.0)*x6829*x6835)));
evalcond[3]=(sj0+(((-1.0)*r02*x6835))+((x6827*x6834))+(((-1.0)*x6831*x6836)));
evalcond[4]=((-1.0)+((x6828*x6833))+(((-1.0)*r22*x6836))+(((-1.0)*x6830*x6835)));
evalcond[5]=((((-1.0)*r12*x6835))+(((-1.0)*x6832*x6836))+((x6827*x6829))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6837=((1.0)*sj5);
CheckValue<IkReal> x6838 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x6837))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6838.valid){
continue;
}
CheckValue<IkReal> x6839=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6837)))),-1);
if(!x6839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6838.value)+(((1.5707963267949)*(x6839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6840=IKsin(j4);
IkReal x6841=IKcos(j4);
IkReal x6842=(r11*sj5);
IkReal x6843=(r21*sj5);
IkReal x6844=(cj5*r00);
IkReal x6845=(cj5*r10);
IkReal x6846=(cj5*r20);
IkReal x6847=(r01*sj5);
IkReal x6848=((1.0)*x6841);
IkReal x6849=((1.0)*x6840);
evalcond[0]=((((-1.0)*r22*x6848))+(((-1.0)*x6846*x6849))+((x6840*x6843)));
evalcond[1]=((((-1.0)*x6847*x6848))+((x6841*x6844))+(((-1.0)*r02*x6849)));
evalcond[2]=(((x6841*x6845))+(((-1.0)*r12*x6849))+(((-1.0)*x6842*x6848)));
evalcond[3]=(sj0+(((-1.0)*x6844*x6849))+(((-1.0)*r02*x6848))+((x6840*x6847)));
evalcond[4]=((-1.0)+(((-1.0)*x6843*x6848))+(((-1.0)*r22*x6849))+((x6841*x6846)));
evalcond[5]=((((-1.0)*r12*x6848))+((x6840*x6842))+(((-1.0)*cj0))+(((-1.0)*x6845*x6849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((-0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6850=IKsin(j0);
IkReal x6851=IKcos(j0);
evalcond[0]=((((0.10915)*x6850))+(((-1.0)*px))+(((-0.39225)*x6851)));
evalcond[1]=((((-0.10915)*x6851))+(((-1.0)*py))+(((-0.39225)*x6850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6852=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6852;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6853=cj5*cj5;
IkReal x6854=((1.0)*r21);
IkReal x6855=(cj5*sj5);
IkReal x6856=((1.0)*r20);
IkReal x6857=((((-1.0)*r00*x6854*x6855))+(((-1.0)*r01*x6853*x6854))+((r01*r21))+(((-1.0)*r01*x6855*x6856))+((r02*r22))+((r00*r20*x6853)));
j4eval[0]=x6857;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6856)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6858=cj5*cj5;
IkReal x6859=(r21*sj5);
IkReal x6860=(r11*r21);
IkReal x6861=((1.0)*cj5*r20);
IkReal x6862=(((r12*r22))+(((-1.0)*x6858*x6860))+x6860+(((-1.0)*r11*sj5*x6861))+((r10*r20*x6858))+(((-1.0)*cj5*r10*x6859)));
j4eval[0]=x6862;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6859))+(((-1.0)*sj0*x6861))))));
j4eval[2]=IKsign(x6862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6863=cj5*cj5;
IkReal x6864=(r21*sj5);
IkReal x6865=(r11*r21);
IkReal x6866=((1.0)*cj5*r20);
CheckValue<IkReal> x6867 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6864))+(((-1.0)*sj0*x6866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6867.valid){
continue;
}
CheckValue<IkReal> x6868=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6863*x6865))+((r12*r22))+(((-1.0)*cj5*r10*x6864))+x6865+(((-1.0)*r11*sj5*x6866))+((r10*r20*x6863)))),-1);
if(!x6868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6867.value)+(((1.5707963267949)*(x6868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6869=IKsin(j4);
IkReal x6870=IKcos(j4);
IkReal x6871=(r11*sj5);
IkReal x6872=(cj5*r00);
IkReal x6873=(cj5*r10);
IkReal x6874=(r21*sj5);
IkReal x6875=(cj5*r20);
IkReal x6876=(r01*sj5);
IkReal x6877=((1.0)*x6870);
IkReal x6878=((1.0)*x6869);
evalcond[0]=((((-1.0)*x6875*x6878))+(((-1.0)*r22*x6877))+((x6869*x6874)));
evalcond[1]=(((x6870*x6875))+(((-1.0)*x6874*x6877))+(((-1.0)*r22*x6878)));
evalcond[2]=(sj0+(((-1.0)*x6872*x6878))+(((-1.0)*r02*x6877))+((x6869*x6876)));
evalcond[3]=((((-1.0)*x6876*x6877))+((x6870*x6872))+cj0+(((-1.0)*r02*x6878)));
evalcond[4]=((((-1.0)*x6871*x6877))+sj0+((x6870*x6873))+(((-1.0)*r12*x6878)));
evalcond[5]=((((-1.0)*r12*x6877))+((x6869*x6871))+(((-1.0)*x6873*x6878))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6879=cj5*cj5;
IkReal x6880=((1.0)*r21);
IkReal x6881=(cj5*sj5);
IkReal x6882=((1.0)*r20);
CheckValue<IkReal> x6883 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6883.valid){
continue;
}
CheckValue<IkReal> x6884=IKPowWithIntegerCheck(IKsign((((r00*r20*x6879))+(((-1.0)*r00*x6880*x6881))+((r01*r21))+(((-1.0)*r01*x6881*x6882))+(((-1.0)*r01*x6879*x6880))+((r02*r22)))),-1);
if(!x6884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6883.value)+(((1.5707963267949)*(x6884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6885=IKsin(j4);
IkReal x6886=IKcos(j4);
IkReal x6887=(r11*sj5);
IkReal x6888=(cj5*r00);
IkReal x6889=(cj5*r10);
IkReal x6890=(r21*sj5);
IkReal x6891=(cj5*r20);
IkReal x6892=(r01*sj5);
IkReal x6893=((1.0)*x6886);
IkReal x6894=((1.0)*x6885);
evalcond[0]=((((-1.0)*x6891*x6894))+(((-1.0)*r22*x6893))+((x6885*x6890)));
evalcond[1]=(((x6886*x6891))+(((-1.0)*x6890*x6893))+(((-1.0)*r22*x6894)));
evalcond[2]=(sj0+(((-1.0)*x6888*x6894))+(((-1.0)*r02*x6893))+((x6885*x6892)));
evalcond[3]=(cj0+(((-1.0)*x6892*x6893))+(((-1.0)*r02*x6894))+((x6886*x6888)));
evalcond[4]=(sj0+(((-1.0)*r12*x6894))+((x6886*x6889))+(((-1.0)*x6887*x6893)));
evalcond[5]=((((-1.0)*x6889*x6894))+(((-1.0)*r12*x6893))+((x6885*x6887))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6895=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6895.valid){
continue;
}
CheckValue<IkReal> x6896 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6895.value)))+(x6896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6897=IKsin(j4);
IkReal x6898=IKcos(j4);
IkReal x6899=(r11*sj5);
IkReal x6900=(cj5*r00);
IkReal x6901=(cj5*r10);
IkReal x6902=(r21*sj5);
IkReal x6903=(cj5*r20);
IkReal x6904=(r01*sj5);
IkReal x6905=((1.0)*x6898);
IkReal x6906=((1.0)*x6897);
evalcond[0]=(((x6897*x6902))+(((-1.0)*r22*x6905))+(((-1.0)*x6903*x6906)));
evalcond[1]=((((-1.0)*r22*x6906))+(((-1.0)*x6902*x6905))+((x6898*x6903)));
evalcond[2]=((((-1.0)*r02*x6905))+((x6897*x6904))+sj0+(((-1.0)*x6900*x6906)));
evalcond[3]=((((-1.0)*r02*x6906))+(((-1.0)*x6904*x6905))+cj0+((x6898*x6900)));
evalcond[4]=(sj0+(((-1.0)*r12*x6906))+(((-1.0)*x6899*x6905))+((x6898*x6901)));
evalcond[5]=((((-1.0)*r12*x6905))+((x6897*x6899))+(((-1.0)*x6901*x6906))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((-0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.160559264620033)*px))+(((1.20217186450501)*py))), ((((-0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6907=IKsin(j0);
IkReal x6908=IKcos(j0);
evalcond[0]=((((0.81725)*x6908))+(((-1.0)*px))+(((0.10915)*x6907)));
evalcond[1]=((((0.81725)*x6907))+(((-0.10915)*x6908))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6909=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6909;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6910=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6910;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6911=cj5*cj5;
IkReal x6912=((1.0)*r21);
IkReal x6913=(cj5*r20);
IkReal x6914=((((-1.0)*r01*sj5*x6913))+(((-1.0)*cj5*r00*sj5*x6912))+((r01*r21))+((r00*r20*x6911))+((r02*r22))+(((-1.0)*r01*x6911*x6912)));
j4eval[0]=x6914;
j4eval[1]=IKsign(x6914);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6912))+((sj0*x6913))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6915=cj5*cj5;
IkReal x6916=((1.0)*r21);
IkReal x6917=(cj5*r20);
CheckValue<IkReal> x6918 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6916))+((sj0*x6917)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6918.valid){
continue;
}
CheckValue<IkReal> x6919=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x6917))+(((-1.0)*r01*x6915*x6916))+(((-1.0)*cj5*r00*sj5*x6916))+((r01*r21))+((r00*r20*x6915))+((r02*r22)))),-1);
if(!x6919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6918.value)+(((1.5707963267949)*(x6919.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6920=IKsin(j4);
IkReal x6921=IKcos(j4);
IkReal x6922=((1.0)*cj0);
IkReal x6923=(cj5*r00);
IkReal x6924=(r11*sj5);
IkReal x6925=(cj5*r10);
IkReal x6926=(r21*sj5);
IkReal x6927=(cj5*r20);
IkReal x6928=(r01*sj5);
IkReal x6929=((1.0)*x6921);
IkReal x6930=((1.0)*x6920);
evalcond[0]=((((-1.0)*r22*x6929))+(((-1.0)*x6927*x6930))+((x6920*x6926)));
evalcond[1]=(((x6921*x6927))+(((-1.0)*r22*x6930))+(((-1.0)*x6926*x6929)));
evalcond[2]=(sj0+(((-1.0)*r02*x6929))+((x6920*x6928))+(((-1.0)*x6923*x6930)));
evalcond[3]=((((-1.0)*x6925*x6930))+(((-1.0)*r12*x6929))+(((-1.0)*x6922))+((x6920*x6924)));
evalcond[4]=(((x6921*x6923))+(((-1.0)*r02*x6930))+(((-1.0)*x6928*x6929))+(((-1.0)*x6922)));
evalcond[5]=(((x6921*x6925))+(((-1.0)*sj0))+(((-1.0)*x6924*x6929))+(((-1.0)*r12*x6930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6931=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6931.valid){
continue;
}
CheckValue<IkReal> x6932 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6931.value)))+(x6932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6933=IKsin(j4);
IkReal x6934=IKcos(j4);
IkReal x6935=((1.0)*cj0);
IkReal x6936=(cj5*r00);
IkReal x6937=(r11*sj5);
IkReal x6938=(cj5*r10);
IkReal x6939=(r21*sj5);
IkReal x6940=(cj5*r20);
IkReal x6941=(r01*sj5);
IkReal x6942=((1.0)*x6934);
IkReal x6943=((1.0)*x6933);
evalcond[0]=(((x6933*x6939))+(((-1.0)*r22*x6942))+(((-1.0)*x6940*x6943)));
evalcond[1]=(((x6934*x6940))+(((-1.0)*r22*x6943))+(((-1.0)*x6939*x6942)));
evalcond[2]=(sj0+((x6933*x6941))+(((-1.0)*r02*x6942))+(((-1.0)*x6936*x6943)));
evalcond[3]=((((-1.0)*r12*x6942))+((x6933*x6937))+(((-1.0)*x6938*x6943))+(((-1.0)*x6935)));
evalcond[4]=((((-1.0)*x6941*x6942))+(((-1.0)*r02*x6943))+(((-1.0)*x6935))+((x6934*x6936)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6943))+(((-1.0)*x6937*x6942))+((x6934*x6938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6944=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6944.valid){
continue;
}
CheckValue<IkReal> x6945 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6944.value)))+(x6945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6946=IKsin(j4);
IkReal x6947=IKcos(j4);
IkReal x6948=((1.0)*cj0);
IkReal x6949=(cj5*r00);
IkReal x6950=(r11*sj5);
IkReal x6951=(cj5*r10);
IkReal x6952=(r21*sj5);
IkReal x6953=(cj5*r20);
IkReal x6954=(r01*sj5);
IkReal x6955=((1.0)*x6947);
IkReal x6956=((1.0)*x6946);
evalcond[0]=(((x6946*x6952))+(((-1.0)*r22*x6955))+(((-1.0)*x6953*x6956)));
evalcond[1]=((((-1.0)*x6952*x6955))+((x6947*x6953))+(((-1.0)*r22*x6956)));
evalcond[2]=(sj0+((x6946*x6954))+(((-1.0)*r02*x6955))+(((-1.0)*x6949*x6956)));
evalcond[3]=((((-1.0)*x6951*x6956))+(((-1.0)*r12*x6955))+(((-1.0)*x6948))+((x6946*x6950)));
evalcond[4]=((((-1.0)*x6948))+(((-1.0)*r02*x6956))+((x6947*x6949))+(((-1.0)*x6954*x6955)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6950*x6955))+(((-1.0)*r12*x6956))+((x6947*x6951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4050211434602)*px))+(((2.52189136462044)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4050211434602)*px))+(((2.52189136462044)*py))))+IKsqr(((((2.52189136462044)*px))+(((-8.4050211434602)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4050211434602)*px))+(((2.52189136462044)*py))), ((((2.52189136462044)*px))+(((-8.4050211434602)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6957=IKsin(j0);
IkReal x6958=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.03275)*x6958))+(((0.10915)*x6957)));
evalcond[1]=((((-1.0)*py))+(((0.03275)*x6957))+(((-0.10915)*x6958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6959=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6959;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6959);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6960=cj5*cj5;
IkReal x6961=((1.0)*r21);
IkReal x6962=(cj5*sj5);
IkReal x6963=((1.0)*r20);
IkReal x6964=((((-1.0)*r01*x6962*x6963))+(((-1.0)*r00*x6961*x6962))+((r01*r21))+((r00*r20*x6960))+((r02*r22))+(((-1.0)*r01*x6960*x6961)));
j4eval[0]=x6964;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6963)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6965=cj5*cj5;
IkReal x6966=(r21*sj5);
IkReal x6967=(r11*r21);
IkReal x6968=((1.0)*cj5*r20);
IkReal x6969=((((-1.0)*cj5*r10*x6966))+((r12*r22))+(((-1.0)*r11*sj5*x6968))+(((-1.0)*x6965*x6967))+x6967+((r10*r20*x6965)));
j4eval[0]=x6969;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6966))+(((-1.0)*sj0*x6968))))));
j4eval[2]=IKsign(x6969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6970=cj5*cj5;
IkReal x6971=(r21*sj5);
IkReal x6972=(r11*r21);
IkReal x6973=((1.0)*cj5*r20);
CheckValue<IkReal> x6974 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6971))+(((-1.0)*sj0*x6973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6974.valid){
continue;
}
CheckValue<IkReal> x6975=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6970*x6972))+((r10*r20*x6970))+(((-1.0)*cj5*r10*x6971))+(((-1.0)*r11*sj5*x6973))+((r12*r22))+x6972)),-1);
if(!x6975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6974.value)+(((1.5707963267949)*(x6975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6976=IKsin(j4);
IkReal x6977=IKcos(j4);
IkReal x6978=(r11*sj5);
IkReal x6979=(cj5*r00);
IkReal x6980=(cj5*r10);
IkReal x6981=(r21*sj5);
IkReal x6982=(cj5*r20);
IkReal x6983=(r01*sj5);
IkReal x6984=((1.0)*x6977);
IkReal x6985=((1.0)*x6976);
evalcond[0]=((((-1.0)*r22*x6984))+((x6976*x6981))+(((-1.0)*x6982*x6985)));
evalcond[1]=((((-1.0)*r22*x6985))+((x6977*x6982))+(((-1.0)*x6981*x6984)));
evalcond[2]=(sj0+(((-1.0)*x6979*x6985))+((x6976*x6983))+(((-1.0)*r02*x6984)));
evalcond[3]=(cj0+(((-1.0)*x6983*x6984))+((x6977*x6979))+(((-1.0)*r02*x6985)));
evalcond[4]=((((-1.0)*x6978*x6984))+sj0+(((-1.0)*r12*x6985))+((x6977*x6980)));
evalcond[5]=((((-1.0)*r12*x6984))+((x6976*x6978))+(((-1.0)*x6980*x6985))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6986=cj5*cj5;
IkReal x6987=((1.0)*r21);
IkReal x6988=(cj5*sj5);
IkReal x6989=((1.0)*r20);
CheckValue<IkReal> x6990 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6989))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6990.valid){
continue;
}
CheckValue<IkReal> x6991=IKPowWithIntegerCheck(IKsign((((r00*r20*x6986))+((r01*r21))+(((-1.0)*r01*x6988*x6989))+(((-1.0)*r01*x6986*x6987))+(((-1.0)*r00*x6987*x6988))+((r02*r22)))),-1);
if(!x6991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6990.value)+(((1.5707963267949)*(x6991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6992=IKsin(j4);
IkReal x6993=IKcos(j4);
IkReal x6994=(r11*sj5);
IkReal x6995=(cj5*r00);
IkReal x6996=(cj5*r10);
IkReal x6997=(r21*sj5);
IkReal x6998=(cj5*r20);
IkReal x6999=(r01*sj5);
IkReal x7000=((1.0)*x6993);
IkReal x7001=((1.0)*x6992);
evalcond[0]=((((-1.0)*r22*x7000))+((x6992*x6997))+(((-1.0)*x6998*x7001)));
evalcond[1]=((((-1.0)*r22*x7001))+((x6993*x6998))+(((-1.0)*x6997*x7000)));
evalcond[2]=((((-1.0)*r02*x7000))+sj0+((x6992*x6999))+(((-1.0)*x6995*x7001)));
evalcond[3]=((((-1.0)*r02*x7001))+cj0+(((-1.0)*x6999*x7000))+((x6993*x6995)));
evalcond[4]=((((-1.0)*r12*x7001))+sj0+((x6993*x6996))+(((-1.0)*x6994*x7000)));
evalcond[5]=((((-1.0)*r12*x7000))+((x6992*x6994))+(((-1.0)*x6996*x7001))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7002=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7002.valid){
continue;
}
CheckValue<IkReal> x7003 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7002.value)))+(x7003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7004=IKsin(j4);
IkReal x7005=IKcos(j4);
IkReal x7006=(r11*sj5);
IkReal x7007=(cj5*r00);
IkReal x7008=(cj5*r10);
IkReal x7009=(r21*sj5);
IkReal x7010=(cj5*r20);
IkReal x7011=(r01*sj5);
IkReal x7012=((1.0)*x7005);
IkReal x7013=((1.0)*x7004);
evalcond[0]=((((-1.0)*r22*x7012))+(((-1.0)*x7010*x7013))+((x7004*x7009)));
evalcond[1]=((((-1.0)*x7009*x7012))+(((-1.0)*r22*x7013))+((x7005*x7010)));
evalcond[2]=(sj0+((x7004*x7011))+(((-1.0)*x7007*x7013))+(((-1.0)*r02*x7012)));
evalcond[3]=((((-1.0)*x7011*x7012))+cj0+((x7005*x7007))+(((-1.0)*r02*x7013)));
evalcond[4]=(sj0+((x7005*x7008))+(((-1.0)*r12*x7013))+(((-1.0)*x7006*x7012)));
evalcond[5]=((((-1.0)*x7008*x7013))+((x7004*x7006))+(((-1.0)*r12*x7012))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7014=((1.0)*sj5);
IkReal x7015=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7015))+(((-1.0)*r10*x7014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7014))+(((-1.0)*r01*x7015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7015))+(((-1.0)*r10*x7014))))+IKsqr(((((-1.0)*r00*x7014))+(((-1.0)*r01*x7015))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7015))+(((-1.0)*r10*x7014))), ((((-1.0)*r00*x7014))+(((-1.0)*r01*x7015))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7016=IKsin(j0);
IkReal x7017=IKcos(j0);
IkReal x7018=((1.0)*cj5);
IkReal x7019=((1.0)*sj5);
IkReal x7020=((0.09465)*cj5);
IkReal x7021=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r00*x7019))+(((-1.0)*r01*x7018))+(((-1.0)*x7017)));
evalcond[1]=((((-1.0)*r11*x7018))+(((-1.0)*r10*x7019))+(((-1.0)*x7016)));
evalcond[2]=((((-1.0)*px))+(((-1.0)*r00*x7021))+(((-1.0)*r01*x7020))+(((0.10915)*x7016)));
evalcond[3]=((((-0.10915)*x7017))+(((-1.0)*r11*x7020))+(((-1.0)*r10*x7021))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7022=((1.0)*sj5);
IkReal x7023=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7022)));
j4eval[0]=x7023;
j4eval[1]=IKsign(x7023);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7022))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7024=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7024;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7025=r21*r21;
IkReal x7026=cj5*cj5;
IkReal x7027=(r21*sj5);
IkReal x7028=(cj5*r20);
IkReal x7029=((((-1.0)*x7026*(r20*r20)))+(((-1.0)*x7025))+(((2.0)*x7027*x7028))+(((-1.0)*(r22*r22)))+((x7025*x7026)));
j4eval[0]=x7029;
j4eval[1]=((IKabs((x7027+(((-1.0)*x7028)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7029);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7030=r21*r21;
IkReal x7031=cj5*cj5;
IkReal x7032=(r21*sj5);
IkReal x7033=(cj5*r20);
CheckValue<IkReal> x7034=IKPowWithIntegerCheck(IKsign((((x7030*x7031))+(((-1.0)*x7030))+(((-1.0)*x7031*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x7032*x7033)))),-1);
if(!x7034.valid){
continue;
}
CheckValue<IkReal> x7035 = IKatan2WithCheck(IkReal(r22),IkReal((x7032+(((-1.0)*x7033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7034.value)))+(x7035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7036=IKsin(j4);
IkReal x7037=IKcos(j4);
IkReal x7038=(r11*sj5);
IkReal x7039=(r21*sj5);
IkReal x7040=(cj5*r00);
IkReal x7041=(cj5*r10);
IkReal x7042=(cj5*r20);
IkReal x7043=(r01*sj5);
IkReal x7044=((1.0)*x7037);
IkReal x7045=((1.0)*x7036);
evalcond[0]=((((-1.0)*r22*x7044))+(((-1.0)*x7042*x7045))+((x7036*x7039)));
evalcond[1]=((((-1.0)*r02*x7045))+(((-1.0)*x7043*x7044))+((x7037*x7040)));
evalcond[2]=((((-1.0)*r12*x7045))+((x7037*x7041))+(((-1.0)*x7038*x7044)));
evalcond[3]=(sj0+(((-1.0)*r02*x7044))+(((-1.0)*x7040*x7045))+((x7036*x7043)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7045))+((x7037*x7042))+(((-1.0)*x7039*x7044)));
evalcond[5]=((((-1.0)*r12*x7044))+((x7036*x7038))+(((-1.0)*x7041*x7045))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7046=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7046.valid){
continue;
}
CheckValue<IkReal> x7047 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7046.value)))+(x7047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7048=IKsin(j4);
IkReal x7049=IKcos(j4);
IkReal x7050=(r11*sj5);
IkReal x7051=(r21*sj5);
IkReal x7052=(cj5*r00);
IkReal x7053=(cj5*r10);
IkReal x7054=(cj5*r20);
IkReal x7055=(r01*sj5);
IkReal x7056=((1.0)*x7049);
IkReal x7057=((1.0)*x7048);
evalcond[0]=((((-1.0)*x7054*x7057))+(((-1.0)*r22*x7056))+((x7048*x7051)));
evalcond[1]=((((-1.0)*x7055*x7056))+((x7049*x7052))+(((-1.0)*r02*x7057)));
evalcond[2]=((((-1.0)*r12*x7057))+((x7049*x7053))+(((-1.0)*x7050*x7056)));
evalcond[3]=(sj0+(((-1.0)*x7052*x7057))+((x7048*x7055))+(((-1.0)*r02*x7056)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7057))+(((-1.0)*x7051*x7056))+((x7049*x7054)));
evalcond[5]=((((-1.0)*x7053*x7057))+(((-1.0)*r12*x7056))+((x7048*x7050))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7058=((1.0)*sj5);
CheckValue<IkReal> x7059=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7058)))),-1);
if(!x7059.valid){
continue;
}
CheckValue<IkReal> x7060 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7058))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7059.value)))+(x7060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7061=IKsin(j4);
IkReal x7062=IKcos(j4);
IkReal x7063=(r11*sj5);
IkReal x7064=(r21*sj5);
IkReal x7065=(cj5*r00);
IkReal x7066=(cj5*r10);
IkReal x7067=(cj5*r20);
IkReal x7068=(r01*sj5);
IkReal x7069=((1.0)*x7062);
IkReal x7070=((1.0)*x7061);
evalcond[0]=((((-1.0)*x7067*x7070))+((x7061*x7064))+(((-1.0)*r22*x7069)));
evalcond[1]=(((x7062*x7065))+(((-1.0)*x7068*x7069))+(((-1.0)*r02*x7070)));
evalcond[2]=(((x7062*x7066))+(((-1.0)*x7063*x7069))+(((-1.0)*r12*x7070)));
evalcond[3]=(sj0+(((-1.0)*x7065*x7070))+((x7061*x7068))+(((-1.0)*r02*x7069)));
evalcond[4]=((-1.0)+((x7062*x7067))+(((-1.0)*x7064*x7069))+(((-1.0)*r22*x7070)));
evalcond[5]=((((-1.0)*x7066*x7070))+(((-1.0)*r12*x7069))+((x7061*x7063))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((-0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7071=IKsin(j0);
IkReal x7072=IKcos(j0);
evalcond[0]=((((0.10915)*x7071))+(((-1.0)*px))+(((-0.39225)*x7072)));
evalcond[1]=((((-0.10915)*x7072))+(((-1.0)*py))+(((-0.39225)*x7071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7073=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7073;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7074=cj5*cj5;
IkReal x7075=((1.0)*r21);
IkReal x7076=(cj5*sj5);
IkReal x7077=((1.0)*r20);
IkReal x7078=((((-1.0)*r01*x7074*x7075))+(((-1.0)*r01*x7076*x7077))+((r01*r21))+(((-1.0)*r00*x7075*x7076))+((r02*r22))+((r00*r20*x7074)));
j4eval[0]=x7078;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7077))))));
j4eval[2]=IKsign(x7078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7079=cj5*cj5;
IkReal x7080=(r21*sj5);
IkReal x7081=(r11*r21);
IkReal x7082=((1.0)*cj5*r20);
IkReal x7083=(x7081+(((-1.0)*cj5*r10*x7080))+((r10*r20*x7079))+((r12*r22))+(((-1.0)*r11*sj5*x7082))+(((-1.0)*x7079*x7081)));
j4eval[0]=x7083;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7080))+(((-1.0)*sj0*x7082))))));
j4eval[2]=IKsign(x7083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7084=cj5*cj5;
IkReal x7085=(r21*sj5);
IkReal x7086=(r11*r21);
IkReal x7087=((1.0)*cj5*r20);
CheckValue<IkReal> x7088 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7085))+(((-1.0)*sj0*x7087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7088.valid){
continue;
}
CheckValue<IkReal> x7089=IKPowWithIntegerCheck(IKsign((x7086+(((-1.0)*cj5*r10*x7085))+(((-1.0)*x7084*x7086))+((r12*r22))+((r10*r20*x7084))+(((-1.0)*r11*sj5*x7087)))),-1);
if(!x7089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7088.value)+(((1.5707963267949)*(x7089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7090=IKsin(j4);
IkReal x7091=IKcos(j4);
IkReal x7092=(r11*sj5);
IkReal x7093=(cj5*r00);
IkReal x7094=(cj5*r10);
IkReal x7095=(r21*sj5);
IkReal x7096=(cj5*r20);
IkReal x7097=(r01*sj5);
IkReal x7098=((1.0)*x7091);
IkReal x7099=((1.0)*x7090);
evalcond[0]=((((-1.0)*x7096*x7099))+((x7090*x7095))+(((-1.0)*r22*x7098)));
evalcond[1]=((((-1.0)*x7095*x7098))+(((-1.0)*r22*x7099))+((x7091*x7096)));
evalcond[2]=((((-1.0)*x7093*x7099))+sj0+((x7090*x7097))+(((-1.0)*r02*x7098)));
evalcond[3]=(cj0+(((-1.0)*x7097*x7098))+((x7091*x7093))+(((-1.0)*r02*x7099)));
evalcond[4]=(sj0+(((-1.0)*x7092*x7098))+(((-1.0)*r12*x7099))+((x7091*x7094)));
evalcond[5]=((((-1.0)*x7094*x7099))+(((-1.0)*r12*x7098))+((x7090*x7092))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7100=cj5*cj5;
IkReal x7101=((1.0)*r21);
IkReal x7102=(cj5*sj5);
IkReal x7103=((1.0)*r20);
CheckValue<IkReal> x7104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7100*x7101))+((r01*r21))+(((-1.0)*r00*x7101*x7102))+((r00*r20*x7100))+((r02*r22))+(((-1.0)*r01*x7102*x7103)))),-1);
if(!x7104.valid){
continue;
}
CheckValue<IkReal> x7105 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7103)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7104.value)))+(x7105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7106=IKsin(j4);
IkReal x7107=IKcos(j4);
IkReal x7108=(r11*sj5);
IkReal x7109=(cj5*r00);
IkReal x7110=(cj5*r10);
IkReal x7111=(r21*sj5);
IkReal x7112=(cj5*r20);
IkReal x7113=(r01*sj5);
IkReal x7114=((1.0)*x7107);
IkReal x7115=((1.0)*x7106);
evalcond[0]=((((-1.0)*x7112*x7115))+(((-1.0)*r22*x7114))+((x7106*x7111)));
evalcond[1]=((((-1.0)*x7111*x7114))+(((-1.0)*r22*x7115))+((x7107*x7112)));
evalcond[2]=(sj0+(((-1.0)*r02*x7114))+(((-1.0)*x7109*x7115))+((x7106*x7113)));
evalcond[3]=(cj0+(((-1.0)*r02*x7115))+((x7107*x7109))+(((-1.0)*x7113*x7114)));
evalcond[4]=(sj0+(((-1.0)*r12*x7115))+((x7107*x7110))+(((-1.0)*x7108*x7114)));
evalcond[5]=((((-1.0)*x7110*x7115))+(((-1.0)*r12*x7114))+((x7106*x7108))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7116.valid){
continue;
}
CheckValue<IkReal> x7117 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7116.value)))+(x7117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7118=IKsin(j4);
IkReal x7119=IKcos(j4);
IkReal x7120=(r11*sj5);
IkReal x7121=(cj5*r00);
IkReal x7122=(cj5*r10);
IkReal x7123=(r21*sj5);
IkReal x7124=(cj5*r20);
IkReal x7125=(r01*sj5);
IkReal x7126=((1.0)*x7119);
IkReal x7127=((1.0)*x7118);
evalcond[0]=((((-1.0)*r22*x7126))+((x7118*x7123))+(((-1.0)*x7124*x7127)));
evalcond[1]=((((-1.0)*x7123*x7126))+((x7119*x7124))+(((-1.0)*r22*x7127)));
evalcond[2]=(sj0+(((-1.0)*x7121*x7127))+((x7118*x7125))+(((-1.0)*r02*x7126)));
evalcond[3]=(cj0+((x7119*x7121))+(((-1.0)*r02*x7127))+(((-1.0)*x7125*x7126)));
evalcond[4]=((((-1.0)*x7120*x7126))+sj0+((x7119*x7122))+(((-1.0)*r12*x7127)));
evalcond[5]=((((-1.0)*x7122*x7127))+((x7118*x7120))+(((-1.0)*r12*x7126))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7128=IKsin(j0);
IkReal x7129=IKcos(j0);
IkReal x7130=((1.0)*cj5);
IkReal x7131=((1.0)*sj5);
IkReal x7132=((0.09465)*cj5);
IkReal x7133=((0.09465)*sj5);
evalcond[0]=(x7129+(((-1.0)*r01*x7130))+(((-1.0)*r00*x7131)));
evalcond[1]=(x7128+(((-1.0)*r10*x7131))+(((-1.0)*r11*x7130)));
evalcond[2]=((((-1.0)*r01*x7132))+(((-1.0)*r00*x7133))+(((-1.0)*px))+(((0.10915)*x7128)));
evalcond[3]=((((-1.0)*r10*x7133))+(((-1.0)*r11*x7132))+(((-0.10915)*x7129))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7134=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7134;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7135=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7135;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7136=cj5*cj5;
IkReal x7137=r21*r21;
IkReal x7138=(r21*sj5);
IkReal x7139=(cj5*r20);
IkReal x7140=(x7137+((x7136*(r20*r20)))+(((-2.0)*x7138*x7139))+(r22*r22)+(((-1.0)*x7136*x7137)));
j4eval[0]=x7140;
j4eval[1]=IKsign(x7140);
j4eval[2]=((IKabs((x7138+(((-1.0)*x7139)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7141=cj5*cj5;
IkReal x7142=r21*r21;
IkReal x7143=(r21*sj5);
IkReal x7144=(cj5*r20);
CheckValue<IkReal> x7145 = IKatan2WithCheck(IkReal(r22),IkReal((x7143+(((-1.0)*x7144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7145.valid){
continue;
}
CheckValue<IkReal> x7146=IKPowWithIntegerCheck(IKsign((x7142+(r22*r22)+(((-1.0)*x7141*x7142))+(((-2.0)*x7143*x7144))+((x7141*(r20*r20))))),-1);
if(!x7146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7145.value)+(((1.5707963267949)*(x7146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7147=IKsin(j4);
IkReal x7148=IKcos(j4);
IkReal x7149=(r11*sj5);
IkReal x7150=(r21*sj5);
IkReal x7151=(cj5*r00);
IkReal x7152=(cj5*r10);
IkReal x7153=(cj5*r20);
IkReal x7154=(r01*sj5);
IkReal x7155=((1.0)*x7148);
IkReal x7156=((1.0)*x7147);
evalcond[0]=((((-1.0)*x7153*x7156))+(((-1.0)*r22*x7155))+((x7147*x7150)));
evalcond[1]=((((-1.0)*x7154*x7155))+((x7148*x7151))+(((-1.0)*r02*x7156)));
evalcond[2]=((((-1.0)*r12*x7156))+(((-1.0)*x7149*x7155))+((x7148*x7152)));
evalcond[3]=(sj0+(((-1.0)*x7151*x7156))+((x7147*x7154))+(((-1.0)*r02*x7155)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7156))+((x7148*x7153))+(((-1.0)*x7150*x7155)));
evalcond[5]=((((-1.0)*r12*x7155))+(((-1.0)*x7152*x7156))+((x7147*x7149))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7157=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7157.valid){
continue;
}
CheckValue<IkReal> x7158 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7157.value)))+(x7158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7159=IKsin(j4);
IkReal x7160=IKcos(j4);
IkReal x7161=(r11*sj5);
IkReal x7162=(r21*sj5);
IkReal x7163=(cj5*r00);
IkReal x7164=(cj5*r10);
IkReal x7165=(cj5*r20);
IkReal x7166=(r01*sj5);
IkReal x7167=((1.0)*x7160);
IkReal x7168=((1.0)*x7159);
evalcond[0]=((((-1.0)*r22*x7167))+((x7159*x7162))+(((-1.0)*x7165*x7168)));
evalcond[1]=((((-1.0)*r02*x7168))+(((-1.0)*x7166*x7167))+((x7160*x7163)));
evalcond[2]=((((-1.0)*x7161*x7167))+((x7160*x7164))+(((-1.0)*r12*x7168)));
evalcond[3]=((((-1.0)*r02*x7167))+sj0+(((-1.0)*x7163*x7168))+((x7159*x7166)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7168))+((x7160*x7165))+(((-1.0)*x7162*x7167)));
evalcond[5]=(((x7159*x7161))+(((-1.0)*x7164*x7168))+(((-1.0)*r12*x7167))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7169 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7169.valid){
continue;
}
CheckValue<IkReal> x7170=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7169.value)+(((1.5707963267949)*(x7170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7171=IKsin(j4);
IkReal x7172=IKcos(j4);
IkReal x7173=(r11*sj5);
IkReal x7174=(r21*sj5);
IkReal x7175=(cj5*r00);
IkReal x7176=(cj5*r10);
IkReal x7177=(cj5*r20);
IkReal x7178=(r01*sj5);
IkReal x7179=((1.0)*x7172);
IkReal x7180=((1.0)*x7171);
evalcond[0]=((((-1.0)*x7177*x7180))+(((-1.0)*r22*x7179))+((x7171*x7174)));
evalcond[1]=((((-1.0)*x7178*x7179))+((x7172*x7175))+(((-1.0)*r02*x7180)));
evalcond[2]=((((-1.0)*x7173*x7179))+((x7172*x7176))+(((-1.0)*r12*x7180)));
evalcond[3]=(sj0+(((-1.0)*x7175*x7180))+(((-1.0)*r02*x7179))+((x7171*x7178)));
evalcond[4]=((1.0)+(((-1.0)*x7174*x7179))+((x7172*x7177))+(((-1.0)*r22*x7180)));
evalcond[5]=((((-1.0)*r12*x7179))+((x7171*x7173))+(((-1.0)*cj0))+(((-1.0)*x7176*x7180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((2.36617629259053)*py))))+IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((2.36617629259053)*py))), ((((2.36617629259053)*px))+(((-0.658427386453172)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7181=IKsin(j0);
IkReal x7182=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.39225)*x7182))+(((0.10915)*x7181)));
evalcond[1]=((((-1.0)*py))+(((0.39225)*x7181))+(((-0.10915)*x7182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7183=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7183;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7183);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7184=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7184;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7185=cj5*cj5;
IkReal x7186=((1.0)*r21);
IkReal x7187=(cj5*r20);
IkReal x7188=((((-1.0)*cj5*r00*sj5*x7186))+((r01*r21))+(((-1.0)*r01*sj5*x7187))+(((-1.0)*r01*x7185*x7186))+((r02*r22))+((r00*r20*x7185)));
j4eval[0]=x7188;
j4eval[1]=IKsign(x7188);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x7186))+((sj0*x7187))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7189=cj5*cj5;
IkReal x7190=((1.0)*r21);
IkReal x7191=(cj5*r20);
CheckValue<IkReal> x7192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7189*x7190))+(((-1.0)*cj5*r00*sj5*x7190))+(((-1.0)*r01*sj5*x7191))+((r01*r21))+((r02*r22))+((r00*r20*x7189)))),-1);
if(!x7192.valid){
continue;
}
CheckValue<IkReal> x7193 = IKatan2WithCheck(IkReal((((sj0*x7191))+(((-1.0)*sj0*sj5*x7190)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7192.value)))+(x7193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7194=IKsin(j4);
IkReal x7195=IKcos(j4);
IkReal x7196=((1.0)*cj0);
IkReal x7197=(cj5*r00);
IkReal x7198=(r11*sj5);
IkReal x7199=(cj5*r10);
IkReal x7200=(r21*sj5);
IkReal x7201=(cj5*r20);
IkReal x7202=(r01*sj5);
IkReal x7203=((1.0)*x7195);
IkReal x7204=((1.0)*x7194);
evalcond[0]=(((x7194*x7200))+(((-1.0)*x7201*x7204))+(((-1.0)*r22*x7203)));
evalcond[1]=(((x7195*x7201))+(((-1.0)*x7200*x7203))+(((-1.0)*r22*x7204)));
evalcond[2]=(sj0+((x7194*x7202))+(((-1.0)*x7197*x7204))+(((-1.0)*r02*x7203)));
evalcond[3]=((((-1.0)*x7196))+(((-1.0)*x7199*x7204))+(((-1.0)*r12*x7203))+((x7194*x7198)));
evalcond[4]=((((-1.0)*x7196))+(((-1.0)*x7202*x7203))+((x7195*x7197))+(((-1.0)*r02*x7204)));
evalcond[5]=((((-1.0)*sj0))+((x7195*x7199))+(((-1.0)*x7198*x7203))+(((-1.0)*r12*x7204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7205=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7205.valid){
continue;
}
CheckValue<IkReal> x7206 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7205.value)))+(x7206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7207=IKsin(j4);
IkReal x7208=IKcos(j4);
IkReal x7209=((1.0)*cj0);
IkReal x7210=(cj5*r00);
IkReal x7211=(r11*sj5);
IkReal x7212=(cj5*r10);
IkReal x7213=(r21*sj5);
IkReal x7214=(cj5*r20);
IkReal x7215=(r01*sj5);
IkReal x7216=((1.0)*x7208);
IkReal x7217=((1.0)*x7207);
evalcond[0]=((((-1.0)*x7214*x7217))+((x7207*x7213))+(((-1.0)*r22*x7216)));
evalcond[1]=((((-1.0)*x7213*x7216))+((x7208*x7214))+(((-1.0)*r22*x7217)));
evalcond[2]=(sj0+((x7207*x7215))+(((-1.0)*r02*x7216))+(((-1.0)*x7210*x7217)));
evalcond[3]=((((-1.0)*x7212*x7217))+(((-1.0)*r12*x7216))+((x7207*x7211))+(((-1.0)*x7209)));
evalcond[4]=((((-1.0)*x7215*x7216))+((x7208*x7210))+(((-1.0)*r02*x7217))+(((-1.0)*x7209)));
evalcond[5]=((((-1.0)*sj0))+((x7208*x7212))+(((-1.0)*r12*x7217))+(((-1.0)*x7211*x7216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7218=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7218.valid){
continue;
}
CheckValue<IkReal> x7219 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7218.value)))+(x7219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7220=IKsin(j4);
IkReal x7221=IKcos(j4);
IkReal x7222=((1.0)*cj0);
IkReal x7223=(cj5*r00);
IkReal x7224=(r11*sj5);
IkReal x7225=(cj5*r10);
IkReal x7226=(r21*sj5);
IkReal x7227=(cj5*r20);
IkReal x7228=(r01*sj5);
IkReal x7229=((1.0)*x7221);
IkReal x7230=((1.0)*x7220);
evalcond[0]=((((-1.0)*x7227*x7230))+((x7220*x7226))+(((-1.0)*r22*x7229)));
evalcond[1]=(((x7221*x7227))+(((-1.0)*r22*x7230))+(((-1.0)*x7226*x7229)));
evalcond[2]=((((-1.0)*r02*x7229))+sj0+(((-1.0)*x7223*x7230))+((x7220*x7228)));
evalcond[3]=((((-1.0)*x7225*x7230))+(((-1.0)*r12*x7229))+(((-1.0)*x7222))+((x7220*x7224)));
evalcond[4]=(((x7221*x7223))+(((-1.0)*x7228*x7229))+(((-1.0)*x7222))+(((-1.0)*r02*x7230)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7224*x7229))+((x7221*x7225))+(((-1.0)*r12*x7230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7231=cj1*cj1;
IkReal x7232=(cj1*sj1);
IkReal x7233=(r00*sj5);
IkReal x7234=(cj1*sj2);
IkReal x7235=(r10*sj5);
IkReal x7236=(cj5*r11);
IkReal x7237=(cj5*r01);
IkReal x7238=((20000.0)*py);
IkReal x7239=(cj2*sj1);
IkReal x7240=((1893.0)*x7239);
IkReal x7241=(sj2*x7231);
CheckValue<IkReal> x7242=IKPowWithIntegerCheck(((((-15690.0)*x7232*(cj2*cj2)))+(((-15690.0)*cj2*x7241))+(((7845.0)*x7232))+(((-8500.0)*cj2*x7232))+(((-8500.0)*x7241))+(((7845.0)*cj2*sj2))),-1);
if(!x7242.valid){
continue;
}
CheckValue<IkReal> x7243=IKPowWithIntegerCheck((x7234+x7239),-1);
if(!x7243.valid){
continue;
}
if( IKabs(((x7242.value)*(((((2183.0)*x7233))+(((2183.0)*x7237))+((x7238*x7239))+((x7235*x7240))+(((1893.0)*x7234*x7235))+(((1893.0)*x7234*x7236))+((x7236*x7240))+((x7234*x7238)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7243.value)*((x7237+x7233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7242.value)*(((((2183.0)*x7233))+(((2183.0)*x7237))+((x7238*x7239))+((x7235*x7240))+(((1893.0)*x7234*x7235))+(((1893.0)*x7234*x7236))+((x7236*x7240))+((x7234*x7238))))))+IKsqr(((x7243.value)*((x7237+x7233))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7242.value)*(((((2183.0)*x7233))+(((2183.0)*x7237))+((x7238*x7239))+((x7235*x7240))+(((1893.0)*x7234*x7235))+(((1893.0)*x7234*x7236))+((x7236*x7240))+((x7234*x7238))))), ((x7243.value)*((x7237+x7233))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7244=IKcos(j0);
IkReal x7245=IKsin(j0);
IkReal x7246=(cj5*r11);
IkReal x7247=(cj5*r01);
IkReal x7248=(cj2*sj1);
IkReal x7249=((1.0)*sj5);
IkReal x7250=((0.09465)*sj5);
IkReal x7251=((0.39225)*cj2);
IkReal x7252=((0.39225)*sj1*sj2);
IkReal x7253=(cj1*x7244);
IkReal x7254=(cj1*x7245);
evalcond[0]=((((-1.0)*x7247))+((x7244*x7248))+((sj2*x7253))+(((-1.0)*r00*x7249)));
evalcond[1]=((((-1.0)*x7246))+(((-1.0)*r10*x7249))+((sj2*x7254))+((x7245*x7248)));
evalcond[2]=((((-1.0)*x7251*x7253))+((x7244*x7252))+(((0.10915)*x7245))+(((-0.09465)*x7247))+(((-1.0)*r00*x7250))+(((-0.425)*x7253))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*x7251*x7254))+((x7245*x7252))+(((-1.0)*r10*x7250))+(((-0.09465)*x7246))+(((-0.425)*x7254))+(((-1.0)*py))+(((-0.10915)*x7244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7255=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7255;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7256=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7256;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7257=((1.0)*cj5);
IkReal x7258=((((-1.0)*r21*x7257))+(((-1.0)*r20*sj5)));
j4eval[0]=x7258;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x7257))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x7257)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x7258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7259=((-1.0)*r20);
IkReal x7261 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7261)==0){
continue;
}
IkReal x7260=pow(x7261,-0.5);
CheckValue<IkReal> x7262 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7259),IKFAST_ATAN2_MAGTHRESH);
if(!x7262.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7262.value));
IkReal gconst133=(r21*x7260);
IkReal gconst134=(x7259*x7260);
CheckValue<IkReal> x7263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7263.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7263.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7264=((-1.0)*r20);
IkReal x7265=x7260;
CheckValue<IkReal> x7267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7264),IKFAST_ATAN2_MAGTHRESH);
if(!x7267.valid){
continue;
}
IkReal x7266=((-1.0)*(x7267.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7266;
IkReal gconst132=x7266;
IkReal gconst133=(r21*x7265);
IkReal gconst134=(x7264*x7265);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7268=((-1.0)*r20);
IkReal x7269=x7260;
CheckValue<IkReal> x7271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7268),IKFAST_ATAN2_MAGTHRESH);
if(!x7271.valid){
continue;
}
IkReal x7270=((-1.0)*(x7271.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7270;
IkReal gconst132=x7270;
IkReal gconst133=(r21*x7269);
IkReal gconst134=(x7268*x7269);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7272=((-1.0)*r20);
IkReal x7273=x7260;
CheckValue<IkReal> x7275 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7272),IKFAST_ATAN2_MAGTHRESH);
if(!x7275.valid){
continue;
}
IkReal x7274=((-1.0)*(x7275.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7274;
IkReal gconst132=x7274;
IkReal gconst133=(r21*x7273);
IkReal gconst134=(x7272*x7273);
IkReal x7276=r22*r22;
CheckValue<IkReal> x7279=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7276))),-1);
if(!x7279.valid){
continue;
}
IkReal x7277=x7279.value;
IkReal x7278=(x7276+((x7277*(r21*r21*r21*r21)))+((x7277*(r20*r20*r20*r20)))+(((2.0)*x7277*(r20*r20)*(r21*r21))));
j4eval[0]=x7278;
j4eval[1]=IKsign(x7278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7280=(gconst133*r21);
IkReal x7281=(cj1*sj2);
IkReal x7282=(gconst134*r20);
IkReal x7283=(cj2*sj1);
CheckValue<IkReal> x7284 = IKatan2WithCheck(IkReal((((r22*x7283))+((r22*x7281)))),IkReal((((x7280*x7281))+((x7280*x7283))+(((-1.0)*x7282*x7283))+(((-1.0)*x7281*x7282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7284.valid){
continue;
}
CheckValue<IkReal> x7285=IKPowWithIntegerCheck(IKsign(((x7282*x7282)+(r22*r22)+(((-2.0)*x7280*x7282))+(x7280*x7280))),-1);
if(!x7285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7284.value)+(((1.5707963267949)*(x7285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7286=IKsin(j4);
IkReal x7287=IKcos(j4);
IkReal x7288=(cj1*cj2);
IkReal x7289=(gconst133*r11);
IkReal x7290=(gconst133*r21);
IkReal x7291=(gconst133*r01);
IkReal x7292=((1.0)*cj0);
IkReal x7293=(sj1*sj2);
IkReal x7294=((1.0)*x7287);
IkReal x7295=(gconst134*x7287);
IkReal x7296=((1.0)*x7286);
evalcond[0]=((((-1.0)*r22*x7294))+(((-1.0)*gconst134*r20*x7296))+((x7286*x7290)));
evalcond[1]=(sj0+((x7286*x7291))+(((-1.0)*gconst134*r00*x7296))+(((-1.0)*r02*x7294)));
evalcond[2]=((((-1.0)*x7292))+((x7286*x7289))+(((-1.0)*r12*x7294))+(((-1.0)*gconst134*r10*x7296)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7290*x7294))+(((-1.0)*r22*x7296))+((cj1*sj2))+((r20*x7295)));
evalcond[4]=((((-1.0)*x7291*x7294))+((cj0*x7288))+(((-1.0)*r02*x7296))+((r00*x7295))+(((-1.0)*x7292*x7293)));
evalcond[5]=((((-1.0)*sj0*x7293))+(((-1.0)*x7289*x7294))+((sj0*x7288))+((r10*x7295))+(((-1.0)*r12*x7296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7297=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7297.valid){
continue;
}
CheckValue<IkReal> x7298 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7297.value)))+(x7298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7299=IKsin(j4);
IkReal x7300=IKcos(j4);
IkReal x7301=(cj1*cj2);
IkReal x7302=(gconst133*r11);
IkReal x7303=(gconst133*r21);
IkReal x7304=(gconst133*r01);
IkReal x7305=((1.0)*cj0);
IkReal x7306=(sj1*sj2);
IkReal x7307=((1.0)*x7300);
IkReal x7308=(gconst134*x7300);
IkReal x7309=((1.0)*x7299);
evalcond[0]=((((-1.0)*gconst134*r20*x7309))+((x7299*x7303))+(((-1.0)*r22*x7307)));
evalcond[1]=((((-1.0)*r02*x7307))+sj0+(((-1.0)*gconst134*r00*x7309))+((x7299*x7304)));
evalcond[2]=((((-1.0)*r12*x7307))+((x7299*x7302))+(((-1.0)*gconst134*r10*x7309))+(((-1.0)*x7305)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7303*x7307))+((r20*x7308))+(((-1.0)*r22*x7309)));
evalcond[4]=((((-1.0)*r02*x7309))+((r00*x7308))+(((-1.0)*x7304*x7307))+((cj0*x7301))+(((-1.0)*x7305*x7306)));
evalcond[5]=(((r10*x7308))+(((-1.0)*x7302*x7307))+((sj0*x7301))+(((-1.0)*r12*x7309))+(((-1.0)*sj0*x7306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7310 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7310.valid){
continue;
}
CheckValue<IkReal> x7311=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7310.value)+(((1.5707963267949)*(x7311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7312=IKsin(j4);
IkReal x7313=IKcos(j4);
IkReal x7314=(cj1*cj2);
IkReal x7315=(gconst133*r11);
IkReal x7316=(gconst133*r21);
IkReal x7317=(gconst133*r01);
IkReal x7318=((1.0)*cj0);
IkReal x7319=(sj1*sj2);
IkReal x7320=((1.0)*x7313);
IkReal x7321=(gconst134*x7313);
IkReal x7322=((1.0)*x7312);
evalcond[0]=(((x7312*x7316))+(((-1.0)*r22*x7320))+(((-1.0)*gconst134*r20*x7322)));
evalcond[1]=(sj0+((x7312*x7317))+(((-1.0)*gconst134*r00*x7322))+(((-1.0)*r02*x7320)));
evalcond[2]=(((x7312*x7315))+(((-1.0)*gconst134*r10*x7322))+(((-1.0)*x7318))+(((-1.0)*r12*x7320)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7322))+((cj1*sj2))+(((-1.0)*x7316*x7320))+((r20*x7321)));
evalcond[4]=((((-1.0)*x7317*x7320))+(((-1.0)*x7318*x7319))+((r00*x7321))+((cj0*x7314))+(((-1.0)*r02*x7322)));
evalcond[5]=(((r10*x7321))+((sj0*x7314))+(((-1.0)*x7315*x7320))+(((-1.0)*sj0*x7319))+(((-1.0)*r12*x7322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7323=((-1.0)*r21);
IkReal x7325 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7325)==0){
continue;
}
IkReal x7324=pow(x7325,-0.5);
CheckValue<IkReal> x7326 = IKatan2WithCheck(IkReal(x7323),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7326.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7326.value))));
IkReal gconst136=(x7323*x7324);
IkReal gconst137=((1.0)*r20*x7324);
CheckValue<IkReal> x7327 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7327.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7327.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7328=((-1.0)*r21);
CheckValue<IkReal> x7331 = IKatan2WithCheck(IkReal(x7328),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7331.valid){
continue;
}
IkReal x7329=((1.0)*(x7331.value));
IkReal x7330=x7324;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7329)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7329)));
IkReal gconst136=(x7328*x7330);
IkReal gconst137=((1.0)*r20*x7330);
IkReal x7332=r22*r22;
IkReal x7333=((1.0)*x7332);
CheckValue<IkReal> x7337=IKPowWithIntegerCheck(((-1.0)+x7332),-1);
if(!x7337.valid){
continue;
}
IkReal x7334=x7337.value;
if((((1.0)+(((-1.0)*x7333)))) < -0.00001)
continue;
IkReal x7335=IKsqrt(((1.0)+(((-1.0)*x7333))));
IkReal x7336=(sj0*x7334*x7335);
j4eval[0]=((IKabs((x7336+(((-1.0)*x7333*x7336)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7338=((-1.0)*r21);
CheckValue<IkReal> x7341 = IKatan2WithCheck(IkReal(x7338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7341.valid){
continue;
}
IkReal x7339=((1.0)*(x7341.value));
IkReal x7340=x7324;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7339)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7339)));
IkReal gconst136=(x7338*x7340);
IkReal gconst137=((1.0)*r20*x7340);
IkReal x7342=r22*r22;
IkReal x7343=((1.0)*x7342);
CheckValue<IkReal> x7347=IKPowWithIntegerCheck(((-1.0)+x7342),-1);
if(!x7347.valid){
continue;
}
IkReal x7344=x7347.value;
if((((1.0)+(((-1.0)*x7343)))) < -0.00001)
continue;
IkReal x7345=IKsqrt(((1.0)+(((-1.0)*x7343))));
IkReal x7346=(cj0*x7344*x7345);
j4eval[0]=((IKabs((x7346+(((-1.0)*x7343*x7346)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7348=((-1.0)*r21);
CheckValue<IkReal> x7351 = IKatan2WithCheck(IkReal(x7348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7351.valid){
continue;
}
IkReal x7349=((1.0)*(x7351.value));
IkReal x7350=x7324;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7349)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7349)));
IkReal gconst136=(x7348*x7350);
IkReal gconst137=((1.0)*r20*x7350);
IkReal x7352=r22*r22;
IkReal x7353=(cj0*r02);
IkReal x7354=(r12*sj0);
CheckValue<IkReal> x7358=IKPowWithIntegerCheck(((-1.0)+x7352),-1);
if(!x7358.valid){
continue;
}
IkReal x7355=x7358.value;
if((((1.0)+(((-1.0)*x7352)))) < -0.00001)
continue;
IkReal x7356=IKsqrt(((1.0)+(((-1.0)*x7352))));
IkReal x7357=((1.0)*r22*x7355*x7356);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7354*x7357))+(((-1.0)*x7353*x7357)))))+(IKabs((x7353+x7354))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7359=((1.0)*gconst137);
CheckValue<IkReal> x7360 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst136*r11*sj0))+(((-1.0)*cj0*r00*x7359))+((cj0*gconst136*r01))+(((-1.0)*r10*sj0*x7359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7360.valid){
continue;
}
CheckValue<IkReal> x7361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*r21*x7359)))),-1);
if(!x7361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7360.value)+(((1.5707963267949)*(x7361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7362=IKsin(j4);
IkReal x7363=IKcos(j4);
IkReal x7364=(gconst136*r01);
IkReal x7365=(gconst137*r10);
IkReal x7366=(cj1*cj2);
IkReal x7367=(gconst137*r20);
IkReal x7368=(gconst136*r11);
IkReal x7369=(gconst136*r21);
IkReal x7370=(gconst137*r00);
IkReal x7371=((1.0)*cj0);
IkReal x7372=(sj1*sj2);
IkReal x7373=((1.0)*x7363);
IkReal x7374=((1.0)*x7362);
evalcond[0]=((((-1.0)*r22*x7373))+(((-1.0)*x7367*x7374))+((x7362*x7369)));
evalcond[1]=(sj0+(((-1.0)*x7370*x7374))+(((-1.0)*r02*x7373))+((x7362*x7364)));
evalcond[2]=((((-1.0)*r12*x7373))+(((-1.0)*x7371))+((x7362*x7368))+(((-1.0)*x7365*x7374)));
evalcond[3]=(((cj2*sj1))+((x7363*x7367))+(((-1.0)*r22*x7374))+((cj1*sj2))+(((-1.0)*x7369*x7373)));
evalcond[4]=(((x7363*x7370))+((cj0*x7366))+(((-1.0)*r02*x7374))+(((-1.0)*x7364*x7373))+(((-1.0)*x7371*x7372)));
evalcond[5]=(((x7363*x7365))+((sj0*x7366))+(((-1.0)*r12*x7374))+(((-1.0)*x7368*x7373))+(((-1.0)*sj0*x7372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7375 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7375.valid){
continue;
}
CheckValue<IkReal> x7376=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7375.value)+(((1.5707963267949)*(x7376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7377=IKsin(j4);
IkReal x7378=IKcos(j4);
IkReal x7379=(gconst136*r01);
IkReal x7380=(gconst137*r10);
IkReal x7381=(cj1*cj2);
IkReal x7382=(gconst137*r20);
IkReal x7383=(gconst136*r11);
IkReal x7384=(gconst136*r21);
IkReal x7385=(gconst137*r00);
IkReal x7386=((1.0)*cj0);
IkReal x7387=(sj1*sj2);
IkReal x7388=((1.0)*x7378);
IkReal x7389=((1.0)*x7377);
evalcond[0]=((((-1.0)*r22*x7388))+((x7377*x7384))+(((-1.0)*x7382*x7389)));
evalcond[1]=((((-1.0)*r02*x7388))+sj0+(((-1.0)*x7385*x7389))+((x7377*x7379)));
evalcond[2]=((((-1.0)*x7380*x7389))+(((-1.0)*x7386))+(((-1.0)*r12*x7388))+((x7377*x7383)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7389))+((cj1*sj2))+((x7378*x7382))+(((-1.0)*x7384*x7388)));
evalcond[4]=((((-1.0)*x7386*x7387))+(((-1.0)*r02*x7389))+(((-1.0)*x7379*x7388))+((x7378*x7385))+((cj0*x7381)));
evalcond[5]=(((sj0*x7381))+(((-1.0)*sj0*x7387))+((x7378*x7380))+(((-1.0)*x7383*x7388))+(((-1.0)*r12*x7389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7390=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7390.valid){
continue;
}
CheckValue<IkReal> x7391 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7390.value)))+(x7391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7392=IKsin(j4);
IkReal x7393=IKcos(j4);
IkReal x7394=(gconst136*r01);
IkReal x7395=(gconst137*r10);
IkReal x7396=(cj1*cj2);
IkReal x7397=(gconst137*r20);
IkReal x7398=(gconst136*r11);
IkReal x7399=(gconst136*r21);
IkReal x7400=(gconst137*r00);
IkReal x7401=((1.0)*cj0);
IkReal x7402=(sj1*sj2);
IkReal x7403=((1.0)*x7393);
IkReal x7404=((1.0)*x7392);
evalcond[0]=((((-1.0)*x7397*x7404))+(((-1.0)*r22*x7403))+((x7392*x7399)));
evalcond[1]=(sj0+(((-1.0)*x7400*x7404))+(((-1.0)*r02*x7403))+((x7392*x7394)));
evalcond[2]=((((-1.0)*r12*x7403))+(((-1.0)*x7401))+(((-1.0)*x7395*x7404))+((x7392*x7398)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7399*x7403))+(((-1.0)*r22*x7404))+((x7393*x7397)));
evalcond[4]=((((-1.0)*x7394*x7403))+((x7393*x7400))+(((-1.0)*x7401*x7402))+(((-1.0)*r02*x7404))+((cj0*x7396)));
evalcond[5]=((((-1.0)*r12*x7404))+(((-1.0)*sj0*x7402))+(((-1.0)*x7398*x7403))+((x7393*x7395))+((sj0*x7396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7406 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7406)==0){
continue;
}
IkReal x7405=pow(x7406,-0.5);
CheckValue<IkReal> x7407 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7407.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7407.value));
IkReal gconst139=((-1.0)*r01*x7405);
IkReal gconst140=(r00*x7405);
CheckValue<IkReal> x7408 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7408.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7408.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7411 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7411.valid){
continue;
}
IkReal x7409=((-1.0)*(x7411.value));
IkReal x7410=x7405;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7409;
IkReal gconst138=x7409;
IkReal gconst139=((-1.0)*r01*x7410);
IkReal gconst140=(r00*x7410);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7412=((1.0)*gconst140);
CheckValue<IkReal> x7413=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7412))+(((-1.0)*gconst139*r20)))),-1);
if(!x7413.valid){
continue;
}
CheckValue<IkReal> x7414 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x7412))+(((-1.0)*cj0*r00*x7412))+((gconst139*r11*sj0))+((cj0*gconst139*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7413.value)))+(x7414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7415=IKsin(j4);
IkReal x7416=IKcos(j4);
IkReal x7417=(gconst140*r00);
IkReal x7418=(cj1*cj2);
IkReal x7419=(gconst139*r11);
IkReal x7420=(gconst139*r01);
IkReal x7421=((1.0)*cj0);
IkReal x7422=(gconst139*r21);
IkReal x7423=(sj1*sj2);
IkReal x7424=((1.0)*x7416);
IkReal x7425=((1.0)*x7415);
IkReal x7426=(gconst140*x7416);
evalcond[0]=((((-1.0)*r22*x7424))+(((-1.0)*gconst140*r20*x7425))+((x7415*x7422)));
evalcond[1]=(sj0+(((-1.0)*r02*x7424))+((x7415*x7420))+(((-1.0)*x7417*x7425)));
evalcond[2]=(((x7415*x7419))+(((-1.0)*gconst140*r10*x7425))+(((-1.0)*r12*x7424))+(((-1.0)*x7421)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7422*x7424))+(((-1.0)*r22*x7425))+((cj1*sj2))+((r20*x7426)));
evalcond[4]=(((cj0*x7418))+(((-1.0)*x7421*x7423))+(((-1.0)*r02*x7425))+((x7416*x7417))+(((-1.0)*x7420*x7424)));
evalcond[5]=(((sj0*x7418))+(((-1.0)*sj0*x7423))+(((-1.0)*r12*x7425))+((r10*x7426))+(((-1.0)*x7419*x7424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7427 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7427.valid){
continue;
}
CheckValue<IkReal> x7428=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x7428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7427.value)+(((1.5707963267949)*(x7428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7429=IKsin(j4);
IkReal x7430=IKcos(j4);
IkReal x7431=(gconst140*r00);
IkReal x7432=(cj1*cj2);
IkReal x7433=(gconst139*r11);
IkReal x7434=(gconst139*r01);
IkReal x7435=((1.0)*cj0);
IkReal x7436=(gconst139*r21);
IkReal x7437=(sj1*sj2);
IkReal x7438=((1.0)*x7430);
IkReal x7439=((1.0)*x7429);
IkReal x7440=(gconst140*x7430);
evalcond[0]=(((x7429*x7436))+(((-1.0)*r22*x7438))+(((-1.0)*gconst140*r20*x7439)));
evalcond[1]=(((x7429*x7434))+sj0+(((-1.0)*r02*x7438))+(((-1.0)*x7431*x7439)));
evalcond[2]=(((x7429*x7433))+(((-1.0)*r12*x7438))+(((-1.0)*gconst140*r10*x7439))+(((-1.0)*x7435)));
evalcond[3]=(((cj2*sj1))+((r20*x7440))+(((-1.0)*r22*x7439))+((cj1*sj2))+(((-1.0)*x7436*x7438)));
evalcond[4]=((((-1.0)*r02*x7439))+((cj0*x7432))+(((-1.0)*x7434*x7438))+((x7430*x7431))+(((-1.0)*x7435*x7437)));
evalcond[5]=((((-1.0)*sj0*x7437))+(((-1.0)*r12*x7439))+((r10*x7440))+((sj0*x7432))+(((-1.0)*x7433*x7438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7442 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7442)==0){
continue;
}
IkReal x7441=pow(x7442,-0.5);
CheckValue<IkReal> x7443 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7443.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7443.value))));
IkReal gconst142=((1.0)*r01*x7441);
IkReal gconst143=((-1.0)*r00*x7441);
CheckValue<IkReal> x7444 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7444.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7444.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7447 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7447.valid){
continue;
}
IkReal x7445=((1.0)*(x7447.value));
IkReal x7446=x7441;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7445)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7445)));
IkReal gconst142=((1.0)*r01*x7446);
IkReal gconst143=((-1.0)*r00*x7446);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x7450 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7450.valid){
continue;
}
IkReal x7448=((1.0)*(x7450.value));
IkReal x7449=x7441;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7448)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7448)));
IkReal gconst142=((1.0)*r01*x7449);
IkReal gconst143=((-1.0)*r00*x7449);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7453 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7453.valid){
continue;
}
IkReal x7451=((1.0)*(x7453.value));
IkReal x7452=x7441;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7451)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7451)));
IkReal gconst142=((1.0)*r01*x7452);
IkReal gconst143=((-1.0)*r00*x7452);
IkReal x7454=r02*r02;
IkReal x7455=(r12*sj0);
IkReal x7456=x7441;
IkReal x7457=(cj0*x7456);
j4eval[0]=((IKabs((((x7454*x7457))+(((-1.0)*x7457))+((r02*x7455*x7456)))))+(IKabs((x7455+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7458=((1.0)*gconst143);
CheckValue<IkReal> x7459 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7458))+((cj0*gconst142*r01))+((gconst142*r11*sj0))+(((-1.0)*r10*sj0*x7458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7459.valid){
continue;
}
CheckValue<IkReal> x7460=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r20))+(((-1.0)*r21*x7458)))),-1);
if(!x7460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7459.value)+(((1.5707963267949)*(x7460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7461=IKsin(j4);
IkReal x7462=IKcos(j4);
IkReal x7463=(cj1*cj2);
IkReal x7464=(gconst143*r20);
IkReal x7465=((1.0)*cj0);
IkReal x7466=(sj1*sj2);
IkReal x7467=((1.0)*x7462);
IkReal x7468=((1.0)*x7461);
IkReal x7469=(gconst142*x7461);
IkReal x7470=(gconst143*x7462);
evalcond[0]=(((r21*x7469))+(((-1.0)*x7464*x7468))+(((-1.0)*r22*x7467)));
evalcond[1]=(sj0+(((-1.0)*r02*x7467))+(((-1.0)*gconst143*r00*x7468))+((r01*x7469)));
evalcond[2]=((((-1.0)*r12*x7467))+((r11*x7469))+(((-1.0)*x7465))+(((-1.0)*gconst143*r10*x7468)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7468))+(((-1.0)*gconst142*r21*x7467))+((x7462*x7464)));
evalcond[4]=((((-1.0)*r02*x7468))+((cj0*x7463))+(((-1.0)*x7465*x7466))+((r00*x7470))+(((-1.0)*gconst142*r01*x7467)));
evalcond[5]=(((r10*x7470))+(((-1.0)*r12*x7468))+(((-1.0)*gconst142*r11*x7467))+((sj0*x7463))+(((-1.0)*sj0*x7466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7471=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7471.valid){
continue;
}
CheckValue<IkReal> x7472 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7471.value)))+(x7472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7473=IKsin(j4);
IkReal x7474=IKcos(j4);
IkReal x7475=(cj1*cj2);
IkReal x7476=(gconst143*r20);
IkReal x7477=((1.0)*cj0);
IkReal x7478=(sj1*sj2);
IkReal x7479=((1.0)*x7474);
IkReal x7480=((1.0)*x7473);
IkReal x7481=(gconst142*x7473);
IkReal x7482=(gconst143*x7474);
evalcond[0]=((((-1.0)*x7476*x7480))+(((-1.0)*r22*x7479))+((r21*x7481)));
evalcond[1]=(sj0+(((-1.0)*r02*x7479))+((r01*x7481))+(((-1.0)*gconst143*r00*x7480)));
evalcond[2]=((((-1.0)*gconst143*r10*x7480))+((r11*x7481))+(((-1.0)*x7477))+(((-1.0)*r12*x7479)));
evalcond[3]=(((cj2*sj1))+((x7474*x7476))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7479))+(((-1.0)*r22*x7480)));
evalcond[4]=((((-1.0)*x7477*x7478))+((cj0*x7475))+((r00*x7482))+(((-1.0)*gconst142*r01*x7479))+(((-1.0)*r02*x7480)));
evalcond[5]=(((sj0*x7475))+(((-1.0)*sj0*x7478))+((r10*x7482))+(((-1.0)*gconst142*r11*x7479))+(((-1.0)*r12*x7480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7483=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x7483.valid){
continue;
}
CheckValue<IkReal> x7484 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7483.value)))+(x7484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7485=IKsin(j4);
IkReal x7486=IKcos(j4);
IkReal x7487=(cj1*cj2);
IkReal x7488=(gconst143*r20);
IkReal x7489=((1.0)*cj0);
IkReal x7490=(sj1*sj2);
IkReal x7491=((1.0)*x7486);
IkReal x7492=((1.0)*x7485);
IkReal x7493=(gconst142*x7485);
IkReal x7494=(gconst143*x7486);
evalcond[0]=((((-1.0)*x7488*x7492))+(((-1.0)*r22*x7491))+((r21*x7493)));
evalcond[1]=(sj0+((r01*x7493))+(((-1.0)*r02*x7491))+(((-1.0)*gconst143*r00*x7492)));
evalcond[2]=((((-1.0)*gconst143*r10*x7492))+((r11*x7493))+(((-1.0)*x7489))+(((-1.0)*r12*x7491)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7491))+(((-1.0)*r22*x7492))+((x7486*x7488)));
evalcond[4]=(((r00*x7494))+(((-1.0)*x7489*x7490))+(((-1.0)*gconst142*r01*x7491))+((cj0*x7487))+(((-1.0)*r02*x7492)));
evalcond[5]=((((-1.0)*sj0*x7490))+(((-1.0)*gconst142*r11*x7491))+((r10*x7494))+((sj0*x7487))+(((-1.0)*r12*x7492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7495=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7495;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7496=((1.0)*cj5);
IkReal x7497=((((-1.0)*r21*x7496))+(((-1.0)*r20*sj5)));
j4eval[0]=x7497;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x7496))))));
j4eval[2]=IKsign(x7497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7498=cj5*cj5;
IkReal x7499=r01*r01;
IkReal x7500=(cj5*r00);
IkReal x7501=(r01*sj5);
IkReal x7502=((((-1.0)*x7498*x7499))+(((-2.0)*x7500*x7501))+(r02*r02)+x7499+((x7498*(r00*r00))));
j4eval[0]=x7502;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7501))+x7500))));
j4eval[2]=IKsign(x7502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7503=cj5*cj5;
IkReal x7504=r01*r01;
IkReal x7505=(r01*sj5);
IkReal x7506=(cj5*r00);
CheckValue<IkReal> x7507=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7505*x7506))+x7504+(r02*r02)+((x7503*(r00*r00)))+(((-1.0)*x7503*x7504)))),-1);
if(!x7507.valid){
continue;
}
CheckValue<IkReal> x7508 = IKatan2WithCheck(IkReal(((((-1.0)*x7505))+x7506)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7507.value)))+(x7508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7509=IKsin(j4);
IkReal x7510=IKcos(j4);
IkReal x7511=(cj5*r10);
IkReal x7512=(r01*sj5);
IkReal x7513=(cj5*r00);
IkReal x7514=(cj5*r20);
IkReal x7515=((1.0)*x7510);
IkReal x7516=((1.0)*x7509);
IkReal x7517=(sj5*x7509);
evalcond[0]=(((r21*x7517))+(((-1.0)*r22*x7515))+(((-1.0)*x7514*x7516)));
evalcond[1]=(((r11*x7517))+(((-1.0)*x7511*x7516))+(((-1.0)*r12*x7515)));
evalcond[2]=((((-1.0)*x7512*x7515))+(((-1.0)*r02*x7516))+((x7510*x7513)));
evalcond[3]=((1.0)+((x7509*x7512))+(((-1.0)*r02*x7515))+(((-1.0)*x7513*x7516)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7510*x7514))+(((-1.0)*r21*sj5*x7515))+(((-1.0)*r22*x7516)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x7515))+((x7510*x7511))+((cj1*cj2))+(((-1.0)*r12*x7516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7518=((1.0)*cj5);
CheckValue<IkReal> x7519 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x7518))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7519.valid){
continue;
}
CheckValue<IkReal> x7520=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7518))+(((-1.0)*r20*sj5)))),-1);
if(!x7520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7519.value)+(((1.5707963267949)*(x7520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7521=IKsin(j4);
IkReal x7522=IKcos(j4);
IkReal x7523=(cj5*r10);
IkReal x7524=(r01*sj5);
IkReal x7525=(cj5*r00);
IkReal x7526=(cj5*r20);
IkReal x7527=((1.0)*x7522);
IkReal x7528=((1.0)*x7521);
IkReal x7529=(sj5*x7521);
evalcond[0]=(((r21*x7529))+(((-1.0)*x7526*x7528))+(((-1.0)*r22*x7527)));
evalcond[1]=((((-1.0)*x7523*x7528))+((r11*x7529))+(((-1.0)*r12*x7527)));
evalcond[2]=((((-1.0)*r02*x7528))+(((-1.0)*x7524*x7527))+((x7522*x7525)));
evalcond[3]=((1.0)+((x7521*x7524))+(((-1.0)*r02*x7527))+(((-1.0)*x7525*x7528)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7527))+(((-1.0)*r22*x7528))+((x7522*x7526)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x7527))+((cj1*cj2))+(((-1.0)*r12*x7528))+((x7522*x7523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7530 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7530.valid){
continue;
}
CheckValue<IkReal> x7531=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7530.value)+(((1.5707963267949)*(x7531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7532=IKsin(j4);
IkReal x7533=IKcos(j4);
IkReal x7534=(cj5*r10);
IkReal x7535=(r01*sj5);
IkReal x7536=(cj5*r00);
IkReal x7537=(cj5*r20);
IkReal x7538=((1.0)*x7533);
IkReal x7539=((1.0)*x7532);
IkReal x7540=(sj5*x7532);
evalcond[0]=(((r21*x7540))+(((-1.0)*r22*x7538))+(((-1.0)*x7537*x7539)));
evalcond[1]=((((-1.0)*r12*x7538))+(((-1.0)*x7534*x7539))+((r11*x7540)));
evalcond[2]=(((x7533*x7536))+(((-1.0)*x7535*x7538))+(((-1.0)*r02*x7539)));
evalcond[3]=((1.0)+(((-1.0)*x7536*x7539))+((x7532*x7535))+(((-1.0)*r02*x7538)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7538))+((x7533*x7537))+((cj1*sj2))+(((-1.0)*r22*x7539)));
evalcond[5]=(((x7533*x7534))+(((-1.0)*r12*x7539))+(((-1.0)*r11*sj5*x7538))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7541=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7541;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7542=((1.0)*cj5);
IkReal x7543=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7542)));
j4eval[0]=x7543;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7542)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7544=cj5*cj5;
IkReal x7545=r01*r01;
IkReal x7546=(r01*sj5);
IkReal x7547=(cj5*r00);
IkReal x7548=((((2.0)*x7546*x7547))+(((-1.0)*(r02*r02)))+(((-1.0)*x7545))+((x7544*x7545))+(((-1.0)*x7544*(r00*r00))));
j4eval[0]=x7548;
j4eval[1]=IKsign(x7548);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7546))+x7547))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7549=cj5*cj5;
IkReal x7550=r01*r01;
IkReal x7551=(r01*sj5);
IkReal x7552=(cj5*r00);
CheckValue<IkReal> x7553=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x7551*x7552))+((x7549*x7550))+(((-1.0)*x7550))+(((-1.0)*x7549*(r00*r00))))),-1);
if(!x7553.valid){
continue;
}
CheckValue<IkReal> x7554 = IKatan2WithCheck(IkReal(((((-1.0)*x7551))+x7552)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7553.value)))+(x7554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7555=IKsin(j4);
IkReal x7556=IKcos(j4);
IkReal x7557=(cj5*r10);
IkReal x7558=(r01*sj5);
IkReal x7559=(cj5*r00);
IkReal x7560=(cj5*r20);
IkReal x7561=((1.0)*x7556);
IkReal x7562=((1.0)*x7555);
IkReal x7563=(sj5*x7555);
evalcond[0]=((((-1.0)*r22*x7561))+((r21*x7563))+(((-1.0)*x7560*x7562)));
evalcond[1]=((((-1.0)*x7557*x7562))+((r11*x7563))+(((-1.0)*r12*x7561)));
evalcond[2]=((((-1.0)*r02*x7562))+((x7556*x7559))+(((-1.0)*x7558*x7561)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7561))+(((-1.0)*x7559*x7562))+((x7555*x7558)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7562))+((cj1*sj2))+((x7556*x7560))+(((-1.0)*r21*sj5*x7561)));
evalcond[5]=(((x7556*x7557))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7562))+(((-1.0)*r11*sj5*x7561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7564=((1.0)*cj5);
CheckValue<IkReal> x7565 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7564))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7565.valid){
continue;
}
CheckValue<IkReal> x7566=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7564)))),-1);
if(!x7566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7565.value)+(((1.5707963267949)*(x7566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7567=IKsin(j4);
IkReal x7568=IKcos(j4);
IkReal x7569=(cj5*r10);
IkReal x7570=(r01*sj5);
IkReal x7571=(cj5*r00);
IkReal x7572=(cj5*r20);
IkReal x7573=((1.0)*x7568);
IkReal x7574=((1.0)*x7567);
IkReal x7575=(sj5*x7567);
evalcond[0]=((((-1.0)*r22*x7573))+((r21*x7575))+(((-1.0)*x7572*x7574)));
evalcond[1]=((((-1.0)*x7569*x7574))+(((-1.0)*r12*x7573))+((r11*x7575)));
evalcond[2]=(((x7568*x7571))+(((-1.0)*r02*x7574))+(((-1.0)*x7570*x7573)));
evalcond[3]=((-1.0)+(((-1.0)*x7571*x7574))+((x7567*x7570))+(((-1.0)*r02*x7573)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7568*x7572))+(((-1.0)*r22*x7574))+(((-1.0)*r21*sj5*x7573)));
evalcond[5]=(((x7568*x7569))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x7573))+(((-1.0)*r12*x7574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7576=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7576.valid){
continue;
}
CheckValue<IkReal> x7577 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7576.value)))+(x7577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7578=IKsin(j4);
IkReal x7579=IKcos(j4);
IkReal x7580=(cj5*r10);
IkReal x7581=(r01*sj5);
IkReal x7582=(cj5*r00);
IkReal x7583=(cj5*r20);
IkReal x7584=((1.0)*x7579);
IkReal x7585=((1.0)*x7578);
IkReal x7586=(sj5*x7578);
evalcond[0]=((((-1.0)*r22*x7584))+(((-1.0)*x7583*x7585))+((r21*x7586)));
evalcond[1]=((((-1.0)*x7580*x7585))+(((-1.0)*r12*x7584))+((r11*x7586)));
evalcond[2]=(((x7579*x7582))+(((-1.0)*x7581*x7584))+(((-1.0)*r02*x7585)));
evalcond[3]=((-1.0)+((x7578*x7581))+(((-1.0)*r02*x7584))+(((-1.0)*x7582*x7585)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7584))+((x7579*x7583))+((cj1*sj2))+(((-1.0)*r22*x7585)));
evalcond[5]=(((x7579*x7580))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x7584))+(((-1.0)*r12*x7585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7588 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7588)==0){
continue;
}
IkReal x7587=pow(x7588,-0.5);
CheckValue<IkReal> x7589 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7589.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7589.value));
IkReal gconst145=((-1.0)*r11*x7587);
IkReal gconst146=(r10*x7587);
CheckValue<IkReal> x7590 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7590.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7590.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7593 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7593.valid){
continue;
}
IkReal x7591=((-1.0)*(x7593.value));
IkReal x7592=x7587;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7591;
IkReal gconst144=x7591;
IkReal gconst145=((-1.0)*r11*x7592);
IkReal gconst146=(r10*x7592);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7594=((1.0)*gconst146);
CheckValue<IkReal> x7595=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r20))+(((-1.0)*r21*x7594)))),-1);
if(!x7595.valid){
continue;
}
CheckValue<IkReal> x7596 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*cj0*r00*x7594))+(((-1.0)*r10*sj0*x7594))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7595.value)))+(x7596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7597=IKsin(j4);
IkReal x7598=IKcos(j4);
IkReal x7599=(gconst146*r10);
IkReal x7600=(cj1*cj2);
IkReal x7601=(gconst145*r11);
IkReal x7602=(gconst146*r20);
IkReal x7603=(gconst146*r00);
IkReal x7604=((1.0)*cj0);
IkReal x7605=(sj1*sj2);
IkReal x7606=((1.0)*x7598);
IkReal x7607=((1.0)*x7597);
IkReal x7608=(gconst145*x7597);
evalcond[0]=((((-1.0)*r22*x7606))+((r21*x7608))+(((-1.0)*x7602*x7607)));
evalcond[1]=(sj0+((r01*x7608))+(((-1.0)*x7603*x7607))+(((-1.0)*r02*x7606)));
evalcond[2]=((((-1.0)*x7604))+((x7597*x7601))+(((-1.0)*x7599*x7607))+(((-1.0)*r12*x7606)));
evalcond[3]=(((cj2*sj1))+((x7598*x7602))+(((-1.0)*r22*x7607))+(((-1.0)*gconst145*r21*x7606))+((cj1*sj2)));
evalcond[4]=(((x7598*x7603))+(((-1.0)*gconst145*r01*x7606))+(((-1.0)*x7604*x7605))+(((-1.0)*r02*x7607))+((cj0*x7600)));
evalcond[5]=(((x7598*x7599))+(((-1.0)*sj0*x7605))+(((-1.0)*x7601*x7606))+(((-1.0)*r12*x7607))+((sj0*x7600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7609 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7609.valid){
continue;
}
CheckValue<IkReal> x7610=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x7610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7609.value)+(((1.5707963267949)*(x7610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7611=IKsin(j4);
IkReal x7612=IKcos(j4);
IkReal x7613=(gconst146*r10);
IkReal x7614=(cj1*cj2);
IkReal x7615=(gconst145*r11);
IkReal x7616=(gconst146*r20);
IkReal x7617=(gconst146*r00);
IkReal x7618=((1.0)*cj0);
IkReal x7619=(sj1*sj2);
IkReal x7620=((1.0)*x7612);
IkReal x7621=((1.0)*x7611);
IkReal x7622=(gconst145*x7611);
evalcond[0]=(((r21*x7622))+(((-1.0)*x7616*x7621))+(((-1.0)*r22*x7620)));
evalcond[1]=(sj0+((r01*x7622))+(((-1.0)*x7617*x7621))+(((-1.0)*r02*x7620)));
evalcond[2]=((((-1.0)*x7618))+(((-1.0)*r12*x7620))+((x7611*x7615))+(((-1.0)*x7613*x7621)));
evalcond[3]=((((-1.0)*gconst145*r21*x7620))+((x7612*x7616))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7621)));
evalcond[4]=(((x7612*x7617))+(((-1.0)*gconst145*r01*x7620))+(((-1.0)*x7618*x7619))+((cj0*x7614))+(((-1.0)*r02*x7621)));
evalcond[5]=((((-1.0)*x7615*x7620))+((x7612*x7613))+(((-1.0)*sj0*x7619))+(((-1.0)*r12*x7621))+((sj0*x7614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7624 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7624)==0){
continue;
}
IkReal x7623=pow(x7624,-0.5);
CheckValue<IkReal> x7625 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7625.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7625.value))));
IkReal gconst148=((1.0)*r11*x7623);
IkReal gconst149=((-1.0)*r10*x7623);
CheckValue<IkReal> x7626 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7626.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7629 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7629.valid){
continue;
}
IkReal x7627=((1.0)*(x7629.value));
IkReal x7628=x7623;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7627)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7627)));
IkReal gconst148=((1.0)*r11*x7628);
IkReal gconst149=((-1.0)*r10*x7628);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7632 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7632.valid){
continue;
}
IkReal x7630=((1.0)*(x7632.value));
IkReal x7631=x7623;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7630)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7630)));
IkReal gconst148=((1.0)*r11*x7631);
IkReal gconst149=((-1.0)*r10*x7631);
IkReal x7633=r12*r12;
IkReal x7634=(cj0*r02);
IkReal x7635=x7623;
IkReal x7636=(sj0*x7635);
j4eval[0]=((IKabs((((r12*sj0))+x7634)))+(IKabs((((x7633*x7636))+((r12*x7634*x7635))+(((-1.0)*x7636))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7639 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7639.valid){
continue;
}
IkReal x7637=((1.0)*(x7639.value));
IkReal x7638=x7623;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7637)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7637)));
IkReal gconst148=((1.0)*r11*x7638);
IkReal gconst149=((-1.0)*r10*x7638);
IkReal x7640=(cj1*r22*sj2);
IkReal x7641=(cj2*r22*sj1);
IkReal x7642=x7623;
IkReal x7643=(r12*x7642);
j4eval[0]=((IKabs((((x7640*x7643))+((x7641*x7643)))))+(IKabs((x7641+x7640))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7644=(cj2*sj1);
IkReal x7645=(cj1*sj2);
IkReal x7646=(gconst148*r21);
IkReal x7647=((1.0)*gconst149*r20);
CheckValue<IkReal> x7648=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst149*gconst149)*(r20*r20)))+(((-2.0)*gconst149*r20*x7646))+(x7646*x7646))),-1);
if(!x7648.valid){
continue;
}
CheckValue<IkReal> x7649 = IKatan2WithCheck(IkReal((((r22*x7645))+((r22*x7644)))),IkReal((((x7644*x7646))+(((-1.0)*x7644*x7647))+(((-1.0)*x7645*x7647))+((x7645*x7646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7648.value)))+(x7649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7650=IKsin(j4);
IkReal x7651=IKcos(j4);
IkReal x7652=(cj1*cj2);
IkReal x7653=(gconst148*r11);
IkReal x7654=((1.0)*cj0);
IkReal x7655=(sj1*sj2);
IkReal x7656=((1.0)*x7651);
IkReal x7657=(gconst149*x7651);
IkReal x7658=((1.0)*x7650);
IkReal x7659=(gconst148*x7650);
evalcond[0]=((((-1.0)*r22*x7656))+((r21*x7659))+(((-1.0)*gconst149*r20*x7658)));
evalcond[1]=(sj0+(((-1.0)*r02*x7656))+(((-1.0)*gconst149*r00*x7658))+((r01*x7659)));
evalcond[2]=(((x7650*x7653))+(((-1.0)*gconst149*r10*x7658))+(((-1.0)*r12*x7656))+(((-1.0)*x7654)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7658))+(((-1.0)*gconst148*r21*x7656))+((cj1*sj2))+((r20*x7657)));
evalcond[4]=((((-1.0)*r02*x7658))+(((-1.0)*gconst148*r01*x7656))+(((-1.0)*x7654*x7655))+((cj0*x7652))+((r00*x7657)));
evalcond[5]=((((-1.0)*x7653*x7656))+((r10*x7657))+(((-1.0)*r12*x7658))+((sj0*x7652))+(((-1.0)*sj0*x7655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7660=((1.0)*gconst149);
CheckValue<IkReal> x7661 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7660))+(((-1.0)*r10*sj0*x7660))+((cj0*gconst148*r01))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7661.valid){
continue;
}
CheckValue<IkReal> x7662=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7660)))),-1);
if(!x7662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7661.value)+(((1.5707963267949)*(x7662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7663=IKsin(j4);
IkReal x7664=IKcos(j4);
IkReal x7665=(cj1*cj2);
IkReal x7666=(gconst148*r11);
IkReal x7667=((1.0)*cj0);
IkReal x7668=(sj1*sj2);
IkReal x7669=((1.0)*x7664);
IkReal x7670=(gconst149*x7664);
IkReal x7671=((1.0)*x7663);
IkReal x7672=(gconst148*x7663);
evalcond[0]=((((-1.0)*r22*x7669))+((r21*x7672))+(((-1.0)*gconst149*r20*x7671)));
evalcond[1]=(sj0+(((-1.0)*r02*x7669))+(((-1.0)*gconst149*r00*x7671))+((r01*x7672)));
evalcond[2]=((((-1.0)*r12*x7669))+(((-1.0)*x7667))+((x7663*x7666))+(((-1.0)*gconst149*r10*x7671)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x7669))+((cj1*sj2))+((r20*x7670))+(((-1.0)*r22*x7671)));
evalcond[4]=((((-1.0)*gconst148*r01*x7669))+(((-1.0)*r02*x7671))+((cj0*x7665))+((r00*x7670))+(((-1.0)*x7667*x7668)));
evalcond[5]=((((-1.0)*sj0*x7668))+(((-1.0)*x7666*x7669))+(((-1.0)*r12*x7671))+((r10*x7670))+((sj0*x7665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7673=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7673.valid){
continue;
}
CheckValue<IkReal> x7674 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7673.value)))+(x7674.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7675=IKsin(j4);
IkReal x7676=IKcos(j4);
IkReal x7677=(cj1*cj2);
IkReal x7678=(gconst148*r11);
IkReal x7679=((1.0)*cj0);
IkReal x7680=(sj1*sj2);
IkReal x7681=((1.0)*x7676);
IkReal x7682=(gconst149*x7676);
IkReal x7683=((1.0)*x7675);
IkReal x7684=(gconst148*x7675);
evalcond[0]=((((-1.0)*gconst149*r20*x7683))+(((-1.0)*r22*x7681))+((r21*x7684)));
evalcond[1]=(sj0+(((-1.0)*gconst149*r00*x7683))+((r01*x7684))+(((-1.0)*r02*x7681)));
evalcond[2]=(((x7675*x7678))+(((-1.0)*r12*x7681))+(((-1.0)*x7679))+(((-1.0)*gconst149*r10*x7683)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7683))+((r20*x7682))+(((-1.0)*gconst148*r21*x7681)));
evalcond[4]=((((-1.0)*gconst148*r01*x7681))+((r00*x7682))+(((-1.0)*x7679*x7680))+((cj0*x7677))+(((-1.0)*r02*x7683)));
evalcond[5]=(((sj0*x7677))+(((-1.0)*sj0*x7680))+((r10*x7682))+(((-1.0)*r12*x7683))+(((-1.0)*x7678*x7681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7685=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7685;
j4eval[1]=IKsign(x7685);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7686=((1.0)*cj5);
IkReal x7687=((((-1.0)*r21*x7686))+(((-1.0)*r20*sj5)));
j4eval[0]=x7687;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7686))))));
j4eval[2]=IKsign(x7687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7688=cj5*cj5;
IkReal x7689=r11*r11;
IkReal x7690=(cj5*r10);
IkReal x7691=(r11*sj5);
IkReal x7692=((((-1.0)*x7688*(r10*r10)))+(((-1.0)*x7689))+(((-1.0)*(r12*r12)))+(((2.0)*x7690*x7691))+((x7688*x7689)));
j4eval[0]=x7692;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7691))+x7690))));
j4eval[2]=IKsign(x7692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7693=cj5*cj5;
IkReal x7694=r11*r11;
IkReal x7695=(cj5*r10);
IkReal x7696=(r11*sj5);
CheckValue<IkReal> x7697 = IKatan2WithCheck(IkReal(((((-1.0)*x7696))+x7695)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7697.valid){
continue;
}
CheckValue<IkReal> x7698=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7693*(r10*r10)))+((x7693*x7694))+(((-1.0)*x7694))+(((-1.0)*(r12*r12)))+(((2.0)*x7695*x7696)))),-1);
if(!x7698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7697.value)+(((1.5707963267949)*(x7698.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7699=IKsin(j4);
IkReal x7700=IKcos(j4);
IkReal x7701=(cj5*r10);
IkReal x7702=(r01*sj5);
IkReal x7703=(cj5*r00);
IkReal x7704=(cj5*r20);
IkReal x7705=((1.0)*x7700);
IkReal x7706=((1.0)*x7699);
IkReal x7707=(sj5*x7699);
evalcond[0]=(((r21*x7707))+(((-1.0)*r22*x7705))+(((-1.0)*x7704*x7706)));
evalcond[1]=((((-1.0)*x7703*x7706))+(((-1.0)*r02*x7705))+((x7699*x7702)));
evalcond[2]=(((x7700*x7701))+(((-1.0)*r11*sj5*x7705))+(((-1.0)*r12*x7706)));
evalcond[3]=((-1.0)+((r11*x7707))+(((-1.0)*r12*x7705))+(((-1.0)*x7701*x7706)));
evalcond[4]=((((-1.0)*r21*sj5*x7705))+((cj2*sj1))+((x7700*x7704))+(((-1.0)*r22*x7706))+((cj1*sj2)));
evalcond[5]=(((x7700*x7703))+(((-1.0)*sj1*sj2))+(((-1.0)*x7702*x7705))+((cj1*cj2))+(((-1.0)*r02*x7706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7708=((1.0)*cj5);
CheckValue<IkReal> x7709 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7708)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7709.valid){
continue;
}
CheckValue<IkReal> x7710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7708))+(((-1.0)*r20*sj5)))),-1);
if(!x7710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7709.value)+(((1.5707963267949)*(x7710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7711=IKsin(j4);
IkReal x7712=IKcos(j4);
IkReal x7713=(cj5*r10);
IkReal x7714=(r01*sj5);
IkReal x7715=(cj5*r00);
IkReal x7716=(cj5*r20);
IkReal x7717=((1.0)*x7712);
IkReal x7718=((1.0)*x7711);
IkReal x7719=(sj5*x7711);
evalcond[0]=((((-1.0)*r22*x7717))+((r21*x7719))+(((-1.0)*x7716*x7718)));
evalcond[1]=(((x7711*x7714))+(((-1.0)*x7715*x7718))+(((-1.0)*r02*x7717)));
evalcond[2]=((((-1.0)*r12*x7718))+((x7712*x7713))+(((-1.0)*r11*sj5*x7717)));
evalcond[3]=((-1.0)+((r11*x7719))+(((-1.0)*r12*x7717))+(((-1.0)*x7713*x7718)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7718))+((cj1*sj2))+((x7712*x7716))+(((-1.0)*r21*sj5*x7717)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7714*x7717))+((x7712*x7715))+((cj1*cj2))+(((-1.0)*r02*x7718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7720 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7720.valid){
continue;
}
CheckValue<IkReal> x7721=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7720.value)+(((1.5707963267949)*(x7721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7722=IKsin(j4);
IkReal x7723=IKcos(j4);
IkReal x7724=(cj5*r10);
IkReal x7725=(r01*sj5);
IkReal x7726=(cj5*r00);
IkReal x7727=(cj5*r20);
IkReal x7728=((1.0)*x7723);
IkReal x7729=((1.0)*x7722);
IkReal x7730=(sj5*x7722);
evalcond[0]=(((r21*x7730))+(((-1.0)*x7727*x7729))+(((-1.0)*r22*x7728)));
evalcond[1]=((((-1.0)*x7726*x7729))+(((-1.0)*r02*x7728))+((x7722*x7725)));
evalcond[2]=((((-1.0)*r11*sj5*x7728))+((x7723*x7724))+(((-1.0)*r12*x7729)));
evalcond[3]=((-1.0)+(((-1.0)*x7724*x7729))+((r11*x7730))+(((-1.0)*r12*x7728)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7723*x7727))+(((-1.0)*r21*sj5*x7728))+(((-1.0)*r22*x7729)));
evalcond[5]=((((-1.0)*x7725*x7728))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7729))+((x7723*x7726))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7731=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7731;
j4eval[1]=IKsign(x7731);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7732=((1.0)*cj5);
IkReal x7733=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7732)));
j4eval[0]=x7733;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7732))))));
j4eval[2]=IKsign(x7733);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7734=cj5*cj5;
IkReal x7735=r11*r11;
IkReal x7736=(r11*sj5);
IkReal x7737=(cj5*r10);
IkReal x7738=((r12*r12)+(((-1.0)*x7734*x7735))+((x7734*(r10*r10)))+x7735+(((-2.0)*x7736*x7737)));
j4eval[0]=x7738;
j4eval[1]=IKsign(x7738);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7736))+x7737))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7739=cj5*cj5;
IkReal x7740=r11*r11;
IkReal x7741=(cj5*r10);
IkReal x7742=(r11*sj5);
CheckValue<IkReal> x7743 = IKatan2WithCheck(IkReal(((((-1.0)*x7742))+x7741)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7743.valid){
continue;
}
CheckValue<IkReal> x7744=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x7739*x7740))+(((-2.0)*x7741*x7742))+((x7739*(r10*r10)))+x7740)),-1);
if(!x7744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7743.value)+(((1.5707963267949)*(x7744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7745=IKsin(j4);
IkReal x7746=IKcos(j4);
IkReal x7747=(cj5*r10);
IkReal x7748=(r01*sj5);
IkReal x7749=(cj5*r00);
IkReal x7750=(cj5*r20);
IkReal x7751=((1.0)*x7746);
IkReal x7752=((1.0)*x7745);
IkReal x7753=(sj5*x7745);
evalcond[0]=((((-1.0)*r22*x7751))+(((-1.0)*x7750*x7752))+((r21*x7753)));
evalcond[1]=((((-1.0)*r02*x7751))+(((-1.0)*x7749*x7752))+((x7745*x7748)));
evalcond[2]=((((-1.0)*r12*x7752))+(((-1.0)*r11*sj5*x7751))+((x7746*x7747)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7751))+(((-1.0)*x7747*x7752))+((r11*x7753)));
evalcond[4]=((((-1.0)*r22*x7752))+((cj2*sj1))+(((-1.0)*r21*sj5*x7751))+((cj1*sj2))+((x7746*x7750)));
evalcond[5]=((((-1.0)*r02*x7752))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7746*x7749))+(((-1.0)*x7748*x7751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7754=((1.0)*cj5);
CheckValue<IkReal> x7755 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7755.valid){
continue;
}
CheckValue<IkReal> x7756=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7754)))),-1);
if(!x7756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7755.value)+(((1.5707963267949)*(x7756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7757=IKsin(j4);
IkReal x7758=IKcos(j4);
IkReal x7759=(cj5*r10);
IkReal x7760=(r01*sj5);
IkReal x7761=(cj5*r00);
IkReal x7762=(cj5*r20);
IkReal x7763=((1.0)*x7758);
IkReal x7764=((1.0)*x7757);
IkReal x7765=(sj5*x7757);
evalcond[0]=((((-1.0)*r22*x7763))+(((-1.0)*x7762*x7764))+((r21*x7765)));
evalcond[1]=((((-1.0)*r02*x7763))+(((-1.0)*x7761*x7764))+((x7757*x7760)));
evalcond[2]=(((x7758*x7759))+(((-1.0)*r12*x7764))+(((-1.0)*r11*sj5*x7763)));
evalcond[3]=((1.0)+(((-1.0)*x7759*x7764))+(((-1.0)*r12*x7763))+((r11*x7765)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7764))+((cj1*sj2))+(((-1.0)*r21*sj5*x7763))+((x7758*x7762)));
evalcond[5]=((((-1.0)*x7760*x7763))+(((-1.0)*r02*x7764))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7758*x7761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7766=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7766.valid){
continue;
}
CheckValue<IkReal> x7767 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7766.value)))+(x7767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7768=IKsin(j4);
IkReal x7769=IKcos(j4);
IkReal x7770=(cj5*r10);
IkReal x7771=(r01*sj5);
IkReal x7772=(cj5*r00);
IkReal x7773=(cj5*r20);
IkReal x7774=((1.0)*x7769);
IkReal x7775=((1.0)*x7768);
IkReal x7776=(sj5*x7768);
evalcond[0]=((((-1.0)*r22*x7774))+((r21*x7776))+(((-1.0)*x7773*x7775)));
evalcond[1]=((((-1.0)*r02*x7774))+(((-1.0)*x7772*x7775))+((x7768*x7771)));
evalcond[2]=(((x7769*x7770))+(((-1.0)*r12*x7775))+(((-1.0)*r11*sj5*x7774)));
evalcond[3]=((1.0)+((r11*x7776))+(((-1.0)*x7770*x7775))+(((-1.0)*r12*x7774)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7775))+((cj1*sj2))+(((-1.0)*r21*sj5*x7774))+((x7769*x7773)));
evalcond[5]=((((-1.0)*x7771*x7774))+(((-1.0)*r02*x7775))+((x7769*x7772))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7777=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7777);
rxp0_2=(py*r00);
rxp1_0=(r21*x7777);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7778=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7778);
rxp0_2=(py*r00);
rxp1_0=(r21*x7778);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7779=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7779);
rxp0_2=(py*r00);
rxp1_0=(r21*x7779);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7782=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7782.valid){
continue;
}
IkReal x7780=x7782.value;
IkReal x7781=(cj0*x7780);
cj4array[0]=((((-1.0)*cj1*cj2*x7781))+((sj1*sj2*x7781)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7783=IKsin(j4);
IkReal x7784=IKcos(j4);
IkReal x7785=(r21*sj5);
IkReal x7786=((1.0)*x7784);
IkReal x7787=((1.0)*cj5*x7783);
evalcond[0]=((-1.0)*r12*x7783);
evalcond[1]=((((-1.0)*r12*x7786))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x7787))+((x7783*x7785)));
evalcond[3]=((((-1.0)*r00*x7787))+((r01*sj5*x7783)));
evalcond[4]=(((cj2*sj1))+((cj5*r20*x7784))+(((-1.0)*x7785*x7786))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7790=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7790.valid){
continue;
}
IkReal x7788=x7790.value;
IkReal x7789=((1.0)*x7788);
cj4array[0]=((((-1.0)*cj2*sj1*x7789))+(((-1.0)*cj1*sj2*x7789)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7791=IKsin(j4);
IkReal x7792=IKcos(j4);
IkReal x7793=(cj5*r00);
IkReal x7794=((1.0)*cj0);
IkReal x7795=((1.0)*x7791);
IkReal x7796=(sj5*x7791);
IkReal x7797=((1.0)*x7792);
evalcond[0]=((-1.0)*r12*x7791);
evalcond[1]=((((-1.0)*r12*x7797))+(((-1.0)*x7794)));
evalcond[2]=((((-1.0)*cj5*r20*x7795))+((r21*x7796)));
evalcond[3]=((((-1.0)*x7793*x7795))+((r01*x7796)));
evalcond[4]=(((x7792*x7793))+(((-1.0)*sj1*sj2*x7794))+((cj0*cj1*cj2))+(((-1.0)*r01*sj5*x7797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7798=IKPowWithIntegerCheck(r12,-1);
if(!x7798.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7798.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7799=IKsin(j4);
IkReal x7800=IKcos(j4);
IkReal x7801=(cj5*r00);
IkReal x7802=(r21*sj5);
IkReal x7803=(cj5*r20);
IkReal x7804=(r01*sj5);
IkReal x7805=((1.0)*x7799);
IkReal x7806=((1.0)*x7800);
evalcond[0]=((-1.0)*r12*x7799);
evalcond[1]=(((x7799*x7802))+(((-1.0)*x7803*x7805)));
evalcond[2]=((((-1.0)*x7801*x7805))+((x7799*x7804)));
evalcond[3]=(((cj2*sj1))+((x7800*x7803))+((cj1*sj2))+(((-1.0)*x7802*x7806)));
evalcond[4]=(((x7800*x7801))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x7804*x7806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7807=((1.0)*cj5);
CheckValue<IkReal> x7808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7807))+(((-1.0)*r20*sj5)))),-1);
if(!x7808.valid){
continue;
}
CheckValue<IkReal> x7809 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x7807))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x7807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7808.value)))+(x7809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7810=IKsin(j4);
IkReal x7811=IKcos(j4);
IkReal x7812=(cj1*cj2);
IkReal x7813=(cj5*r10);
IkReal x7814=(r01*sj5);
IkReal x7815=(cj5*r00);
IkReal x7816=(cj5*r20);
IkReal x7817=((1.0)*cj0);
IkReal x7818=(sj1*sj2);
IkReal x7819=((1.0)*x7811);
IkReal x7820=((1.0)*x7810);
IkReal x7821=(sj5*x7810);
evalcond[0]=((((-1.0)*x7816*x7820))+((r21*x7821))+(((-1.0)*r22*x7819)));
evalcond[1]=(sj0+((x7810*x7814))+(((-1.0)*r02*x7819))+(((-1.0)*x7815*x7820)));
evalcond[2]=(((r11*x7821))+(((-1.0)*x7817))+(((-1.0)*r12*x7819))+(((-1.0)*x7813*x7820)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7819))+((cj1*sj2))+(((-1.0)*r22*x7820))+((x7811*x7816)));
evalcond[4]=((((-1.0)*r02*x7820))+(((-1.0)*x7817*x7818))+(((-1.0)*x7814*x7819))+((x7811*x7815))+((cj0*x7812)));
evalcond[5]=((((-1.0)*sj0*x7818))+((sj0*x7812))+(((-1.0)*r12*x7820))+(((-1.0)*r11*sj5*x7819))+((x7811*x7813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7822=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7822.valid){
continue;
}
CheckValue<IkReal> x7823 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7822.value)))+(x7823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7824=IKsin(j4);
IkReal x7825=IKcos(j4);
IkReal x7826=(cj1*cj2);
IkReal x7827=(cj5*r10);
IkReal x7828=(r01*sj5);
IkReal x7829=(cj5*r00);
IkReal x7830=(cj5*r20);
IkReal x7831=((1.0)*cj0);
IkReal x7832=(sj1*sj2);
IkReal x7833=((1.0)*x7825);
IkReal x7834=((1.0)*x7824);
IkReal x7835=(sj5*x7824);
evalcond[0]=(((r21*x7835))+(((-1.0)*r22*x7833))+(((-1.0)*x7830*x7834)));
evalcond[1]=(sj0+(((-1.0)*x7829*x7834))+(((-1.0)*r02*x7833))+((x7824*x7828)));
evalcond[2]=((((-1.0)*r12*x7833))+(((-1.0)*x7831))+(((-1.0)*x7827*x7834))+((r11*x7835)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7834))+((cj1*sj2))+(((-1.0)*r21*sj5*x7833))+((x7825*x7830)));
evalcond[4]=((((-1.0)*x7828*x7833))+((x7825*x7829))+(((-1.0)*x7831*x7832))+(((-1.0)*r02*x7834))+((cj0*x7826)));
evalcond[5]=((((-1.0)*sj0*x7832))+((x7825*x7827))+((sj0*x7826))+(((-1.0)*r11*sj5*x7833))+(((-1.0)*r12*x7834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7836=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7836.valid){
continue;
}
CheckValue<IkReal> x7837 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7836.value)))+(x7837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7838=IKsin(j4);
IkReal x7839=IKcos(j4);
IkReal x7840=(cj1*cj2);
IkReal x7841=(cj5*r10);
IkReal x7842=(r01*sj5);
IkReal x7843=(cj5*r00);
IkReal x7844=(cj5*r20);
IkReal x7845=((1.0)*cj0);
IkReal x7846=(sj1*sj2);
IkReal x7847=((1.0)*x7839);
IkReal x7848=((1.0)*x7838);
IkReal x7849=(sj5*x7838);
evalcond[0]=((((-1.0)*x7844*x7848))+((r21*x7849))+(((-1.0)*r22*x7847)));
evalcond[1]=(sj0+(((-1.0)*x7843*x7848))+((x7838*x7842))+(((-1.0)*r02*x7847)));
evalcond[2]=((((-1.0)*x7841*x7848))+(((-1.0)*r12*x7847))+((r11*x7849))+(((-1.0)*x7845)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7848))+((cj1*sj2))+((x7839*x7844))+(((-1.0)*r21*sj5*x7847)));
evalcond[4]=((((-1.0)*x7842*x7847))+(((-1.0)*x7845*x7846))+((x7839*x7843))+((cj0*x7840))+(((-1.0)*r02*x7848)));
evalcond[5]=((((-1.0)*sj0*x7846))+(((-1.0)*r11*sj5*x7847))+((x7839*x7841))+(((-1.0)*r12*x7848))+((sj0*x7840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7850=cj5*cj5;
IkReal x7851=r21*r21;
IkReal x7852=(cj2*sj1);
IkReal x7853=(cj1*sj2);
IkReal x7854=(r21*sj5);
IkReal x7855=((1.0)*cj5*r20);
CheckValue<IkReal> x7856 = IKatan2WithCheck(IkReal((((r22*x7852))+((r22*x7853)))),IkReal((((x7852*x7854))+((x7853*x7854))+(((-1.0)*x7852*x7855))+(((-1.0)*x7853*x7855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7856.valid){
continue;
}
CheckValue<IkReal> x7857=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*cj5*r20*x7854))+x7851+((x7850*(r20*r20)))+(((-1.0)*x7850*x7851)))),-1);
if(!x7857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7856.value)+(((1.5707963267949)*(x7857.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7858=IKsin(j4);
IkReal x7859=IKcos(j4);
IkReal x7860=(r21*sj5);
IkReal x7861=(cj5*r20);
IkReal x7862=((1.0)*x7859);
IkReal x7863=((1.0)*x7858);
evalcond[0]=(((x7858*x7860))+(((-1.0)*x7861*x7863))+(((-1.0)*r22*x7862)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x7859*x7861))+(((-1.0)*x7860*x7862))+(((-1.0)*r22*x7863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7864=(cj5*sj4);
IkReal x7865=(sj4*sj5);
if( IKabs((((r00*x7864))+(((-1.0)*r01*x7865))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x7865))+(((-1.0)*r10*x7864))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x7864))+(((-1.0)*r01*x7865))+((cj4*r02))))+IKsqr((((r11*x7865))+(((-1.0)*r10*x7864))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x7864))+(((-1.0)*r01*x7865))+((cj4*r02))), (((r11*x7865))+(((-1.0)*r10*x7864))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7866=IKcos(j0);
IkReal x7867=IKsin(j0);
IkReal x7868=(cj4*cj5);
IkReal x7869=(r11*sj5);
IkReal x7870=(cj1*cj2);
IkReal x7871=(cj5*r11);
IkReal x7872=((1.0)*sj4);
IkReal x7873=(cj5*r01);
IkReal x7874=((1.0)*sj5);
IkReal x7875=((0.09465)*sj5);
IkReal x7876=((1.0)*cj4);
IkReal x7877=(sj1*x7866);
IkReal x7878=(cj1*x7867);
IkReal x7879=(cj1*x7866);
IkReal x7880=(sj1*sj2*x7867);
evalcond[0]=(((r01*sj4*sj5))+x7867+(((-1.0)*r02*x7876))+(((-1.0)*cj5*r00*x7872)));
evalcond[1]=((((-1.0)*r12*x7876))+(((-1.0)*x7866))+(((-1.0)*cj5*r10*x7872))+((sj4*x7869)));
evalcond[2]=(((sj2*x7879))+(((-1.0)*r00*x7874))+((cj2*x7877))+(((-1.0)*x7873)));
evalcond[3]=(((sj2*x7878))+(((-1.0)*x7871))+(((-1.0)*r10*x7874))+((cj2*sj1*x7867)));
evalcond[4]=(((x7866*x7870))+(((-1.0)*cj4*r01*x7874))+((r00*x7868))+(((-1.0)*r02*x7872))+(((-1.0)*sj2*x7877)));
evalcond[5]=((((-1.0)*x7880))+(((-1.0)*r12*x7872))+((r10*x7868))+(((-1.0)*x7869*x7876))+((x7867*x7870)));
evalcond[6]=((((0.39225)*sj2*x7877))+(((-1.0)*r00*x7875))+(((-0.39225)*x7866*x7870))+(((0.10915)*x7867))+(((-0.09465)*x7873))+(((-1.0)*px))+(((-0.425)*x7879)));
evalcond[7]=((((-0.10915)*x7866))+(((-0.09465)*x7871))+(((-1.0)*py))+(((-1.0)*r10*x7875))+(((-0.425)*x7878))+(((-0.39225)*x7867*x7870))+(((0.39225)*x7880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7881=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x7881.valid){
continue;
}
CheckValue<IkReal> x7882 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7882.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7881.value)))+(x7882.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7883=IKcos(j0);
IkReal x7884=IKsin(j0);
IkReal x7885=(cj5*r11);
IkReal x7886=(cj5*r01);
IkReal x7887=(cj2*sj1);
IkReal x7888=((1.0)*sj5);
IkReal x7889=((0.09465)*sj5);
IkReal x7890=((0.39225)*cj2);
IkReal x7891=((0.39225)*sj1*sj2);
IkReal x7892=(cj1*x7883);
IkReal x7893=(cj1*x7884);
evalcond[0]=((((-1.0)*r00*x7888))+(((-1.0)*x7886))+((x7883*x7887))+((sj2*x7892)));
evalcond[1]=(((x7884*x7887))+(((-1.0)*x7885))+(((-1.0)*r10*x7888))+((sj2*x7893)));
evalcond[2]=(((x7883*x7891))+(((-1.0)*r00*x7889))+(((0.10915)*x7884))+(((-0.09465)*x7886))+(((-1.0)*px))+(((-1.0)*x7890*x7892))+(((-0.425)*x7892)));
evalcond[3]=((((-0.09465)*x7885))+(((-1.0)*r10*x7889))+(((-1.0)*py))+(((-0.10915)*x7883))+((x7884*x7891))+(((-1.0)*x7890*x7893))+(((-0.425)*x7893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7894=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7894;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7895=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7895;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7896=((1.0)*cj5);
IkReal x7897=((((-1.0)*r21*x7896))+(((-1.0)*r20*sj5)));
j4eval[0]=x7897;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x7896))+(((-1.0)*cj0*r00*x7896))))));
j4eval[2]=IKsign(x7897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7898=((-1.0)*r20);
IkReal x7900 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7900)==0){
continue;
}
IkReal x7899=pow(x7900,-0.5);
CheckValue<IkReal> x7901 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7898),IKFAST_ATAN2_MAGTHRESH);
if(!x7901.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7901.value));
IkReal gconst133=(r21*x7899);
IkReal gconst134=(x7898*x7899);
CheckValue<IkReal> x7902 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7902.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7902.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7903=((-1.0)*r20);
IkReal x7904=x7899;
CheckValue<IkReal> x7906 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7903),IKFAST_ATAN2_MAGTHRESH);
if(!x7906.valid){
continue;
}
IkReal x7905=((-1.0)*(x7906.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7905;
IkReal gconst132=x7905;
IkReal gconst133=(r21*x7904);
IkReal gconst134=(x7903*x7904);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7907=((-1.0)*r20);
IkReal x7908=x7899;
CheckValue<IkReal> x7910 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7907),IKFAST_ATAN2_MAGTHRESH);
if(!x7910.valid){
continue;
}
IkReal x7909=((-1.0)*(x7910.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7909;
IkReal gconst132=x7909;
IkReal gconst133=(r21*x7908);
IkReal gconst134=(x7907*x7908);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7911=((-1.0)*r20);
IkReal x7912=x7899;
CheckValue<IkReal> x7914 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7911),IKFAST_ATAN2_MAGTHRESH);
if(!x7914.valid){
continue;
}
IkReal x7913=((-1.0)*(x7914.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7913;
IkReal gconst132=x7913;
IkReal gconst133=(r21*x7912);
IkReal gconst134=(x7911*x7912);
IkReal x7915=r22*r22;
CheckValue<IkReal> x7918=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7915))),-1);
if(!x7918.valid){
continue;
}
IkReal x7916=x7918.value;
IkReal x7917=((((2.0)*x7916*(r20*r20)*(r21*r21)))+((x7916*(r21*r21*r21*r21)))+x7915+((x7916*(r20*r20*r20*r20))));
j4eval[0]=x7917;
j4eval[1]=IKsign(x7917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7919=(gconst133*r21);
IkReal x7920=(cj1*sj2);
IkReal x7921=(gconst134*r20);
IkReal x7922=(cj2*sj1);
CheckValue<IkReal> x7923=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7919*x7919)+(((-2.0)*x7919*x7921))+(x7921*x7921))),-1);
if(!x7923.valid){
continue;
}
CheckValue<IkReal> x7924 = IKatan2WithCheck(IkReal((((r22*x7922))+((r22*x7920)))),IkReal(((((-1.0)*x7920*x7921))+(((-1.0)*x7921*x7922))+((x7919*x7922))+((x7919*x7920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7923.value)))+(x7924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7925=IKsin(j4);
IkReal x7926=IKcos(j4);
IkReal x7927=(cj1*cj2);
IkReal x7928=(gconst133*r11);
IkReal x7929=(gconst133*r21);
IkReal x7930=(gconst133*r01);
IkReal x7931=((1.0)*cj0);
IkReal x7932=(sj1*sj2);
IkReal x7933=((1.0)*x7926);
IkReal x7934=(gconst134*x7926);
IkReal x7935=((1.0)*x7925);
evalcond[0]=((((-1.0)*r22*x7933))+((x7925*x7929))+(((-1.0)*gconst134*r20*x7935)));
evalcond[1]=(sj0+(((-1.0)*r02*x7933))+((x7925*x7930))+(((-1.0)*gconst134*r00*x7935)));
evalcond[2]=((((-1.0)*gconst134*r10*x7935))+(((-1.0)*r12*x7933))+((x7925*x7928))+(((-1.0)*x7931)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7935))+((r20*x7934))+((cj1*sj2))+(((-1.0)*x7929*x7933)));
evalcond[4]=((((-1.0)*r02*x7935))+(((-1.0)*x7930*x7933))+((r00*x7934))+(((-1.0)*x7931*x7932))+((cj0*x7927)));
evalcond[5]=((((-1.0)*sj0*x7932))+(((-1.0)*r12*x7935))+((r10*x7934))+(((-1.0)*x7928*x7933))+((sj0*x7927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7936=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7936.valid){
continue;
}
CheckValue<IkReal> x7937 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7936.value)))+(x7937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7938=IKsin(j4);
IkReal x7939=IKcos(j4);
IkReal x7940=(cj1*cj2);
IkReal x7941=(gconst133*r11);
IkReal x7942=(gconst133*r21);
IkReal x7943=(gconst133*r01);
IkReal x7944=((1.0)*cj0);
IkReal x7945=(sj1*sj2);
IkReal x7946=((1.0)*x7939);
IkReal x7947=(gconst134*x7939);
IkReal x7948=((1.0)*x7938);
evalcond[0]=((((-1.0)*r22*x7946))+((x7938*x7942))+(((-1.0)*gconst134*r20*x7948)));
evalcond[1]=(sj0+(((-1.0)*r02*x7946))+((x7938*x7943))+(((-1.0)*gconst134*r00*x7948)));
evalcond[2]=((((-1.0)*gconst134*r10*x7948))+(((-1.0)*r12*x7946))+((x7938*x7941))+(((-1.0)*x7944)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7948))+((r20*x7947))+((cj1*sj2))+(((-1.0)*x7942*x7946)));
evalcond[4]=(((cj0*x7940))+(((-1.0)*r02*x7948))+(((-1.0)*x7944*x7945))+((r00*x7947))+(((-1.0)*x7943*x7946)));
evalcond[5]=((((-1.0)*x7941*x7946))+((sj0*x7940))+(((-1.0)*sj0*x7945))+(((-1.0)*r12*x7948))+((r10*x7947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7949 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7949.valid){
continue;
}
CheckValue<IkReal> x7950=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7949.value)+(((1.5707963267949)*(x7950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7951=IKsin(j4);
IkReal x7952=IKcos(j4);
IkReal x7953=(cj1*cj2);
IkReal x7954=(gconst133*r11);
IkReal x7955=(gconst133*r21);
IkReal x7956=(gconst133*r01);
IkReal x7957=((1.0)*cj0);
IkReal x7958=(sj1*sj2);
IkReal x7959=((1.0)*x7952);
IkReal x7960=(gconst134*x7952);
IkReal x7961=((1.0)*x7951);
evalcond[0]=((((-1.0)*r22*x7959))+(((-1.0)*gconst134*r20*x7961))+((x7951*x7955)));
evalcond[1]=((((-1.0)*gconst134*r00*x7961))+sj0+((x7951*x7956))+(((-1.0)*r02*x7959)));
evalcond[2]=(((x7951*x7954))+(((-1.0)*x7957))+(((-1.0)*r12*x7959))+(((-1.0)*gconst134*r10*x7961)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7961))+((cj1*sj2))+(((-1.0)*x7955*x7959))+((r20*x7960)));
evalcond[4]=((((-1.0)*x7957*x7958))+(((-1.0)*x7956*x7959))+((r00*x7960))+((cj0*x7953))+(((-1.0)*r02*x7961)));
evalcond[5]=((((-1.0)*x7954*x7959))+(((-1.0)*r12*x7961))+(((-1.0)*sj0*x7958))+((sj0*x7953))+((r10*x7960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7962=((-1.0)*r21);
IkReal x7964 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7964)==0){
continue;
}
IkReal x7963=pow(x7964,-0.5);
CheckValue<IkReal> x7965 = IKatan2WithCheck(IkReal(x7962),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7965.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7965.value))));
IkReal gconst136=(x7962*x7963);
IkReal gconst137=((1.0)*r20*x7963);
CheckValue<IkReal> x7966 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7966.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7966.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7967=((-1.0)*r21);
CheckValue<IkReal> x7970 = IKatan2WithCheck(IkReal(x7967),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7970.valid){
continue;
}
IkReal x7968=((1.0)*(x7970.value));
IkReal x7969=x7963;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7968)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7968)));
IkReal gconst136=(x7967*x7969);
IkReal gconst137=((1.0)*r20*x7969);
IkReal x7971=r22*r22;
IkReal x7972=((1.0)*x7971);
CheckValue<IkReal> x7976=IKPowWithIntegerCheck(((-1.0)+x7971),-1);
if(!x7976.valid){
continue;
}
IkReal x7973=x7976.value;
if((((1.0)+(((-1.0)*x7972)))) < -0.00001)
continue;
IkReal x7974=IKsqrt(((1.0)+(((-1.0)*x7972))));
IkReal x7975=(sj0*x7973*x7974);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7975+(((-1.0)*x7972*x7975))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7977=((-1.0)*r21);
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(x7977),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
IkReal x7978=((1.0)*(x7980.value));
IkReal x7979=x7963;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7978)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7978)));
IkReal gconst136=(x7977*x7979);
IkReal gconst137=((1.0)*r20*x7979);
IkReal x7981=r22*r22;
IkReal x7982=((1.0)*x7981);
CheckValue<IkReal> x7986=IKPowWithIntegerCheck(((-1.0)+x7981),-1);
if(!x7986.valid){
continue;
}
IkReal x7983=x7986.value;
if((((1.0)+(((-1.0)*x7982)))) < -0.00001)
continue;
IkReal x7984=IKsqrt(((1.0)+(((-1.0)*x7982))));
IkReal x7985=(cj0*x7983*x7984);
j4eval[0]=((IKabs((x7985+(((-1.0)*x7982*x7985)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7987=((-1.0)*r21);
CheckValue<IkReal> x7990 = IKatan2WithCheck(IkReal(x7987),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7990.valid){
continue;
}
IkReal x7988=((1.0)*(x7990.value));
IkReal x7989=x7963;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7988)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7988)));
IkReal gconst136=(x7987*x7989);
IkReal gconst137=((1.0)*r20*x7989);
IkReal x7991=r22*r22;
IkReal x7992=(cj0*r02);
IkReal x7993=(r12*sj0);
CheckValue<IkReal> x7997=IKPowWithIntegerCheck(((-1.0)+x7991),-1);
if(!x7997.valid){
continue;
}
IkReal x7994=x7997.value;
if((((1.0)+(((-1.0)*x7991)))) < -0.00001)
continue;
IkReal x7995=IKsqrt(((1.0)+(((-1.0)*x7991))));
IkReal x7996=((1.0)*r22*x7994*x7995);
j4eval[0]=0;
j4eval[1]=((IKabs((x7993+x7992)))+(IKabs(((((-1.0)*x7992*x7996))+(((-1.0)*x7993*x7996))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7998=((1.0)*gconst137);
CheckValue<IkReal> x7999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7998))+(((-1.0)*gconst136*r20)))),-1);
if(!x7999.valid){
continue;
}
CheckValue<IkReal> x8000 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x7998))+((gconst136*r11*sj0))+((cj0*gconst136*r01))+(((-1.0)*cj0*r00*x7998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7999.value)))+(x8000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8001=IKsin(j4);
IkReal x8002=IKcos(j4);
IkReal x8003=(gconst136*r01);
IkReal x8004=(gconst137*r10);
IkReal x8005=(cj1*cj2);
IkReal x8006=(gconst137*r20);
IkReal x8007=(gconst136*r11);
IkReal x8008=(gconst136*r21);
IkReal x8009=(gconst137*r00);
IkReal x8010=((1.0)*cj0);
IkReal x8011=(sj1*sj2);
IkReal x8012=((1.0)*x8002);
IkReal x8013=((1.0)*x8001);
evalcond[0]=((((-1.0)*r22*x8012))+((x8001*x8008))+(((-1.0)*x8006*x8013)));
evalcond[1]=((((-1.0)*x8009*x8013))+((x8001*x8003))+(((-1.0)*r02*x8012))+sj0);
evalcond[2]=(((x8001*x8007))+(((-1.0)*x8010))+(((-1.0)*x8004*x8013))+(((-1.0)*r12*x8012)));
evalcond[3]=((((-1.0)*r22*x8013))+(((-1.0)*x8008*x8012))+((cj2*sj1))+((cj1*sj2))+((x8002*x8006)));
evalcond[4]=((((-1.0)*r02*x8013))+(((-1.0)*x8010*x8011))+((cj0*x8005))+(((-1.0)*x8003*x8012))+((x8002*x8009)));
evalcond[5]=(((sj0*x8005))+(((-1.0)*sj0*x8011))+(((-1.0)*r12*x8013))+(((-1.0)*x8007*x8012))+((x8002*x8004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8014 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8014.valid){
continue;
}
CheckValue<IkReal> x8015=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x8015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8014.value)+(((1.5707963267949)*(x8015.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8016=IKsin(j4);
IkReal x8017=IKcos(j4);
IkReal x8018=(gconst136*r01);
IkReal x8019=(gconst137*r10);
IkReal x8020=(cj1*cj2);
IkReal x8021=(gconst137*r20);
IkReal x8022=(gconst136*r11);
IkReal x8023=(gconst136*r21);
IkReal x8024=(gconst137*r00);
IkReal x8025=((1.0)*cj0);
IkReal x8026=(sj1*sj2);
IkReal x8027=((1.0)*x8017);
IkReal x8028=((1.0)*x8016);
evalcond[0]=(((x8016*x8023))+(((-1.0)*r22*x8027))+(((-1.0)*x8021*x8028)));
evalcond[1]=(sj0+(((-1.0)*r02*x8027))+((x8016*x8018))+(((-1.0)*x8024*x8028)));
evalcond[2]=((((-1.0)*r12*x8027))+((x8016*x8022))+(((-1.0)*x8019*x8028))+(((-1.0)*x8025)));
evalcond[3]=(((cj2*sj1))+((x8017*x8021))+((cj1*sj2))+(((-1.0)*x8023*x8027))+(((-1.0)*r22*x8028)));
evalcond[4]=((((-1.0)*x8025*x8026))+((x8017*x8024))+(((-1.0)*r02*x8028))+((cj0*x8020))+(((-1.0)*x8018*x8027)));
evalcond[5]=((((-1.0)*sj0*x8026))+(((-1.0)*r12*x8028))+((sj0*x8020))+(((-1.0)*x8022*x8027))+((x8017*x8019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8029=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x8029.valid){
continue;
}
CheckValue<IkReal> x8030 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8029.value)))+(x8030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8031=IKsin(j4);
IkReal x8032=IKcos(j4);
IkReal x8033=(gconst136*r01);
IkReal x8034=(gconst137*r10);
IkReal x8035=(cj1*cj2);
IkReal x8036=(gconst137*r20);
IkReal x8037=(gconst136*r11);
IkReal x8038=(gconst136*r21);
IkReal x8039=(gconst137*r00);
IkReal x8040=((1.0)*cj0);
IkReal x8041=(sj1*sj2);
IkReal x8042=((1.0)*x8032);
IkReal x8043=((1.0)*x8031);
evalcond[0]=((((-1.0)*x8036*x8043))+(((-1.0)*r22*x8042))+((x8031*x8038)));
evalcond[1]=(sj0+(((-1.0)*r02*x8042))+(((-1.0)*x8039*x8043))+((x8031*x8033)));
evalcond[2]=((((-1.0)*x8034*x8043))+(((-1.0)*x8040))+(((-1.0)*r12*x8042))+((x8031*x8037)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8032*x8036))+(((-1.0)*r22*x8043))+(((-1.0)*x8038*x8042)));
evalcond[4]=((((-1.0)*x8033*x8042))+((cj0*x8035))+(((-1.0)*x8040*x8041))+((x8032*x8039))+(((-1.0)*r02*x8043)));
evalcond[5]=((((-1.0)*sj0*x8041))+((sj0*x8035))+(((-1.0)*x8037*x8042))+((x8032*x8034))+(((-1.0)*r12*x8043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8045 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8045)==0){
continue;
}
IkReal x8044=pow(x8045,-0.5);
CheckValue<IkReal> x8046 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8046.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8046.value));
IkReal gconst139=((-1.0)*r01*x8044);
IkReal gconst140=(r00*x8044);
CheckValue<IkReal> x8047 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8047.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8047.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8050 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8050.valid){
continue;
}
IkReal x8048=((-1.0)*(x8050.value));
IkReal x8049=x8044;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8048;
IkReal gconst138=x8048;
IkReal gconst139=((-1.0)*r01*x8049);
IkReal gconst140=(r00*x8049);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8051=((1.0)*gconst140);
CheckValue<IkReal> x8052 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x8051))+((gconst139*r11*sj0))+((cj0*gconst139*r01))+(((-1.0)*r10*sj0*x8051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8052.valid){
continue;
}
CheckValue<IkReal> x8053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8051))+(((-1.0)*gconst139*r20)))),-1);
if(!x8053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8052.value)+(((1.5707963267949)*(x8053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8054=IKsin(j4);
IkReal x8055=IKcos(j4);
IkReal x8056=(gconst140*r00);
IkReal x8057=(cj1*cj2);
IkReal x8058=(gconst139*r11);
IkReal x8059=(gconst139*r01);
IkReal x8060=((1.0)*cj0);
IkReal x8061=(gconst139*r21);
IkReal x8062=(sj1*sj2);
IkReal x8063=((1.0)*x8055);
IkReal x8064=((1.0)*x8054);
IkReal x8065=(gconst140*x8055);
evalcond[0]=((((-1.0)*gconst140*r20*x8064))+((x8054*x8061))+(((-1.0)*r22*x8063)));
evalcond[1]=(sj0+((x8054*x8059))+(((-1.0)*x8056*x8064))+(((-1.0)*r02*x8063)));
evalcond[2]=((((-1.0)*x8060))+(((-1.0)*gconst140*r10*x8064))+((x8054*x8058))+(((-1.0)*r12*x8063)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8061*x8063))+((r20*x8065))+(((-1.0)*r22*x8064)));
evalcond[4]=(((cj0*x8057))+(((-1.0)*x8060*x8062))+(((-1.0)*x8059*x8063))+((x8055*x8056))+(((-1.0)*r02*x8064)));
evalcond[5]=(((r10*x8065))+(((-1.0)*sj0*x8062))+((sj0*x8057))+(((-1.0)*r12*x8064))+(((-1.0)*x8058*x8063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8066 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8066.valid){
continue;
}
CheckValue<IkReal> x8067=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x8067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8066.value)+(((1.5707963267949)*(x8067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8068=IKsin(j4);
IkReal x8069=IKcos(j4);
IkReal x8070=(gconst140*r00);
IkReal x8071=(cj1*cj2);
IkReal x8072=(gconst139*r11);
IkReal x8073=(gconst139*r01);
IkReal x8074=((1.0)*cj0);
IkReal x8075=(gconst139*r21);
IkReal x8076=(sj1*sj2);
IkReal x8077=((1.0)*x8069);
IkReal x8078=((1.0)*x8068);
IkReal x8079=(gconst140*x8069);
evalcond[0]=(((x8068*x8075))+(((-1.0)*gconst140*r20*x8078))+(((-1.0)*r22*x8077)));
evalcond[1]=(((x8068*x8073))+sj0+(((-1.0)*r02*x8077))+(((-1.0)*x8070*x8078)));
evalcond[2]=(((x8068*x8072))+(((-1.0)*gconst140*r10*x8078))+(((-1.0)*x8074))+(((-1.0)*r12*x8077)));
evalcond[3]=(((cj2*sj1))+((r20*x8079))+((cj1*sj2))+(((-1.0)*x8075*x8077))+(((-1.0)*r22*x8078)));
evalcond[4]=((((-1.0)*r02*x8078))+((x8069*x8070))+((cj0*x8071))+(((-1.0)*x8073*x8077))+(((-1.0)*x8074*x8076)));
evalcond[5]=((((-1.0)*x8072*x8077))+((r10*x8079))+((sj0*x8071))+(((-1.0)*sj0*x8076))+(((-1.0)*r12*x8078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8081 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8081)==0){
continue;
}
IkReal x8080=pow(x8081,-0.5);
CheckValue<IkReal> x8082 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8082.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8082.value))));
IkReal gconst142=((1.0)*r01*x8080);
IkReal gconst143=((-1.0)*r00*x8080);
CheckValue<IkReal> x8083 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8083.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8083.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8086 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8086.valid){
continue;
}
IkReal x8084=((1.0)*(x8086.value));
IkReal x8085=x8080;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8084)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8084)));
IkReal gconst142=((1.0)*r01*x8085);
IkReal gconst143=((-1.0)*r00*x8085);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x8089 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8089.valid){
continue;
}
IkReal x8087=((1.0)*(x8089.value));
IkReal x8088=x8080;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8087)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8087)));
IkReal gconst142=((1.0)*r01*x8088);
IkReal gconst143=((-1.0)*r00*x8088);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8092 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8092.valid){
continue;
}
IkReal x8090=((1.0)*(x8092.value));
IkReal x8091=x8080;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8090)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8090)));
IkReal gconst142=((1.0)*r01*x8091);
IkReal gconst143=((-1.0)*r00*x8091);
IkReal x8093=r02*r02;
IkReal x8094=(r12*sj0);
IkReal x8095=x8080;
IkReal x8096=(cj0*x8095);
j4eval[0]=((IKabs(((((-1.0)*x8096))+((r02*x8094*x8095))+((x8093*x8096)))))+(IKabs((x8094+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8097=((1.0)*gconst143);
CheckValue<IkReal> x8098=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r20))+(((-1.0)*r21*x8097)))),-1);
if(!x8098.valid){
continue;
}
CheckValue<IkReal> x8099 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x8097))+((cj0*gconst142*r01))+(((-1.0)*r10*sj0*x8097))+((gconst142*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8098.value)))+(x8099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8100=IKsin(j4);
IkReal x8101=IKcos(j4);
IkReal x8102=(cj1*cj2);
IkReal x8103=(gconst143*r20);
IkReal x8104=((1.0)*cj0);
IkReal x8105=(sj1*sj2);
IkReal x8106=((1.0)*x8101);
IkReal x8107=((1.0)*x8100);
IkReal x8108=(gconst142*x8100);
IkReal x8109=(gconst143*x8101);
evalcond[0]=((((-1.0)*x8103*x8107))+(((-1.0)*r22*x8106))+((r21*x8108)));
evalcond[1]=(sj0+((r01*x8108))+(((-1.0)*gconst143*r00*x8107))+(((-1.0)*r02*x8106)));
evalcond[2]=((((-1.0)*x8104))+(((-1.0)*gconst143*r10*x8107))+((r11*x8108))+(((-1.0)*r12*x8106)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8106))+((x8101*x8103))+((cj1*sj2))+(((-1.0)*r22*x8107)));
evalcond[4]=((((-1.0)*x8104*x8105))+(((-1.0)*gconst142*r01*x8106))+((cj0*x8102))+((r00*x8109))+(((-1.0)*r02*x8107)));
evalcond[5]=(((sj0*x8102))+((r10*x8109))+(((-1.0)*sj0*x8105))+(((-1.0)*gconst142*r11*x8106))+(((-1.0)*r12*x8107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8110=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x8110.valid){
continue;
}
CheckValue<IkReal> x8111 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8110.value)))+(x8111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8112=IKsin(j4);
IkReal x8113=IKcos(j4);
IkReal x8114=(cj1*cj2);
IkReal x8115=(gconst143*r20);
IkReal x8116=((1.0)*cj0);
IkReal x8117=(sj1*sj2);
IkReal x8118=((1.0)*x8113);
IkReal x8119=((1.0)*x8112);
IkReal x8120=(gconst142*x8112);
IkReal x8121=(gconst143*x8113);
evalcond[0]=((((-1.0)*x8115*x8119))+((r21*x8120))+(((-1.0)*r22*x8118)));
evalcond[1]=((((-1.0)*gconst143*r00*x8119))+sj0+(((-1.0)*r02*x8118))+((r01*x8120)));
evalcond[2]=((((-1.0)*x8116))+(((-1.0)*r12*x8118))+(((-1.0)*gconst143*r10*x8119))+((r11*x8120)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8119))+((x8113*x8115))+(((-1.0)*gconst142*r21*x8118)));
evalcond[4]=(((cj0*x8114))+(((-1.0)*x8116*x8117))+(((-1.0)*gconst142*r01*x8118))+((r00*x8121))+(((-1.0)*r02*x8119)));
evalcond[5]=((((-1.0)*r12*x8119))+((r10*x8121))+(((-1.0)*gconst142*r11*x8118))+(((-1.0)*sj0*x8117))+((sj0*x8114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8122=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x8122.valid){
continue;
}
CheckValue<IkReal> x8123 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8122.value)))+(x8123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8124=IKsin(j4);
IkReal x8125=IKcos(j4);
IkReal x8126=(cj1*cj2);
IkReal x8127=(gconst143*r20);
IkReal x8128=((1.0)*cj0);
IkReal x8129=(sj1*sj2);
IkReal x8130=((1.0)*x8125);
IkReal x8131=((1.0)*x8124);
IkReal x8132=(gconst142*x8124);
IkReal x8133=(gconst143*x8125);
evalcond[0]=((((-1.0)*r22*x8130))+((r21*x8132))+(((-1.0)*x8127*x8131)));
evalcond[1]=((((-1.0)*r02*x8130))+sj0+(((-1.0)*gconst143*r00*x8131))+((r01*x8132)));
evalcond[2]=(((r11*x8132))+(((-1.0)*x8128))+(((-1.0)*r12*x8130))+(((-1.0)*gconst143*r10*x8131)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8131))+((cj1*sj2))+((x8125*x8127))+(((-1.0)*gconst142*r21*x8130)));
evalcond[4]=((((-1.0)*r02*x8131))+((r00*x8133))+((cj0*x8126))+(((-1.0)*gconst142*r01*x8130))+(((-1.0)*x8128*x8129)));
evalcond[5]=((((-1.0)*gconst142*r11*x8130))+(((-1.0)*r12*x8131))+(((-1.0)*sj0*x8129))+((r10*x8133))+((sj0*x8126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8134=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8134;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8135=((1.0)*cj5);
IkReal x8136=((((-1.0)*r21*x8135))+(((-1.0)*r20*sj5)));
j4eval[0]=x8136;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8135))))));
j4eval[2]=IKsign(x8136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8137=cj5*cj5;
IkReal x8138=r01*r01;
IkReal x8139=(cj5*r00);
IkReal x8140=(r01*sj5);
IkReal x8141=((((-2.0)*x8139*x8140))+(((-1.0)*x8137*x8138))+((x8137*(r00*r00)))+(r02*r02)+x8138);
j4eval[0]=x8141;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8140))+x8139))));
j4eval[2]=IKsign(x8141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8142=cj5*cj5;
IkReal x8143=r01*r01;
IkReal x8144=(r01*sj5);
IkReal x8145=(cj5*r00);
CheckValue<IkReal> x8146=IKPowWithIntegerCheck(IKsign((((x8142*(r00*r00)))+(((-1.0)*x8142*x8143))+(((-2.0)*x8144*x8145))+(r02*r02)+x8143)),-1);
if(!x8146.valid){
continue;
}
CheckValue<IkReal> x8147 = IKatan2WithCheck(IkReal(((((-1.0)*x8144))+x8145)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8146.value)))+(x8147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8148=IKsin(j4);
IkReal x8149=IKcos(j4);
IkReal x8150=(cj5*r10);
IkReal x8151=(r01*sj5);
IkReal x8152=(cj5*r00);
IkReal x8153=(cj5*r20);
IkReal x8154=((1.0)*x8149);
IkReal x8155=((1.0)*x8148);
IkReal x8156=(sj5*x8148);
evalcond[0]=((((-1.0)*x8153*x8155))+(((-1.0)*r22*x8154))+((r21*x8156)));
evalcond[1]=((((-1.0)*x8150*x8155))+((r11*x8156))+(((-1.0)*r12*x8154)));
evalcond[2]=((((-1.0)*r02*x8155))+((x8149*x8152))+(((-1.0)*x8151*x8154)));
evalcond[3]=((1.0)+((x8148*x8151))+(((-1.0)*r02*x8154))+(((-1.0)*x8152*x8155)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8149*x8153))+(((-1.0)*r21*sj5*x8154))+(((-1.0)*r22*x8155)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8154))+((x8149*x8150))+((cj1*cj2))+(((-1.0)*r12*x8155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8157=((1.0)*cj5);
CheckValue<IkReal> x8158 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8157))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8158.valid){
continue;
}
CheckValue<IkReal> x8159=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8157))+(((-1.0)*r20*sj5)))),-1);
if(!x8159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8158.value)+(((1.5707963267949)*(x8159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8160=IKsin(j4);
IkReal x8161=IKcos(j4);
IkReal x8162=(cj5*r10);
IkReal x8163=(r01*sj5);
IkReal x8164=(cj5*r00);
IkReal x8165=(cj5*r20);
IkReal x8166=((1.0)*x8161);
IkReal x8167=((1.0)*x8160);
IkReal x8168=(sj5*x8160);
evalcond[0]=((((-1.0)*x8165*x8167))+((r21*x8168))+(((-1.0)*r22*x8166)));
evalcond[1]=(((r11*x8168))+(((-1.0)*x8162*x8167))+(((-1.0)*r12*x8166)));
evalcond[2]=((((-1.0)*r02*x8167))+(((-1.0)*x8163*x8166))+((x8161*x8164)));
evalcond[3]=((1.0)+((x8160*x8163))+(((-1.0)*r02*x8166))+(((-1.0)*x8164*x8167)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8166))+((cj1*sj2))+((x8161*x8165))+(((-1.0)*r22*x8167)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8167))+((x8161*x8162))+(((-1.0)*r11*sj5*x8166))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8169 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8169.valid){
continue;
}
CheckValue<IkReal> x8170=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8169.value)+(((1.5707963267949)*(x8170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8171=IKsin(j4);
IkReal x8172=IKcos(j4);
IkReal x8173=(cj5*r10);
IkReal x8174=(r01*sj5);
IkReal x8175=(cj5*r00);
IkReal x8176=(cj5*r20);
IkReal x8177=((1.0)*x8172);
IkReal x8178=((1.0)*x8171);
IkReal x8179=(sj5*x8171);
evalcond[0]=((((-1.0)*x8176*x8178))+(((-1.0)*r22*x8177))+((r21*x8179)));
evalcond[1]=((((-1.0)*r12*x8177))+((r11*x8179))+(((-1.0)*x8173*x8178)));
evalcond[2]=((((-1.0)*x8174*x8177))+(((-1.0)*r02*x8178))+((x8172*x8175)));
evalcond[3]=((1.0)+(((-1.0)*x8175*x8178))+(((-1.0)*r02*x8177))+((x8171*x8174)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8178))+((x8172*x8176))+(((-1.0)*r21*sj5*x8177)));
evalcond[5]=((((-1.0)*r12*x8178))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8172*x8173))+(((-1.0)*r11*sj5*x8177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8180=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8180;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8180);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8181=((1.0)*cj5);
IkReal x8182=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8181)));
j4eval[0]=x8182;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8181)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8182);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8183=cj5*cj5;
IkReal x8184=r01*r01;
IkReal x8185=(r01*sj5);
IkReal x8186=(cj5*r00);
IkReal x8187=(((x8183*x8184))+(((-1.0)*(r02*r02)))+(((-1.0)*x8184))+(((-1.0)*x8183*(r00*r00)))+(((2.0)*x8185*x8186)));
j4eval[0]=x8187;
j4eval[1]=IKsign(x8187);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8185))+x8186))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8188=cj5*cj5;
IkReal x8189=r01*r01;
IkReal x8190=(r01*sj5);
IkReal x8191=(cj5*r00);
CheckValue<IkReal> x8192 = IKatan2WithCheck(IkReal(((((-1.0)*x8190))+x8191)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8192.valid){
continue;
}
CheckValue<IkReal> x8193=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8188*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x8190*x8191))+(((-1.0)*x8189))+((x8188*x8189)))),-1);
if(!x8193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8192.value)+(((1.5707963267949)*(x8193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8194=IKsin(j4);
IkReal x8195=IKcos(j4);
IkReal x8196=(cj5*r10);
IkReal x8197=(r01*sj5);
IkReal x8198=(cj5*r00);
IkReal x8199=(cj5*r20);
IkReal x8200=((1.0)*x8195);
IkReal x8201=((1.0)*x8194);
IkReal x8202=(sj5*x8194);
evalcond[0]=((((-1.0)*r22*x8200))+((r21*x8202))+(((-1.0)*x8199*x8201)));
evalcond[1]=(((r11*x8202))+(((-1.0)*x8196*x8201))+(((-1.0)*r12*x8200)));
evalcond[2]=(((x8195*x8198))+(((-1.0)*r02*x8201))+(((-1.0)*x8197*x8200)));
evalcond[3]=((-1.0)+(((-1.0)*x8198*x8201))+((x8194*x8197))+(((-1.0)*r02*x8200)));
evalcond[4]=(((cj2*sj1))+((x8195*x8199))+((cj1*sj2))+(((-1.0)*r21*sj5*x8200))+(((-1.0)*r22*x8201)));
evalcond[5]=(((x8195*x8196))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8201))+(((-1.0)*r11*sj5*x8200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8203=((1.0)*cj5);
CheckValue<IkReal> x8204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8203)))),-1);
if(!x8204.valid){
continue;
}
CheckValue<IkReal> x8205 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8204.value)))+(x8205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8206=IKsin(j4);
IkReal x8207=IKcos(j4);
IkReal x8208=(cj5*r10);
IkReal x8209=(r01*sj5);
IkReal x8210=(cj5*r00);
IkReal x8211=(cj5*r20);
IkReal x8212=((1.0)*x8207);
IkReal x8213=((1.0)*x8206);
IkReal x8214=(sj5*x8206);
evalcond[0]=((((-1.0)*x8211*x8213))+(((-1.0)*r22*x8212))+((r21*x8214)));
evalcond[1]=(((r11*x8214))+(((-1.0)*x8208*x8213))+(((-1.0)*r12*x8212)));
evalcond[2]=((((-1.0)*x8209*x8212))+(((-1.0)*r02*x8213))+((x8207*x8210)));
evalcond[3]=((-1.0)+((x8206*x8209))+(((-1.0)*r02*x8212))+(((-1.0)*x8210*x8213)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8212))+(((-1.0)*r22*x8213))+((x8207*x8211)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8213))+((x8207*x8208))+(((-1.0)*r11*sj5*x8212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8215=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8215.valid){
continue;
}
CheckValue<IkReal> x8216 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8215.value)))+(x8216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8217=IKsin(j4);
IkReal x8218=IKcos(j4);
IkReal x8219=(cj5*r10);
IkReal x8220=(r01*sj5);
IkReal x8221=(cj5*r00);
IkReal x8222=(cj5*r20);
IkReal x8223=((1.0)*x8218);
IkReal x8224=((1.0)*x8217);
IkReal x8225=(sj5*x8217);
evalcond[0]=(((r21*x8225))+(((-1.0)*r22*x8223))+(((-1.0)*x8222*x8224)));
evalcond[1]=((((-1.0)*x8219*x8224))+((r11*x8225))+(((-1.0)*r12*x8223)));
evalcond[2]=((((-1.0)*x8220*x8223))+((x8218*x8221))+(((-1.0)*r02*x8224)));
evalcond[3]=((-1.0)+(((-1.0)*x8221*x8224))+((x8217*x8220))+(((-1.0)*r02*x8223)));
evalcond[4]=(((cj2*sj1))+((x8218*x8222))+((cj1*sj2))+(((-1.0)*r21*sj5*x8223))+(((-1.0)*r22*x8224)));
evalcond[5]=((((-1.0)*r11*sj5*x8223))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8218*x8219))+(((-1.0)*r12*x8224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8227 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8227)==0){
continue;
}
IkReal x8226=pow(x8227,-0.5);
CheckValue<IkReal> x8228 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8228.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8228.value));
IkReal gconst145=((-1.0)*r11*x8226);
IkReal gconst146=(r10*x8226);
CheckValue<IkReal> x8229 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8229.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8229.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8232 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8232.valid){
continue;
}
IkReal x8230=((-1.0)*(x8232.value));
IkReal x8231=x8226;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8230;
IkReal gconst144=x8230;
IkReal gconst145=((-1.0)*r11*x8231);
IkReal gconst146=(r10*x8231);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8233=((1.0)*gconst146);
CheckValue<IkReal> x8234=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r20))+(((-1.0)*r21*x8233)))),-1);
if(!x8234.valid){
continue;
}
CheckValue<IkReal> x8235 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*r10*sj0*x8233))+(((-1.0)*cj0*r00*x8233))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8234.value)))+(x8235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8236=IKsin(j4);
IkReal x8237=IKcos(j4);
IkReal x8238=(gconst146*r10);
IkReal x8239=(cj1*cj2);
IkReal x8240=(gconst145*r11);
IkReal x8241=(gconst146*r20);
IkReal x8242=(gconst146*r00);
IkReal x8243=((1.0)*cj0);
IkReal x8244=(sj1*sj2);
IkReal x8245=((1.0)*x8237);
IkReal x8246=((1.0)*x8236);
IkReal x8247=(gconst145*x8236);
evalcond[0]=((((-1.0)*x8241*x8246))+(((-1.0)*r22*x8245))+((r21*x8247)));
evalcond[1]=(sj0+(((-1.0)*x8242*x8246))+(((-1.0)*r02*x8245))+((r01*x8247)));
evalcond[2]=((((-1.0)*x8238*x8246))+(((-1.0)*x8243))+((x8236*x8240))+(((-1.0)*r12*x8245)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8246))+((x8237*x8241))+(((-1.0)*gconst145*r21*x8245)));
evalcond[4]=(((cj0*x8239))+(((-1.0)*x8243*x8244))+(((-1.0)*gconst145*r01*x8245))+((x8237*x8242))+(((-1.0)*r02*x8246)));
evalcond[5]=((((-1.0)*sj0*x8244))+(((-1.0)*x8240*x8245))+((x8237*x8238))+(((-1.0)*r12*x8246))+((sj0*x8239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8248 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8248.valid){
continue;
}
CheckValue<IkReal> x8249=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x8249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8248.value)+(((1.5707963267949)*(x8249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8250=IKsin(j4);
IkReal x8251=IKcos(j4);
IkReal x8252=(gconst146*r10);
IkReal x8253=(cj1*cj2);
IkReal x8254=(gconst145*r11);
IkReal x8255=(gconst146*r20);
IkReal x8256=(gconst146*r00);
IkReal x8257=((1.0)*cj0);
IkReal x8258=(sj1*sj2);
IkReal x8259=((1.0)*x8251);
IkReal x8260=((1.0)*x8250);
IkReal x8261=(gconst145*x8250);
evalcond[0]=((((-1.0)*r22*x8259))+((r21*x8261))+(((-1.0)*x8255*x8260)));
evalcond[1]=(sj0+(((-1.0)*x8256*x8260))+((r01*x8261))+(((-1.0)*r02*x8259)));
evalcond[2]=((((-1.0)*x8257))+(((-1.0)*x8252*x8260))+(((-1.0)*r12*x8259))+((x8250*x8254)));
evalcond[3]=(((cj2*sj1))+((x8251*x8255))+((cj1*sj2))+(((-1.0)*r22*x8260))+(((-1.0)*gconst145*r21*x8259)));
evalcond[4]=((((-1.0)*gconst145*r01*x8259))+((x8251*x8256))+(((-1.0)*r02*x8260))+((cj0*x8253))+(((-1.0)*x8257*x8258)));
evalcond[5]=((((-1.0)*r12*x8260))+((x8251*x8252))+((sj0*x8253))+(((-1.0)*sj0*x8258))+(((-1.0)*x8254*x8259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8263 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8263)==0){
continue;
}
IkReal x8262=pow(x8263,-0.5);
CheckValue<IkReal> x8264 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8264.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8264.value))));
IkReal gconst148=((1.0)*r11*x8262);
IkReal gconst149=((-1.0)*r10*x8262);
CheckValue<IkReal> x8265 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8265.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8265.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8268 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8268.valid){
continue;
}
IkReal x8266=((1.0)*(x8268.value));
IkReal x8267=x8262;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8266)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8266)));
IkReal gconst148=((1.0)*r11*x8267);
IkReal gconst149=((-1.0)*r10*x8267);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8271 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8271.valid){
continue;
}
IkReal x8269=((1.0)*(x8271.value));
IkReal x8270=x8262;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8269)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8269)));
IkReal gconst148=((1.0)*r11*x8270);
IkReal gconst149=((-1.0)*r10*x8270);
IkReal x8272=r12*r12;
IkReal x8273=(cj0*r02);
IkReal x8274=x8262;
IkReal x8275=(sj0*x8274);
j4eval[0]=((IKabs((((r12*x8273*x8274))+((x8272*x8275))+(((-1.0)*x8275)))))+(IKabs((((r12*sj0))+x8273))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8278 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8278.valid){
continue;
}
IkReal x8276=((1.0)*(x8278.value));
IkReal x8277=x8262;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8276)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8276)));
IkReal gconst148=((1.0)*r11*x8277);
IkReal gconst149=((-1.0)*r10*x8277);
IkReal x8279=(cj1*r22*sj2);
IkReal x8280=(cj2*r22*sj1);
IkReal x8281=x8262;
IkReal x8282=(r12*x8281);
j4eval[0]=((IKabs((((x8279*x8282))+((x8280*x8282)))))+(IKabs((x8280+x8279))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8283=(cj2*sj1);
IkReal x8284=(cj1*sj2);
IkReal x8285=(gconst148*r21);
IkReal x8286=((1.0)*gconst149*r20);
CheckValue<IkReal> x8287 = IKatan2WithCheck(IkReal((((r22*x8283))+((r22*x8284)))),IkReal(((((-1.0)*x8283*x8286))+((x8284*x8285))+((x8283*x8285))+(((-1.0)*x8284*x8286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8287.valid){
continue;
}
CheckValue<IkReal> x8288=IKPowWithIntegerCheck(IKsign(((x8285*x8285)+(r22*r22)+(((gconst149*gconst149)*(r20*r20)))+(((-2.0)*gconst149*r20*x8285)))),-1);
if(!x8288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8287.value)+(((1.5707963267949)*(x8288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8289=IKsin(j4);
IkReal x8290=IKcos(j4);
IkReal x8291=(cj1*cj2);
IkReal x8292=(gconst148*r11);
IkReal x8293=((1.0)*cj0);
IkReal x8294=(sj1*sj2);
IkReal x8295=((1.0)*x8290);
IkReal x8296=(gconst149*x8290);
IkReal x8297=((1.0)*x8289);
IkReal x8298=(gconst148*x8289);
evalcond[0]=(((r21*x8298))+(((-1.0)*gconst149*r20*x8297))+(((-1.0)*r22*x8295)));
evalcond[1]=(sj0+((r01*x8298))+(((-1.0)*gconst149*r00*x8297))+(((-1.0)*r02*x8295)));
evalcond[2]=((((-1.0)*r12*x8295))+((x8289*x8292))+(((-1.0)*x8293))+(((-1.0)*gconst149*r10*x8297)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8295))+((r20*x8296))+((cj1*sj2))+(((-1.0)*r22*x8297)));
evalcond[4]=(((r00*x8296))+(((-1.0)*x8293*x8294))+((cj0*x8291))+(((-1.0)*r02*x8297))+(((-1.0)*gconst148*r01*x8295)));
evalcond[5]=((((-1.0)*r12*x8297))+((r10*x8296))+(((-1.0)*sj0*x8294))+((sj0*x8291))+(((-1.0)*x8292*x8295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8299=((1.0)*gconst149);
CheckValue<IkReal> x8300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8299))+(((-1.0)*gconst148*r20)))),-1);
if(!x8300.valid){
continue;
}
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst148*r01))+(((-1.0)*r10*sj0*x8299))+(((-1.0)*cj0*r00*x8299))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8300.value)))+(x8301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8302=IKsin(j4);
IkReal x8303=IKcos(j4);
IkReal x8304=(cj1*cj2);
IkReal x8305=(gconst148*r11);
IkReal x8306=((1.0)*cj0);
IkReal x8307=(sj1*sj2);
IkReal x8308=((1.0)*x8303);
IkReal x8309=(gconst149*x8303);
IkReal x8310=((1.0)*x8302);
IkReal x8311=(gconst148*x8302);
evalcond[0]=((((-1.0)*gconst149*r20*x8310))+(((-1.0)*r22*x8308))+((r21*x8311)));
evalcond[1]=(sj0+((r01*x8311))+(((-1.0)*gconst149*r00*x8310))+(((-1.0)*r02*x8308)));
evalcond[2]=((((-1.0)*r12*x8308))+((x8302*x8305))+(((-1.0)*gconst149*r10*x8310))+(((-1.0)*x8306)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8310))+(((-1.0)*gconst148*r21*x8308))+((r20*x8309)));
evalcond[4]=((((-1.0)*gconst148*r01*x8308))+((r00*x8309))+(((-1.0)*r02*x8310))+((cj0*x8304))+(((-1.0)*x8306*x8307)));
evalcond[5]=(((sj0*x8304))+(((-1.0)*x8305*x8308))+((r10*x8309))+(((-1.0)*sj0*x8307))+(((-1.0)*r12*x8310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8312=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x8312.valid){
continue;
}
CheckValue<IkReal> x8313 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8312.value)))+(x8313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8314=IKsin(j4);
IkReal x8315=IKcos(j4);
IkReal x8316=(cj1*cj2);
IkReal x8317=(gconst148*r11);
IkReal x8318=((1.0)*cj0);
IkReal x8319=(sj1*sj2);
IkReal x8320=((1.0)*x8315);
IkReal x8321=(gconst149*x8315);
IkReal x8322=((1.0)*x8314);
IkReal x8323=(gconst148*x8314);
evalcond[0]=((((-1.0)*r22*x8320))+((r21*x8323))+(((-1.0)*gconst149*r20*x8322)));
evalcond[1]=(sj0+((r01*x8323))+(((-1.0)*gconst149*r00*x8322))+(((-1.0)*r02*x8320)));
evalcond[2]=((((-1.0)*x8318))+((x8314*x8317))+(((-1.0)*gconst149*r10*x8322))+(((-1.0)*r12*x8320)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8322))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8320))+((r20*x8321)));
evalcond[4]=((((-1.0)*x8318*x8319))+(((-1.0)*gconst148*r01*x8320))+((cj0*x8316))+((r00*x8321))+(((-1.0)*r02*x8322)));
evalcond[5]=(((r10*x8321))+((sj0*x8316))+(((-1.0)*x8317*x8320))+(((-1.0)*r12*x8322))+(((-1.0)*sj0*x8319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8324=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8324;
j4eval[1]=IKsign(x8324);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8325=((1.0)*cj5);
IkReal x8326=((((-1.0)*r21*x8325))+(((-1.0)*r20*sj5)));
j4eval[0]=x8326;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x8325))+((r01*sj5))))));
j4eval[2]=IKsign(x8326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8327=cj5*cj5;
IkReal x8328=r11*r11;
IkReal x8329=(cj5*r10);
IkReal x8330=(r11*sj5);
IkReal x8331=((((2.0)*x8329*x8330))+((x8327*x8328))+(((-1.0)*x8328))+(((-1.0)*(r12*r12)))+(((-1.0)*x8327*(r10*r10))));
j4eval[0]=x8331;
j4eval[1]=((IKabs(r12))+(IKabs((x8329+(((-1.0)*x8330))))));
j4eval[2]=IKsign(x8331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8332=cj5*cj5;
IkReal x8333=r11*r11;
IkReal x8334=(cj5*r10);
IkReal x8335=(r11*sj5);
CheckValue<IkReal> x8336 = IKatan2WithCheck(IkReal((x8334+(((-1.0)*x8335)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8336.valid){
continue;
}
CheckValue<IkReal> x8337=IKPowWithIntegerCheck(IKsign((((x8332*x8333))+(((2.0)*x8334*x8335))+(((-1.0)*(r12*r12)))+(((-1.0)*x8332*(r10*r10)))+(((-1.0)*x8333)))),-1);
if(!x8337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8336.value)+(((1.5707963267949)*(x8337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8338=IKsin(j4);
IkReal x8339=IKcos(j4);
IkReal x8340=(cj5*r10);
IkReal x8341=(r01*sj5);
IkReal x8342=(cj5*r00);
IkReal x8343=(cj5*r20);
IkReal x8344=((1.0)*x8339);
IkReal x8345=((1.0)*x8338);
IkReal x8346=(sj5*x8338);
evalcond[0]=((((-1.0)*x8343*x8345))+((r21*x8346))+(((-1.0)*r22*x8344)));
evalcond[1]=((((-1.0)*x8342*x8345))+(((-1.0)*r02*x8344))+((x8338*x8341)));
evalcond[2]=((((-1.0)*r11*sj5*x8344))+((x8339*x8340))+(((-1.0)*r12*x8345)));
evalcond[3]=((-1.0)+(((-1.0)*x8340*x8345))+((r11*x8346))+(((-1.0)*r12*x8344)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8344))+((cj1*sj2))+(((-1.0)*r22*x8345))+((x8339*x8343)));
evalcond[5]=((((-1.0)*r02*x8345))+(((-1.0)*sj1*sj2))+(((-1.0)*x8341*x8344))+((cj1*cj2))+((x8339*x8342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8347=((1.0)*cj5);
CheckValue<IkReal> x8348 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8348.valid){
continue;
}
CheckValue<IkReal> x8349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8347))+(((-1.0)*r20*sj5)))),-1);
if(!x8349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8348.value)+(((1.5707963267949)*(x8349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8350=IKsin(j4);
IkReal x8351=IKcos(j4);
IkReal x8352=(cj5*r10);
IkReal x8353=(r01*sj5);
IkReal x8354=(cj5*r00);
IkReal x8355=(cj5*r20);
IkReal x8356=((1.0)*x8351);
IkReal x8357=((1.0)*x8350);
IkReal x8358=(sj5*x8350);
evalcond[0]=((((-1.0)*r22*x8356))+((r21*x8358))+(((-1.0)*x8355*x8357)));
evalcond[1]=((((-1.0)*x8354*x8357))+((x8350*x8353))+(((-1.0)*r02*x8356)));
evalcond[2]=(((x8351*x8352))+(((-1.0)*r11*sj5*x8356))+(((-1.0)*r12*x8357)));
evalcond[3]=((-1.0)+((r11*x8358))+(((-1.0)*r12*x8356))+(((-1.0)*x8352*x8357)));
evalcond[4]=(((cj2*sj1))+((x8351*x8355))+(((-1.0)*r22*x8357))+((cj1*sj2))+(((-1.0)*r21*sj5*x8356)));
evalcond[5]=(((x8351*x8354))+(((-1.0)*r02*x8357))+(((-1.0)*sj1*sj2))+(((-1.0)*x8353*x8356))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
CheckValue<IkReal> x8360=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8359.value)+(((1.5707963267949)*(x8360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8361=IKsin(j4);
IkReal x8362=IKcos(j4);
IkReal x8363=(cj5*r10);
IkReal x8364=(r01*sj5);
IkReal x8365=(cj5*r00);
IkReal x8366=(cj5*r20);
IkReal x8367=((1.0)*x8362);
IkReal x8368=((1.0)*x8361);
IkReal x8369=(sj5*x8361);
evalcond[0]=((((-1.0)*x8366*x8368))+(((-1.0)*r22*x8367))+((r21*x8369)));
evalcond[1]=((((-1.0)*x8365*x8368))+((x8361*x8364))+(((-1.0)*r02*x8367)));
evalcond[2]=((((-1.0)*r12*x8368))+(((-1.0)*r11*sj5*x8367))+((x8362*x8363)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8367))+(((-1.0)*x8363*x8368))+((r11*x8369)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8368))+(((-1.0)*r21*sj5*x8367))+((x8362*x8366)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8364*x8367))+(((-1.0)*r02*x8368))+((cj1*cj2))+((x8362*x8365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8370=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8370;
j4eval[1]=IKsign(x8370);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8371=((1.0)*cj5);
IkReal x8372=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8371)));
j4eval[0]=x8372;
j4eval[1]=((IKabs(((((-1.0)*r20*x8371))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8372);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8373=cj5*cj5;
IkReal x8374=r11*r11;
IkReal x8375=(r11*sj5);
IkReal x8376=(cj5*r10);
IkReal x8377=(x8374+(r12*r12)+(((-1.0)*x8373*x8374))+((x8373*(r10*r10)))+(((-2.0)*x8375*x8376)));
j4eval[0]=x8377;
j4eval[1]=IKsign(x8377);
j4eval[2]=((IKabs(r12))+(IKabs((x8376+(((-1.0)*x8375))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8378=cj5*cj5;
IkReal x8379=r11*r11;
IkReal x8380=(cj5*r10);
IkReal x8381=(r11*sj5);
CheckValue<IkReal> x8382=IKPowWithIntegerCheck(IKsign((x8379+(r12*r12)+(((-2.0)*x8380*x8381))+((x8378*(r10*r10)))+(((-1.0)*x8378*x8379)))),-1);
if(!x8382.valid){
continue;
}
CheckValue<IkReal> x8383 = IKatan2WithCheck(IkReal((x8380+(((-1.0)*x8381)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8382.value)))+(x8383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8384=IKsin(j4);
IkReal x8385=IKcos(j4);
IkReal x8386=(cj5*r10);
IkReal x8387=(r01*sj5);
IkReal x8388=(cj5*r00);
IkReal x8389=(cj5*r20);
IkReal x8390=((1.0)*x8385);
IkReal x8391=((1.0)*x8384);
IkReal x8392=(sj5*x8384);
evalcond[0]=(((r21*x8392))+(((-1.0)*r22*x8390))+(((-1.0)*x8389*x8391)));
evalcond[1]=((((-1.0)*x8388*x8391))+(((-1.0)*r02*x8390))+((x8384*x8387)));
evalcond[2]=((((-1.0)*r11*sj5*x8390))+((x8385*x8386))+(((-1.0)*r12*x8391)));
evalcond[3]=((1.0)+(((-1.0)*x8386*x8391))+(((-1.0)*r12*x8390))+((r11*x8392)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8390))+((cj1*sj2))+(((-1.0)*r22*x8391))+((x8385*x8389)));
evalcond[5]=((((-1.0)*x8387*x8390))+(((-1.0)*r02*x8391))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8385*x8388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8393=((1.0)*cj5);
CheckValue<IkReal> x8394 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8394.valid){
continue;
}
CheckValue<IkReal> x8395=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8393)))),-1);
if(!x8395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8394.value)+(((1.5707963267949)*(x8395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8396=IKsin(j4);
IkReal x8397=IKcos(j4);
IkReal x8398=(cj5*r10);
IkReal x8399=(r01*sj5);
IkReal x8400=(cj5*r00);
IkReal x8401=(cj5*r20);
IkReal x8402=((1.0)*x8397);
IkReal x8403=((1.0)*x8396);
IkReal x8404=(sj5*x8396);
evalcond[0]=((((-1.0)*r22*x8402))+((r21*x8404))+(((-1.0)*x8401*x8403)));
evalcond[1]=((((-1.0)*r02*x8402))+(((-1.0)*x8400*x8403))+((x8396*x8399)));
evalcond[2]=(((x8397*x8398))+(((-1.0)*r12*x8403))+(((-1.0)*r11*sj5*x8402)));
evalcond[3]=((1.0)+((r11*x8404))+(((-1.0)*x8398*x8403))+(((-1.0)*r12*x8402)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8402))+(((-1.0)*r22*x8403))+((x8397*x8401)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8403))+(((-1.0)*x8399*x8402))+((x8397*x8400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8405=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8405.valid){
continue;
}
CheckValue<IkReal> x8406 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8405.value)))+(x8406.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8407=IKsin(j4);
IkReal x8408=IKcos(j4);
IkReal x8409=(cj5*r10);
IkReal x8410=(r01*sj5);
IkReal x8411=(cj5*r00);
IkReal x8412=(cj5*r20);
IkReal x8413=((1.0)*x8408);
IkReal x8414=((1.0)*x8407);
IkReal x8415=(sj5*x8407);
evalcond[0]=(((r21*x8415))+(((-1.0)*x8412*x8414))+(((-1.0)*r22*x8413)));
evalcond[1]=(((x8407*x8410))+(((-1.0)*r02*x8413))+(((-1.0)*x8411*x8414)));
evalcond[2]=(((x8408*x8409))+(((-1.0)*r12*x8414))+(((-1.0)*r11*sj5*x8413)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8413))+(((-1.0)*x8409*x8414))+((r11*x8415)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8408*x8412))+(((-1.0)*r21*sj5*x8413))+(((-1.0)*r22*x8414)));
evalcond[5]=((((-1.0)*x8410*x8413))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8414))+((x8408*x8411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8416=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8416);
rxp0_2=(py*r00);
rxp1_0=(r21*x8416);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8417=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8417);
rxp0_2=(py*r00);
rxp1_0=(r21*x8417);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8418=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8418);
rxp0_2=(py*r00);
rxp1_0=(r21*x8418);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8421=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x8421.valid){
continue;
}
IkReal x8419=x8421.value;
IkReal x8420=(cj0*x8419);
cj4array[0]=((((-1.0)*cj1*cj2*x8420))+((sj1*sj2*x8420)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8422=IKsin(j4);
IkReal x8423=IKcos(j4);
IkReal x8424=(r21*sj5);
IkReal x8425=((1.0)*x8423);
IkReal x8426=((1.0)*cj5*x8422);
evalcond[0]=((-1.0)*r12*x8422);
evalcond[1]=((((-1.0)*r12*x8425))+(((-1.0)*cj0)));
evalcond[2]=(((x8422*x8424))+(((-1.0)*r20*x8426)));
evalcond[3]=((((-1.0)*r00*x8426))+((r01*sj5*x8422)));
evalcond[4]=((((-1.0)*x8424*x8425))+((cj2*sj1))+((cj1*sj2))+((cj5*r20*x8423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8429=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8429.valid){
continue;
}
IkReal x8427=x8429.value;
IkReal x8428=((1.0)*x8427);
cj4array[0]=((((-1.0)*cj1*sj2*x8428))+(((-1.0)*cj2*sj1*x8428)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8430=IKsin(j4);
IkReal x8431=IKcos(j4);
IkReal x8432=(cj5*r00);
IkReal x8433=((1.0)*cj0);
IkReal x8434=((1.0)*x8430);
IkReal x8435=(sj5*x8430);
IkReal x8436=((1.0)*x8431);
evalcond[0]=((-1.0)*r12*x8430);
evalcond[1]=((((-1.0)*x8433))+(((-1.0)*r12*x8436)));
evalcond[2]=(((r21*x8435))+(((-1.0)*cj5*r20*x8434)));
evalcond[3]=(((r01*x8435))+(((-1.0)*x8432*x8434)));
evalcond[4]=(((cj0*cj1*cj2))+(((-1.0)*r01*sj5*x8436))+((x8431*x8432))+(((-1.0)*sj1*sj2*x8433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8437=IKPowWithIntegerCheck(r12,-1);
if(!x8437.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8437.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8438=IKsin(j4);
IkReal x8439=IKcos(j4);
IkReal x8440=(cj5*r00);
IkReal x8441=(r21*sj5);
IkReal x8442=(cj5*r20);
IkReal x8443=(r01*sj5);
IkReal x8444=((1.0)*x8438);
IkReal x8445=((1.0)*x8439);
evalcond[0]=((-1.0)*r12*x8438);
evalcond[1]=(((x8438*x8441))+(((-1.0)*x8442*x8444)));
evalcond[2]=(((x8438*x8443))+(((-1.0)*x8440*x8444)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8439*x8442))+(((-1.0)*x8441*x8445)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x8443*x8445))+((cj0*cj1*cj2))+((x8439*x8440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8446=((1.0)*cj5);
CheckValue<IkReal> x8447 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x8446))+(((-1.0)*cj0*r00*x8446))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8447.valid){
continue;
}
CheckValue<IkReal> x8448=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8446))+(((-1.0)*r20*sj5)))),-1);
if(!x8448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8447.value)+(((1.5707963267949)*(x8448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8449=IKsin(j4);
IkReal x8450=IKcos(j4);
IkReal x8451=(cj1*cj2);
IkReal x8452=(cj5*r10);
IkReal x8453=(r01*sj5);
IkReal x8454=(cj5*r00);
IkReal x8455=(cj5*r20);
IkReal x8456=((1.0)*cj0);
IkReal x8457=(sj1*sj2);
IkReal x8458=((1.0)*x8450);
IkReal x8459=((1.0)*x8449);
IkReal x8460=(sj5*x8449);
evalcond[0]=(((r21*x8460))+(((-1.0)*r22*x8458))+(((-1.0)*x8455*x8459)));
evalcond[1]=(sj0+((x8449*x8453))+(((-1.0)*x8454*x8459))+(((-1.0)*r02*x8458)));
evalcond[2]=((((-1.0)*x8452*x8459))+((r11*x8460))+(((-1.0)*r12*x8458))+(((-1.0)*x8456)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8458))+((cj1*sj2))+((x8450*x8455))+(((-1.0)*r22*x8459)));
evalcond[4]=((((-1.0)*x8453*x8458))+((x8450*x8454))+(((-1.0)*r02*x8459))+(((-1.0)*x8456*x8457))+((cj0*x8451)));
evalcond[5]=(((x8450*x8452))+(((-1.0)*r12*x8459))+(((-1.0)*sj0*x8457))+((sj0*x8451))+(((-1.0)*r11*sj5*x8458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8461=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8461.valid){
continue;
}
CheckValue<IkReal> x8462 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8461.value)))+(x8462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8463=IKsin(j4);
IkReal x8464=IKcos(j4);
IkReal x8465=(cj1*cj2);
IkReal x8466=(cj5*r10);
IkReal x8467=(r01*sj5);
IkReal x8468=(cj5*r00);
IkReal x8469=(cj5*r20);
IkReal x8470=((1.0)*cj0);
IkReal x8471=(sj1*sj2);
IkReal x8472=((1.0)*x8464);
IkReal x8473=((1.0)*x8463);
IkReal x8474=(sj5*x8463);
evalcond[0]=(((r21*x8474))+(((-1.0)*r22*x8472))+(((-1.0)*x8469*x8473)));
evalcond[1]=(sj0+(((-1.0)*r02*x8472))+((x8463*x8467))+(((-1.0)*x8468*x8473)));
evalcond[2]=((((-1.0)*x8470))+((r11*x8474))+(((-1.0)*x8466*x8473))+(((-1.0)*r12*x8472)));
evalcond[3]=(((cj2*sj1))+((x8464*x8469))+((cj1*sj2))+(((-1.0)*r21*sj5*x8472))+(((-1.0)*r22*x8473)));
evalcond[4]=(((x8464*x8468))+(((-1.0)*x8467*x8472))+(((-1.0)*r02*x8473))+(((-1.0)*x8470*x8471))+((cj0*x8465)));
evalcond[5]=((((-1.0)*r11*sj5*x8472))+((x8464*x8466))+(((-1.0)*sj0*x8471))+(((-1.0)*r12*x8473))+((sj0*x8465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8475=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8475.valid){
continue;
}
CheckValue<IkReal> x8476 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8475.value)))+(x8476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8477=IKsin(j4);
IkReal x8478=IKcos(j4);
IkReal x8479=(cj1*cj2);
IkReal x8480=(cj5*r10);
IkReal x8481=(r01*sj5);
IkReal x8482=(cj5*r00);
IkReal x8483=(cj5*r20);
IkReal x8484=((1.0)*cj0);
IkReal x8485=(sj1*sj2);
IkReal x8486=((1.0)*x8478);
IkReal x8487=((1.0)*x8477);
IkReal x8488=(sj5*x8477);
evalcond[0]=((((-1.0)*x8483*x8487))+(((-1.0)*r22*x8486))+((r21*x8488)));
evalcond[1]=((((-1.0)*r02*x8486))+sj0+(((-1.0)*x8482*x8487))+((x8477*x8481)));
evalcond[2]=((((-1.0)*x8484))+(((-1.0)*x8480*x8487))+(((-1.0)*r12*x8486))+((r11*x8488)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8478*x8483))+(((-1.0)*r22*x8487))+(((-1.0)*r21*sj5*x8486)));
evalcond[4]=((((-1.0)*r02*x8487))+(((-1.0)*x8481*x8486))+(((-1.0)*x8484*x8485))+((x8478*x8482))+((cj0*x8479)));
evalcond[5]=((((-1.0)*sj0*x8485))+(((-1.0)*r11*sj5*x8486))+((x8478*x8480))+(((-1.0)*r12*x8487))+((sj0*x8479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8489=cj1*cj1;
IkReal x8490=cj2*cj2;
IkReal x8491=(sj1*sj2);
IkReal x8492=((156900000.0)*py);
IkReal x8493=(cj1*cj5);
IkReal x8494=((14850585.0)*cj2);
IkReal x8495=(r00*sj5);
IkReal x8496=((16090500.0)*cj1);
IkReal x8497=((4132419.0)*cj5);
IkReal x8498=(r10*sj5);
IkReal x8499=((170000000.0)*cj1);
IkReal x8500=((156900000.0)*px);
IkReal x8501=(cj1*cj2);
IkReal x8502=((14850585.0)*cj5);
CheckValue<IkReal> x8503=IKPowWithIntegerCheck(IKsign(((-66309514.0)+(((-10705975.0)*x8489))+(((61544025.0)*x8490))+(((133365000.0)*cj1*x8491))+(((123088050.0)*x8491*x8501))+(((-123088050.0)*x8489*x8490))+(((-133365000.0)*cj2*x8489)))),-1);
if(!x8503.valid){
continue;
}
CheckValue<IkReal> x8504 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+(((-14850585.0)*x8491*x8498))+((py*x8499))+(((-4132419.0)*x8495))+(((16090500.0)*r11*x8493))+(((-1.0)*x8491*x8492))+((x8492*x8501))+((x8496*x8498))+((cj1*x8494*x8498))+(((-1.0)*r11*x8491*x8502))+((r11*x8493*x8494))+(((-1.0)*r01*x8497)))),IkReal((((x8500*x8501))+(((43660000.0)*py))+(((-14850585.0)*x8491*x8495))+(((-1.0)*r01*x8491*x8502))+(((4132419.0)*x8498))+((x8495*x8496))+(((-1.0)*x8491*x8500))+((cj1*x8494*x8495))+(((16090500.0)*r01*x8493))+((r01*x8493*x8494))+((px*x8499))+((r11*x8497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8504.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8503.value)))+(x8504.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8505=IKcos(j0);
IkReal x8506=IKsin(j0);
IkReal x8507=((0.425)*cj1);
IkReal x8508=(sj1*sj2);
IkReal x8509=(cj1*cj2);
IkReal x8510=((0.09465)*cj5);
IkReal x8511=((0.09465)*sj5);
IkReal x8512=((0.39225)*x8506);
IkReal x8513=((0.39225)*x8505);
evalcond[0]=((((-1.0)*x8505*x8507))+(((-1.0)*px))+(((-1.0)*x8509*x8513))+(((-1.0)*r00*x8511))+(((-1.0)*r01*x8510))+((x8508*x8513))+(((0.10915)*x8506)));
evalcond[1]=((((-1.0)*x8506*x8507))+(((-1.0)*py))+(((-1.0)*x8509*x8512))+(((-0.10915)*x8505))+((x8508*x8512))+(((-1.0)*r11*x8510))+(((-1.0)*r10*x8511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8514=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8514;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8515=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8515;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8516=((1.0)*cj5);
IkReal x8517=((((-1.0)*r21*x8516))+(((-1.0)*r20*sj5)));
j4eval[0]=x8517;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x8516))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x8516))))));
j4eval[2]=IKsign(x8517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8518=((-1.0)*r20);
IkReal x8520 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8520)==0){
continue;
}
IkReal x8519=pow(x8520,-0.5);
CheckValue<IkReal> x8521 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8518),IKFAST_ATAN2_MAGTHRESH);
if(!x8521.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8521.value));
IkReal gconst1=(r21*x8519);
IkReal gconst2=(x8518*x8519);
CheckValue<IkReal> x8522 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8522.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8522.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8523=((-1.0)*r20);
IkReal x8524=x8519;
CheckValue<IkReal> x8526 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8523),IKFAST_ATAN2_MAGTHRESH);
if(!x8526.valid){
continue;
}
IkReal x8525=((-1.0)*(x8526.value));
sj5=gconst1;
cj5=gconst2;
j5=x8525;
IkReal gconst0=x8525;
IkReal gconst1=(r21*x8524);
IkReal gconst2=(x8523*x8524);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8527=((-1.0)*r20);
IkReal x8528=x8519;
CheckValue<IkReal> x8530 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8527),IKFAST_ATAN2_MAGTHRESH);
if(!x8530.valid){
continue;
}
IkReal x8529=((-1.0)*(x8530.value));
sj5=gconst1;
cj5=gconst2;
j5=x8529;
IkReal gconst0=x8529;
IkReal gconst1=(r21*x8528);
IkReal gconst2=(x8527*x8528);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8531=((-1.0)*r20);
IkReal x8532=x8519;
CheckValue<IkReal> x8534 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8531),IKFAST_ATAN2_MAGTHRESH);
if(!x8534.valid){
continue;
}
IkReal x8533=((-1.0)*(x8534.value));
sj5=gconst1;
cj5=gconst2;
j5=x8533;
IkReal gconst0=x8533;
IkReal gconst1=(r21*x8532);
IkReal gconst2=(x8531*x8532);
IkReal x8535=r22*r22;
CheckValue<IkReal> x8539=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8535))),-1);
if(!x8539.valid){
continue;
}
IkReal x8536=x8539.value;
IkReal x8537=(sj3*x8536);
IkReal x8538=((((2.0)*x8537*(r20*r20)*(r21*r21)))+((x8537*(r21*r21*r21*r21)))+((sj3*x8535))+((x8537*(r20*r20*r20*r20))));
j4eval[0]=x8538;
j4eval[1]=IKsign(x8538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8540=((-1.0)*r20);
IkReal x8541=x8519;
CheckValue<IkReal> x8543 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8540),IKFAST_ATAN2_MAGTHRESH);
if(!x8543.valid){
continue;
}
IkReal x8542=((-1.0)*(x8543.value));
sj5=gconst1;
cj5=gconst2;
j5=x8542;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8542;
IkReal gconst1=(r21*x8541);
IkReal gconst2=(x8540*x8541);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8544=((-1.0)*r20);
IkReal x8545=x8519;
CheckValue<IkReal> x8547 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8544),IKFAST_ATAN2_MAGTHRESH);
if(!x8547.valid){
continue;
}
IkReal x8546=((-1.0)*(x8547.value));
sj5=gconst1;
cj5=gconst2;
j5=x8546;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8546;
IkReal gconst1=(r21*x8545);
IkReal gconst2=(x8544*x8545);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8548=((-1.0)*r20);
IkReal x8549=x8519;
CheckValue<IkReal> x8551 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8548),IKFAST_ATAN2_MAGTHRESH);
if(!x8551.valid){
continue;
}
IkReal x8550=((-1.0)*(x8551.value));
sj5=gconst1;
cj5=gconst2;
j5=x8550;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8550;
IkReal gconst1=(r21*x8549);
IkReal gconst2=(x8548*x8549);
IkReal x8552=((1.0)*(r22*r22));
CheckValue<IkReal> x8556=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8552))),-1);
if(!x8556.valid){
continue;
}
IkReal x8553=x8556.value;
IkReal x8554=((1.0)*x8553);
IkReal x8555=((((-1.0)*x8554*(r21*r21*r21*r21)))+(((-2.0)*x8553*(r20*r20)*(r21*r21)))+(((-1.0)*x8552))+(((-1.0)*x8554*(r20*r20*r20*r20))));
j4eval[0]=x8555;
j4eval[1]=IKsign(x8555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8557=((-1.0)*r20);
IkReal x8558=x8519;
CheckValue<IkReal> x8560 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8557),IKFAST_ATAN2_MAGTHRESH);
if(!x8560.valid){
continue;
}
IkReal x8559=((-1.0)*(x8560.value));
sj5=gconst1;
cj5=gconst2;
j5=x8559;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8559;
IkReal gconst1=(r21*x8558);
IkReal gconst2=(x8557*x8558);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8561=((-1.0)*r20);
IkReal x8562=x8519;
CheckValue<IkReal> x8564 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8561),IKFAST_ATAN2_MAGTHRESH);
if(!x8564.valid){
continue;
}
IkReal x8563=((-1.0)*(x8564.value));
sj5=gconst1;
cj5=gconst2;
j5=x8563;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8563;
IkReal gconst1=(r21*x8562);
IkReal gconst2=(x8561*x8562);
IkReal x8565=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8569=IKPowWithIntegerCheck(x8565,-1);
if(!x8569.valid){
continue;
}
IkReal x8566=x8569.value;
IkReal x8567=((1.0)*x8566);
IkReal x8568=((((-1.0)*x8567*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8566))+(((-1.0)*x8567*(r00*r00)*(r20*r20))));
j4eval[0]=x8568;
j4eval[1]=IKsign(x8568);
j4eval[2]=r02;
j4eval[3]=x8565;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8570=((-1.0)*r20);
IkReal x8571=x8519;
CheckValue<IkReal> x8573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8570),IKFAST_ATAN2_MAGTHRESH);
if(!x8573.valid){
continue;
}
IkReal x8572=((-1.0)*(x8573.value));
sj5=gconst1;
cj5=gconst2;
j5=x8572;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8572;
IkReal gconst1=(r21*x8571);
IkReal gconst2=(x8570*x8571);
IkReal x8574=r22*r22;
IkReal x8575=((1.0)*r02);
IkReal x8576=(cj1*sj2);
IkReal x8577=(cj2*sj1);
CheckValue<IkReal> x8581=IKPowWithIntegerCheck(((-1.0)+x8574),-1);
if(!x8581.valid){
continue;
}
IkReal x8578=x8581.value;
if((((1.0)+(((-1.0)*x8574)))) < -0.00001)
continue;
IkReal x8579=IKsqrt(((1.0)+(((-1.0)*x8574))));
IkReal x8580=(r02*r22*x8578*x8579);
j4eval[0]=((IKabs(((((-1.0)*x8575*x8576))+(((-1.0)*x8575*x8577)))))+(IKabs((((x8577*x8580))+((x8576*x8580))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8582=(cj1*sj2);
IkReal x8583=(gconst1*r01);
IkReal x8584=((1.0)*r02);
IkReal x8585=(cj2*sj1);
IkReal x8586=((1.0)*gconst2*r00);
CheckValue<IkReal> x8587 = IKatan2WithCheck(IkReal(((((-1.0)*x8582*x8586))+(((-1.0)*x8585*x8586))+((x8583*x8585))+((x8582*x8583)))),IkReal(((((-1.0)*x8582*x8584))+(((-1.0)*x8584*x8585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8587.valid){
continue;
}
CheckValue<IkReal> x8588=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8587.value)+(((1.5707963267949)*(x8588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8589=IKcos(j4);
IkReal x8590=IKsin(j4);
IkReal x8591=((1.0)*x8589);
IkReal x8592=(gconst1*x8589);
IkReal x8593=(gconst1*x8590);
IkReal x8594=((1.0)*gconst2*x8590);
evalcond[0]=(((r01*x8592))+(((-1.0)*gconst2*r00*x8591))+((r02*x8590)));
evalcond[1]=((((-1.0)*r20*x8594))+(((-1.0)*r22*x8591))+((r21*x8593)));
evalcond[2]=((((-1.0)*r10*x8594))+(((-1.0)*r12*x8591))+((r11*x8593)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8591))+(((-1.0)*r00*x8594))+((r01*x8593)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8592))+((r22*x8590))+(((-1.0)*gconst2*r20*x8591)));
evalcond[5]=((((-1.0)*gconst2*r10*x8591))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x8592))+((r12*x8590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8595=(gconst1*r01);
IkReal x8596=(gconst2*r00);
CheckValue<IkReal> x8597=IKPowWithIntegerCheck(IKsign(((((2.0)*x8595*x8596))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8595*x8595)))+(((-1.0)*(x8596*x8596))))),-1);
if(!x8597.valid){
continue;
}
CheckValue<IkReal> x8598 = IKatan2WithCheck(IkReal((x8595+(((-1.0)*x8596)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8597.value)))+(x8598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8599=IKcos(j4);
IkReal x8600=IKsin(j4);
IkReal x8601=((1.0)*x8599);
IkReal x8602=(gconst1*x8599);
IkReal x8603=(gconst1*x8600);
IkReal x8604=((1.0)*gconst2*x8600);
evalcond[0]=(((r01*x8602))+(((-1.0)*gconst2*r00*x8601))+((r02*x8600)));
evalcond[1]=((((-1.0)*r22*x8601))+(((-1.0)*r20*x8604))+((r21*x8603)));
evalcond[2]=(((r11*x8603))+(((-1.0)*r12*x8601))+(((-1.0)*r10*x8604)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8604))+(((-1.0)*r02*x8601))+((r01*x8603)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8600))+((r21*x8602))+(((-1.0)*gconst2*r20*x8601)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x8600))+((r11*x8602))+(((-1.0)*gconst2*r10*x8601))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8605 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8605.valid){
continue;
}
CheckValue<IkReal> x8606=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8605.value)+(((1.5707963267949)*(x8606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8607=IKcos(j4);
IkReal x8608=IKsin(j4);
IkReal x8609=((1.0)*x8607);
IkReal x8610=(gconst1*x8607);
IkReal x8611=(gconst1*x8608);
IkReal x8612=((1.0)*gconst2*x8608);
evalcond[0]=(((r01*x8610))+(((-1.0)*gconst2*r00*x8609))+((r02*x8608)));
evalcond[1]=((((-1.0)*r22*x8609))+(((-1.0)*r20*x8612))+((r21*x8611)));
evalcond[2]=((((-1.0)*r12*x8609))+((r11*x8611))+(((-1.0)*r10*x8612)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8612))+(((-1.0)*r02*x8609))+((r01*x8611)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8608))+((r21*x8610))+(((-1.0)*gconst2*r20*x8609)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x8608))+((r11*x8610))+(((-1.0)*gconst2*r10*x8609))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8613=((-1.0)*r20);
IkReal x8614=x8519;
CheckValue<IkReal> x8616 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8613),IKFAST_ATAN2_MAGTHRESH);
if(!x8616.valid){
continue;
}
IkReal x8615=((-1.0)*(x8616.value));
sj5=gconst1;
cj5=gconst2;
j5=x8615;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8615;
IkReal gconst1=(r21*x8614);
IkReal gconst2=(x8613*x8614);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8617=((-1.0)*r20);
IkReal x8618=x8519;
CheckValue<IkReal> x8620 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8617),IKFAST_ATAN2_MAGTHRESH);
if(!x8620.valid){
continue;
}
IkReal x8619=((-1.0)*(x8620.value));
sj5=gconst1;
cj5=gconst2;
j5=x8619;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8619;
IkReal gconst1=(r21*x8618);
IkReal gconst2=(x8617*x8618);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8621=((-1.0)*r20);
IkReal x8622=x8519;
CheckValue<IkReal> x8624 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8621),IKFAST_ATAN2_MAGTHRESH);
if(!x8624.valid){
continue;
}
IkReal x8623=((-1.0)*(x8624.value));
sj5=gconst1;
cj5=gconst2;
j5=x8623;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8623;
IkReal gconst1=(r21*x8622);
IkReal gconst2=(x8621*x8622);
IkReal x8625=r22*r22;
IkReal x8626=((1.0)*r02);
IkReal x8627=(cj1*sj2);
IkReal x8628=(cj2*sj1);
CheckValue<IkReal> x8632=IKPowWithIntegerCheck(((-1.0)+x8625),-1);
if(!x8632.valid){
continue;
}
IkReal x8629=x8632.value;
if((((1.0)+(((-1.0)*x8625)))) < -0.00001)
continue;
IkReal x8630=IKsqrt(((1.0)+(((-1.0)*x8625))));
IkReal x8631=(r02*r22*x8629*x8630);
j4eval[0]=((IKabs((((x8627*x8631))+((x8628*x8631)))))+(IKabs(((((-1.0)*x8626*x8628))+(((-1.0)*x8626*x8627))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8633=(cj1*sj2);
IkReal x8634=(gconst1*r01);
IkReal x8635=((1.0)*r02);
IkReal x8636=(cj2*sj1);
IkReal x8637=((1.0)*gconst2*r00);
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal((((x8634*x8636))+((x8633*x8634))+(((-1.0)*x8636*x8637))+(((-1.0)*x8633*x8637)))),IkReal(((((-1.0)*x8635*x8636))+(((-1.0)*x8633*x8635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
CheckValue<IkReal> x8639=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8638.value)+(((1.5707963267949)*(x8639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8640=IKcos(j4);
IkReal x8641=IKsin(j4);
IkReal x8642=((1.0)*x8640);
IkReal x8643=(gconst1*x8640);
IkReal x8644=(gconst1*x8641);
IkReal x8645=((1.0)*gconst2*x8641);
evalcond[0]=((((-1.0)*gconst2*r00*x8642))+((r02*x8641))+((r01*x8643)));
evalcond[1]=((((-1.0)*r22*x8642))+((r21*x8644))+(((-1.0)*r20*x8645)));
evalcond[2]=(((r11*x8644))+(((-1.0)*r10*x8645))+(((-1.0)*r12*x8642)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8642))+((r01*x8644))+(((-1.0)*r00*x8645)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8643))+(((-1.0)*gconst2*r20*x8642))+((r22*x8641)));
evalcond[5]=(((r12*x8641))+((r11*x8643))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8646=(gconst1*r01);
IkReal x8647=(gconst2*r00);
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal((x8646+(((-1.0)*x8647)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
CheckValue<IkReal> x8649=IKPowWithIntegerCheck(IKsign(((x8647*x8647)+(((-2.0)*x8646*x8647))+(x8646*x8646)+(r02*r02))),-1);
if(!x8649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8648.value)+(((1.5707963267949)*(x8649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8650=IKcos(j4);
IkReal x8651=IKsin(j4);
IkReal x8652=((1.0)*x8650);
IkReal x8653=(gconst1*x8650);
IkReal x8654=(gconst1*x8651);
IkReal x8655=((1.0)*gconst2*x8651);
evalcond[0]=(((r01*x8653))+((r02*x8651))+(((-1.0)*gconst2*r00*x8652)));
evalcond[1]=(((r21*x8654))+(((-1.0)*r20*x8655))+(((-1.0)*r22*x8652)));
evalcond[2]=((((-1.0)*r12*x8652))+((r11*x8654))+(((-1.0)*r10*x8655)));
evalcond[3]=((-1.0)+((r01*x8654))+(((-1.0)*r00*x8655))+(((-1.0)*r02*x8652)));
evalcond[4]=(((cj2*sj1))+((r21*x8653))+((r22*x8651))+(((-1.0)*gconst2*r20*x8652))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x8651))+((r11*x8653))+(((-1.0)*gconst2*r10*x8652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8656=((1.0)*gconst2);
CheckValue<IkReal> x8657 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8656))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8657.valid){
continue;
}
CheckValue<IkReal> x8658=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8656))+(((-1.0)*gconst1*r10)))),-1);
if(!x8658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8657.value)+(((1.5707963267949)*(x8658.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8659=IKcos(j4);
IkReal x8660=IKsin(j4);
IkReal x8661=((1.0)*x8659);
IkReal x8662=(gconst1*x8659);
IkReal x8663=(gconst1*x8660);
IkReal x8664=((1.0)*gconst2*x8660);
evalcond[0]=((((-1.0)*gconst2*r00*x8661))+((r01*x8662))+((r02*x8660)));
evalcond[1]=((((-1.0)*r22*x8661))+(((-1.0)*r20*x8664))+((r21*x8663)));
evalcond[2]=((((-1.0)*r12*x8661))+((r11*x8663))+(((-1.0)*r10*x8664)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8664))+(((-1.0)*r02*x8661))+((r01*x8663)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8660))+(((-1.0)*gconst2*r20*x8661))+((r21*x8662)));
evalcond[5]=(((r11*x8662))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x8660))+(((-1.0)*gconst2*r10*x8661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8665=((-1.0)*r20);
IkReal x8666=x8519;
CheckValue<IkReal> x8668 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8665),IKFAST_ATAN2_MAGTHRESH);
if(!x8668.valid){
continue;
}
IkReal x8667=((-1.0)*(x8668.value));
sj5=gconst1;
cj5=gconst2;
j5=x8667;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8667;
IkReal gconst1=(r21*x8666);
IkReal gconst2=(x8665*x8666);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8669=((-1.0)*r20);
IkReal x8670=x8519;
CheckValue<IkReal> x8672 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8669),IKFAST_ATAN2_MAGTHRESH);
if(!x8672.valid){
continue;
}
IkReal x8671=((-1.0)*(x8672.value));
sj5=gconst1;
cj5=gconst2;
j5=x8671;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8671;
IkReal gconst1=(r21*x8670);
IkReal gconst2=(x8669*x8670);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8673=((-1.0)*r20);
IkReal x8674=x8519;
CheckValue<IkReal> x8676 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8673),IKFAST_ATAN2_MAGTHRESH);
if(!x8676.valid){
continue;
}
IkReal x8675=((-1.0)*(x8676.value));
sj5=gconst1;
cj5=gconst2;
j5=x8675;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8675;
IkReal gconst1=(r21*x8674);
IkReal gconst2=(x8673*x8674);
IkReal x8677=r22*r22;
IkReal x8678=(cj1*r12*sj2);
IkReal x8679=(cj2*r12*sj1);
CheckValue<IkReal> x8683=IKPowWithIntegerCheck(((-1.0)+x8677),-1);
if(!x8683.valid){
continue;
}
IkReal x8680=x8683.value;
if((((1.0)+(((-1.0)*x8677)))) < -0.00001)
continue;
IkReal x8681=IKsqrt(((1.0)+(((-1.0)*x8677))));
IkReal x8682=(r22*x8680*x8681);
j4eval[0]=((IKabs(((((-1.0)*x8679))+(((-1.0)*x8678)))))+(IKabs((((x8679*x8682))+((x8678*x8682))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8684=(cj1*sj2);
IkReal x8685=(cj2*sj1);
IkReal x8686=((1.0)*r12);
IkReal x8687=(gconst1*r11);
IkReal x8688=((1.0)*gconst2*r10);
CheckValue<IkReal> x8689=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8689.valid){
continue;
}
CheckValue<IkReal> x8690 = IKatan2WithCheck(IkReal(((((-1.0)*x8684*x8688))+(((-1.0)*x8685*x8688))+((x8684*x8687))+((x8685*x8687)))),IkReal(((((-1.0)*x8684*x8686))+(((-1.0)*x8685*x8686)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8689.value)))+(x8690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8691=IKcos(j4);
IkReal x8692=IKsin(j4);
IkReal x8693=((1.0)*x8691);
IkReal x8694=(gconst1*x8691);
IkReal x8695=(gconst1*x8692);
IkReal x8696=((1.0)*gconst2*x8692);
evalcond[0]=((((-1.0)*gconst2*r10*x8693))+((r12*x8692))+((r11*x8694)));
evalcond[1]=(((r21*x8695))+(((-1.0)*r22*x8693))+(((-1.0)*r20*x8696)));
evalcond[2]=((((-1.0)*r02*x8693))+((r01*x8695))+(((-1.0)*r00*x8696)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8693))+(((-1.0)*r10*x8696))+((r11*x8695)));
evalcond[4]=((((-1.0)*gconst2*r20*x8693))+((cj2*sj1))+((r21*x8694))+((r22*x8692))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8693))+((r02*x8692))+((r01*x8694))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8697=(gconst1*r11);
IkReal x8698=(gconst2*r10);
CheckValue<IkReal> x8699 = IKatan2WithCheck(IkReal((x8697+(((-1.0)*x8698)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8699.valid){
continue;
}
CheckValue<IkReal> x8700=IKPowWithIntegerCheck(IKsign(((x8698*x8698)+(r12*r12)+(x8697*x8697)+(((-2.0)*x8697*x8698)))),-1);
if(!x8700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8699.value)+(((1.5707963267949)*(x8700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8701=IKcos(j4);
IkReal x8702=IKsin(j4);
IkReal x8703=((1.0)*x8701);
IkReal x8704=(gconst1*x8701);
IkReal x8705=(gconst1*x8702);
IkReal x8706=((1.0)*gconst2*x8702);
evalcond[0]=(((r11*x8704))+((r12*x8702))+(((-1.0)*gconst2*r10*x8703)));
evalcond[1]=(((r21*x8705))+(((-1.0)*r20*x8706))+(((-1.0)*r22*x8703)));
evalcond[2]=((((-1.0)*r00*x8706))+(((-1.0)*r02*x8703))+((r01*x8705)));
evalcond[3]=((-1.0)+((r11*x8705))+(((-1.0)*r10*x8706))+(((-1.0)*r12*x8703)));
evalcond[4]=(((cj2*sj1))+((r21*x8704))+((cj1*sj2))+((r22*x8702))+(((-1.0)*gconst2*r20*x8703)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x8702))+(((-1.0)*gconst2*r00*x8703))+((cj1*cj2))+((r01*x8704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8707 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8707.valid){
continue;
}
CheckValue<IkReal> x8708=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8707.value)+(((1.5707963267949)*(x8708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8709=IKcos(j4);
IkReal x8710=IKsin(j4);
IkReal x8711=((1.0)*x8709);
IkReal x8712=(gconst1*x8709);
IkReal x8713=(gconst1*x8710);
IkReal x8714=((1.0)*gconst2*x8710);
evalcond[0]=((((-1.0)*gconst2*r10*x8711))+((r11*x8712))+((r12*x8710)));
evalcond[1]=((((-1.0)*r20*x8714))+(((-1.0)*r22*x8711))+((r21*x8713)));
evalcond[2]=((((-1.0)*r02*x8711))+((r01*x8713))+(((-1.0)*r00*x8714)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8711))+((r11*x8713))+(((-1.0)*r10*x8714)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8710))+((r21*x8712))+(((-1.0)*gconst2*r20*x8711)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8711))+((r01*x8712))+((r02*x8710))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8715=((-1.0)*r20);
IkReal x8716=x8519;
CheckValue<IkReal> x8718 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8715),IKFAST_ATAN2_MAGTHRESH);
if(!x8718.valid){
continue;
}
IkReal x8717=((-1.0)*(x8718.value));
sj5=gconst1;
cj5=gconst2;
j5=x8717;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8717;
IkReal gconst1=(r21*x8716);
IkReal gconst2=(x8715*x8716);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8719=((-1.0)*r20);
IkReal x8720=x8519;
CheckValue<IkReal> x8722 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8719),IKFAST_ATAN2_MAGTHRESH);
if(!x8722.valid){
continue;
}
IkReal x8721=((-1.0)*(x8722.value));
sj5=gconst1;
cj5=gconst2;
j5=x8721;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8721;
IkReal gconst1=(r21*x8720);
IkReal gconst2=(x8719*x8720);
IkReal x8723=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8727=IKPowWithIntegerCheck(x8723,-1);
if(!x8727.valid){
continue;
}
IkReal x8724=x8727.value;
IkReal x8725=((1.0)*x8724);
IkReal x8726=((((-1.0)*x8725*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8724))+(((-1.0)*(r12*r12)))+(((-1.0)*x8725*(r11*r11)*(r21*r21))));
j4eval[0]=x8726;
j4eval[1]=r12;
j4eval[2]=x8723;
j4eval[3]=IKsign(x8726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8728=((-1.0)*r20);
IkReal x8729=x8519;
CheckValue<IkReal> x8731 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8728),IKFAST_ATAN2_MAGTHRESH);
if(!x8731.valid){
continue;
}
IkReal x8730=((-1.0)*(x8731.value));
sj5=gconst1;
cj5=gconst2;
j5=x8730;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8730;
IkReal gconst1=(r21*x8729);
IkReal gconst2=(x8728*x8729);
IkReal x8732=r22*r22;
IkReal x8733=(cj1*r12*sj2);
IkReal x8734=(cj2*r12*sj1);
CheckValue<IkReal> x8738=IKPowWithIntegerCheck(((-1.0)+x8732),-1);
if(!x8738.valid){
continue;
}
IkReal x8735=x8738.value;
if((((1.0)+(((-1.0)*x8732)))) < -0.00001)
continue;
IkReal x8736=IKsqrt(((1.0)+(((-1.0)*x8732))));
IkReal x8737=(r22*x8735*x8736);
j4eval[0]=((IKabs((((x8734*x8737))+((x8733*x8737)))))+(IKabs(((((-1.0)*x8734))+(((-1.0)*x8733))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8739=(cj1*sj2);
IkReal x8740=(cj2*sj1);
IkReal x8741=((1.0)*r12);
IkReal x8742=(gconst1*r11);
IkReal x8743=((1.0)*gconst2*r10);
CheckValue<IkReal> x8744=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8744.valid){
continue;
}
CheckValue<IkReal> x8745 = IKatan2WithCheck(IkReal(((((-1.0)*x8740*x8743))+(((-1.0)*x8739*x8743))+((x8740*x8742))+((x8739*x8742)))),IkReal(((((-1.0)*x8740*x8741))+(((-1.0)*x8739*x8741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8744.value)))+(x8745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8746=IKcos(j4);
IkReal x8747=IKsin(j4);
IkReal x8748=((1.0)*x8746);
IkReal x8749=(gconst1*x8746);
IkReal x8750=(gconst1*x8747);
IkReal x8751=((1.0)*gconst2*x8747);
evalcond[0]=(((r12*x8747))+(((-1.0)*gconst2*r10*x8748))+((r11*x8749)));
evalcond[1]=((((-1.0)*r22*x8748))+(((-1.0)*r20*x8751))+((r21*x8750)));
evalcond[2]=((((-1.0)*r00*x8751))+((r01*x8750))+(((-1.0)*r02*x8748)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8748))+(((-1.0)*r10*x8751))+((r11*x8750)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8748))+((r22*x8747))+((r21*x8749)));
evalcond[5]=(((r01*x8749))+(((-1.0)*gconst2*r00*x8748))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x8747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8752=(gconst2*r10);
IkReal x8753=(gconst1*r11);
CheckValue<IkReal> x8754 = IKatan2WithCheck(IkReal((x8753+(((-1.0)*x8752)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8754.valid){
continue;
}
CheckValue<IkReal> x8755=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8752*x8752)))+(((-1.0)*(r12*r12)))+(((2.0)*x8752*x8753))+(((-1.0)*(x8753*x8753))))),-1);
if(!x8755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8754.value)+(((1.5707963267949)*(x8755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8756=IKcos(j4);
IkReal x8757=IKsin(j4);
IkReal x8758=((1.0)*x8756);
IkReal x8759=(gconst1*x8756);
IkReal x8760=(gconst1*x8757);
IkReal x8761=((1.0)*gconst2*x8757);
evalcond[0]=((((-1.0)*gconst2*r10*x8758))+((r11*x8759))+((r12*x8757)));
evalcond[1]=((((-1.0)*r20*x8761))+(((-1.0)*r22*x8758))+((r21*x8760)));
evalcond[2]=(((r01*x8760))+(((-1.0)*r02*x8758))+(((-1.0)*r00*x8761)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8761))+(((-1.0)*r12*x8758))+((r11*x8760)));
evalcond[4]=(((r22*x8757))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8758))+((r21*x8759)));
evalcond[5]=(((r02*x8757))+(((-1.0)*gconst2*r00*x8758))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8762=((1.0)*gconst2);
CheckValue<IkReal> x8763=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8762)))),-1);
if(!x8763.valid){
continue;
}
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8762))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8763.value)))+(x8764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8765=IKcos(j4);
IkReal x8766=IKsin(j4);
IkReal x8767=((1.0)*x8765);
IkReal x8768=(gconst1*x8765);
IkReal x8769=(gconst1*x8766);
IkReal x8770=((1.0)*gconst2*x8766);
evalcond[0]=((((-1.0)*gconst2*r10*x8767))+((r12*x8766))+((r11*x8768)));
evalcond[1]=((((-1.0)*r20*x8770))+(((-1.0)*r22*x8767))+((r21*x8769)));
evalcond[2]=((((-1.0)*r02*x8767))+((r01*x8769))+(((-1.0)*r00*x8770)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8770))+(((-1.0)*r12*x8767))+((r11*x8769)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8768))+(((-1.0)*gconst2*r20*x8767))+((r22*x8766)));
evalcond[5]=(((r01*x8768))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8767))+((r02*x8766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8771=((-1.0)*r20);
IkReal x8772=((-1.0)*r21);
CheckValue<IkReal> x8774 = IKatan2WithCheck(IkReal(x8772),IkReal(x8771),IKFAST_ATAN2_MAGTHRESH);
if(!x8774.valid){
continue;
}
IkReal x8773=((-1.0)*(x8774.value));
sj5=gconst1;
cj5=gconst2;
j5=x8773;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8771);
rxp0_2=(py*r00);
rxp1_0=(py*x8772);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8773;
IkReal gconst1=r21;
IkReal gconst2=x8771;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8775=((-1.0)*r20);
IkReal x8776=((-1.0)*r21);
CheckValue<IkReal> x8778 = IKatan2WithCheck(IkReal(x8776),IkReal(x8775),IKFAST_ATAN2_MAGTHRESH);
if(!x8778.valid){
continue;
}
IkReal x8777=((-1.0)*(x8778.value));
sj5=gconst1;
cj5=gconst2;
j5=x8777;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8775);
rxp0_2=(py*r00);
rxp1_0=(py*x8776);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8777;
IkReal gconst1=r21;
IkReal gconst2=x8775;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8779=((-1.0)*r20);
IkReal x8780=((-1.0)*r21);
CheckValue<IkReal> x8782 = IKatan2WithCheck(IkReal(x8780),IkReal(x8779),IKFAST_ATAN2_MAGTHRESH);
if(!x8782.valid){
continue;
}
IkReal x8781=((-1.0)*(x8782.value));
sj5=gconst1;
cj5=gconst2;
j5=x8781;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8779);
rxp0_2=(py*r00);
rxp1_0=(py*x8780);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8781;
IkReal gconst1=r21;
IkReal gconst2=x8779;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8785=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8785.valid){
continue;
}
IkReal x8783=x8785.value;
IkReal x8784=(cj0*x8783);
cj4array[0]=((((-1.0)*cj1*cj2*x8784))+((sj1*sj2*x8784)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8786=IKsin(j4);
IkReal x8787=IKcos(j4);
IkReal x8788=(gconst1*r21);
IkReal x8789=(gconst2*r20);
IkReal x8790=((1.0)*x8787);
IkReal x8791=((1.0)*x8786);
evalcond[0]=(r12*x8786);
evalcond[1]=((((-1.0)*r12*x8790))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x8789*x8791))+((x8786*x8788)));
evalcond[3]=(((gconst1*r01*x8786))+(((-1.0)*gconst2*r00*x8791)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8789*x8790))+((x8787*x8788))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8794=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8794.valid){
continue;
}
IkReal x8792=x8794.value;
IkReal x8793=((1.0)*x8792);
cj4array[0]=((((-1.0)*cj1*sj2*x8793))+(((-1.0)*cj2*sj1*x8793)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8795=IKsin(j4);
IkReal x8796=IKcos(j4);
IkReal x8797=((1.0)*cj0);
IkReal x8798=(gconst1*r01);
IkReal x8799=((1.0)*x8796);
IkReal x8800=((1.0)*gconst2*x8795);
evalcond[0]=(r12*x8795);
evalcond[1]=((((-1.0)*r12*x8799))+(((-1.0)*x8797)));
evalcond[2]=((((-1.0)*r20*x8800))+((gconst1*r21*x8795)));
evalcond[3]=(((x8795*x8798))+(((-1.0)*r00*x8800)));
evalcond[4]=(((x8796*x8798))+((cj0*cj1*cj2))+(((-1.0)*gconst2*r00*x8799))+(((-1.0)*sj1*sj2*x8797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8801=IKPowWithIntegerCheck(r12,-1);
if(!x8801.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8801.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8802=IKsin(j4);
IkReal x8803=IKcos(j4);
IkReal x8804=(gconst1*x8803);
IkReal x8805=(gconst1*x8802);
IkReal x8806=((1.0)*gconst2*r20);
IkReal x8807=((1.0)*gconst2*r00);
evalcond[0]=(r12*x8802);
evalcond[1]=(((r21*x8805))+(((-1.0)*x8802*x8806)));
evalcond[2]=(((r01*x8805))+(((-1.0)*x8802*x8807)));
evalcond[3]=(((cj2*sj1))+((r21*x8804))+(((-1.0)*x8803*x8806))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x8803*x8807))+((cj0*cj1*cj2))+((r01*x8804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8808=(cj2*sj1);
IkReal x8809=(cj1*sj2);
IkReal x8810=(gconst1*r21);
IkReal x8811=((1.0)*gconst2*r20);
CheckValue<IkReal> x8812 = IKatan2WithCheck(IkReal((((r22*x8808))+((r22*x8809)))),IkReal((((x8809*x8810))+(((-1.0)*x8809*x8811))+((x8808*x8810))+(((-1.0)*x8808*x8811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8812.valid){
continue;
}
CheckValue<IkReal> x8813=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8810*x8810)))+(((-1.0)*gconst2*r20*x8811))+(((2.0)*gconst2*r20*x8810))+(((-1.0)*(r22*r22))))),-1);
if(!x8813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8812.value)+(((1.5707963267949)*(x8813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8814=IKsin(j4);
IkReal x8815=IKcos(j4);
IkReal x8816=(cj1*cj2);
IkReal x8817=((1.0)*cj0);
IkReal x8818=(sj1*sj2);
IkReal x8819=((1.0)*x8815);
IkReal x8820=(gconst1*x8815);
IkReal x8821=(gconst1*x8814);
IkReal x8822=((1.0)*gconst2*x8814);
evalcond[0]=((((-1.0)*r22*x8819))+((r21*x8821))+(((-1.0)*r20*x8822)));
evalcond[1]=(sj0+(((-1.0)*r02*x8819))+((r01*x8821))+(((-1.0)*r00*x8822)));
evalcond[2]=((((-1.0)*r12*x8819))+((r11*x8821))+(((-1.0)*x8817))+(((-1.0)*r10*x8822)));
evalcond[3]=(((r21*x8820))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8819))+((r22*x8814))+((cj1*sj2)));
evalcond[4]=(((r02*x8814))+((r01*x8820))+(((-1.0)*gconst2*r00*x8819))+(((-1.0)*x8817*x8818))+((cj0*x8816)));
evalcond[5]=(((r12*x8814))+((sj0*x8816))+((r11*x8820))+(((-1.0)*gconst2*r10*x8819))+(((-1.0)*sj0*x8818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8823=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8823.valid){
continue;
}
CheckValue<IkReal> x8824 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8823.value)))+(x8824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8825=IKsin(j4);
IkReal x8826=IKcos(j4);
IkReal x8827=(cj1*cj2);
IkReal x8828=((1.0)*cj0);
IkReal x8829=(sj1*sj2);
IkReal x8830=((1.0)*x8826);
IkReal x8831=(gconst1*x8826);
IkReal x8832=(gconst1*x8825);
IkReal x8833=((1.0)*gconst2*x8825);
evalcond[0]=(((r21*x8832))+(((-1.0)*r20*x8833))+(((-1.0)*r22*x8830)));
evalcond[1]=(sj0+(((-1.0)*r02*x8830))+(((-1.0)*r00*x8833))+((r01*x8832)));
evalcond[2]=((((-1.0)*r10*x8833))+((r11*x8832))+(((-1.0)*x8828))+(((-1.0)*r12*x8830)));
evalcond[3]=(((cj2*sj1))+((r22*x8825))+((r21*x8831))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8830)));
evalcond[4]=(((r02*x8825))+(((-1.0)*gconst2*r00*x8830))+((r01*x8831))+((cj0*x8827))+(((-1.0)*x8828*x8829)));
evalcond[5]=(((r12*x8825))+((r11*x8831))+((sj0*x8827))+(((-1.0)*sj0*x8829))+(((-1.0)*gconst2*r10*x8830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8834=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8834.valid){
continue;
}
CheckValue<IkReal> x8835 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8834.value)))+(x8835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8836=IKsin(j4);
IkReal x8837=IKcos(j4);
IkReal x8838=(cj1*cj2);
IkReal x8839=((1.0)*cj0);
IkReal x8840=(sj1*sj2);
IkReal x8841=((1.0)*x8837);
IkReal x8842=(gconst1*x8837);
IkReal x8843=(gconst1*x8836);
IkReal x8844=((1.0)*gconst2*x8836);
evalcond[0]=(((r21*x8843))+(((-1.0)*r20*x8844))+(((-1.0)*r22*x8841)));
evalcond[1]=(sj0+(((-1.0)*r02*x8841))+((r01*x8843))+(((-1.0)*r00*x8844)));
evalcond[2]=((((-1.0)*r10*x8844))+((r11*x8843))+(((-1.0)*x8839))+(((-1.0)*r12*x8841)));
evalcond[3]=(((cj2*sj1))+((r21*x8842))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8841))+((r22*x8836)));
evalcond[4]=(((cj0*x8838))+((r02*x8836))+(((-1.0)*gconst2*r00*x8841))+((r01*x8842))+(((-1.0)*x8839*x8840)));
evalcond[5]=(((r11*x8842))+((r12*x8836))+((sj0*x8838))+(((-1.0)*gconst2*r10*x8841))+(((-1.0)*sj0*x8840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8845=((-1.0)*r20);
IkReal x8846=x8519;
CheckValue<IkReal> x8848 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8845),IKFAST_ATAN2_MAGTHRESH);
if(!x8848.valid){
continue;
}
IkReal x8847=((-1.0)*(x8848.value));
sj5=gconst1;
cj5=gconst2;
j5=x8847;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8847;
IkReal gconst1=(r21*x8846);
IkReal gconst2=(x8845*x8846);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8849=((-1.0)*r20);
IkReal x8850=x8519;
CheckValue<IkReal> x8852 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8849),IKFAST_ATAN2_MAGTHRESH);
if(!x8852.valid){
continue;
}
IkReal x8851=((-1.0)*(x8852.value));
sj5=gconst1;
cj5=gconst2;
j5=x8851;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8851;
IkReal gconst1=(r21*x8850);
IkReal gconst2=(x8849*x8850);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8853=((-1.0)*r20);
IkReal x8854=x8519;
CheckValue<IkReal> x8856 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8853),IKFAST_ATAN2_MAGTHRESH);
if(!x8856.valid){
continue;
}
IkReal x8855=((-1.0)*(x8856.value));
sj5=gconst1;
cj5=gconst2;
j5=x8855;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8855;
IkReal gconst1=(r21*x8854);
IkReal gconst2=(x8853*x8854);
IkReal x8857=r22*r22;
CheckValue<IkReal> x8860=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8857))),-1);
if(!x8860.valid){
continue;
}
IkReal x8858=x8860.value;
IkReal x8859=(((x8858*(r21*r21*r21*r21)))+x8857+(((2.0)*x8858*(r20*r20)*(r21*r21)))+((x8858*(r20*r20*r20*r20))));
j4eval[0]=x8859;
j4eval[1]=IKsign(x8859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8861=((-1.0)*r20);
IkReal x8862=x8519;
CheckValue<IkReal> x8864 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8861),IKFAST_ATAN2_MAGTHRESH);
if(!x8864.valid){
continue;
}
IkReal x8863=((-1.0)*(x8864.value));
sj5=gconst1;
cj5=gconst2;
j5=x8863;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8863;
IkReal gconst1=(r21*x8862);
IkReal gconst2=(x8861*x8862);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8865=((-1.0)*r20);
IkReal x8866=x8519;
CheckValue<IkReal> x8868 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8865),IKFAST_ATAN2_MAGTHRESH);
if(!x8868.valid){
continue;
}
IkReal x8867=((-1.0)*(x8868.value));
sj5=gconst1;
cj5=gconst2;
j5=x8867;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8867;
IkReal gconst1=(r21*x8866);
IkReal gconst2=(x8865*x8866);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8869=((-1.0)*r20);
IkReal x8870=x8519;
CheckValue<IkReal> x8872 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8869),IKFAST_ATAN2_MAGTHRESH);
if(!x8872.valid){
continue;
}
IkReal x8871=((-1.0)*(x8872.value));
sj5=gconst1;
cj5=gconst2;
j5=x8871;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8871;
IkReal gconst1=(r21*x8870);
IkReal gconst2=(x8869*x8870);
IkReal x8873=r22*r22;
IkReal x8874=(cj1*r02*sj2);
IkReal x8875=(cj2*r02*sj1);
CheckValue<IkReal> x8879=IKPowWithIntegerCheck(((-1.0)+x8873),-1);
if(!x8879.valid){
continue;
}
IkReal x8876=x8879.value;
if((((1.0)+(((-1.0)*x8873)))) < -0.00001)
continue;
IkReal x8877=IKsqrt(((1.0)+(((-1.0)*x8873))));
IkReal x8878=((1.0)*r22*x8876*x8877);
j4eval[0]=((IKabs((x8875+x8874)))+(IKabs(((((-1.0)*x8875*x8878))+(((-1.0)*x8874*x8878))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8880=(cj2*sj1);
IkReal x8881=(cj1*sj2);
IkReal x8882=(gconst2*r00);
IkReal x8883=((1.0)*gconst1*r01);
CheckValue<IkReal> x8884 = IKatan2WithCheck(IkReal(((((-1.0)*x8881*x8883))+((x8881*x8882))+((x8880*x8882))+(((-1.0)*x8880*x8883)))),IkReal((((r02*x8880))+((r02*x8881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8884.valid){
continue;
}
CheckValue<IkReal> x8885=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8884.value)+(((1.5707963267949)*(x8885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8886=IKsin(j4);
IkReal x8887=IKcos(j4);
IkReal x8888=(gconst1*r11);
IkReal x8889=(gconst1*r21);
IkReal x8890=(gconst1*r01);
IkReal x8891=((1.0)*x8887);
IkReal x8892=(gconst2*x8887);
IkReal x8893=((1.0)*x8886);
evalcond[0]=(((x8886*x8889))+(((-1.0)*gconst2*r20*x8893))+(((-1.0)*r22*x8891)));
evalcond[1]=((((-1.0)*r12*x8891))+(((-1.0)*gconst2*r10*x8893))+((x8886*x8888)));
evalcond[2]=(((r00*x8892))+(((-1.0)*r02*x8893))+(((-1.0)*x8890*x8891)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8893))+((x8886*x8890))+(((-1.0)*r02*x8891)));
evalcond[4]=(((cj2*sj1))+((r20*x8892))+(((-1.0)*x8889*x8891))+((cj1*sj2))+(((-1.0)*r22*x8893)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8893))+((r10*x8892))+((cj1*cj2))+(((-1.0)*x8888*x8891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8894=(gconst1*r01);
IkReal x8895=(gconst2*r00);
CheckValue<IkReal> x8896=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8894*x8895))+(x8894*x8894)+(x8895*x8895)+(r02*r02))),-1);
if(!x8896.valid){
continue;
}
CheckValue<IkReal> x8897 = IKatan2WithCheck(IkReal(((((-1.0)*x8894))+x8895)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8896.value)))+(x8897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8898=IKsin(j4);
IkReal x8899=IKcos(j4);
IkReal x8900=(gconst1*r11);
IkReal x8901=(gconst1*r21);
IkReal x8902=(gconst1*r01);
IkReal x8903=((1.0)*x8899);
IkReal x8904=(gconst2*x8899);
IkReal x8905=((1.0)*x8898);
evalcond[0]=((((-1.0)*gconst2*r20*x8905))+(((-1.0)*r22*x8903))+((x8898*x8901)));
evalcond[1]=((((-1.0)*gconst2*r10*x8905))+(((-1.0)*r12*x8903))+((x8898*x8900)));
evalcond[2]=((((-1.0)*x8902*x8903))+((r00*x8904))+(((-1.0)*r02*x8905)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8905))+(((-1.0)*r02*x8903))+((x8898*x8902)));
evalcond[4]=(((cj2*sj1))+((r20*x8904))+((cj1*sj2))+(((-1.0)*r22*x8905))+(((-1.0)*x8901*x8903)));
evalcond[5]=((((-1.0)*x8900*x8903))+((r10*x8904))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x8905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8906 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8906.valid){
continue;
}
CheckValue<IkReal> x8907=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8906.value)+(((1.5707963267949)*(x8907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8908=IKsin(j4);
IkReal x8909=IKcos(j4);
IkReal x8910=(gconst1*r11);
IkReal x8911=(gconst1*r21);
IkReal x8912=(gconst1*r01);
IkReal x8913=((1.0)*x8909);
IkReal x8914=(gconst2*x8909);
IkReal x8915=((1.0)*x8908);
evalcond[0]=((((-1.0)*gconst2*r20*x8915))+((x8908*x8911))+(((-1.0)*r22*x8913)));
evalcond[1]=((((-1.0)*gconst2*r10*x8915))+(((-1.0)*r12*x8913))+((x8908*x8910)));
evalcond[2]=(((r00*x8914))+(((-1.0)*r02*x8915))+(((-1.0)*x8912*x8913)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8913))+(((-1.0)*gconst2*r00*x8915))+((x8908*x8912)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8911*x8913))+(((-1.0)*r22*x8915))+((r20*x8914)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8915))+(((-1.0)*x8910*x8913))+((cj1*cj2))+((r10*x8914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8916=((-1.0)*r20);
IkReal x8917=x8519;
CheckValue<IkReal> x8919 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8916),IKFAST_ATAN2_MAGTHRESH);
if(!x8919.valid){
continue;
}
IkReal x8918=((-1.0)*(x8919.value));
sj5=gconst1;
cj5=gconst2;
j5=x8918;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8918;
IkReal gconst1=(r21*x8917);
IkReal gconst2=(x8916*x8917);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8920=((-1.0)*r20);
IkReal x8921=x8519;
CheckValue<IkReal> x8923 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8920),IKFAST_ATAN2_MAGTHRESH);
if(!x8923.valid){
continue;
}
IkReal x8922=((-1.0)*(x8923.value));
sj5=gconst1;
cj5=gconst2;
j5=x8922;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8922;
IkReal gconst1=(r21*x8921);
IkReal gconst2=(x8920*x8921);
IkReal x8924=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8928=IKPowWithIntegerCheck(x8924,-1);
if(!x8928.valid){
continue;
}
IkReal x8925=x8928.value;
IkReal x8926=((1.0)*x8925);
IkReal x8927=((((-1.0)*x8926*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8925))+(((-1.0)*x8926*(r00*r00)*(r20*r20))));
j4eval[0]=x8927;
j4eval[1]=IKsign(x8927);
j4eval[2]=r02;
j4eval[3]=x8924;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8929=((-1.0)*r20);
IkReal x8930=x8519;
CheckValue<IkReal> x8932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8929),IKFAST_ATAN2_MAGTHRESH);
if(!x8932.valid){
continue;
}
IkReal x8931=((-1.0)*(x8932.value));
sj5=gconst1;
cj5=gconst2;
j5=x8931;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8931;
IkReal gconst1=(r21*x8930);
IkReal gconst2=(x8929*x8930);
IkReal x8933=r22*r22;
IkReal x8934=(cj1*r02*sj2);
IkReal x8935=(cj2*r02*sj1);
CheckValue<IkReal> x8939=IKPowWithIntegerCheck(((-1.0)+x8933),-1);
if(!x8939.valid){
continue;
}
IkReal x8936=x8939.value;
if((((1.0)+(((-1.0)*x8933)))) < -0.00001)
continue;
IkReal x8937=IKsqrt(((1.0)+(((-1.0)*x8933))));
IkReal x8938=((1.0)*r22*x8936*x8937);
j4eval[0]=((IKabs((x8934+x8935)))+(IKabs(((((-1.0)*x8935*x8938))+(((-1.0)*x8934*x8938))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8940=(cj2*sj1);
IkReal x8941=(cj1*sj2);
IkReal x8942=(gconst2*r00);
IkReal x8943=((1.0)*gconst1*r01);
CheckValue<IkReal> x8944 = IKatan2WithCheck(IkReal(((((-1.0)*x8940*x8943))+((x8940*x8942))+(((-1.0)*x8941*x8943))+((x8941*x8942)))),IkReal((((r02*x8941))+((r02*x8940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8944.valid){
continue;
}
CheckValue<IkReal> x8945=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8944.value)+(((1.5707963267949)*(x8945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8946=IKsin(j4);
IkReal x8947=IKcos(j4);
IkReal x8948=(gconst1*r11);
IkReal x8949=(gconst1*r21);
IkReal x8950=(gconst1*r01);
IkReal x8951=((1.0)*x8947);
IkReal x8952=(gconst2*x8947);
IkReal x8953=((1.0)*x8946);
evalcond[0]=((((-1.0)*r22*x8951))+((x8946*x8949))+(((-1.0)*gconst2*r20*x8953)));
evalcond[1]=((((-1.0)*r12*x8951))+((x8946*x8948))+(((-1.0)*gconst2*r10*x8953)));
evalcond[2]=(((r00*x8952))+(((-1.0)*x8950*x8951))+(((-1.0)*r02*x8953)));
evalcond[3]=((-1.0)+((x8946*x8950))+(((-1.0)*r02*x8951))+(((-1.0)*gconst2*r00*x8953)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8953))+(((-1.0)*x8949*x8951))+((r20*x8952)));
evalcond[5]=((((-1.0)*r12*x8953))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8952))+(((-1.0)*x8948*x8951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8954=(gconst2*r00);
IkReal x8955=(gconst1*r01);
CheckValue<IkReal> x8956=IKPowWithIntegerCheck(IKsign(((((2.0)*x8954*x8955))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8954*x8954)))+(((-1.0)*(x8955*x8955))))),-1);
if(!x8956.valid){
continue;
}
CheckValue<IkReal> x8957 = IKatan2WithCheck(IkReal((x8954+(((-1.0)*x8955)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8956.value)))+(x8957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8958=IKsin(j4);
IkReal x8959=IKcos(j4);
IkReal x8960=(gconst1*r11);
IkReal x8961=(gconst1*r21);
IkReal x8962=(gconst1*r01);
IkReal x8963=((1.0)*x8959);
IkReal x8964=(gconst2*x8959);
IkReal x8965=((1.0)*x8958);
evalcond[0]=((((-1.0)*r22*x8963))+(((-1.0)*gconst2*r20*x8965))+((x8958*x8961)));
evalcond[1]=((((-1.0)*r12*x8963))+(((-1.0)*gconst2*r10*x8965))+((x8958*x8960)));
evalcond[2]=(((r00*x8964))+(((-1.0)*x8962*x8963))+(((-1.0)*r02*x8965)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8963))+(((-1.0)*gconst2*r00*x8965))+((x8958*x8962)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8965))+((r20*x8964))+(((-1.0)*x8961*x8963)));
evalcond[5]=((((-1.0)*r12*x8965))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8964))+(((-1.0)*x8960*x8963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8966=((1.0)*gconst2);
CheckValue<IkReal> x8967 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8967.valid){
continue;
}
CheckValue<IkReal> x8968=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8966)))),-1);
if(!x8968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8967.value)+(((1.5707963267949)*(x8968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8969=IKsin(j4);
IkReal x8970=IKcos(j4);
IkReal x8971=(gconst1*r11);
IkReal x8972=(gconst1*r21);
IkReal x8973=(gconst1*r01);
IkReal x8974=((1.0)*x8970);
IkReal x8975=(gconst2*x8970);
IkReal x8976=((1.0)*x8969);
evalcond[0]=((((-1.0)*gconst2*r20*x8976))+(((-1.0)*r22*x8974))+((x8969*x8972)));
evalcond[1]=(((x8969*x8971))+(((-1.0)*gconst2*r10*x8976))+(((-1.0)*r12*x8974)));
evalcond[2]=(((r00*x8975))+(((-1.0)*r02*x8976))+(((-1.0)*x8973*x8974)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8974))+((x8969*x8973))+(((-1.0)*gconst2*r00*x8976)));
evalcond[4]=(((cj2*sj1))+((r20*x8975))+(((-1.0)*r22*x8976))+((cj1*sj2))+(((-1.0)*x8972*x8974)));
evalcond[5]=(((r10*x8975))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8976))+(((-1.0)*x8971*x8974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8977=((-1.0)*r20);
IkReal x8978=x8519;
CheckValue<IkReal> x8980 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8977),IKFAST_ATAN2_MAGTHRESH);
if(!x8980.valid){
continue;
}
IkReal x8979=((-1.0)*(x8980.value));
sj5=gconst1;
cj5=gconst2;
j5=x8979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8979;
IkReal gconst1=(r21*x8978);
IkReal gconst2=(x8977*x8978);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8981=((-1.0)*r20);
IkReal x8982=x8519;
CheckValue<IkReal> x8984 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8981),IKFAST_ATAN2_MAGTHRESH);
if(!x8984.valid){
continue;
}
IkReal x8983=((-1.0)*(x8984.value));
sj5=gconst1;
cj5=gconst2;
j5=x8983;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8983;
IkReal gconst1=(r21*x8982);
IkReal gconst2=(x8981*x8982);
IkReal x8985=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8989=IKPowWithIntegerCheck(x8985,-1);
if(!x8989.valid){
continue;
}
IkReal x8986=x8989.value;
IkReal x8987=((1.0)*x8986);
IkReal x8988=((((-2.0)*r10*r11*r20*r21*x8986))+(((-1.0)*x8987*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8987*(r10*r10)*(r20*r20))));
j4eval[0]=x8988;
j4eval[1]=r12;
j4eval[2]=x8985;
j4eval[3]=IKsign(x8988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8990=((-1.0)*r20);
IkReal x8991=x8519;
CheckValue<IkReal> x8993 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8990),IKFAST_ATAN2_MAGTHRESH);
if(!x8993.valid){
continue;
}
IkReal x8992=((-1.0)*(x8993.value));
sj5=gconst1;
cj5=gconst2;
j5=x8992;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8992;
IkReal gconst1=(r21*x8991);
IkReal gconst2=(x8990*x8991);
IkReal x8994=r22*r22;
IkReal x8995=(cj1*r12*sj2);
IkReal x8996=(cj2*r12*sj1);
CheckValue<IkReal> x9000=IKPowWithIntegerCheck(((-1.0)+x8994),-1);
if(!x9000.valid){
continue;
}
IkReal x8997=x9000.value;
if((((1.0)+(((-1.0)*x8994)))) < -0.00001)
continue;
IkReal x8998=IKsqrt(((1.0)+(((-1.0)*x8994))));
IkReal x8999=((1.0)*r22*x8997*x8998);
j4eval[0]=((IKabs((x8996+x8995)))+(IKabs(((((-1.0)*x8995*x8999))+(((-1.0)*x8996*x8999))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9001=((1.0)*gconst1);
IkReal x9002=(cj2*sj1);
IkReal x9003=(gconst2*r10);
IkReal x9004=(cj1*sj2);
CheckValue<IkReal> x9005=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9001)))),-1);
if(!x9005.valid){
continue;
}
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal((((x9002*x9003))+(((-1.0)*r11*x9001*x9004))+(((-1.0)*r11*x9001*x9002))+((x9003*x9004)))),IkReal((((r12*x9004))+((r12*x9002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9005.value)))+(x9006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9007=IKsin(j4);
IkReal x9008=IKcos(j4);
IkReal x9009=((1.0)*x9008);
IkReal x9010=(gconst2*x9008);
IkReal x9011=(gconst1*x9007);
IkReal x9012=((1.0)*x9007);
evalcond[0]=((((-1.0)*gconst2*r20*x9012))+(((-1.0)*r22*x9009))+((r21*x9011)));
evalcond[1]=((((-1.0)*r02*x9009))+((r01*x9011))+(((-1.0)*gconst2*r00*x9012)));
evalcond[2]=((((-1.0)*gconst1*r11*x9009))+(((-1.0)*r12*x9012))+((r10*x9010)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9009))+(((-1.0)*gconst2*r10*x9012))+((r11*x9011)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9009))+(((-1.0)*r22*x9012))+((cj1*sj2))+((r20*x9010)));
evalcond[5]=((((-1.0)*gconst1*r01*x9009))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x9012))+((r00*x9010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9013=(gconst1*r11);
IkReal x9014=(gconst2*r10);
CheckValue<IkReal> x9015 = IKatan2WithCheck(IkReal(((((-1.0)*x9013))+x9014)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9015.valid){
continue;
}
CheckValue<IkReal> x9016=IKPowWithIntegerCheck(IKsign(((((2.0)*x9013*x9014))+(((-1.0)*(x9013*x9013)))+(((-1.0)*(x9014*x9014)))+(((-1.0)*(r12*r12))))),-1);
if(!x9016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9015.value)+(((1.5707963267949)*(x9016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9017=IKsin(j4);
IkReal x9018=IKcos(j4);
IkReal x9019=((1.0)*x9018);
IkReal x9020=(gconst2*x9018);
IkReal x9021=(gconst1*x9017);
IkReal x9022=((1.0)*x9017);
evalcond[0]=((((-1.0)*gconst2*r20*x9022))+(((-1.0)*r22*x9019))+((r21*x9021)));
evalcond[1]=((((-1.0)*gconst2*r00*x9022))+((r01*x9021))+(((-1.0)*r02*x9019)));
evalcond[2]=((((-1.0)*r12*x9022))+(((-1.0)*gconst1*r11*x9019))+((r10*x9020)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9019))+(((-1.0)*gconst2*r10*x9022))+((r11*x9021)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9019))+(((-1.0)*r22*x9022))+((r20*x9020)));
evalcond[5]=(((r00*x9020))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9019))+(((-1.0)*r02*x9022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9023 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9023.valid){
continue;
}
CheckValue<IkReal> x9024=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9023.value)+(((1.5707963267949)*(x9024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9025=IKsin(j4);
IkReal x9026=IKcos(j4);
IkReal x9027=((1.0)*x9026);
IkReal x9028=(gconst2*x9026);
IkReal x9029=(gconst1*x9025);
IkReal x9030=((1.0)*x9025);
evalcond[0]=((((-1.0)*gconst2*r20*x9030))+((r21*x9029))+(((-1.0)*r22*x9027)));
evalcond[1]=(((r01*x9029))+(((-1.0)*r02*x9027))+(((-1.0)*gconst2*r00*x9030)));
evalcond[2]=((((-1.0)*r12*x9030))+(((-1.0)*gconst1*r11*x9027))+((r10*x9028)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9027))+(((-1.0)*gconst2*r10*x9030))+((r11*x9029)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9027))+(((-1.0)*r22*x9030))+((r20*x9028)));
evalcond[5]=(((r00*x9028))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9027))+(((-1.0)*r02*x9030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9031=((-1.0)*r20);
IkReal x9032=x8519;
CheckValue<IkReal> x9034 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9031),IKFAST_ATAN2_MAGTHRESH);
if(!x9034.valid){
continue;
}
IkReal x9033=((-1.0)*(x9034.value));
sj5=gconst1;
cj5=gconst2;
j5=x9033;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9033;
IkReal gconst1=(r21*x9032);
IkReal gconst2=(x9031*x9032);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9035=((-1.0)*r20);
IkReal x9036=x8519;
CheckValue<IkReal> x9038 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9035),IKFAST_ATAN2_MAGTHRESH);
if(!x9038.valid){
continue;
}
IkReal x9037=((-1.0)*(x9038.value));
sj5=gconst1;
cj5=gconst2;
j5=x9037;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9037;
IkReal gconst1=(r21*x9036);
IkReal gconst2=(x9035*x9036);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9039=((-1.0)*r20);
IkReal x9040=x8519;
CheckValue<IkReal> x9042 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9039),IKFAST_ATAN2_MAGTHRESH);
if(!x9042.valid){
continue;
}
IkReal x9041=((-1.0)*(x9042.value));
sj5=gconst1;
cj5=gconst2;
j5=x9041;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9041;
IkReal gconst1=(r21*x9040);
IkReal gconst2=(x9039*x9040);
IkReal x9043=r22*r22;
IkReal x9044=(cj1*r12*sj2);
IkReal x9045=(cj2*r12*sj1);
CheckValue<IkReal> x9049=IKPowWithIntegerCheck(((-1.0)+x9043),-1);
if(!x9049.valid){
continue;
}
IkReal x9046=x9049.value;
if((((1.0)+(((-1.0)*x9043)))) < -0.00001)
continue;
IkReal x9047=IKsqrt(((1.0)+(((-1.0)*x9043))));
IkReal x9048=((1.0)*r22*x9046*x9047);
j4eval[0]=((IKabs(((((-1.0)*x9045*x9048))+(((-1.0)*x9044*x9048)))))+(IKabs((x9045+x9044))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9050=((1.0)*gconst1);
IkReal x9051=(cj2*sj1);
IkReal x9052=(gconst2*r10);
IkReal x9053=(cj1*sj2);
CheckValue<IkReal> x9054 = IKatan2WithCheck(IkReal((((x9051*x9052))+((x9052*x9053))+(((-1.0)*r11*x9050*x9051))+(((-1.0)*r11*x9050*x9053)))),IkReal((((r12*x9051))+((r12*x9053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9054.valid){
continue;
}
CheckValue<IkReal> x9055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9050))+(((-1.0)*gconst2*r01)))),-1);
if(!x9055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9054.value)+(((1.5707963267949)*(x9055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9056=IKsin(j4);
IkReal x9057=IKcos(j4);
IkReal x9058=((1.0)*x9057);
IkReal x9059=(gconst2*x9057);
IkReal x9060=(gconst1*x9056);
IkReal x9061=((1.0)*x9056);
evalcond[0]=((((-1.0)*gconst2*r20*x9061))+(((-1.0)*r22*x9058))+((r21*x9060)));
evalcond[1]=((((-1.0)*r02*x9058))+((r01*x9060))+(((-1.0)*gconst2*r00*x9061)));
evalcond[2]=((((-1.0)*gconst1*r11*x9058))+((r10*x9059))+(((-1.0)*r12*x9061)));
evalcond[3]=((1.0)+((r11*x9060))+(((-1.0)*r12*x9058))+(((-1.0)*gconst2*r10*x9061)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9058))+((cj1*sj2))+((r20*x9059))+(((-1.0)*r22*x9061)));
evalcond[5]=((((-1.0)*gconst1*r01*x9058))+((r00*x9059))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9062=(gconst1*r11);
IkReal x9063=(gconst2*r10);
CheckValue<IkReal> x9064=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9062*x9063))+(x9062*x9062)+(x9063*x9063))),-1);
if(!x9064.valid){
continue;
}
CheckValue<IkReal> x9065 = IKatan2WithCheck(IkReal((x9063+(((-1.0)*x9062)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9064.value)))+(x9065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9066=IKsin(j4);
IkReal x9067=IKcos(j4);
IkReal x9068=((1.0)*x9067);
IkReal x9069=(gconst2*x9067);
IkReal x9070=(gconst1*x9066);
IkReal x9071=((1.0)*x9066);
evalcond[0]=(((r21*x9070))+(((-1.0)*gconst2*r20*x9071))+(((-1.0)*r22*x9068)));
evalcond[1]=((((-1.0)*gconst2*r00*x9071))+((r01*x9070))+(((-1.0)*r02*x9068)));
evalcond[2]=(((r10*x9069))+(((-1.0)*r12*x9071))+(((-1.0)*gconst1*r11*x9068)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9071))+((r11*x9070))+(((-1.0)*r12*x9068)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9071))+(((-1.0)*gconst1*r21*x9068))+((r20*x9069)));
evalcond[5]=(((r00*x9069))+(((-1.0)*r02*x9071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9072=((1.0)*gconst2);
CheckValue<IkReal> x9073 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9073.valid){
continue;
}
CheckValue<IkReal> x9074=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9072)))),-1);
if(!x9074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9073.value)+(((1.5707963267949)*(x9074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9075=IKsin(j4);
IkReal x9076=IKcos(j4);
IkReal x9077=((1.0)*x9076);
IkReal x9078=(gconst2*x9076);
IkReal x9079=(gconst1*x9075);
IkReal x9080=((1.0)*x9075);
evalcond[0]=(((r21*x9079))+(((-1.0)*gconst2*r20*x9080))+(((-1.0)*r22*x9077)));
evalcond[1]=((((-1.0)*gconst2*r00*x9080))+(((-1.0)*r02*x9077))+((r01*x9079)));
evalcond[2]=((((-1.0)*gconst1*r11*x9077))+((r10*x9078))+(((-1.0)*r12*x9080)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9077))+((r11*x9079))+(((-1.0)*gconst2*r10*x9080)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9077))+((r20*x9078))+((cj1*sj2))+(((-1.0)*r22*x9080)));
evalcond[5]=((((-1.0)*gconst1*r01*x9077))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9078))+(((-1.0)*r02*x9080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9081=((-1.0)*r20);
IkReal x9082=((-1.0)*r21);
CheckValue<IkReal> x9084 = IKatan2WithCheck(IkReal(x9082),IkReal(x9081),IKFAST_ATAN2_MAGTHRESH);
if(!x9084.valid){
continue;
}
IkReal x9083=((-1.0)*(x9084.value));
sj5=gconst1;
cj5=gconst2;
j5=x9083;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9081);
rxp0_2=(py*r00);
rxp1_0=(py*x9082);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9083;
IkReal gconst1=r21;
IkReal gconst2=x9081;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9085=((-1.0)*r20);
IkReal x9086=((-1.0)*r21);
CheckValue<IkReal> x9088 = IKatan2WithCheck(IkReal(x9086),IkReal(x9085),IKFAST_ATAN2_MAGTHRESH);
if(!x9088.valid){
continue;
}
IkReal x9087=((-1.0)*(x9088.value));
sj5=gconst1;
cj5=gconst2;
j5=x9087;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9085);
rxp0_2=(py*r00);
rxp1_0=(py*x9086);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9087;
IkReal gconst1=r21;
IkReal gconst2=x9085;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9089=((-1.0)*r20);
IkReal x9090=((-1.0)*r21);
CheckValue<IkReal> x9092 = IKatan2WithCheck(IkReal(x9090),IkReal(x9089),IKFAST_ATAN2_MAGTHRESH);
if(!x9092.valid){
continue;
}
IkReal x9091=((-1.0)*(x9092.value));
sj5=gconst1;
cj5=gconst2;
j5=x9091;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9089);
rxp0_2=(py*r00);
rxp1_0=(py*x9090);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9091;
IkReal gconst1=r21;
IkReal gconst2=x9089;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9095=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9095.valid){
continue;
}
IkReal x9093=x9095.value;
IkReal x9094=(cj0*x9093);
cj4array[0]=((((-1.0)*cj1*cj2*x9094))+((sj1*sj2*x9094)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9096=IKsin(j4);
IkReal x9097=IKcos(j4);
IkReal x9098=(gconst2*r20);
IkReal x9099=(gconst1*x9096);
IkReal x9100=((1.0)*x9097);
IkReal x9101=((1.0)*x9096);
evalcond[0]=((-1.0)*r12*x9096);
evalcond[1]=((((-1.0)*r12*x9100))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x9099))+(((-1.0)*x9098*x9101)));
evalcond[3]=(((r01*x9099))+(((-1.0)*gconst2*r00*x9101)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9100))+((x9097*x9098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9104=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9104.valid){
continue;
}
IkReal x9102=x9104.value;
IkReal x9103=((1.0)*x9102);
cj4array[0]=((((-1.0)*cj2*sj1*x9103))+(((-1.0)*cj1*sj2*x9103)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9105=IKsin(j4);
IkReal x9106=IKcos(j4);
IkReal x9107=(gconst2*r00);
IkReal x9108=(gconst1*r01);
IkReal x9109=((1.0)*cj0);
IkReal x9110=((1.0)*x9106);
IkReal x9111=((1.0)*x9105);
evalcond[0]=((-1.0)*r12*x9105);
evalcond[1]=((((-1.0)*x9109))+(((-1.0)*r12*x9110)));
evalcond[2]=(((gconst1*r21*x9105))+(((-1.0)*gconst2*r20*x9111)));
evalcond[3]=((((-1.0)*x9107*x9111))+((x9105*x9108)));
evalcond[4]=(((x9106*x9107))+(((-1.0)*x9108*x9110))+(((-1.0)*sj1*sj2*x9109))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9112=IKPowWithIntegerCheck(r12,-1);
if(!x9112.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9112.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9113=IKsin(j4);
IkReal x9114=IKcos(j4);
IkReal x9115=(gconst2*x9114);
IkReal x9116=(gconst1*x9113);
IkReal x9117=((1.0)*gconst1*x9114);
IkReal x9118=((1.0)*gconst2*x9113);
evalcond[0]=((-1.0)*r12*x9113);
evalcond[1]=(((r21*x9116))+(((-1.0)*r20*x9118)));
evalcond[2]=(((r01*x9116))+(((-1.0)*r00*x9118)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x9115))+(((-1.0)*r21*x9117)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((r00*x9115))+((cj0*cj1*cj2))+(((-1.0)*r01*x9117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9119=(cj2*sj1);
IkReal x9120=(cj1*sj2);
IkReal x9121=(gconst1*r21);
IkReal x9122=((1.0)*gconst2*r20);
CheckValue<IkReal> x9123=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst2*r20*x9121))+(((gconst2*gconst2)*(r20*r20)))+(x9121*x9121))),-1);
if(!x9123.valid){
continue;
}
CheckValue<IkReal> x9124 = IKatan2WithCheck(IkReal((((r22*x9120))+((r22*x9119)))),IkReal(((((-1.0)*x9119*x9122))+((x9119*x9121))+(((-1.0)*x9120*x9122))+((x9120*x9121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9123.value)))+(x9124.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9125=IKsin(j4);
IkReal x9126=IKcos(j4);
IkReal x9127=(cj1*cj2);
IkReal x9128=(gconst1*r11);
IkReal x9129=(gconst1*r21);
IkReal x9130=(gconst1*r01);
IkReal x9131=((1.0)*cj0);
IkReal x9132=(sj1*sj2);
IkReal x9133=((1.0)*x9126);
IkReal x9134=(gconst2*x9126);
IkReal x9135=((1.0)*x9125);
evalcond[0]=(((x9125*x9129))+(((-1.0)*r22*x9133))+(((-1.0)*gconst2*r20*x9135)));
evalcond[1]=(sj0+(((-1.0)*r02*x9133))+(((-1.0)*gconst2*r00*x9135))+((x9125*x9130)));
evalcond[2]=((((-1.0)*gconst2*r10*x9135))+((x9125*x9128))+(((-1.0)*r12*x9133))+(((-1.0)*x9131)));
evalcond[3]=(((r20*x9134))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9135))+(((-1.0)*x9129*x9133)));
evalcond[4]=((((-1.0)*x9131*x9132))+(((-1.0)*x9130*x9133))+((cj0*x9127))+(((-1.0)*r02*x9135))+((r00*x9134)));
evalcond[5]=((((-1.0)*sj0*x9132))+((r10*x9134))+(((-1.0)*x9128*x9133))+(((-1.0)*r12*x9135))+((sj0*x9127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9136=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9136.valid){
continue;
}
CheckValue<IkReal> x9137 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9136.value)))+(x9137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9138=IKsin(j4);
IkReal x9139=IKcos(j4);
IkReal x9140=(cj1*cj2);
IkReal x9141=(gconst1*r11);
IkReal x9142=(gconst1*r21);
IkReal x9143=(gconst1*r01);
IkReal x9144=((1.0)*cj0);
IkReal x9145=(sj1*sj2);
IkReal x9146=((1.0)*x9139);
IkReal x9147=(gconst2*x9139);
IkReal x9148=((1.0)*x9138);
evalcond[0]=((((-1.0)*gconst2*r20*x9148))+(((-1.0)*r22*x9146))+((x9138*x9142)));
evalcond[1]=((((-1.0)*gconst2*r00*x9148))+sj0+((x9138*x9143))+(((-1.0)*r02*x9146)));
evalcond[2]=((((-1.0)*gconst2*r10*x9148))+(((-1.0)*x9144))+((x9138*x9141))+(((-1.0)*r12*x9146)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9142*x9146))+((cj1*sj2))+((r20*x9147))+(((-1.0)*r22*x9148)));
evalcond[4]=(((r00*x9147))+((cj0*x9140))+(((-1.0)*x9143*x9146))+(((-1.0)*r02*x9148))+(((-1.0)*x9144*x9145)));
evalcond[5]=(((sj0*x9140))+((r10*x9147))+(((-1.0)*x9141*x9146))+(((-1.0)*sj0*x9145))+(((-1.0)*r12*x9148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9149=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9149.valid){
continue;
}
CheckValue<IkReal> x9150 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9149.value)))+(x9150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9151=IKsin(j4);
IkReal x9152=IKcos(j4);
IkReal x9153=(cj1*cj2);
IkReal x9154=(gconst1*r11);
IkReal x9155=(gconst1*r21);
IkReal x9156=(gconst1*r01);
IkReal x9157=((1.0)*cj0);
IkReal x9158=(sj1*sj2);
IkReal x9159=((1.0)*x9152);
IkReal x9160=(gconst2*x9152);
IkReal x9161=((1.0)*x9151);
evalcond[0]=((((-1.0)*r22*x9159))+(((-1.0)*gconst2*r20*x9161))+((x9151*x9155)));
evalcond[1]=((((-1.0)*r02*x9159))+sj0+(((-1.0)*gconst2*r00*x9161))+((x9151*x9156)));
evalcond[2]=((((-1.0)*r12*x9159))+(((-1.0)*gconst2*r10*x9161))+(((-1.0)*x9157))+((x9151*x9154)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9161))+((cj1*sj2))+((r20*x9160))+(((-1.0)*x9155*x9159)));
evalcond[4]=(((r00*x9160))+((cj0*x9153))+(((-1.0)*x9156*x9159))+(((-1.0)*r02*x9161))+(((-1.0)*x9157*x9158)));
evalcond[5]=((((-1.0)*r12*x9161))+((r10*x9160))+(((-1.0)*sj0*x9158))+((sj0*x9153))+(((-1.0)*x9154*x9159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9162=((-1.0)*r20);
IkReal x9163=x8519;
CheckValue<IkReal> x9165 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9162),IKFAST_ATAN2_MAGTHRESH);
if(!x9165.valid){
continue;
}
IkReal x9164=((-1.0)*(x9165.value));
sj5=gconst1;
cj5=gconst2;
j5=x9164;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9164;
IkReal gconst1=(r21*x9163);
IkReal gconst2=(x9162*x9163);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9166=((-1.0)*r20);
IkReal x9167=x8519;
CheckValue<IkReal> x9169 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9166),IKFAST_ATAN2_MAGTHRESH);
if(!x9169.valid){
continue;
}
IkReal x9168=((-1.0)*(x9169.value));
sj5=gconst1;
cj5=gconst2;
j5=x9168;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9168;
IkReal gconst1=(r21*x9167);
IkReal gconst2=(x9166*x9167);
CheckValue<IkReal> x9177=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9177.valid){
continue;
}
IkReal x9170=x9177.value;
IkReal x9171=(sj3*x9170);
IkReal x9172=(r11*x9171);
IkReal x9173=(r00*x9171);
IkReal x9174=(r01*x9171);
IkReal x9175=(r10*x9171);
IkReal x9176=(r20*r21*x9171);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9172*(r21*r21)))+((r10*x9173*(r20*r20)))+((r10*r20*r21*x9174))+((r00*r20*r21*x9172))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9178=gconst1*gconst1;
IkReal x9179=gconst2*gconst2;
IkReal x9180=((1.0)*cj3);
IkReal x9181=(gconst2*r10);
IkReal x9182=(r01*sj3);
IkReal x9183=(gconst1*r00*sj3);
IkReal x9184=(gconst1*gconst2*r11);
IkReal x9185=(r10*x9179);
IkReal x9186=(r11*x9178);
CheckValue<IkReal> x9187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9180*x9185))+((cj3*gconst1*r01*x9181))+(((-1.0)*r02*r12*x9180))+((cj3*r00*x9184))+(((-1.0)*r01*x9180*x9186)))),-1);
if(!x9187.valid){
continue;
}
CheckValue<IkReal> x9188 = IKatan2WithCheck(IkReal((((r12*x9183))+((gconst2*r12*x9182)))),IkReal((((r00*sj3*x9186))+(((-1.0)*x9181*x9183))+((x9182*x9184))+(((-1.0)*x9182*x9185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9187.value)))+(x9188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9189=IKsin(j4);
IkReal x9190=IKcos(j4);
IkReal x9191=(cj2*sj1);
IkReal x9192=(cj1*sj2);
IkReal x9193=(gconst1*sj3);
IkReal x9194=(cj3*gconst1);
IkReal x9195=(sj1*sj2);
IkReal x9196=(cj3*gconst2);
IkReal x9197=(cj1*cj2);
IkReal x9198=(gconst2*sj3);
IkReal x9199=((1.0)*x9190);
IkReal x9200=((1.0)*x9189);
IkReal x9201=(gconst1*x9189);
IkReal x9202=(cj3*x9189);
IkReal x9203=(x9191+x9192);
IkReal x9204=(x9190*x9198);
evalcond[0]=((((-1.0)*gconst2*r20*x9200))+(((-1.0)*r22*x9199))+((r21*x9201)));
evalcond[1]=(((r11*x9201))+(((-1.0)*r12*x9199))+(((-1.0)*gconst2*r10*x9200)));
evalcond[2]=((1.0)+((r01*x9201))+(((-1.0)*r02*x9199))+(((-1.0)*gconst2*r00*x9200)));
evalcond[3]=(((r01*x9198))+((r00*x9193))+((r02*x9202))+((r01*x9190*x9194))+(((-1.0)*r00*x9196*x9199)));
evalcond[4]=(((r01*x9196))+((r00*x9204))+((r00*x9194))+(((-1.0)*r01*x9193*x9199))+(((-1.0)*r02*sj3*x9200)));
evalcond[5]=(((r21*x9190*x9194))+x9203+((r22*x9202))+((r21*x9198))+(((-1.0)*r20*x9196*x9199))+((r20*x9193)));
evalcond[6]=(((r10*x9204))+x9203+(((-1.0)*r12*sj3*x9200))+((r10*x9194))+(((-1.0)*r11*x9193*x9199))+((r11*x9196)));
evalcond[7]=(((r11*x9190*x9194))+x9197+((r10*x9193))+((r12*x9202))+(((-1.0)*r10*x9196*x9199))+(((-1.0)*x9195))+((r11*x9198)));
evalcond[8]=(((r20*x9204))+(((-1.0)*r21*x9193*x9199))+x9195+((r21*x9196))+(((-1.0)*r22*sj3*x9200))+((r20*x9194))+(((-1.0)*x9197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9205=gconst2*gconst2;
IkReal x9206=gconst1*gconst1;
IkReal x9207=(gconst1*r00);
IkReal x9208=(r11*sj3);
IkReal x9209=((1.0)*gconst2);
IkReal x9210=(cj3*r12);
IkReal x9211=(cj3*r11);
IkReal x9212=(gconst2*r01);
IkReal x9213=(cj3*r10);
IkReal x9214=(r10*sj3);
CheckValue<IkReal> x9215 = IKatan2WithCheck(IkReal((((x9207*x9210))+((x9210*x9212)))),IkReal((((r00*x9206*x9211))+(((-1.0)*r01*x9205*x9213))+(((-1.0)*x9207*x9209*x9213))+((gconst1*x9211*x9212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9215.valid){
continue;
}
CheckValue<IkReal> x9216=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9205*x9214))+(((-1.0)*x9207*x9208*x9209))+(((-1.0)*gconst1*r01*x9209*x9214))+((r01*x9206*x9208)))),-1);
if(!x9216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9215.value)+(((1.5707963267949)*(x9216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9217=IKsin(j4);
IkReal x9218=IKcos(j4);
IkReal x9219=(cj2*sj1);
IkReal x9220=(cj1*sj2);
IkReal x9221=(gconst1*sj3);
IkReal x9222=(cj3*gconst1);
IkReal x9223=(sj1*sj2);
IkReal x9224=(cj3*gconst2);
IkReal x9225=(cj1*cj2);
IkReal x9226=(gconst2*sj3);
IkReal x9227=((1.0)*x9218);
IkReal x9228=((1.0)*x9217);
IkReal x9229=(gconst1*x9217);
IkReal x9230=(cj3*x9217);
IkReal x9231=(x9220+x9219);
IkReal x9232=(x9218*x9226);
evalcond[0]=((((-1.0)*gconst2*r20*x9228))+((r21*x9229))+(((-1.0)*r22*x9227)));
evalcond[1]=((((-1.0)*gconst2*r10*x9228))+((r11*x9229))+(((-1.0)*r12*x9227)));
evalcond[2]=((1.0)+((r01*x9229))+(((-1.0)*gconst2*r00*x9228))+(((-1.0)*r02*x9227)));
evalcond[3]=(((r00*x9221))+((r01*x9226))+((r02*x9230))+(((-1.0)*r00*x9224*x9227))+((r01*x9218*x9222)));
evalcond[4]=(((r00*x9222))+((r01*x9224))+(((-1.0)*r02*sj3*x9228))+((r00*x9232))+(((-1.0)*r01*x9221*x9227)));
evalcond[5]=(((r20*x9221))+x9231+((r21*x9226))+((r22*x9230))+((r21*x9218*x9222))+(((-1.0)*r20*x9224*x9227)));
evalcond[6]=((((-1.0)*r12*sj3*x9228))+x9231+(((-1.0)*r11*x9221*x9227))+((r11*x9224))+((r10*x9232))+((r10*x9222)));
evalcond[7]=(((r11*x9218*x9222))+x9225+((r11*x9226))+(((-1.0)*r10*x9224*x9227))+(((-1.0)*x9223))+((r12*x9230))+((r10*x9221)));
evalcond[8]=(((r20*x9222))+(((-1.0)*r22*sj3*x9228))+x9223+((r21*x9224))+(((-1.0)*r21*x9221*x9227))+((r20*x9232))+(((-1.0)*x9225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9233 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9233.valid){
continue;
}
CheckValue<IkReal> x9234=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9233.value)+(((1.5707963267949)*(x9234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9235=IKsin(j4);
IkReal x9236=IKcos(j4);
IkReal x9237=(cj2*sj1);
IkReal x9238=(cj1*sj2);
IkReal x9239=(gconst1*sj3);
IkReal x9240=(cj3*gconst1);
IkReal x9241=(sj1*sj2);
IkReal x9242=(cj3*gconst2);
IkReal x9243=(cj1*cj2);
IkReal x9244=(gconst2*sj3);
IkReal x9245=((1.0)*x9236);
IkReal x9246=((1.0)*x9235);
IkReal x9247=(gconst1*x9235);
IkReal x9248=(cj3*x9235);
IkReal x9249=(x9238+x9237);
IkReal x9250=(x9236*x9244);
evalcond[0]=((((-1.0)*r22*x9245))+((r21*x9247))+(((-1.0)*gconst2*r20*x9246)));
evalcond[1]=((((-1.0)*gconst2*r10*x9246))+(((-1.0)*r12*x9245))+((r11*x9247)));
evalcond[2]=((1.0)+((r01*x9247))+(((-1.0)*r02*x9245))+(((-1.0)*gconst2*r00*x9246)));
evalcond[3]=(((r01*x9236*x9240))+((r02*x9248))+((r01*x9244))+((r00*x9239))+(((-1.0)*r00*x9242*x9245)));
evalcond[4]=(((r01*x9242))+((r00*x9250))+((r00*x9240))+(((-1.0)*r02*sj3*x9246))+(((-1.0)*r01*x9239*x9245)));
evalcond[5]=((((-1.0)*r20*x9242*x9245))+((r21*x9236*x9240))+x9249+((r21*x9244))+((r22*x9248))+((r20*x9239)));
evalcond[6]=(x9249+((r10*x9250))+(((-1.0)*r11*x9239*x9245))+(((-1.0)*r12*sj3*x9246))+((r10*x9240))+((r11*x9242)));
evalcond[7]=(((r11*x9236*x9240))+x9243+((r12*x9248))+(((-1.0)*r10*x9242*x9245))+((r10*x9239))+((r11*x9244))+(((-1.0)*x9241)));
evalcond[8]=((((-1.0)*r21*x9239*x9245))+x9241+((r21*x9242))+(((-1.0)*r22*sj3*x9246))+((r20*x9240))+((r20*x9250))+(((-1.0)*x9243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9251=((-1.0)*r20);
IkReal x9252=x8519;
CheckValue<IkReal> x9254 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9251),IKFAST_ATAN2_MAGTHRESH);
if(!x9254.valid){
continue;
}
IkReal x9253=((-1.0)*(x9254.value));
sj5=gconst1;
cj5=gconst2;
j5=x9253;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9253;
IkReal gconst1=(r21*x9252);
IkReal gconst2=(x9251*x9252);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9255=((-1.0)*r20);
IkReal x9256=x8519;
CheckValue<IkReal> x9258 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9255),IKFAST_ATAN2_MAGTHRESH);
if(!x9258.valid){
continue;
}
IkReal x9257=((-1.0)*(x9258.value));
sj5=gconst1;
cj5=gconst2;
j5=x9257;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9257;
IkReal gconst1=(r21*x9256);
IkReal gconst2=(x9255*x9256);
CheckValue<IkReal> x9266=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9266.valid){
continue;
}
IkReal x9259=x9266.value;
IkReal x9260=(sj3*x9259);
IkReal x9261=(r11*x9260);
IkReal x9262=(r00*x9260);
IkReal x9263=(r01*x9260);
IkReal x9264=(r10*x9260);
IkReal x9265=(r20*r21*x9260);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9261*(r21*r21)))+((r10*r20*r21*x9263))+((r00*r20*r21*x9261))+((r10*x9262*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9267=gconst1*gconst1;
IkReal x9268=gconst2*gconst2;
IkReal x9269=((1.0)*cj3);
IkReal x9270=(gconst2*r10);
IkReal x9271=(r01*sj3);
IkReal x9272=(gconst1*r00*sj3);
IkReal x9273=(gconst1*gconst2*r11);
IkReal x9274=(r10*x9268);
IkReal x9275=(r11*x9267);
CheckValue<IkReal> x9276=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9273))+((cj3*gconst1*r01*x9270))+(((-1.0)*r02*r12*x9269))+(((-1.0)*r01*x9269*x9275))+(((-1.0)*r00*x9269*x9274)))),-1);
if(!x9276.valid){
continue;
}
CheckValue<IkReal> x9277 = IKatan2WithCheck(IkReal((((r12*x9272))+((gconst2*r12*x9271)))),IkReal((((r00*sj3*x9275))+((x9271*x9273))+(((-1.0)*x9270*x9272))+(((-1.0)*x9271*x9274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9276.value)))+(x9277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9278=IKsin(j4);
IkReal x9279=IKcos(j4);
IkReal x9280=(sj1*sj2);
IkReal x9281=(gconst1*sj3);
IkReal x9282=(cj3*gconst1);
IkReal x9283=(cj3*gconst2);
IkReal x9284=((1.0)*cj2);
IkReal x9285=(cj1*sj2);
IkReal x9286=(gconst2*sj3);
IkReal x9287=(cj1*x9284);
IkReal x9288=((1.0)*x9279);
IkReal x9289=((1.0)*x9278);
IkReal x9290=(gconst1*x9278);
IkReal x9291=(cj3*x9278);
IkReal x9292=(x9279*x9286);
evalcond[0]=((((-1.0)*gconst2*r20*x9289))+(((-1.0)*r22*x9288))+((r21*x9290)));
evalcond[1]=((((-1.0)*r12*x9288))+((r11*x9290))+(((-1.0)*gconst2*r10*x9289)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9289))+((r01*x9290))+(((-1.0)*r02*x9288)));
evalcond[3]=(((r02*x9291))+((r01*x9286))+((r00*x9281))+((r01*x9279*x9282))+(((-1.0)*r00*x9283*x9288)));
evalcond[4]=(((r00*x9292))+(((-1.0)*r02*sj3*x9289))+((r01*x9283))+((r00*x9282))+(((-1.0)*r01*x9281*x9288)));
evalcond[5]=(((cj2*sj1))+((r22*x9291))+x9285+((r20*x9281))+((r21*x9286))+((r21*x9279*x9282))+(((-1.0)*r20*x9283*x9288)));
evalcond[6]=(((r11*x9286))+((r11*x9279*x9282))+(((-1.0)*x9287))+x9280+((r10*x9281))+(((-1.0)*r10*x9283*x9288))+((r12*x9291)));
evalcond[7]=((((-1.0)*x9287))+x9280+((r20*x9282))+((r20*x9292))+((r21*x9283))+(((-1.0)*r21*x9281*x9288))+(((-1.0)*r22*sj3*x9289)));
evalcond[8]=((((-1.0)*sj1*x9284))+((r11*x9283))+((r10*x9292))+(((-1.0)*r12*sj3*x9289))+((r10*x9282))+(((-1.0)*x9285))+(((-1.0)*r11*x9281*x9288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9293=gconst2*gconst2;
IkReal x9294=gconst1*gconst1;
IkReal x9295=(gconst1*r00);
IkReal x9296=(r11*sj3);
IkReal x9297=((1.0)*gconst2);
IkReal x9298=(cj3*r12);
IkReal x9299=(cj3*r11);
IkReal x9300=(gconst2*r01);
IkReal x9301=(cj3*r10);
IkReal x9302=(r10*sj3);
CheckValue<IkReal> x9303 = IKatan2WithCheck(IkReal((((x9295*x9298))+((x9298*x9300)))),IkReal((((gconst1*x9299*x9300))+(((-1.0)*x9295*x9297*x9301))+((r00*x9294*x9299))+(((-1.0)*r01*x9293*x9301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9303.valid){
continue;
}
CheckValue<IkReal> x9304=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9293*x9302))+(((-1.0)*gconst1*r01*x9297*x9302))+((r01*x9294*x9296))+(((-1.0)*x9295*x9296*x9297)))),-1);
if(!x9304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9303.value)+(((1.5707963267949)*(x9304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9305=IKsin(j4);
IkReal x9306=IKcos(j4);
IkReal x9307=(sj1*sj2);
IkReal x9308=(gconst1*sj3);
IkReal x9309=(cj3*gconst1);
IkReal x9310=(cj3*gconst2);
IkReal x9311=((1.0)*cj2);
IkReal x9312=(cj1*sj2);
IkReal x9313=(gconst2*sj3);
IkReal x9314=(cj1*x9311);
IkReal x9315=((1.0)*x9306);
IkReal x9316=((1.0)*x9305);
IkReal x9317=(gconst1*x9305);
IkReal x9318=(cj3*x9305);
IkReal x9319=(x9306*x9313);
evalcond[0]=(((r21*x9317))+(((-1.0)*r22*x9315))+(((-1.0)*gconst2*r20*x9316)));
evalcond[1]=((((-1.0)*gconst2*r10*x9316))+((r11*x9317))+(((-1.0)*r12*x9315)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9316))+((r01*x9317))+(((-1.0)*r02*x9315)));
evalcond[3]=(((r01*x9306*x9309))+(((-1.0)*r00*x9310*x9315))+((r02*x9318))+((r01*x9313))+((r00*x9308)));
evalcond[4]=((((-1.0)*r02*sj3*x9316))+((r01*x9310))+((r00*x9319))+((r00*x9309))+(((-1.0)*r01*x9308*x9315)));
evalcond[5]=(((cj2*sj1))+((r22*x9318))+x9312+((r21*x9313))+(((-1.0)*r20*x9310*x9315))+((r21*x9306*x9309))+((r20*x9308)));
evalcond[6]=(x9307+(((-1.0)*r10*x9310*x9315))+((r11*x9306*x9309))+(((-1.0)*x9314))+((r12*x9318))+((r11*x9313))+((r10*x9308)));
evalcond[7]=(x9307+((r21*x9310))+(((-1.0)*x9314))+((r20*x9319))+((r20*x9309))+(((-1.0)*r22*sj3*x9316))+(((-1.0)*r21*x9308*x9315)));
evalcond[8]=((((-1.0)*r11*x9308*x9315))+(((-1.0)*sj1*x9311))+(((-1.0)*r12*sj3*x9316))+(((-1.0)*x9312))+((r11*x9310))+((r10*x9309))+((r10*x9319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9320=((1.0)*gconst2);
CheckValue<IkReal> x9321=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9320))+(((-1.0)*gconst1*r10)))),-1);
if(!x9321.valid){
continue;
}
CheckValue<IkReal> x9322 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9320))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9321.value)))+(x9322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9323=IKsin(j4);
IkReal x9324=IKcos(j4);
IkReal x9325=(sj1*sj2);
IkReal x9326=(gconst1*sj3);
IkReal x9327=(cj3*gconst1);
IkReal x9328=(cj3*gconst2);
IkReal x9329=((1.0)*cj2);
IkReal x9330=(cj1*sj2);
IkReal x9331=(gconst2*sj3);
IkReal x9332=(cj1*x9329);
IkReal x9333=((1.0)*x9324);
IkReal x9334=((1.0)*x9323);
IkReal x9335=(gconst1*x9323);
IkReal x9336=(cj3*x9323);
IkReal x9337=(x9324*x9331);
evalcond[0]=((((-1.0)*r22*x9333))+(((-1.0)*gconst2*r20*x9334))+((r21*x9335)));
evalcond[1]=((((-1.0)*gconst2*r10*x9334))+(((-1.0)*r12*x9333))+((r11*x9335)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9333))+((r01*x9335))+(((-1.0)*gconst2*r00*x9334)));
evalcond[3]=(((r00*x9326))+((r01*x9331))+((r01*x9324*x9327))+((r02*x9336))+(((-1.0)*r00*x9328*x9333)));
evalcond[4]=(((r00*x9327))+((r00*x9337))+((r01*x9328))+(((-1.0)*r02*sj3*x9334))+(((-1.0)*r01*x9326*x9333)));
evalcond[5]=(((cj2*sj1))+((r20*x9326))+x9330+((r22*x9336))+((r21*x9324*x9327))+(((-1.0)*r20*x9328*x9333))+((r21*x9331)));
evalcond[6]=(((r11*x9324*x9327))+x9325+(((-1.0)*r10*x9328*x9333))+((r11*x9331))+((r12*x9336))+((r10*x9326))+(((-1.0)*x9332)));
evalcond[7]=(((r20*x9337))+((r20*x9327))+x9325+(((-1.0)*r22*sj3*x9334))+(((-1.0)*r21*x9326*x9333))+(((-1.0)*x9332))+((r21*x9328)));
evalcond[8]=((((-1.0)*sj1*x9329))+((r11*x9328))+(((-1.0)*x9330))+(((-1.0)*r12*sj3*x9334))+((r10*x9327))+(((-1.0)*r11*x9326*x9333))+((r10*x9337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9338=((-1.0)*r20);
IkReal x9339=x8519;
CheckValue<IkReal> x9341 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9338),IKFAST_ATAN2_MAGTHRESH);
if(!x9341.valid){
continue;
}
IkReal x9340=((-1.0)*(x9341.value));
sj5=gconst1;
cj5=gconst2;
j5=x9340;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9340;
IkReal gconst1=(r21*x9339);
IkReal gconst2=(x9338*x9339);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9342=((-1.0)*r20);
IkReal x9343=x8519;
CheckValue<IkReal> x9345 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9342),IKFAST_ATAN2_MAGTHRESH);
if(!x9345.valid){
continue;
}
IkReal x9344=((-1.0)*(x9345.value));
sj5=gconst1;
cj5=gconst2;
j5=x9344;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9344;
IkReal gconst1=(r21*x9343);
IkReal gconst2=(x9342*x9343);
CheckValue<IkReal> x9353=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9353.valid){
continue;
}
IkReal x9346=x9353.value;
IkReal x9347=(sj3*x9346);
IkReal x9348=(r11*x9347);
IkReal x9349=(r00*x9347);
IkReal x9350=(r01*x9347);
IkReal x9351=(r10*x9347);
IkReal x9352=(r20*r21*x9347);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9349*(r20*r20)))+((r10*r20*r21*x9350))+((r00*r20*r21*x9348))+((r01*x9348*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9354=gconst2*gconst2;
IkReal x9355=gconst1*gconst1;
IkReal x9356=((1.0)*cj3);
IkReal x9357=((1.0)*sj3);
IkReal x9358=(r11*sj3);
IkReal x9359=(r10*sj3);
IkReal x9360=(gconst1*gconst2*r00);
IkReal x9361=(gconst1*gconst2*r01);
IkReal x9362=(r00*x9354);
IkReal x9363=(r01*x9355);
CheckValue<IkReal> x9364=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9361))+((cj3*r11*x9360))+(((-1.0)*r02*r12*x9356))+(((-1.0)*r11*x9356*x9363))+(((-1.0)*r10*x9356*x9362)))),-1);
if(!x9364.valid){
continue;
}
CheckValue<IkReal> x9365 = IKatan2WithCheck(IkReal((((gconst2*r02*x9358))+((gconst1*r02*x9359)))),IkReal(((((-1.0)*r10*x9357*x9360))+((x9359*x9363))+((x9358*x9361))+(((-1.0)*r11*x9357*x9362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9364.value)))+(x9365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9366=IKsin(j4);
IkReal x9367=IKcos(j4);
IkReal x9368=(cj2*sj1);
IkReal x9369=(cj1*sj2);
IkReal x9370=(gconst1*sj3);
IkReal x9371=(cj3*gconst1);
IkReal x9372=(sj1*sj2);
IkReal x9373=(cj3*gconst2);
IkReal x9374=(cj1*cj2);
IkReal x9375=(gconst2*sj3);
IkReal x9376=((1.0)*x9367);
IkReal x9377=((1.0)*x9366);
IkReal x9378=(gconst1*x9366);
IkReal x9379=(cj3*x9366);
IkReal x9380=(x9368+x9369);
IkReal x9381=(x9367*x9375);
evalcond[0]=(((r21*x9378))+(((-1.0)*r22*x9376))+(((-1.0)*gconst2*r20*x9377)));
evalcond[1]=((((-1.0)*r02*x9376))+(((-1.0)*gconst2*r00*x9377))+((r01*x9378)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9377))+((r11*x9378))+(((-1.0)*r12*x9376)));
evalcond[3]=(((r11*x9367*x9371))+((r11*x9375))+((r12*x9379))+(((-1.0)*r10*x9373*x9376))+((r10*x9370)));
evalcond[4]=(((r10*x9381))+((r11*x9373))+(((-1.0)*r11*x9370*x9376))+(((-1.0)*r12*sj3*x9377))+((r10*x9371)));
evalcond[5]=((((-1.0)*r20*x9373*x9376))+x9380+((r21*x9375))+((r22*x9379))+((r21*x9367*x9371))+((r20*x9370)));
evalcond[6]=(x9380+((r00*x9371))+((r00*x9381))+(((-1.0)*r02*sj3*x9377))+(((-1.0)*r01*x9370*x9376))+((r01*x9373)));
evalcond[7]=(((r01*x9367*x9371))+x9374+((r02*x9379))+(((-1.0)*r00*x9373*x9376))+(((-1.0)*x9372))+((r00*x9370))+((r01*x9375)));
evalcond[8]=(x9372+(((-1.0)*r22*sj3*x9377))+((r21*x9373))+(((-1.0)*x9374))+((r20*x9381))+(((-1.0)*r21*x9370*x9376))+((r20*x9371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9382=gconst2*gconst2;
IkReal x9383=gconst1*gconst1;
IkReal x9384=(gconst2*r11);
IkReal x9385=(cj3*r02);
IkReal x9386=(gconst1*r01);
IkReal x9387=(cj3*r10);
IkReal x9388=(r10*sj3);
IkReal x9389=((1.0)*gconst1*r00);
IkReal x9390=(r01*x9383);
IkReal x9391=(r00*x9382);
CheckValue<IkReal> x9392 = IKatan2WithCheck(IkReal((((x9384*x9385))+((gconst1*r10*x9385)))),IkReal((((cj3*x9384*x9386))+(((-1.0)*cj3*r11*x9391))+(((-1.0)*gconst2*x9387*x9389))+((x9387*x9390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9392.valid){
continue;
}
CheckValue<IkReal> x9393=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9388*x9391))+(((-1.0)*gconst2*x9386*x9388))+((r11*sj3*x9390))+(((-1.0)*sj3*x9384*x9389)))),-1);
if(!x9393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9392.value)+(((1.5707963267949)*(x9393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9394=IKsin(j4);
IkReal x9395=IKcos(j4);
IkReal x9396=(cj2*sj1);
IkReal x9397=(cj1*sj2);
IkReal x9398=(gconst1*sj3);
IkReal x9399=(cj3*gconst1);
IkReal x9400=(sj1*sj2);
IkReal x9401=(cj3*gconst2);
IkReal x9402=(cj1*cj2);
IkReal x9403=(gconst2*sj3);
IkReal x9404=((1.0)*x9395);
IkReal x9405=((1.0)*x9394);
IkReal x9406=(gconst1*x9394);
IkReal x9407=(cj3*x9394);
IkReal x9408=(x9397+x9396);
IkReal x9409=(x9395*x9403);
evalcond[0]=((((-1.0)*r22*x9404))+((r21*x9406))+(((-1.0)*gconst2*r20*x9405)));
evalcond[1]=(((r01*x9406))+(((-1.0)*r02*x9404))+(((-1.0)*gconst2*r00*x9405)));
evalcond[2]=((-1.0)+((r11*x9406))+(((-1.0)*gconst2*r10*x9405))+(((-1.0)*r12*x9404)));
evalcond[3]=(((r12*x9407))+((r11*x9403))+((r10*x9398))+((r11*x9395*x9399))+(((-1.0)*r10*x9401*x9404)));
evalcond[4]=((((-1.0)*r12*sj3*x9405))+((r11*x9401))+((r10*x9399))+((r10*x9409))+(((-1.0)*r11*x9398*x9404)));
evalcond[5]=(((r22*x9407))+((r21*x9395*x9399))+((r20*x9398))+((r21*x9403))+x9408+(((-1.0)*r20*x9401*x9404)));
evalcond[6]=(((r01*x9401))+x9408+(((-1.0)*r02*sj3*x9405))+(((-1.0)*r01*x9398*x9404))+((r00*x9409))+((r00*x9399)));
evalcond[7]=(((r01*x9403))+(((-1.0)*x9400))+(((-1.0)*r00*x9401*x9404))+((r01*x9395*x9399))+((r02*x9407))+x9402+((r00*x9398)));
evalcond[8]=((((-1.0)*x9402))+((r20*x9399))+(((-1.0)*r21*x9398*x9404))+((r20*x9409))+((r21*x9401))+x9400+(((-1.0)*r22*sj3*x9405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9410 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9410.valid){
continue;
}
CheckValue<IkReal> x9411=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9410.value)+(((1.5707963267949)*(x9411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9412=IKsin(j4);
IkReal x9413=IKcos(j4);
IkReal x9414=(cj2*sj1);
IkReal x9415=(cj1*sj2);
IkReal x9416=(gconst1*sj3);
IkReal x9417=(cj3*gconst1);
IkReal x9418=(sj1*sj2);
IkReal x9419=(cj3*gconst2);
IkReal x9420=(cj1*cj2);
IkReal x9421=(gconst2*sj3);
IkReal x9422=((1.0)*x9413);
IkReal x9423=((1.0)*x9412);
IkReal x9424=(gconst1*x9412);
IkReal x9425=(cj3*x9412);
IkReal x9426=(x9414+x9415);
IkReal x9427=(x9413*x9421);
evalcond[0]=(((r21*x9424))+(((-1.0)*gconst2*r20*x9423))+(((-1.0)*r22*x9422)));
evalcond[1]=(((r01*x9424))+(((-1.0)*r02*x9422))+(((-1.0)*gconst2*r00*x9423)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9423))+(((-1.0)*r12*x9422))+((r11*x9424)));
evalcond[3]=(((r12*x9425))+((r10*x9416))+((r11*x9413*x9417))+(((-1.0)*r10*x9419*x9422))+((r11*x9421)));
evalcond[4]=(((r10*x9417))+(((-1.0)*r12*sj3*x9423))+((r11*x9419))+(((-1.0)*r11*x9416*x9422))+((r10*x9427)));
evalcond[5]=(((r20*x9416))+(((-1.0)*r20*x9419*x9422))+x9426+((r21*x9421))+((r21*x9413*x9417))+((r22*x9425)));
evalcond[6]=(((r00*x9427))+((r00*x9417))+((r01*x9419))+(((-1.0)*r01*x9416*x9422))+x9426+(((-1.0)*r02*sj3*x9423)));
evalcond[7]=(((r01*x9421))+((r00*x9416))+((r02*x9425))+((r01*x9413*x9417))+(((-1.0)*r00*x9419*x9422))+x9420+(((-1.0)*x9418)));
evalcond[8]=(((r20*x9417))+(((-1.0)*r22*sj3*x9423))+((r21*x9419))+(((-1.0)*r21*x9416*x9422))+((r20*x9427))+(((-1.0)*x9420))+x9418);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9428=((-1.0)*r20);
IkReal x9429=x8519;
CheckValue<IkReal> x9431 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9428),IKFAST_ATAN2_MAGTHRESH);
if(!x9431.valid){
continue;
}
IkReal x9430=((-1.0)*(x9431.value));
sj5=gconst1;
cj5=gconst2;
j5=x9430;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9430;
IkReal gconst1=(r21*x9429);
IkReal gconst2=(x9428*x9429);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9432=((-1.0)*r20);
IkReal x9433=x8519;
CheckValue<IkReal> x9435 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9432),IKFAST_ATAN2_MAGTHRESH);
if(!x9435.valid){
continue;
}
IkReal x9434=((-1.0)*(x9435.value));
sj5=gconst1;
cj5=gconst2;
j5=x9434;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9434;
IkReal gconst1=(r21*x9433);
IkReal gconst2=(x9432*x9433);
CheckValue<IkReal> x9443=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9443.valid){
continue;
}
IkReal x9436=x9443.value;
IkReal x9437=(sj3*x9436);
IkReal x9438=(r11*x9437);
IkReal x9439=(r00*x9437);
IkReal x9440=(r01*x9437);
IkReal x9441=(r10*x9437);
IkReal x9442=(r20*r21*x9437);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9438))+((r10*x9439*(r20*r20)))+((r01*x9438*(r21*r21)))+((r10*r20*r21*x9440))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9444=gconst2*gconst2;
IkReal x9445=gconst1*gconst1;
IkReal x9446=((1.0)*cj3);
IkReal x9447=((1.0)*sj3);
IkReal x9448=(r11*sj3);
IkReal x9449=(r10*sj3);
IkReal x9450=(gconst1*gconst2*r00);
IkReal x9451=(gconst1*gconst2*r01);
IkReal x9452=(r00*x9444);
IkReal x9453=(r01*x9445);
CheckValue<IkReal> x9454 = IKatan2WithCheck(IkReal((((gconst2*r02*x9448))+((gconst1*r02*x9449)))),IkReal((((x9448*x9451))+((x9449*x9453))+(((-1.0)*r11*x9447*x9452))+(((-1.0)*r10*x9447*x9450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9454.valid){
continue;
}
CheckValue<IkReal> x9455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9446*x9452))+(((-1.0)*r11*x9446*x9453))+((cj3*r10*x9451))+(((-1.0)*r02*r12*x9446))+((cj3*r11*x9450)))),-1);
if(!x9455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9454.value)+(((1.5707963267949)*(x9455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9456=IKsin(j4);
IkReal x9457=IKcos(j4);
IkReal x9458=(sj1*sj2);
IkReal x9459=(gconst1*sj3);
IkReal x9460=(cj3*gconst1);
IkReal x9461=(cj3*gconst2);
IkReal x9462=((1.0)*cj2);
IkReal x9463=(cj1*sj2);
IkReal x9464=(gconst2*sj3);
IkReal x9465=(cj1*x9462);
IkReal x9466=((1.0)*x9457);
IkReal x9467=((1.0)*x9456);
IkReal x9468=(gconst1*x9456);
IkReal x9469=(cj3*x9456);
IkReal x9470=(x9457*x9464);
evalcond[0]=(((r21*x9468))+(((-1.0)*gconst2*r20*x9467))+(((-1.0)*r22*x9466)));
evalcond[1]=(((r01*x9468))+(((-1.0)*gconst2*r00*x9467))+(((-1.0)*r02*x9466)));
evalcond[2]=((1.0)+((r11*x9468))+(((-1.0)*r12*x9466))+(((-1.0)*gconst2*r10*x9467)));
evalcond[3]=(((r10*x9459))+((r11*x9457*x9460))+(((-1.0)*r10*x9461*x9466))+((r11*x9464))+((r12*x9469)));
evalcond[4]=(((r10*x9470))+((r10*x9460))+(((-1.0)*r11*x9459*x9466))+(((-1.0)*r12*sj3*x9467))+((r11*x9461)));
evalcond[5]=(((cj2*sj1))+((r22*x9469))+(((-1.0)*r20*x9461*x9466))+((r21*x9464))+x9463+((r20*x9459))+((r21*x9457*x9460)));
evalcond[6]=((((-1.0)*x9465))+((r00*x9459))+((r01*x9464))+(((-1.0)*r00*x9461*x9466))+((r01*x9457*x9460))+x9458+((r02*x9469)));
evalcond[7]=((((-1.0)*x9465))+(((-1.0)*r21*x9459*x9466))+(((-1.0)*r22*sj3*x9467))+((r21*x9461))+((r20*x9460))+x9458+((r20*x9470)));
evalcond[8]=(((r00*x9470))+((r01*x9461))+((r00*x9460))+(((-1.0)*sj1*x9462))+(((-1.0)*r02*sj3*x9467))+(((-1.0)*x9463))+(((-1.0)*r01*x9459*x9466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9471=gconst2*gconst2;
IkReal x9472=gconst1*gconst1;
IkReal x9473=(gconst2*r11);
IkReal x9474=(cj3*r02);
IkReal x9475=(gconst1*r01);
IkReal x9476=(cj3*r10);
IkReal x9477=(r10*sj3);
IkReal x9478=((1.0)*gconst1*r00);
IkReal x9479=(r01*x9472);
IkReal x9480=(r00*x9471);
CheckValue<IkReal> x9481 = IKatan2WithCheck(IkReal((((x9473*x9474))+((gconst1*r10*x9474)))),IkReal(((((-1.0)*cj3*r11*x9480))+(((-1.0)*gconst2*x9476*x9478))+((x9476*x9479))+((cj3*x9473*x9475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9481.valid){
continue;
}
CheckValue<IkReal> x9482=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9477*x9480))+(((-1.0)*gconst2*x9475*x9477))+((r11*sj3*x9479))+(((-1.0)*sj3*x9473*x9478)))),-1);
if(!x9482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9481.value)+(((1.5707963267949)*(x9482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9483=IKsin(j4);
IkReal x9484=IKcos(j4);
IkReal x9485=(sj1*sj2);
IkReal x9486=(gconst1*sj3);
IkReal x9487=(cj3*gconst1);
IkReal x9488=(cj3*gconst2);
IkReal x9489=((1.0)*cj2);
IkReal x9490=(cj1*sj2);
IkReal x9491=(gconst2*sj3);
IkReal x9492=(cj1*x9489);
IkReal x9493=((1.0)*x9484);
IkReal x9494=((1.0)*x9483);
IkReal x9495=(gconst1*x9483);
IkReal x9496=(cj3*x9483);
IkReal x9497=(x9484*x9491);
evalcond[0]=((((-1.0)*gconst2*r20*x9494))+(((-1.0)*r22*x9493))+((r21*x9495)));
evalcond[1]=((((-1.0)*r02*x9493))+(((-1.0)*gconst2*r00*x9494))+((r01*x9495)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9494))+(((-1.0)*r12*x9493))+((r11*x9495)));
evalcond[3]=(((r12*x9496))+((r10*x9486))+((r11*x9484*x9487))+((r11*x9491))+(((-1.0)*r10*x9488*x9493)));
evalcond[4]=((((-1.0)*r12*sj3*x9494))+((r10*x9497))+((r11*x9488))+((r10*x9487))+(((-1.0)*r11*x9486*x9493)));
evalcond[5]=(((cj2*sj1))+((r22*x9496))+((r21*x9484*x9487))+((r20*x9486))+x9490+((r21*x9491))+(((-1.0)*r20*x9488*x9493)));
evalcond[6]=(((r02*x9496))+((r00*x9486))+x9485+((r01*x9491))+((r01*x9484*x9487))+(((-1.0)*r00*x9488*x9493))+(((-1.0)*x9492)));
evalcond[7]=(((r21*x9488))+((r20*x9487))+(((-1.0)*r21*x9486*x9493))+(((-1.0)*r22*sj3*x9494))+x9485+((r20*x9497))+(((-1.0)*x9492)));
evalcond[8]=(((r01*x9488))+((r00*x9487))+(((-1.0)*sj1*x9489))+(((-1.0)*r01*x9486*x9493))+((r00*x9497))+(((-1.0)*x9490))+(((-1.0)*r02*sj3*x9494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9498=((1.0)*gconst2);
CheckValue<IkReal> x9499 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9498))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9499.valid){
continue;
}
CheckValue<IkReal> x9500=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9498)))),-1);
if(!x9500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9499.value)+(((1.5707963267949)*(x9500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9501=IKsin(j4);
IkReal x9502=IKcos(j4);
IkReal x9503=(sj1*sj2);
IkReal x9504=(gconst1*sj3);
IkReal x9505=(cj3*gconst1);
IkReal x9506=(cj3*gconst2);
IkReal x9507=((1.0)*cj2);
IkReal x9508=(cj1*sj2);
IkReal x9509=(gconst2*sj3);
IkReal x9510=(cj1*x9507);
IkReal x9511=((1.0)*x9502);
IkReal x9512=((1.0)*x9501);
IkReal x9513=(gconst1*x9501);
IkReal x9514=(cj3*x9501);
IkReal x9515=(x9502*x9509);
evalcond[0]=(((r21*x9513))+(((-1.0)*gconst2*r20*x9512))+(((-1.0)*r22*x9511)));
evalcond[1]=((((-1.0)*r02*x9511))+((r01*x9513))+(((-1.0)*gconst2*r00*x9512)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9512))+((r11*x9513))+(((-1.0)*r12*x9511)));
evalcond[3]=(((r10*x9504))+((r11*x9502*x9505))+((r11*x9509))+((r12*x9514))+(((-1.0)*r10*x9506*x9511)));
evalcond[4]=(((r10*x9505))+((r11*x9506))+(((-1.0)*r12*sj3*x9512))+((r10*x9515))+(((-1.0)*r11*x9504*x9511)));
evalcond[5]=(((cj2*sj1))+((r21*x9509))+((r21*x9502*x9505))+((r20*x9504))+(((-1.0)*r20*x9506*x9511))+((r22*x9514))+x9508);
evalcond[6]=((((-1.0)*x9510))+x9503+(((-1.0)*r00*x9506*x9511))+((r01*x9502*x9505))+((r01*x9509))+((r02*x9514))+((r00*x9504)));
evalcond[7]=(((r21*x9506))+(((-1.0)*r22*sj3*x9512))+((r20*x9505))+(((-1.0)*x9510))+x9503+(((-1.0)*r21*x9504*x9511))+((r20*x9515)));
evalcond[8]=(((r00*x9515))+(((-1.0)*x9508))+(((-1.0)*r01*x9504*x9511))+(((-1.0)*sj1*x9507))+((r01*x9506))+((r00*x9505))+(((-1.0)*r02*sj3*x9512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9516=((-1.0)*r20);
IkReal x9517=((-1.0)*r21);
CheckValue<IkReal> x9519 = IKatan2WithCheck(IkReal(x9517),IkReal(x9516),IKFAST_ATAN2_MAGTHRESH);
if(!x9519.valid){
continue;
}
IkReal x9518=((-1.0)*(x9519.value));
sj5=gconst1;
cj5=gconst2;
j5=x9518;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9516);
rxp0_2=(py*r00);
rxp1_0=(py*x9517);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9518;
IkReal gconst1=r21;
IkReal gconst2=x9516;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9520=((-1.0)*r20);
IkReal x9521=((-1.0)*r21);
CheckValue<IkReal> x9523 = IKatan2WithCheck(IkReal(x9521),IkReal(x9520),IKFAST_ATAN2_MAGTHRESH);
if(!x9523.valid){
continue;
}
IkReal x9522=((-1.0)*(x9523.value));
sj5=gconst1;
cj5=gconst2;
j5=x9522;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9520);
rxp0_2=(py*r00);
rxp1_0=(py*x9521);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9522;
IkReal gconst1=r21;
IkReal gconst2=x9520;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9524=((-1.0)*r20);
IkReal x9525=((-1.0)*r21);
CheckValue<IkReal> x9527 = IKatan2WithCheck(IkReal(x9525),IkReal(x9524),IKFAST_ATAN2_MAGTHRESH);
if(!x9527.valid){
continue;
}
IkReal x9526=((-1.0)*(x9527.value));
sj5=gconst1;
cj5=gconst2;
j5=x9526;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9524);
rxp0_2=(py*r00);
rxp1_0=(py*x9525);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9526;
IkReal gconst1=r21;
IkReal gconst2=x9524;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9528=((-1.0)*r20);
IkReal x9529=((-1.0)*r21);
CheckValue<IkReal> x9531 = IKatan2WithCheck(IkReal(x9529),IkReal(x9528),IKFAST_ATAN2_MAGTHRESH);
if(!x9531.valid){
continue;
}
IkReal x9530=((-1.0)*(x9531.value));
sj5=gconst1;
cj5=gconst2;
j5=x9530;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9528);
rxp0_2=(py*r00);
rxp1_0=(py*x9529);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9530;
IkReal gconst1=r21;
IkReal gconst2=x9528;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9532=((-1.0)*r20);
IkReal x9533=((-1.0)*r21);
CheckValue<IkReal> x9535 = IKatan2WithCheck(IkReal(x9533),IkReal(x9532),IKFAST_ATAN2_MAGTHRESH);
if(!x9535.valid){
continue;
}
IkReal x9534=((-1.0)*(x9535.value));
sj5=gconst1;
cj5=gconst2;
j5=x9534;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9532);
rxp0_2=(py*r00);
rxp1_0=(py*x9533);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9534;
IkReal gconst1=r21;
IkReal gconst2=x9532;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9536=((-1.0)*r20);
IkReal x9537=((-1.0)*r21);
CheckValue<IkReal> x9539 = IKatan2WithCheck(IkReal(x9537),IkReal(x9536),IKFAST_ATAN2_MAGTHRESH);
if(!x9539.valid){
continue;
}
IkReal x9538=((-1.0)*(x9539.value));
sj5=gconst1;
cj5=gconst2;
j5=x9538;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9536);
rxp0_2=(py*r00);
rxp1_0=(py*x9537);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9538;
IkReal gconst1=r21;
IkReal gconst2=x9536;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9542=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9542.valid){
continue;
}
IkReal x9540=x9542.value;
IkReal x9541=((1.0)*cj0*x9540);
cj4array[0]=((((-1.0)*cj1*sj2*x9541))+(((-1.0)*cj2*sj1*x9541)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9543=IKsin(j4);
IkReal x9544=IKcos(j4);
IkReal x9545=(gconst2*r20);
IkReal x9546=(gconst1*x9543);
IkReal x9547=((1.0)*x9544);
IkReal x9548=((1.0)*x9543);
evalcond[0]=((-1.0)*r12*x9543);
evalcond[1]=((((-1.0)*r12*x9547))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x9546))+(((-1.0)*x9545*x9548)));
evalcond[3]=(((r01*x9546))+(((-1.0)*gconst2*r00*x9548)));
evalcond[4]=(((x9544*x9545))+(((-1.0)*gconst1*r21*x9547))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9550=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9550.valid){
continue;
}
IkReal x9549=x9550.value;
cj4array[0]=(((cj1*cj2*x9549))+(((-1.0)*sj1*sj2*x9549)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9551=IKsin(j4);
IkReal x9552=IKcos(j4);
IkReal x9553=(gconst2*r00);
IkReal x9554=(gconst1*r01);
IkReal x9555=((1.0)*x9552);
IkReal x9556=((1.0)*x9551);
evalcond[0]=((-1.0)*r12*x9551);
evalcond[1]=((((-1.0)*r12*x9555))+(((-1.0)*cj0)));
evalcond[2]=(((gconst1*r21*x9551))+(((-1.0)*gconst2*r20*x9556)));
evalcond[3]=((((-1.0)*x9553*x9556))+((x9551*x9554)));
evalcond[4]=((((-1.0)*x9554*x9555))+((cj0*cj2*sj1))+((x9552*x9553))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9557=IKPowWithIntegerCheck(r12,-1);
if(!x9557.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9557.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9558=IKsin(j4);
IkReal x9559=IKcos(j4);
IkReal x9560=(gconst2*x9559);
IkReal x9561=(gconst1*x9558);
IkReal x9562=((1.0)*gconst1*x9559);
IkReal x9563=((1.0)*gconst2*x9558);
evalcond[0]=((-1.0)*r12*x9558);
evalcond[1]=(((r21*x9561))+(((-1.0)*r20*x9563)));
evalcond[2]=(((r01*x9561))+(((-1.0)*r00*x9563)));
evalcond[3]=((((-1.0)*r21*x9562))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x9560)));
evalcond[4]=(((r00*x9560))+(((-1.0)*r01*x9562))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9564=((-1.0)*r20);
IkReal x9565=((-1.0)*r21);
CheckValue<IkReal> x9567 = IKatan2WithCheck(IkReal(x9565),IkReal(x9564),IKFAST_ATAN2_MAGTHRESH);
if(!x9567.valid){
continue;
}
IkReal x9566=((-1.0)*(x9567.value));
sj5=gconst1;
cj5=gconst2;
j5=x9566;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9564);
rxp0_2=(py*r00);
rxp1_0=(py*x9565);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9566;
IkReal gconst1=r21;
IkReal gconst2=x9564;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9568=((-1.0)*r20);
IkReal x9569=((-1.0)*r21);
CheckValue<IkReal> x9571 = IKatan2WithCheck(IkReal(x9569),IkReal(x9568),IKFAST_ATAN2_MAGTHRESH);
if(!x9571.valid){
continue;
}
IkReal x9570=((-1.0)*(x9571.value));
sj5=gconst1;
cj5=gconst2;
j5=x9570;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9568);
rxp0_2=(py*r00);
rxp1_0=(py*x9569);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9570;
IkReal gconst1=r21;
IkReal gconst2=x9568;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9572=((-1.0)*r20);
IkReal x9573=((-1.0)*r21);
CheckValue<IkReal> x9575 = IKatan2WithCheck(IkReal(x9573),IkReal(x9572),IKFAST_ATAN2_MAGTHRESH);
if(!x9575.valid){
continue;
}
IkReal x9574=((-1.0)*(x9575.value));
sj5=gconst1;
cj5=gconst2;
j5=x9574;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9572);
rxp0_2=(py*r00);
rxp1_0=(py*x9573);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9574;
IkReal gconst1=r21;
IkReal gconst2=x9572;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9578=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x9578.valid){
continue;
}
IkReal x9576=x9578.value;
IkReal x9577=((1.0)*cj0*x9576);
cj4array[0]=((((-1.0)*cj1*sj2*x9577))+(((-1.0)*cj2*sj1*x9577)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9579=IKsin(j4);
IkReal x9580=IKcos(j4);
IkReal x9581=(gconst1*r21);
IkReal x9582=(gconst2*r20);
IkReal x9583=((1.0)*x9580);
IkReal x9584=((1.0)*x9579);
evalcond[0]=(r12*x9579);
evalcond[1]=((((-1.0)*r12*x9583))+(((-1.0)*cj0)));
evalcond[2]=(((x9579*x9581))+(((-1.0)*x9582*x9584)));
evalcond[3]=(((gconst1*r01*x9579))+(((-1.0)*gconst2*r00*x9584)));
evalcond[4]=(((x9580*x9581))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9582*x9583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9586=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9586.valid){
continue;
}
IkReal x9585=x9586.value;
cj4array[0]=(((cj1*cj2*x9585))+(((-1.0)*sj1*sj2*x9585)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9587=IKsin(j4);
IkReal x9588=IKcos(j4);
IkReal x9589=(gconst1*r01);
IkReal x9590=((1.0)*x9588);
IkReal x9591=((1.0)*gconst2*x9587);
evalcond[0]=(r12*x9587);
evalcond[1]=((((-1.0)*r12*x9590))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x9591))+((gconst1*r21*x9587)));
evalcond[3]=(((x9587*x9589))+(((-1.0)*r00*x9591)));
evalcond[4]=(((cj0*cj2*sj1))+((x9588*x9589))+(((-1.0)*gconst2*r00*x9590))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9592=IKPowWithIntegerCheck(r12,-1);
if(!x9592.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9592.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9593=IKsin(j4);
IkReal x9594=IKcos(j4);
IkReal x9595=(gconst1*x9594);
IkReal x9596=(gconst1*x9593);
IkReal x9597=((1.0)*gconst2*r20);
IkReal x9598=((1.0)*gconst2*r00);
evalcond[0]=(r12*x9593);
evalcond[1]=((((-1.0)*x9593*x9597))+((r21*x9596)));
evalcond[2]=((((-1.0)*x9593*x9598))+((r01*x9596)));
evalcond[3]=((((-1.0)*x9594*x9597))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9595)));
evalcond[4]=(((r01*x9595))+(((-1.0)*x9594*x9598))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9600=IKPowWithIntegerCheck(r12,-1);
if(!x9600.valid){
continue;
}
IkReal x9599=x9600.value;
CheckValue<IkReal> x9601=IKPowWithIntegerCheck(sj3,-1);
if(!x9601.valid){
continue;
}
if( IKabs((x9599*(x9601.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x9599)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9599*(x9601.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x9599))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9599*(x9601.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x9599));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9602=IKsin(j4);
IkReal x9603=IKcos(j4);
IkReal x9604=((1.0)*sj3);
IkReal x9605=(gconst1*sj3);
IkReal x9606=(gconst1*r01);
IkReal x9607=(cj2*sj0);
IkReal x9608=(sj1*sj2);
IkReal x9609=((1.0)*cj3);
IkReal x9610=(cj1*cj2);
IkReal x9611=(cj3*gconst1);
IkReal x9612=(cj2*sj1);
IkReal x9613=(gconst1*r21);
IkReal x9614=((1.0)*cj0);
IkReal x9615=(gconst2*r00);
IkReal x9616=(gconst2*r01);
IkReal x9617=(cj1*sj2);
IkReal x9618=(gconst2*r21);
IkReal x9619=(r12*x9602);
IkReal x9620=((1.0)*x9602);
IkReal x9621=(gconst2*r20*x9603);
evalcond[0]=((((-1.0)*r12*x9603))+(((-1.0)*x9614)));
evalcond[1]=(((x9602*x9613))+(((-1.0)*gconst2*r20*x9620)));
evalcond[2]=((((-1.0)*x9615*x9620))+sj0+((x9602*x9606)));
evalcond[3]=(((sj0*x9617))+((sj1*x9607))+(((-1.0)*x9604*x9619)));
evalcond[4]=((((-1.0)*sj0*x9608))+((cj3*x9619))+((cj1*x9607)));
evalcond[5]=(((r20*x9605))+x9617+x9612+((r21*x9603*x9611))+((sj3*x9618))+(((-1.0)*x9609*x9621)));
evalcond[6]=(((sj3*x9621))+(((-1.0)*x9603*x9604*x9613))+((r20*x9611))+((cj3*x9618))+(((-1.0)*x9610))+x9608);
evalcond[7]=(((sj3*x9603*x9615))+((r00*x9611))+((cj0*x9617))+((cj0*x9612))+((cj3*x9616))+(((-1.0)*x9603*x9604*x9606)));
evalcond[8]=(((cj0*x9610))+((r00*x9605))+((cj3*x9603*x9606))+((sj3*x9616))+(((-1.0)*x9608*x9614))+(((-1.0)*x9603*x9609*x9615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9622=((1.0)*gconst2);
CheckValue<IkReal> x9623=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*r00*x9622))),-1);
if(!x9623.valid){
continue;
}
CheckValue<IkReal> x9624=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9622))),-1);
if(!x9624.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9623.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9624.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9622)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9623.value)))+IKsqr(((x9624.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9622))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9623.value)), ((x9624.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9622))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9625=IKsin(j4);
IkReal x9626=IKcos(j4);
IkReal x9627=((1.0)*sj3);
IkReal x9628=(gconst1*sj3);
IkReal x9629=(gconst1*r01);
IkReal x9630=(cj2*sj0);
IkReal x9631=(sj1*sj2);
IkReal x9632=((1.0)*cj3);
IkReal x9633=(cj1*cj2);
IkReal x9634=(cj3*gconst1);
IkReal x9635=(cj2*sj1);
IkReal x9636=(gconst1*r21);
IkReal x9637=((1.0)*cj0);
IkReal x9638=(gconst2*r00);
IkReal x9639=(gconst2*r01);
IkReal x9640=(cj1*sj2);
IkReal x9641=(gconst2*r21);
IkReal x9642=(r12*x9625);
IkReal x9643=((1.0)*x9625);
IkReal x9644=(gconst2*r20*x9626);
evalcond[0]=((((-1.0)*r12*x9626))+(((-1.0)*x9637)));
evalcond[1]=((((-1.0)*gconst2*r20*x9643))+((x9625*x9636)));
evalcond[2]=((((-1.0)*x9638*x9643))+sj0+((x9625*x9629)));
evalcond[3]=((((-1.0)*x9627*x9642))+((sj1*x9630))+((sj0*x9640)));
evalcond[4]=(((cj1*x9630))+(((-1.0)*sj0*x9631))+((cj3*x9642)));
evalcond[5]=(((r20*x9628))+(((-1.0)*x9632*x9644))+((sj3*x9641))+x9635+x9640+((r21*x9626*x9634)));
evalcond[6]=((((-1.0)*x9626*x9627*x9636))+((r20*x9634))+(((-1.0)*x9633))+((sj3*x9644))+x9631+((cj3*x9641)));
evalcond[7]=(((sj3*x9626*x9638))+((r00*x9634))+(((-1.0)*x9626*x9627*x9629))+((cj0*x9635))+((cj3*x9639))+((cj0*x9640)));
evalcond[8]=(((cj0*x9633))+((cj3*x9626*x9629))+((r00*x9628))+(((-1.0)*x9626*x9632*x9638))+(((-1.0)*x9631*x9637))+((sj3*x9639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9645=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x9645.valid){
continue;
}
CheckValue<IkReal> x9646=IKPowWithIntegerCheck(r12,-1);
if(!x9646.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9645.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x9646.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9645.value)))+IKsqr(((-1.0)*cj0*(x9646.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9645.value)), ((-1.0)*cj0*(x9646.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9647=IKsin(j4);
IkReal x9648=IKcos(j4);
IkReal x9649=((1.0)*sj3);
IkReal x9650=(gconst1*sj3);
IkReal x9651=(gconst1*r01);
IkReal x9652=(cj2*sj0);
IkReal x9653=(sj1*sj2);
IkReal x9654=((1.0)*cj3);
IkReal x9655=(cj1*cj2);
IkReal x9656=(cj3*gconst1);
IkReal x9657=(cj2*sj1);
IkReal x9658=(gconst1*r21);
IkReal x9659=((1.0)*cj0);
IkReal x9660=(gconst2*r00);
IkReal x9661=(gconst2*r01);
IkReal x9662=(cj1*sj2);
IkReal x9663=(gconst2*r21);
IkReal x9664=(r12*x9647);
IkReal x9665=((1.0)*x9647);
IkReal x9666=(gconst2*r20*x9648);
evalcond[0]=((((-1.0)*r12*x9648))+(((-1.0)*x9659)));
evalcond[1]=((((-1.0)*gconst2*r20*x9665))+((x9647*x9658)));
evalcond[2]=(sj0+((x9647*x9651))+(((-1.0)*x9660*x9665)));
evalcond[3]=(((sj0*x9662))+((sj1*x9652))+(((-1.0)*x9649*x9664)));
evalcond[4]=(((cj3*x9664))+(((-1.0)*sj0*x9653))+((cj1*x9652)));
evalcond[5]=(((sj3*x9663))+((r20*x9650))+(((-1.0)*x9654*x9666))+x9662+x9657+((r21*x9648*x9656)));
evalcond[6]=(((cj3*x9663))+((sj3*x9666))+(((-1.0)*x9648*x9649*x9658))+((r20*x9656))+x9653+(((-1.0)*x9655)));
evalcond[7]=(((cj3*x9661))+(((-1.0)*x9648*x9649*x9651))+((sj3*x9648*x9660))+((cj0*x9657))+((r00*x9656))+((cj0*x9662)));
evalcond[8]=(((sj3*x9661))+(((-1.0)*x9648*x9654*x9660))+((cj3*x9648*x9651))+(((-1.0)*x9653*x9659))+((cj0*x9655))+((r00*x9650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9667=gconst1*gconst1;
IkReal x9668=r21*r21;
IkReal x9669=gconst2*gconst2;
IkReal x9670=r20*r20;
IkReal x9671=(gconst2*r20);
IkReal x9672=(cj1*cj2);
IkReal x9673=(sj1*sj2);
IkReal x9674=(gconst1*r21);
IkReal x9675=(cj3*gconst2);
IkReal x9676=(cj3*r20);
CheckValue<IkReal> x9677 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x9672))+((r21*r22*x9675))+((gconst1*r22*x9676))+((r22*x9673)))),IkReal((((x9673*x9674))+(((-1.0)*r21*x9669*x9676))+(((-1.0)*x9672*x9674))+((x9671*x9672))+(((-1.0)*gconst1*x9670*x9675))+((gconst1*x9668*x9675))+(((-1.0)*x9671*x9673))+((r21*x9667*x9676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9677.valid){
continue;
}
CheckValue<IkReal> x9678=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x9667*x9668))+(((-2.0)*sj3*x9671*x9674))+((sj3*x9669*x9670)))),-1);
if(!x9678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9677.value)+(((1.5707963267949)*(x9678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9679=IKsin(j4);
IkReal x9680=IKcos(j4);
IkReal x9681=(gconst1*sj3);
IkReal x9682=(cj2*sj0);
IkReal x9683=(cj3*gconst1);
IkReal x9684=(sj1*sj2);
IkReal x9685=(cj3*gconst2);
IkReal x9686=(cj1*cj2);
IkReal x9687=(gconst2*sj3);
IkReal x9688=(cj2*sj1);
IkReal x9689=((1.0)*cj0);
IkReal x9690=(cj1*sj2);
IkReal x9691=((1.0)*x9680);
IkReal x9692=((1.0)*x9679);
IkReal x9693=(gconst1*x9679);
IkReal x9694=(cj3*x9679);
IkReal x9695=(x9680*x9687);
evalcond[0]=(((r21*x9693))+(((-1.0)*r22*x9691))+(((-1.0)*gconst2*r20*x9692)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x9692))+(((-1.0)*r02*x9691))+((r01*x9693)));
evalcond[2]=((((-1.0)*gconst2*r10*x9692))+(((-1.0)*r12*x9691))+(((-1.0)*x9689))+((r11*x9693)));
evalcond[3]=(((r21*x9680*x9683))+((r22*x9694))+(((-1.0)*r20*x9685*x9691))+((r21*x9687))+x9690+x9688+((r20*x9681)));
evalcond[4]=((((-1.0)*r21*x9681*x9691))+(((-1.0)*x9686))+(((-1.0)*r22*sj3*x9692))+((r21*x9685))+x9684+((r20*x9683))+((r20*x9695)));
evalcond[5]=((((-1.0)*r02*sj3*x9692))+((r01*x9685))+((cj0*x9688))+((r00*x9695))+((cj0*x9690))+((r00*x9683))+(((-1.0)*r01*x9681*x9691)));
evalcond[6]=(((r01*x9680*x9683))+((r02*x9694))+(((-1.0)*r00*x9685*x9691))+((r01*x9687))+((cj0*x9686))+(((-1.0)*x9684*x9689))+((r00*x9681)));
evalcond[7]=(((sj1*x9682))+((sj0*x9690))+((r10*x9695))+((r11*x9685))+(((-1.0)*r12*sj3*x9692))+((r10*x9683))+(((-1.0)*r11*x9681*x9691)));
evalcond[8]=(((cj1*x9682))+((r11*x9680*x9683))+((r12*x9694))+(((-1.0)*sj0*x9684))+(((-1.0)*r10*x9685*x9691))+((r11*x9687))+((r10*x9681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9696=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9696.valid){
continue;
}
CheckValue<IkReal> x9697 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9696.value)))+(x9697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9698=IKsin(j4);
IkReal x9699=IKcos(j4);
IkReal x9700=(gconst1*sj3);
IkReal x9701=(cj2*sj0);
IkReal x9702=(cj3*gconst1);
IkReal x9703=(sj1*sj2);
IkReal x9704=(cj3*gconst2);
IkReal x9705=(cj1*cj2);
IkReal x9706=(gconst2*sj3);
IkReal x9707=(cj2*sj1);
IkReal x9708=((1.0)*cj0);
IkReal x9709=(cj1*sj2);
IkReal x9710=((1.0)*x9699);
IkReal x9711=((1.0)*x9698);
IkReal x9712=(gconst1*x9698);
IkReal x9713=(cj3*x9698);
IkReal x9714=(x9699*x9706);
evalcond[0]=((((-1.0)*gconst2*r20*x9711))+((r21*x9712))+(((-1.0)*r22*x9710)));
evalcond[1]=((((-1.0)*r02*x9710))+sj0+(((-1.0)*gconst2*r00*x9711))+((r01*x9712)));
evalcond[2]=(((r11*x9712))+(((-1.0)*x9708))+(((-1.0)*gconst2*r10*x9711))+(((-1.0)*r12*x9710)));
evalcond[3]=(((r22*x9713))+(((-1.0)*r20*x9704*x9710))+((r20*x9700))+((r21*x9706))+x9709+x9707+((r21*x9699*x9702)));
evalcond[4]=((((-1.0)*x9705))+((r20*x9702))+(((-1.0)*r22*sj3*x9711))+((r21*x9704))+x9703+((r20*x9714))+(((-1.0)*r21*x9700*x9710)));
evalcond[5]=((((-1.0)*r02*sj3*x9711))+(((-1.0)*r01*x9700*x9710))+((r01*x9704))+((r00*x9702))+((cj0*x9709))+((cj0*x9707))+((r00*x9714)));
evalcond[6]=(((r02*x9713))+((r01*x9706))+(((-1.0)*r00*x9704*x9710))+((r00*x9700))+(((-1.0)*x9703*x9708))+((cj0*x9705))+((r01*x9699*x9702)));
evalcond[7]=(((r10*x9702))+(((-1.0)*r12*sj3*x9711))+((sj0*x9709))+((r11*x9704))+((sj1*x9701))+((r10*x9714))+(((-1.0)*r11*x9700*x9710)));
evalcond[8]=(((r10*x9700))+((r12*x9713))+((cj1*x9701))+((r11*x9706))+(((-1.0)*r10*x9704*x9710))+((r11*x9699*x9702))+(((-1.0)*sj0*x9703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9715=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9715.valid){
continue;
}
CheckValue<IkReal> x9716 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9715.value)))+(x9716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9717=IKsin(j4);
IkReal x9718=IKcos(j4);
IkReal x9719=(gconst1*sj3);
IkReal x9720=(cj2*sj0);
IkReal x9721=(cj3*gconst1);
IkReal x9722=(sj1*sj2);
IkReal x9723=(cj3*gconst2);
IkReal x9724=(cj1*cj2);
IkReal x9725=(gconst2*sj3);
IkReal x9726=(cj2*sj1);
IkReal x9727=((1.0)*cj0);
IkReal x9728=(cj1*sj2);
IkReal x9729=((1.0)*x9718);
IkReal x9730=((1.0)*x9717);
IkReal x9731=(gconst1*x9717);
IkReal x9732=(cj3*x9717);
IkReal x9733=(x9718*x9725);
evalcond[0]=((((-1.0)*r22*x9729))+((r21*x9731))+(((-1.0)*gconst2*r20*x9730)));
evalcond[1]=(sj0+(((-1.0)*r02*x9729))+(((-1.0)*gconst2*r00*x9730))+((r01*x9731)));
evalcond[2]=(((r11*x9731))+(((-1.0)*r12*x9729))+(((-1.0)*x9727))+(((-1.0)*gconst2*r10*x9730)));
evalcond[3]=((((-1.0)*r20*x9723*x9729))+x9726+x9728+((r21*x9718*x9721))+((r20*x9719))+((r21*x9725))+((r22*x9732)));
evalcond[4]=((((-1.0)*r21*x9719*x9729))+((r20*x9733))+x9722+((r20*x9721))+(((-1.0)*r22*sj3*x9730))+((r21*x9723))+(((-1.0)*x9724)));
evalcond[5]=(((r01*x9723))+(((-1.0)*r02*sj3*x9730))+((cj0*x9726))+((cj0*x9728))+(((-1.0)*r01*x9719*x9729))+((r00*x9721))+((r00*x9733)));
evalcond[6]=(((r01*x9725))+(((-1.0)*x9722*x9727))+((r02*x9732))+((r01*x9718*x9721))+(((-1.0)*r00*x9723*x9729))+((cj0*x9724))+((r00*x9719)));
evalcond[7]=(((r11*x9723))+(((-1.0)*r12*sj3*x9730))+(((-1.0)*r11*x9719*x9729))+((sj1*x9720))+((r10*x9721))+((sj0*x9728))+((r10*x9733)));
evalcond[8]=(((cj1*x9720))+((r11*x9725))+(((-1.0)*sj0*x9722))+((r12*x9732))+((r11*x9718*x9721))+(((-1.0)*r10*x9723*x9729))+((r10*x9719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9734=((-1.0)*r21);
IkReal x9736 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9736)==0){
continue;
}
IkReal x9735=pow(x9736,-0.5);
CheckValue<IkReal> x9737 = IKatan2WithCheck(IkReal(x9734),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9737.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9737.value))));
IkReal gconst4=(x9734*x9735);
IkReal gconst5=((1.0)*r20*x9735);
CheckValue<IkReal> x9738 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9738.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9738.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9739=((-1.0)*r21);
CheckValue<IkReal> x9742 = IKatan2WithCheck(IkReal(x9739),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9742.valid){
continue;
}
IkReal x9740=((1.0)*(x9742.value));
IkReal x9741=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9740)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9740)));
IkReal gconst4=(x9739*x9741);
IkReal gconst5=((1.0)*r20*x9741);
IkReal x9743=r22*r22;
IkReal x9744=((1.0)*x9743);
CheckValue<IkReal> x9748=IKPowWithIntegerCheck(((-1.0)+x9743),-1);
if(!x9748.valid){
continue;
}
IkReal x9745=x9748.value;
if((((1.0)+(((-1.0)*x9744)))) < -0.00001)
continue;
IkReal x9746=IKsqrt(((1.0)+(((-1.0)*x9744))));
IkReal x9747=(sj0*x9745*x9746);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x9744*x9747))+x9747))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9749=((-1.0)*r21);
CheckValue<IkReal> x9752 = IKatan2WithCheck(IkReal(x9749),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9752.valid){
continue;
}
IkReal x9750=((1.0)*(x9752.value));
IkReal x9751=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9750)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9750)));
IkReal gconst4=(x9749*x9751);
IkReal gconst5=((1.0)*r20*x9751);
IkReal x9753=r22*r22;
IkReal x9754=((1.0)*x9753);
CheckValue<IkReal> x9758=IKPowWithIntegerCheck(((-1.0)+x9753),-1);
if(!x9758.valid){
continue;
}
IkReal x9755=x9758.value;
if((((1.0)+(((-1.0)*x9754)))) < -0.00001)
continue;
IkReal x9756=IKsqrt(((1.0)+(((-1.0)*x9754))));
IkReal x9757=(cj0*x9755*x9756);
j4eval[0]=((IKabs((x9757+(((-1.0)*x9754*x9757)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9759=((-1.0)*r21);
CheckValue<IkReal> x9762 = IKatan2WithCheck(IkReal(x9759),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9762.valid){
continue;
}
IkReal x9760=((1.0)*(x9762.value));
IkReal x9761=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9760)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9760)));
IkReal gconst4=(x9759*x9761);
IkReal gconst5=((1.0)*r20*x9761);
IkReal x9763=r22*r22;
IkReal x9764=(cj0*r02);
IkReal x9765=(r12*sj0);
CheckValue<IkReal> x9769=IKPowWithIntegerCheck(((-1.0)+x9763),-1);
if(!x9769.valid){
continue;
}
IkReal x9766=x9769.value;
if((((1.0)+(((-1.0)*x9763)))) < -0.00001)
continue;
IkReal x9767=IKsqrt(((1.0)+(((-1.0)*x9763))));
IkReal x9768=((1.0)*r22*x9766*x9767);
j4eval[0]=0;
j4eval[1]=((IKabs((x9764+x9765)))+(IKabs(((((-1.0)*x9765*x9768))+(((-1.0)*x9764*x9768))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9770=((-1.0)*r21);
CheckValue<IkReal> x9773 = IKatan2WithCheck(IkReal(x9770),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9773.valid){
continue;
}
IkReal x9771=((1.0)*(x9773.value));
IkReal x9772=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9771)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9771)));
IkReal gconst4=(x9770*x9772);
IkReal gconst5=((1.0)*r20*x9772);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9774=((-1.0)*r21);
CheckValue<IkReal> x9777 = IKatan2WithCheck(IkReal(x9774),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9777.valid){
continue;
}
IkReal x9775=((1.0)*(x9777.value));
IkReal x9776=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9775)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9775)));
IkReal gconst4=(x9774*x9776);
IkReal gconst5=((1.0)*r20*x9776);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9778=((-1.0)*r21);
CheckValue<IkReal> x9781 = IKatan2WithCheck(IkReal(x9778),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9781.valid){
continue;
}
IkReal x9779=((1.0)*(x9781.value));
IkReal x9780=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9779)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9779)));
IkReal gconst4=(x9778*x9780);
IkReal gconst5=((1.0)*r20*x9780);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9782=((-1.0)*r21);
CheckValue<IkReal> x9785 = IKatan2WithCheck(IkReal(x9782),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9785.valid){
continue;
}
IkReal x9783=((1.0)*(x9785.value));
IkReal x9784=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9783)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9783)));
IkReal gconst4=(x9782*x9784);
IkReal gconst5=((1.0)*r20*x9784);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9786=((-1.0)*r21);
CheckValue<IkReal> x9789 = IKatan2WithCheck(IkReal(x9786),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9789.valid){
continue;
}
IkReal x9787=((1.0)*(x9789.value));
IkReal x9788=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9787)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9787)));
IkReal gconst4=(x9786*x9788);
IkReal gconst5=((1.0)*r20*x9788);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9790=((-1.0)*r21);
CheckValue<IkReal> x9793 = IKatan2WithCheck(IkReal(x9790),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9793.valid){
continue;
}
IkReal x9791=((1.0)*(x9793.value));
IkReal x9792=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9791)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9791)));
IkReal gconst4=(x9790*x9792);
IkReal gconst5=((1.0)*r20*x9792);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9794=(gconst5*r00);
IkReal x9795=(gconst4*r01);
CheckValue<IkReal> x9796 = IKatan2WithCheck(IkReal(((((-1.0)*x9795))+x9794)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9796.valid){
continue;
}
CheckValue<IkReal> x9797=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9794*x9795))+(x9794*x9794)+(r02*r02)+(x9795*x9795))),-1);
if(!x9797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9796.value)+(((1.5707963267949)*(x9797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9798=IKsin(j4);
IkReal x9799=IKcos(j4);
IkReal x9800=(gconst4*r11);
IkReal x9801=(gconst5*r10);
IkReal x9802=(gconst4*r01);
IkReal x9803=(gconst5*r00);
IkReal x9804=(gconst4*r21);
IkReal x9805=(gconst5*r20);
IkReal x9806=((1.0)*x9799);
IkReal x9807=((1.0)*x9798);
evalcond[0]=(((x9798*x9804))+(((-1.0)*r22*x9806))+(((-1.0)*x9805*x9807)));
evalcond[1]=(((x9798*x9800))+(((-1.0)*x9801*x9807))+(((-1.0)*r12*x9806)));
evalcond[2]=((((-1.0)*r02*x9807))+((x9799*x9803))+(((-1.0)*x9802*x9806)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9806))+((x9798*x9802))+(((-1.0)*x9803*x9807)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9800*x9806))+((cj1*sj2))+((x9799*x9801))+(((-1.0)*r12*x9807)));
evalcond[5]=((((-1.0)*r22*x9807))+(((-1.0)*cj1*cj2))+((x9799*x9805))+((sj1*sj2))+(((-1.0)*x9804*x9806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9808=((1.0)*gconst5);
CheckValue<IkReal> x9809 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9809.valid){
continue;
}
CheckValue<IkReal> x9810=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9808))+(((-1.0)*gconst4*r20)))),-1);
if(!x9810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9809.value)+(((1.5707963267949)*(x9810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9811=IKsin(j4);
IkReal x9812=IKcos(j4);
IkReal x9813=(gconst4*r11);
IkReal x9814=(gconst5*r10);
IkReal x9815=(gconst4*r01);
IkReal x9816=(gconst5*r00);
IkReal x9817=(gconst4*r21);
IkReal x9818=(gconst5*r20);
IkReal x9819=((1.0)*x9812);
IkReal x9820=((1.0)*x9811);
evalcond[0]=((((-1.0)*x9818*x9820))+(((-1.0)*r22*x9819))+((x9811*x9817)));
evalcond[1]=(((x9811*x9813))+(((-1.0)*x9814*x9820))+(((-1.0)*r12*x9819)));
evalcond[2]=((((-1.0)*r02*x9820))+((x9812*x9816))+(((-1.0)*x9815*x9819)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9819))+((x9811*x9815))+(((-1.0)*x9816*x9820)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9812*x9814))+(((-1.0)*r12*x9820))+(((-1.0)*x9813*x9819)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9812*x9818))+(((-1.0)*x9817*x9819))+(((-1.0)*r22*x9820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9821=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9821.valid){
continue;
}
CheckValue<IkReal> x9822 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9821.value)))+(x9822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9823=IKsin(j4);
IkReal x9824=IKcos(j4);
IkReal x9825=(gconst4*r11);
IkReal x9826=(gconst5*r10);
IkReal x9827=(gconst4*r01);
IkReal x9828=(gconst5*r00);
IkReal x9829=(gconst4*r21);
IkReal x9830=(gconst5*r20);
IkReal x9831=((1.0)*x9824);
IkReal x9832=((1.0)*x9823);
evalcond[0]=((((-1.0)*r22*x9831))+(((-1.0)*x9830*x9832))+((x9823*x9829)));
evalcond[1]=((((-1.0)*x9826*x9832))+(((-1.0)*r12*x9831))+((x9823*x9825)));
evalcond[2]=((((-1.0)*x9827*x9831))+(((-1.0)*r02*x9832))+((x9824*x9828)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9831))+(((-1.0)*x9828*x9832))+((x9823*x9827)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9825*x9831))+(((-1.0)*r12*x9832))+((x9824*x9826)));
evalcond[5]=((((-1.0)*x9829*x9831))+(((-1.0)*r22*x9832))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9824*x9830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9833=((-1.0)*r21);
CheckValue<IkReal> x9836 = IKatan2WithCheck(IkReal(x9833),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9836.valid){
continue;
}
IkReal x9834=((1.0)*(x9836.value));
IkReal x9835=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9834)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9834)));
IkReal gconst4=(x9833*x9835);
IkReal gconst5=((1.0)*r20*x9835);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9837=((-1.0)*r21);
CheckValue<IkReal> x9840 = IKatan2WithCheck(IkReal(x9837),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9840.valid){
continue;
}
IkReal x9838=((1.0)*(x9840.value));
IkReal x9839=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9838)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9838)));
IkReal gconst4=(x9837*x9839);
IkReal gconst5=((1.0)*r20*x9839);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9841=((-1.0)*r21);
CheckValue<IkReal> x9844 = IKatan2WithCheck(IkReal(x9841),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9844.valid){
continue;
}
IkReal x9842=((1.0)*(x9844.value));
IkReal x9843=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9842)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9842)));
IkReal gconst4=(x9841*x9843);
IkReal gconst5=((1.0)*r20*x9843);
IkReal x9845=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9849=IKPowWithIntegerCheck(x9845,-1);
if(!x9849.valid){
continue;
}
IkReal x9846=x9849.value;
IkReal x9847=((1.0)*x9846);
IkReal x9848=((((-2.0)*r00*r01*r20*r21*x9846))+(((-1.0)*(r02*r02)))+(((-1.0)*x9847*(r01*r01)*(r21*r21)))+(((-1.0)*x9847*(r00*r00)*(r20*r20))));
j4eval[0]=x9848;
j4eval[1]=IKsign(x9848);
j4eval[2]=r02;
j4eval[3]=x9845;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9850=(gconst4*r01);
IkReal x9851=(gconst5*r00);
CheckValue<IkReal> x9852=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9850*x9851))+(((-1.0)*(x9851*x9851)))+(((-1.0)*(x9850*x9850))))),-1);
if(!x9852.valid){
continue;
}
CheckValue<IkReal> x9853 = IKatan2WithCheck(IkReal(((((-1.0)*x9851))+x9850)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9852.value)))+(x9853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9854=IKcos(j4);
IkReal x9855=IKsin(j4);
IkReal x9856=(gconst4*r11);
IkReal x9857=(gconst5*r10);
IkReal x9858=(gconst5*r00);
IkReal x9859=(gconst5*r20);
IkReal x9860=((1.0)*x9854);
IkReal x9861=(gconst4*x9854);
IkReal x9862=((1.0)*x9855);
IkReal x9863=(gconst4*x9855);
evalcond[0]=((((-1.0)*x9858*x9860))+((r02*x9855))+((r01*x9861)));
evalcond[1]=((((-1.0)*r22*x9860))+(((-1.0)*x9859*x9862))+((r21*x9863)));
evalcond[2]=((((-1.0)*x9857*x9862))+((x9855*x9856))+(((-1.0)*r12*x9860)));
evalcond[3]=((1.0)+(((-1.0)*x9858*x9862))+((r01*x9863))+(((-1.0)*r02*x9860)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9857*x9860))+((x9854*x9856))+((cj1*sj2))+((r12*x9855)));
evalcond[5]=((((-1.0)*x9859*x9860))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9861))+((r22*x9855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9864=((1.0)*gconst5);
CheckValue<IkReal> x9865 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9865.valid){
continue;
}
CheckValue<IkReal> x9866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9864))+(((-1.0)*gconst4*r20)))),-1);
if(!x9866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9865.value)+(((1.5707963267949)*(x9866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9867=IKcos(j4);
IkReal x9868=IKsin(j4);
IkReal x9869=(gconst4*r11);
IkReal x9870=(gconst5*r10);
IkReal x9871=(gconst5*r00);
IkReal x9872=(gconst5*r20);
IkReal x9873=((1.0)*x9867);
IkReal x9874=(gconst4*x9867);
IkReal x9875=((1.0)*x9868);
IkReal x9876=(gconst4*x9868);
evalcond[0]=(((r02*x9868))+(((-1.0)*x9871*x9873))+((r01*x9874)));
evalcond[1]=(((r21*x9876))+(((-1.0)*x9872*x9875))+(((-1.0)*r22*x9873)));
evalcond[2]=(((x9868*x9869))+(((-1.0)*x9870*x9875))+(((-1.0)*r12*x9873)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9873))+(((-1.0)*x9871*x9875))+((r01*x9876)));
evalcond[4]=(((cj2*sj1))+((x9867*x9869))+((cj1*sj2))+((r12*x9868))+(((-1.0)*x9870*x9873)));
evalcond[5]=(((r22*x9868))+((r21*x9874))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9872*x9873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9877=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9877.valid){
continue;
}
CheckValue<IkReal> x9878 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9877.value)))+(x9878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9879=IKcos(j4);
IkReal x9880=IKsin(j4);
IkReal x9881=(gconst4*r11);
IkReal x9882=(gconst5*r10);
IkReal x9883=(gconst5*r00);
IkReal x9884=(gconst5*r20);
IkReal x9885=((1.0)*x9879);
IkReal x9886=(gconst4*x9879);
IkReal x9887=((1.0)*x9880);
IkReal x9888=(gconst4*x9880);
evalcond[0]=(((r01*x9886))+(((-1.0)*x9883*x9885))+((r02*x9880)));
evalcond[1]=((((-1.0)*r22*x9885))+((r21*x9888))+(((-1.0)*x9884*x9887)));
evalcond[2]=((((-1.0)*x9882*x9887))+((x9880*x9881))+(((-1.0)*r12*x9885)));
evalcond[3]=((1.0)+((r01*x9888))+(((-1.0)*x9883*x9887))+(((-1.0)*r02*x9885)));
evalcond[4]=(((cj2*sj1))+((r12*x9880))+((cj1*sj2))+(((-1.0)*x9882*x9885))+((x9879*x9881)));
evalcond[5]=(((r21*x9886))+(((-1.0)*x9884*x9885))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x9880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9889=((-1.0)*r21);
CheckValue<IkReal> x9892 = IKatan2WithCheck(IkReal(x9889),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9892.valid){
continue;
}
IkReal x9890=((1.0)*(x9892.value));
IkReal x9891=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9890)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9890)));
IkReal gconst4=(x9889*x9891);
IkReal gconst5=((1.0)*r20*x9891);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9893=((-1.0)*r21);
CheckValue<IkReal> x9896 = IKatan2WithCheck(IkReal(x9893),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9896.valid){
continue;
}
IkReal x9894=((1.0)*(x9896.value));
IkReal x9895=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9894)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9894)));
IkReal gconst4=(x9893*x9895);
IkReal gconst5=((1.0)*r20*x9895);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9897=((-1.0)*r21);
CheckValue<IkReal> x9900 = IKatan2WithCheck(IkReal(x9897),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9900.valid){
continue;
}
IkReal x9898=((1.0)*(x9900.value));
IkReal x9899=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9898)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9898)));
IkReal gconst4=(x9897*x9899);
IkReal gconst5=((1.0)*r20*x9899);
IkReal x9901=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9905=IKPowWithIntegerCheck(x9901,-1);
if(!x9905.valid){
continue;
}
IkReal x9902=x9905.value;
IkReal x9903=((1.0)*x9902);
IkReal x9904=((((-2.0)*r00*r01*r20*r21*x9902))+(((-1.0)*(r02*r02)))+(((-1.0)*x9903*(r01*r01)*(r21*r21)))+(((-1.0)*x9903*(r00*r00)*(r20*r20))));
j4eval[0]=x9904;
j4eval[1]=IKsign(x9904);
j4eval[2]=r02;
j4eval[3]=x9901;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9906=(gconst4*r01);
IkReal x9907=(gconst5*r00);
CheckValue<IkReal> x9908=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9907*x9907)))+(((2.0)*x9906*x9907))+(((-1.0)*(x9906*x9906))))),-1);
if(!x9908.valid){
continue;
}
CheckValue<IkReal> x9909 = IKatan2WithCheck(IkReal(((((-1.0)*x9907))+x9906)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9908.value)))+(x9909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9910=IKcos(j4);
IkReal x9911=IKsin(j4);
IkReal x9912=(gconst5*r10);
IkReal x9913=(gconst5*r00);
IkReal x9914=(gconst5*r20);
IkReal x9915=((1.0)*x9910);
IkReal x9916=(gconst4*x9911);
IkReal x9917=(gconst4*x9910);
IkReal x9918=((1.0)*x9911);
evalcond[0]=(((r01*x9917))+(((-1.0)*x9913*x9915))+((r02*x9911)));
evalcond[1]=((((-1.0)*x9914*x9918))+(((-1.0)*r22*x9915))+((r21*x9916)));
evalcond[2]=((((-1.0)*r12*x9915))+((r11*x9916))+(((-1.0)*x9912*x9918)));
evalcond[3]=((1.0)+((r01*x9916))+(((-1.0)*x9913*x9918))+(((-1.0)*r02*x9915)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9914*x9915))+((r22*x9911))+((r21*x9917)));
evalcond[5]=(((r12*x9911))+(((-1.0)*sj1*sj2))+((r11*x9917))+(((-1.0)*x9912*x9915))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9919=((1.0)*gconst5);
CheckValue<IkReal> x9920=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9919))+(((-1.0)*gconst4*r20)))),-1);
if(!x9920.valid){
continue;
}
CheckValue<IkReal> x9921 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x9919))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9920.value)))+(x9921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9922=IKcos(j4);
IkReal x9923=IKsin(j4);
IkReal x9924=(gconst5*r10);
IkReal x9925=(gconst5*r00);
IkReal x9926=(gconst5*r20);
IkReal x9927=((1.0)*x9922);
IkReal x9928=(gconst4*x9923);
IkReal x9929=(gconst4*x9922);
IkReal x9930=((1.0)*x9923);
evalcond[0]=((((-1.0)*x9925*x9927))+((r02*x9923))+((r01*x9929)));
evalcond[1]=((((-1.0)*x9926*x9930))+(((-1.0)*r22*x9927))+((r21*x9928)));
evalcond[2]=((((-1.0)*r12*x9927))+((r11*x9928))+(((-1.0)*x9924*x9930)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9927))+(((-1.0)*x9925*x9930))+((r01*x9928)));
evalcond[4]=((((-1.0)*x9926*x9927))+((cj2*sj1))+((cj1*sj2))+((r21*x9929))+((r22*x9923)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x9929))+((r12*x9923))+((cj1*cj2))+(((-1.0)*x9924*x9927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9931=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9931.valid){
continue;
}
CheckValue<IkReal> x9932 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9931.value)))+(x9932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9933=IKcos(j4);
IkReal x9934=IKsin(j4);
IkReal x9935=(gconst5*r10);
IkReal x9936=(gconst5*r00);
IkReal x9937=(gconst5*r20);
IkReal x9938=((1.0)*x9933);
IkReal x9939=(gconst4*x9934);
IkReal x9940=(gconst4*x9933);
IkReal x9941=((1.0)*x9934);
evalcond[0]=((((-1.0)*x9936*x9938))+((r01*x9940))+((r02*x9934)));
evalcond[1]=((((-1.0)*r22*x9938))+((r21*x9939))+(((-1.0)*x9937*x9941)));
evalcond[2]=(((r11*x9939))+(((-1.0)*x9935*x9941))+(((-1.0)*r12*x9938)));
evalcond[3]=((1.0)+((r01*x9939))+(((-1.0)*r02*x9938))+(((-1.0)*x9936*x9941)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9934))+(((-1.0)*x9937*x9938))+((r21*x9940)));
evalcond[5]=(((r12*x9934))+(((-1.0)*sj1*sj2))+(((-1.0)*x9935*x9938))+((r11*x9940))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9942=((-1.0)*r21);
CheckValue<IkReal> x9945 = IKatan2WithCheck(IkReal(x9942),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9945.valid){
continue;
}
IkReal x9943=((1.0)*(x9945.value));
IkReal x9944=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9943)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9943)));
IkReal gconst4=(x9942*x9944);
IkReal gconst5=((1.0)*r20*x9944);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9946=((-1.0)*r21);
CheckValue<IkReal> x9949 = IKatan2WithCheck(IkReal(x9946),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9949.valid){
continue;
}
IkReal x9947=((1.0)*(x9949.value));
IkReal x9948=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9947)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9947)));
IkReal gconst4=(x9946*x9948);
IkReal gconst5=((1.0)*r20*x9948);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9950=((-1.0)*r21);
CheckValue<IkReal> x9953 = IKatan2WithCheck(IkReal(x9950),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9953.valid){
continue;
}
IkReal x9951=((1.0)*(x9953.value));
IkReal x9952=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9951)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9951)));
IkReal gconst4=(x9950*x9952);
IkReal gconst5=((1.0)*r20*x9952);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9954=(gconst5*r00);
IkReal x9955=(gconst4*r01);
CheckValue<IkReal> x9956 = IKatan2WithCheck(IkReal(((((-1.0)*x9955))+x9954)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9956.valid){
continue;
}
CheckValue<IkReal> x9957=IKPowWithIntegerCheck(IKsign(((x9954*x9954)+(((-2.0)*x9954*x9955))+(x9955*x9955)+(r02*r02))),-1);
if(!x9957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9956.value)+(((1.5707963267949)*(x9957.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9958=IKsin(j4);
IkReal x9959=IKcos(j4);
IkReal x9960=(gconst4*r11);
IkReal x9961=(gconst5*r10);
IkReal x9962=(gconst5*r00);
IkReal x9963=(gconst5*r20);
IkReal x9964=((1.0)*x9959);
IkReal x9965=(gconst4*x9958);
IkReal x9966=((1.0)*x9958);
evalcond[0]=(((r21*x9965))+(((-1.0)*r22*x9964))+(((-1.0)*x9963*x9966)));
evalcond[1]=((((-1.0)*x9961*x9966))+(((-1.0)*r12*x9964))+((x9958*x9960)));
evalcond[2]=(((x9959*x9962))+(((-1.0)*gconst4*r01*x9964))+(((-1.0)*r02*x9966)));
evalcond[3]=((1.0)+((r01*x9965))+(((-1.0)*x9962*x9966))+(((-1.0)*r02*x9964)));
evalcond[4]=(((cj2*sj1))+((x9959*x9963))+(((-1.0)*gconst4*r21*x9964))+(((-1.0)*r22*x9966))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x9960*x9964))+((x9959*x9961))+(((-1.0)*r12*x9966))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9967=((1.0)*gconst5);
CheckValue<IkReal> x9968 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9968.valid){
continue;
}
CheckValue<IkReal> x9969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9967))+(((-1.0)*gconst4*r20)))),-1);
if(!x9969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9968.value)+(((1.5707963267949)*(x9969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9970=IKsin(j4);
IkReal x9971=IKcos(j4);
IkReal x9972=(gconst4*r11);
IkReal x9973=(gconst5*r10);
IkReal x9974=(gconst5*r00);
IkReal x9975=(gconst5*r20);
IkReal x9976=((1.0)*x9971);
IkReal x9977=(gconst4*x9970);
IkReal x9978=((1.0)*x9970);
evalcond[0]=((((-1.0)*x9975*x9978))+(((-1.0)*r22*x9976))+((r21*x9977)));
evalcond[1]=((((-1.0)*r12*x9976))+(((-1.0)*x9973*x9978))+((x9970*x9972)));
evalcond[2]=((((-1.0)*r02*x9978))+(((-1.0)*gconst4*r01*x9976))+((x9971*x9974)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9976))+(((-1.0)*x9974*x9978))+((r01*x9977)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9978))+(((-1.0)*gconst4*r21*x9976))+((x9971*x9975)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x9978))+((cj1*cj2))+((x9971*x9973))+(((-1.0)*x9972*x9976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9979=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9979.valid){
continue;
}
CheckValue<IkReal> x9980 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9979.value)))+(x9980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9981=IKsin(j4);
IkReal x9982=IKcos(j4);
IkReal x9983=(gconst4*r11);
IkReal x9984=(gconst5*r10);
IkReal x9985=(gconst5*r00);
IkReal x9986=(gconst5*r20);
IkReal x9987=((1.0)*x9982);
IkReal x9988=(gconst4*x9981);
IkReal x9989=((1.0)*x9981);
evalcond[0]=((((-1.0)*r22*x9987))+((r21*x9988))+(((-1.0)*x9986*x9989)));
evalcond[1]=((((-1.0)*x9984*x9989))+(((-1.0)*r12*x9987))+((x9981*x9983)));
evalcond[2]=(((x9982*x9985))+(((-1.0)*r02*x9989))+(((-1.0)*gconst4*r01*x9987)));
evalcond[3]=((1.0)+((r01*x9988))+(((-1.0)*r02*x9987))+(((-1.0)*x9985*x9989)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9989))+(((-1.0)*gconst4*r21*x9987))+((cj1*sj2))+((x9982*x9986)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x9982*x9984))+(((-1.0)*r12*x9989))+((cj1*cj2))+(((-1.0)*x9983*x9987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9990=((-1.0)*r21);
IkReal x9991=((-1.0)*r20);
CheckValue<IkReal> x9993 = IKatan2WithCheck(IkReal(x9990),IkReal(x9991),IKFAST_ATAN2_MAGTHRESH);
if(!x9993.valid){
continue;
}
IkReal x9992=((1.0)*(x9993.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9992)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9991);
rxp0_2=(py*r00);
rxp1_0=(py*x9990);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9992)));
IkReal gconst4=x9990;
IkReal gconst5=((1.0)*r20);
IkReal x9994=((1.0)*r01*r21);
IkReal x9995=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9994))+(((-1.0)*x9995)));
j4eval[1]=(((sj3*x9994))+((sj3*x9995)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9996=((-1.0)*r21);
IkReal x9997=((-1.0)*r20);
CheckValue<IkReal> x9999 = IKatan2WithCheck(IkReal(x9996),IkReal(x9997),IKFAST_ATAN2_MAGTHRESH);
if(!x9999.valid){
continue;
}
IkReal x9998=((1.0)*(x9999.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9998)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9997);
rxp0_2=(py*r00);
rxp1_0=(py*x9996);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9998)));
IkReal gconst4=x9996;
IkReal gconst5=((1.0)*r20);
IkReal x10000=((1.0)*r01*r21);
IkReal x10001=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10001))+(((-1.0)*x10000)));
j4eval[1]=((((-1.0)*cj3*x10000))+(((-1.0)*cj3*x10001)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10002=((-1.0)*r21);
IkReal x10003=((-1.0)*r20);
CheckValue<IkReal> x10005 = IKatan2WithCheck(IkReal(x10002),IkReal(x10003),IKFAST_ATAN2_MAGTHRESH);
if(!x10005.valid){
continue;
}
IkReal x10004=((1.0)*(x10005.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10004)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10003);
rxp0_2=(py*r00);
rxp1_0=(py*x10002);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10004)));
IkReal gconst4=x10002;
IkReal gconst5=((1.0)*r20);
IkReal x10006=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r00*r20*x10006))+((r01*r21*x10006)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10007=((1.0)*r01);
CheckValue<IkReal> x10008=IKPowWithIntegerCheck(r12,-1);
if(!x10008.valid){
continue;
}
CheckValue<IkReal> x10009=IKPowWithIntegerCheck(sj3,-1);
if(!x10009.valid){
continue;
}
CheckValue<IkReal> x10010=IKPowWithIntegerCheck((((gconst5*r00*sj3))+(((-1.0)*gconst4*sj3*x10007))),-1);
if(!x10010.valid){
continue;
}
if( IKabs(((x10008.value)*(x10009.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10010.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x10007)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10008.value)*(x10009.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10010.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x10007))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10008.value)*(x10009.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10010.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x10007))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10011=IKsin(j4);
IkReal x10012=IKcos(j4);
IkReal x10013=(cj2*sj1);
IkReal x10014=(cj1*sj2);
IkReal x10015=(sj1*sj2);
IkReal x10016=(gconst5*r00);
IkReal x10017=(gconst5*sj3);
IkReal x10018=(cj3*gconst5);
IkReal x10019=(gconst4*sj3);
IkReal x10020=(cj3*gconst4);
IkReal x10021=(cj1*cj2);
IkReal x10022=((1.0)*x10011);
IkReal x10023=(gconst4*x10011);
IkReal x10024=((1.0)*x10012);
IkReal x10025=(x10013+x10014);
IkReal x10026=(x10012*x10017);
IkReal x10027=(x10012*x10020);
evalcond[0]=((-1.0)*r12*x10012);
evalcond[1]=((((-1.0)*gconst5*r20*x10022))+((r21*x10023)));
evalcond[2]=(x10025+(((-1.0)*r12*sj3*x10022)));
evalcond[3]=(((cj3*r12*x10011))+(((-1.0)*x10015))+x10021);
evalcond[4]=((1.0)+(((-1.0)*x10016*x10022))+((r01*x10023)));
evalcond[5]=((((-1.0)*r01*x10019*x10024))+((r00*x10020))+((r01*x10018))+((sj3*x10012*x10016)));
evalcond[6]=((((-1.0)*cj3*x10016*x10024))+((r01*x10027))+((r00*x10019))+((r01*x10017)));
evalcond[7]=(((r21*x10017))+((r21*x10027))+x10025+(((-1.0)*r20*x10018*x10024))+((r20*x10019)));
evalcond[8]=(((r21*x10018))+(((-1.0)*r21*x10019*x10024))+(((-1.0)*x10021))+((r20*x10026))+((r20*x10020))+x10015);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10028=((1.0)*gconst5);
IkReal x10029=(gconst4*r01);
CheckValue<IkReal> x10030=IKPowWithIntegerCheck(((((-1.0)*r00*x10028))+x10029),-1);
if(!x10030.valid){
continue;
}
CheckValue<IkReal> x10031=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10028))+((cj3*x10029))),-1);
if(!x10031.valid){
continue;
}
if( IKabs(((-1.0)*(x10030.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10031.value)*(((((-1.0)*r01*sj3*x10028))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10030.value)))+IKsqr(((x10031.value)*(((((-1.0)*r01*sj3*x10028))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10030.value)), ((x10031.value)*(((((-1.0)*r01*sj3*x10028))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10032=IKsin(j4);
IkReal x10033=IKcos(j4);
IkReal x10034=(cj2*sj1);
IkReal x10035=(cj1*sj2);
IkReal x10036=(sj1*sj2);
IkReal x10037=(gconst5*r00);
IkReal x10038=(gconst5*sj3);
IkReal x10039=(cj3*gconst5);
IkReal x10040=(gconst4*sj3);
IkReal x10041=(cj3*gconst4);
IkReal x10042=(cj1*cj2);
IkReal x10043=((1.0)*x10032);
IkReal x10044=(gconst4*x10032);
IkReal x10045=((1.0)*x10033);
IkReal x10046=(x10035+x10034);
IkReal x10047=(x10033*x10038);
IkReal x10048=(x10033*x10041);
evalcond[0]=((-1.0)*r12*x10033);
evalcond[1]=((((-1.0)*gconst5*r20*x10043))+((r21*x10044)));
evalcond[2]=((((-1.0)*r12*sj3*x10043))+x10046);
evalcond[3]=((((-1.0)*x10036))+((cj3*r12*x10032))+x10042);
evalcond[4]=((1.0)+(((-1.0)*x10037*x10043))+((r01*x10044)));
evalcond[5]=((((-1.0)*r01*x10040*x10045))+((r00*x10041))+((r01*x10039))+((sj3*x10033*x10037)));
evalcond[6]=(((r00*x10040))+((r01*x10048))+((r01*x10038))+(((-1.0)*cj3*x10037*x10045)));
evalcond[7]=(((r21*x10048))+((r21*x10038))+x10046+((r20*x10040))+(((-1.0)*r20*x10039*x10045)));
evalcond[8]=((((-1.0)*x10042))+((r21*x10039))+(((-1.0)*r21*x10040*x10045))+x10036+((r20*x10047))+((r20*x10041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10049=((1.0)*gconst4);
IkReal x10050=(gconst5*r00);
CheckValue<IkReal> x10051=IKPowWithIntegerCheck(((((-1.0)*x10050))+((gconst4*r01))),-1);
if(!x10051.valid){
continue;
}
CheckValue<IkReal> x10052=IKPowWithIntegerCheck((((sj3*x10050))+(((-1.0)*r01*sj3*x10049))),-1);
if(!x10052.valid){
continue;
}
if( IKabs(((-1.0)*(x10051.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10052.value)*(((((-1.0)*cj3*r00*x10049))+(((-1.0)*cj3*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10051.value)))+IKsqr(((x10052.value)*(((((-1.0)*cj3*r00*x10049))+(((-1.0)*cj3*gconst5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10051.value)), ((x10052.value)*(((((-1.0)*cj3*r00*x10049))+(((-1.0)*cj3*gconst5*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10053=IKsin(j4);
IkReal x10054=IKcos(j4);
IkReal x10055=(cj2*sj1);
IkReal x10056=(cj1*sj2);
IkReal x10057=(sj1*sj2);
IkReal x10058=(gconst5*r00);
IkReal x10059=(gconst5*sj3);
IkReal x10060=(cj3*gconst5);
IkReal x10061=(gconst4*sj3);
IkReal x10062=(cj3*gconst4);
IkReal x10063=(cj1*cj2);
IkReal x10064=((1.0)*x10053);
IkReal x10065=(gconst4*x10053);
IkReal x10066=((1.0)*x10054);
IkReal x10067=(x10055+x10056);
IkReal x10068=(x10054*x10059);
IkReal x10069=(x10054*x10062);
evalcond[0]=((-1.0)*r12*x10054);
evalcond[1]=((((-1.0)*gconst5*r20*x10064))+((r21*x10065)));
evalcond[2]=((((-1.0)*r12*sj3*x10064))+x10067);
evalcond[3]=((((-1.0)*x10057))+x10063+((cj3*r12*x10053)));
evalcond[4]=((1.0)+((r01*x10065))+(((-1.0)*x10058*x10064)));
evalcond[5]=(((r00*x10062))+((sj3*x10054*x10058))+((r01*x10060))+(((-1.0)*r01*x10061*x10066)));
evalcond[6]=((((-1.0)*cj3*x10058*x10066))+((r00*x10061))+((r01*x10059))+((r01*x10069)));
evalcond[7]=(((r20*x10061))+x10067+((r21*x10059))+((r21*x10069))+(((-1.0)*r20*x10060*x10066)));
evalcond[8]=((((-1.0)*r21*x10061*x10066))+((r20*x10068))+((r20*x10062))+x10057+((r21*x10060))+(((-1.0)*x10063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10070=gconst4*gconst4;
IkReal x10071=gconst5*gconst5;
IkReal x10072=(r01*r20);
IkReal x10073=(gconst4*sj3);
IkReal x10074=(r01*r21);
IkReal x10075=((1.0)*cj3);
IkReal x10076=(r00*r21);
IkReal x10077=(r00*r20);
IkReal x10078=(cj3*gconst4*gconst5);
IkReal x10079=((1.0)*x10071);
CheckValue<IkReal> x10080=IKPowWithIntegerCheck(IKsign((((x10076*x10078))+(((-1.0)*r02*r22*x10075))+((x10072*x10078))+(((-1.0)*x10070*x10074*x10075))+(((-1.0)*x10071*x10075*x10077)))),-1);
if(!x10080.valid){
continue;
}
CheckValue<IkReal> x10081 = IKatan2WithCheck(IkReal((((r00*r22*x10073))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x10070*x10076))+((gconst5*x10073*x10074))+(((-1.0)*gconst5*x10073*x10077))+(((-1.0)*sj3*x10072*x10079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10080.value)))+(x10081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10082=IKsin(j4);
IkReal x10083=IKcos(j4);
IkReal x10084=(cj2*sj1);
IkReal x10085=(cj1*sj2);
IkReal x10086=(gconst4*r11);
IkReal x10087=(sj1*sj2);
IkReal x10088=(gconst5*r10);
IkReal x10089=(cj1*cj2);
IkReal x10090=(gconst4*r01);
IkReal x10091=(gconst5*sj3);
IkReal x10092=(gconst5*r00);
IkReal x10093=(gconst4*sj3);
IkReal x10094=(cj3*gconst5);
IkReal x10095=(cj3*gconst4);
IkReal x10096=(gconst4*r21);
IkReal x10097=((1.0)*x10083);
IkReal x10098=((1.0)*x10082);
IkReal x10099=(cj3*x10082);
IkReal x10100=(cj3*x10083);
IkReal x10101=(x10084+x10085);
IkReal x10102=(x10083*x10091);
evalcond[0]=((((-1.0)*gconst5*r20*x10098))+((x10082*x10096))+(((-1.0)*r22*x10097)));
evalcond[1]=((((-1.0)*x10088*x10098))+(((-1.0)*r12*x10097))+((x10082*x10086)));
evalcond[2]=((1.0)+(((-1.0)*x10092*x10098))+(((-1.0)*r02*x10097))+((x10082*x10090)));
evalcond[3]=(((r02*x10099))+((x10090*x10100))+(((-1.0)*cj3*x10092*x10097))+((r01*x10091))+((r00*x10093)));
evalcond[4]=(((r00*x10102))+(((-1.0)*r02*sj3*x10098))+(((-1.0)*sj3*x10090*x10097))+((r01*x10094))+((r00*x10095)));
evalcond[5]=(x10101+((r21*x10083*x10095))+((r22*x10099))+((r21*x10091))+(((-1.0)*r20*x10094*x10097))+((r20*x10093)));
evalcond[6]=(((r11*x10094))+(((-1.0)*sj3*x10086*x10097))+x10101+(((-1.0)*r12*sj3*x10098))+((sj3*x10083*x10088))+((r10*x10095)));
evalcond[7]=(((r11*x10091))+((r12*x10099))+x10089+(((-1.0)*cj3*x10088*x10097))+((r10*x10093))+((x10086*x10100))+(((-1.0)*x10087)));
evalcond[8]=(((r20*x10102))+(((-1.0)*r22*sj3*x10098))+(((-1.0)*r21*x10093*x10097))+x10087+((r21*x10094))+((r20*x10095))+(((-1.0)*x10089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10103=((1.0)*gconst5);
CheckValue<IkReal> x10104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10103))+(((-1.0)*gconst4*r20)))),-1);
if(!x10104.valid){
continue;
}
CheckValue<IkReal> x10105 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10103))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10104.value)))+(x10105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10106=IKsin(j4);
IkReal x10107=IKcos(j4);
IkReal x10108=(cj2*sj1);
IkReal x10109=(cj1*sj2);
IkReal x10110=(gconst4*r11);
IkReal x10111=(sj1*sj2);
IkReal x10112=(gconst5*r10);
IkReal x10113=(cj1*cj2);
IkReal x10114=(gconst4*r01);
IkReal x10115=(gconst5*sj3);
IkReal x10116=(gconst5*r00);
IkReal x10117=(gconst4*sj3);
IkReal x10118=(cj3*gconst5);
IkReal x10119=(cj3*gconst4);
IkReal x10120=(gconst4*r21);
IkReal x10121=((1.0)*x10107);
IkReal x10122=((1.0)*x10106);
IkReal x10123=(cj3*x10106);
IkReal x10124=(cj3*x10107);
IkReal x10125=(x10109+x10108);
IkReal x10126=(x10107*x10115);
evalcond[0]=((((-1.0)*gconst5*r20*x10122))+((x10106*x10120))+(((-1.0)*r22*x10121)));
evalcond[1]=(((x10106*x10110))+(((-1.0)*x10112*x10122))+(((-1.0)*r12*x10121)));
evalcond[2]=((1.0)+((x10106*x10114))+(((-1.0)*r02*x10121))+(((-1.0)*x10116*x10122)));
evalcond[3]=(((x10114*x10124))+((r01*x10115))+((r00*x10117))+((r02*x10123))+(((-1.0)*cj3*x10116*x10121)));
evalcond[4]=(((r01*x10118))+((r00*x10119))+(((-1.0)*sj3*x10114*x10121))+((r00*x10126))+(((-1.0)*r02*sj3*x10122)));
evalcond[5]=(((r21*x10115))+(((-1.0)*r20*x10118*x10121))+((r20*x10117))+x10125+((r22*x10123))+((r21*x10107*x10119)));
evalcond[6]=((((-1.0)*sj3*x10110*x10121))+x10125+((r11*x10118))+(((-1.0)*r12*sj3*x10122))+((sj3*x10107*x10112))+((r10*x10119)));
evalcond[7]=((((-1.0)*x10111))+x10113+(((-1.0)*cj3*x10112*x10121))+((r11*x10115))+((x10110*x10124))+((r10*x10117))+((r12*x10123)));
evalcond[8]=(((r21*x10118))+(((-1.0)*x10113))+((r20*x10126))+((r20*x10119))+(((-1.0)*r21*x10117*x10121))+(((-1.0)*r22*sj3*x10122))+x10111);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10127=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10127.valid){
continue;
}
CheckValue<IkReal> x10128 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10127.value)))+(x10128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10129=IKsin(j4);
IkReal x10130=IKcos(j4);
IkReal x10131=(cj2*sj1);
IkReal x10132=(cj1*sj2);
IkReal x10133=(gconst4*r11);
IkReal x10134=(sj1*sj2);
IkReal x10135=(gconst5*r10);
IkReal x10136=(cj1*cj2);
IkReal x10137=(gconst4*r01);
IkReal x10138=(gconst5*sj3);
IkReal x10139=(gconst5*r00);
IkReal x10140=(gconst4*sj3);
IkReal x10141=(cj3*gconst5);
IkReal x10142=(cj3*gconst4);
IkReal x10143=(gconst4*r21);
IkReal x10144=((1.0)*x10130);
IkReal x10145=((1.0)*x10129);
IkReal x10146=(cj3*x10129);
IkReal x10147=(cj3*x10130);
IkReal x10148=(x10132+x10131);
IkReal x10149=(x10130*x10138);
evalcond[0]=(((x10129*x10143))+(((-1.0)*r22*x10144))+(((-1.0)*gconst5*r20*x10145)));
evalcond[1]=(((x10129*x10133))+(((-1.0)*r12*x10144))+(((-1.0)*x10135*x10145)));
evalcond[2]=((1.0)+((x10129*x10137))+(((-1.0)*r02*x10144))+(((-1.0)*x10139*x10145)));
evalcond[3]=((((-1.0)*cj3*x10139*x10144))+((r02*x10146))+((r01*x10138))+((r00*x10140))+((x10137*x10147)));
evalcond[4]=((((-1.0)*r02*sj3*x10145))+(((-1.0)*sj3*x10137*x10144))+((r00*x10149))+((r00*x10142))+((r01*x10141)));
evalcond[5]=(((r21*x10130*x10142))+((r21*x10138))+(((-1.0)*r20*x10141*x10144))+x10148+((r22*x10146))+((r20*x10140)));
evalcond[6]=(((r10*x10142))+((sj3*x10130*x10135))+x10148+(((-1.0)*sj3*x10133*x10144))+(((-1.0)*r12*sj3*x10145))+((r11*x10141)));
evalcond[7]=((((-1.0)*cj3*x10135*x10144))+((r11*x10138))+((r12*x10146))+((r10*x10140))+x10136+(((-1.0)*x10134))+((x10133*x10147)));
evalcond[8]=(((r21*x10141))+x10134+(((-1.0)*r22*sj3*x10145))+(((-1.0)*x10136))+(((-1.0)*r21*x10140*x10144))+((r20*x10149))+((r20*x10142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10150=((-1.0)*r21);
CheckValue<IkReal> x10153 = IKatan2WithCheck(IkReal(x10150),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10153.valid){
continue;
}
IkReal x10151=((1.0)*(x10153.value));
IkReal x10152=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10151)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10151)));
IkReal gconst4=(x10150*x10152);
IkReal gconst5=((1.0)*r20*x10152);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10154=((-1.0)*r21);
CheckValue<IkReal> x10157 = IKatan2WithCheck(IkReal(x10154),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10157.valid){
continue;
}
IkReal x10155=((1.0)*(x10157.value));
IkReal x10156=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10155)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10155)));
IkReal gconst4=(x10154*x10156);
IkReal gconst5=((1.0)*r20*x10156);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10158=((-1.0)*r21);
CheckValue<IkReal> x10161 = IKatan2WithCheck(IkReal(x10158),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10161.valid){
continue;
}
IkReal x10159=((1.0)*(x10161.value));
IkReal x10160=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10159)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10159)));
IkReal gconst4=(x10158*x10160);
IkReal gconst5=((1.0)*r20*x10160);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10162=((-1.0)*r21);
CheckValue<IkReal> x10165 = IKatan2WithCheck(IkReal(x10162),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10165.valid){
continue;
}
IkReal x10163=((1.0)*(x10165.value));
IkReal x10164=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10163)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10163)));
IkReal gconst4=(x10162*x10164);
IkReal gconst5=((1.0)*r20*x10164);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10166=((-1.0)*r21);
CheckValue<IkReal> x10169 = IKatan2WithCheck(IkReal(x10166),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10169.valid){
continue;
}
IkReal x10167=((1.0)*(x10169.value));
IkReal x10168=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10167)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10167)));
IkReal gconst4=(x10166*x10168);
IkReal gconst5=((1.0)*r20*x10168);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10170=((-1.0)*r21);
CheckValue<IkReal> x10173 = IKatan2WithCheck(IkReal(x10170),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10173.valid){
continue;
}
IkReal x10171=((1.0)*(x10173.value));
IkReal x10172=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10171)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10171)));
IkReal gconst4=(x10170*x10172);
IkReal gconst5=((1.0)*r20*x10172);
IkReal x10174=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10178=IKPowWithIntegerCheck(x10174,-1);
if(!x10178.valid){
continue;
}
IkReal x10175=x10178.value;
IkReal x10176=((1.0)*x10175);
IkReal x10177=((((-1.0)*(r02*r02)))+(((-1.0)*x10176*(r01*r01)*(r21*r21)))+(((-1.0)*x10176*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10175)));
j4eval[0]=x10177;
j4eval[1]=r02;
j4eval[2]=x10174;
j4eval[3]=IKsign(x10177);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10179=(gconst5*r00);
IkReal x10180=(gconst4*r01);
CheckValue<IkReal> x10181 = IKatan2WithCheck(IkReal(((((-1.0)*x10180))+x10179)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10181.valid){
continue;
}
CheckValue<IkReal> x10182=IKPowWithIntegerCheck(IKsign(((((2.0)*x10179*x10180))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10180*x10180)))+(((-1.0)*(x10179*x10179))))),-1);
if(!x10182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10181.value)+(((1.5707963267949)*(x10182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10183=IKsin(j4);
IkReal x10184=IKcos(j4);
IkReal x10185=(gconst4*r11);
IkReal x10186=((1.0)*cj1);
IkReal x10187=(gconst5*r10);
IkReal x10188=(gconst4*r01);
IkReal x10189=(gconst5*r00);
IkReal x10190=(gconst4*r21);
IkReal x10191=(gconst5*r20);
IkReal x10192=((1.0)*x10184);
IkReal x10193=((1.0)*x10183);
evalcond[0]=((((-1.0)*x10191*x10193))+((x10183*x10190))+(((-1.0)*r22*x10192)));
evalcond[1]=((((-1.0)*x10187*x10193))+(((-1.0)*r12*x10192))+((x10183*x10185)));
evalcond[2]=((((-1.0)*r02*x10193))+(((-1.0)*x10188*x10192))+((x10184*x10189)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10192))+((x10183*x10188))+(((-1.0)*x10189*x10193)));
evalcond[4]=((((-1.0)*cj2*x10186))+((sj1*sj2))+(((-1.0)*x10190*x10192))+((x10184*x10191))+(((-1.0)*r22*x10193)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10186))+(((-1.0)*r12*x10193))+(((-1.0)*x10185*x10192))+((x10184*x10187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10194=((1.0)*gconst5);
CheckValue<IkReal> x10195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10194))+(((-1.0)*gconst4*r10)))),-1);
if(!x10195.valid){
continue;
}
CheckValue<IkReal> x10196 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10194))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10195.value)))+(x10196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10197=IKsin(j4);
IkReal x10198=IKcos(j4);
IkReal x10199=(gconst4*r11);
IkReal x10200=((1.0)*cj1);
IkReal x10201=(gconst5*r10);
IkReal x10202=(gconst4*r01);
IkReal x10203=(gconst5*r00);
IkReal x10204=(gconst4*r21);
IkReal x10205=(gconst5*r20);
IkReal x10206=((1.0)*x10198);
IkReal x10207=((1.0)*x10197);
evalcond[0]=((((-1.0)*r22*x10206))+(((-1.0)*x10205*x10207))+((x10197*x10204)));
evalcond[1]=(((x10197*x10199))+(((-1.0)*x10201*x10207))+(((-1.0)*r12*x10206)));
evalcond[2]=((((-1.0)*r02*x10207))+((x10198*x10203))+(((-1.0)*x10202*x10206)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10206))+(((-1.0)*x10203*x10207))+((x10197*x10202)));
evalcond[4]=((((-1.0)*r22*x10207))+(((-1.0)*cj2*x10200))+((sj1*sj2))+((x10198*x10205))+(((-1.0)*x10204*x10206)));
evalcond[5]=((((-1.0)*x10199*x10206))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10200))+((x10198*x10201))+(((-1.0)*r12*x10207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10208 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10208.valid){
continue;
}
CheckValue<IkReal> x10209=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10208.value)+(((1.5707963267949)*(x10209.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10210=IKsin(j4);
IkReal x10211=IKcos(j4);
IkReal x10212=(gconst4*r11);
IkReal x10213=((1.0)*cj1);
IkReal x10214=(gconst5*r10);
IkReal x10215=(gconst4*r01);
IkReal x10216=(gconst5*r00);
IkReal x10217=(gconst4*r21);
IkReal x10218=(gconst5*r20);
IkReal x10219=((1.0)*x10211);
IkReal x10220=((1.0)*x10210);
evalcond[0]=((((-1.0)*r22*x10219))+((x10210*x10217))+(((-1.0)*x10218*x10220)));
evalcond[1]=((((-1.0)*x10214*x10220))+(((-1.0)*r12*x10219))+((x10210*x10212)));
evalcond[2]=((((-1.0)*r02*x10220))+(((-1.0)*x10215*x10219))+((x10211*x10216)));
evalcond[3]=((-1.0)+(((-1.0)*x10216*x10220))+((x10210*x10215))+(((-1.0)*r02*x10219)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x10213))+(((-1.0)*x10217*x10219))+(((-1.0)*r22*x10220))+((x10211*x10218)));
evalcond[5]=((((-1.0)*x10212*x10219))+(((-1.0)*sj2*x10213))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10220))+((x10211*x10214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10221=((-1.0)*r21);
CheckValue<IkReal> x10224 = IKatan2WithCheck(IkReal(x10221),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10224.valid){
continue;
}
IkReal x10222=((1.0)*(x10224.value));
IkReal x10223=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10222)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10222)));
IkReal gconst4=(x10221*x10223);
IkReal gconst5=((1.0)*r20*x10223);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10225=((-1.0)*r21);
CheckValue<IkReal> x10228 = IKatan2WithCheck(IkReal(x10225),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10228.valid){
continue;
}
IkReal x10226=((1.0)*(x10228.value));
IkReal x10227=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10226)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10226)));
IkReal gconst4=(x10225*x10227);
IkReal gconst5=((1.0)*r20*x10227);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10229=((-1.0)*r21);
CheckValue<IkReal> x10232 = IKatan2WithCheck(IkReal(x10229),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10232.valid){
continue;
}
IkReal x10230=((1.0)*(x10232.value));
IkReal x10231=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10230)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10230)));
IkReal gconst4=(x10229*x10231);
IkReal gconst5=((1.0)*r20*x10231);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10233=(gconst4*r01);
IkReal x10234=(gconst5*r00);
CheckValue<IkReal> x10235 = IKatan2WithCheck(IkReal((x10233+(((-1.0)*x10234)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10235.valid){
continue;
}
CheckValue<IkReal> x10236=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10233*x10234))+(x10233*x10233)+(r02*r02)+(x10234*x10234))),-1);
if(!x10236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10235.value)+(((1.5707963267949)*(x10236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10237=IKcos(j4);
IkReal x10238=IKsin(j4);
IkReal x10239=(gconst4*r11);
IkReal x10240=(gconst5*r10);
IkReal x10241=((1.0)*cj1);
IkReal x10242=(gconst5*r00);
IkReal x10243=(gconst5*r20);
IkReal x10244=((1.0)*x10237);
IkReal x10245=(gconst4*x10237);
IkReal x10246=((1.0)*x10238);
IkReal x10247=(gconst4*x10238);
evalcond[0]=(((r02*x10238))+((r01*x10245))+(((-1.0)*x10242*x10244)));
evalcond[1]=(((r21*x10247))+(((-1.0)*r22*x10244))+(((-1.0)*x10243*x10246)));
evalcond[2]=((((-1.0)*x10240*x10246))+((x10238*x10239))+(((-1.0)*r12*x10244)));
evalcond[3]=((-1.0)+((r01*x10247))+(((-1.0)*x10242*x10246))+(((-1.0)*r02*x10244)));
evalcond[4]=((((-1.0)*cj2*x10241))+((r22*x10238))+((sj1*sj2))+((r21*x10245))+(((-1.0)*x10243*x10244)));
evalcond[5]=((((-1.0)*x10240*x10244))+(((-1.0)*cj2*sj1))+((x10237*x10239))+((r12*x10238))+(((-1.0)*sj2*x10241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10248=((1.0)*gconst5);
CheckValue<IkReal> x10249=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10248))+(((-1.0)*gconst4*r10)))),-1);
if(!x10249.valid){
continue;
}
CheckValue<IkReal> x10250 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10248))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10249.value)))+(x10250.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10251=IKcos(j4);
IkReal x10252=IKsin(j4);
IkReal x10253=(gconst4*r11);
IkReal x10254=(gconst5*r10);
IkReal x10255=((1.0)*cj1);
IkReal x10256=(gconst5*r00);
IkReal x10257=(gconst5*r20);
IkReal x10258=((1.0)*x10251);
IkReal x10259=(gconst4*x10251);
IkReal x10260=((1.0)*x10252);
IkReal x10261=(gconst4*x10252);
evalcond[0]=(((r02*x10252))+(((-1.0)*x10256*x10258))+((r01*x10259)));
evalcond[1]=((((-1.0)*x10257*x10260))+(((-1.0)*r22*x10258))+((r21*x10261)));
evalcond[2]=((((-1.0)*x10254*x10260))+(((-1.0)*r12*x10258))+((x10252*x10253)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10258))+((r01*x10261))+(((-1.0)*x10256*x10260)));
evalcond[4]=(((r22*x10252))+(((-1.0)*cj2*x10255))+((sj1*sj2))+(((-1.0)*x10257*x10258))+((r21*x10259)));
evalcond[5]=(((r12*x10252))+(((-1.0)*x10254*x10258))+(((-1.0)*cj2*sj1))+((x10251*x10253))+(((-1.0)*sj2*x10255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10262 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10262.valid){
continue;
}
CheckValue<IkReal> x10263=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10262.value)+(((1.5707963267949)*(x10263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10264=IKcos(j4);
IkReal x10265=IKsin(j4);
IkReal x10266=(gconst4*r11);
IkReal x10267=(gconst5*r10);
IkReal x10268=((1.0)*cj1);
IkReal x10269=(gconst5*r00);
IkReal x10270=(gconst5*r20);
IkReal x10271=((1.0)*x10264);
IkReal x10272=(gconst4*x10264);
IkReal x10273=((1.0)*x10265);
IkReal x10274=(gconst4*x10265);
evalcond[0]=(((r02*x10265))+((r01*x10272))+(((-1.0)*x10269*x10271)));
evalcond[1]=((((-1.0)*r22*x10271))+((r21*x10274))+(((-1.0)*x10270*x10273)));
evalcond[2]=((((-1.0)*r12*x10271))+((x10265*x10266))+(((-1.0)*x10267*x10273)));
evalcond[3]=((-1.0)+((r01*x10274))+(((-1.0)*x10269*x10273))+(((-1.0)*r02*x10271)));
evalcond[4]=(((r22*x10265))+((sj1*sj2))+((r21*x10272))+(((-1.0)*cj2*x10268))+(((-1.0)*x10270*x10271)));
evalcond[5]=(((r12*x10265))+(((-1.0)*cj2*sj1))+((x10264*x10266))+(((-1.0)*sj2*x10268))+(((-1.0)*x10267*x10271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10275=((-1.0)*r21);
CheckValue<IkReal> x10278 = IKatan2WithCheck(IkReal(x10275),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10278.valid){
continue;
}
IkReal x10276=((1.0)*(x10278.value));
IkReal x10277=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10276)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10276)));
IkReal gconst4=(x10275*x10277);
IkReal gconst5=((1.0)*r20*x10277);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10279=((-1.0)*r21);
CheckValue<IkReal> x10282 = IKatan2WithCheck(IkReal(x10279),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10282.valid){
continue;
}
IkReal x10280=((1.0)*(x10282.value));
IkReal x10281=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10280)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10280)));
IkReal gconst4=(x10279*x10281);
IkReal gconst5=((1.0)*r20*x10281);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10283=((-1.0)*r21);
CheckValue<IkReal> x10286 = IKatan2WithCheck(IkReal(x10283),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10286.valid){
continue;
}
IkReal x10284=((1.0)*(x10286.value));
IkReal x10285=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10284)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10284)));
IkReal gconst4=(x10283*x10285);
IkReal gconst5=((1.0)*r20*x10285);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10287=(gconst4*r01);
IkReal x10288=(gconst5*r00);
CheckValue<IkReal> x10289=IKPowWithIntegerCheck(IKsign(((x10288*x10288)+(r02*r02)+(((-2.0)*x10287*x10288))+(x10287*x10287))),-1);
if(!x10289.valid){
continue;
}
CheckValue<IkReal> x10290 = IKatan2WithCheck(IkReal((x10287+(((-1.0)*x10288)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10289.value)))+(x10290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10291=IKcos(j4);
IkReal x10292=IKsin(j4);
IkReal x10293=(gconst4*r11);
IkReal x10294=(gconst5*r10);
IkReal x10295=(gconst5*r00);
IkReal x10296=(gconst5*r20);
IkReal x10297=((1.0)*x10291);
IkReal x10298=(gconst4*x10291);
IkReal x10299=((1.0)*x10292);
IkReal x10300=(gconst4*x10292);
evalcond[0]=((((-1.0)*x10295*x10297))+((r02*x10292))+((r01*x10298)));
evalcond[1]=(((r21*x10300))+(((-1.0)*r22*x10297))+(((-1.0)*x10296*x10299)));
evalcond[2]=((((-1.0)*x10294*x10299))+(((-1.0)*r12*x10297))+((x10292*x10293)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10297))+((r01*x10300))+(((-1.0)*x10295*x10299)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10298))+(((-1.0)*x10296*x10297))+((r22*x10292)));
evalcond[5]=(((x10291*x10293))+((r12*x10292))+(((-1.0)*x10294*x10297))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10301=((1.0)*gconst5);
CheckValue<IkReal> x10302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10301))+(((-1.0)*gconst4*r10)))),-1);
if(!x10302.valid){
continue;
}
CheckValue<IkReal> x10303 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10302.value)))+(x10303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10304=IKcos(j4);
IkReal x10305=IKsin(j4);
IkReal x10306=(gconst4*r11);
IkReal x10307=(gconst5*r10);
IkReal x10308=(gconst5*r00);
IkReal x10309=(gconst5*r20);
IkReal x10310=((1.0)*x10304);
IkReal x10311=(gconst4*x10304);
IkReal x10312=((1.0)*x10305);
IkReal x10313=(gconst4*x10305);
evalcond[0]=(((r02*x10305))+((r01*x10311))+(((-1.0)*x10308*x10310)));
evalcond[1]=(((r21*x10313))+(((-1.0)*x10309*x10312))+(((-1.0)*r22*x10310)));
evalcond[2]=(((x10305*x10306))+(((-1.0)*x10307*x10312))+(((-1.0)*r12*x10310)));
evalcond[3]=((-1.0)+((r01*x10313))+(((-1.0)*x10308*x10312))+(((-1.0)*r02*x10310)));
evalcond[4]=(((cj2*sj1))+((r21*x10311))+((cj1*sj2))+(((-1.0)*x10309*x10310))+((r22*x10305)));
evalcond[5]=((((-1.0)*x10307*x10310))+((x10304*x10306))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x10305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10314 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10314.valid){
continue;
}
CheckValue<IkReal> x10315=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10314.value)+(((1.5707963267949)*(x10315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10316=IKcos(j4);
IkReal x10317=IKsin(j4);
IkReal x10318=(gconst4*r11);
IkReal x10319=(gconst5*r10);
IkReal x10320=(gconst5*r00);
IkReal x10321=(gconst5*r20);
IkReal x10322=((1.0)*x10316);
IkReal x10323=(gconst4*x10316);
IkReal x10324=((1.0)*x10317);
IkReal x10325=(gconst4*x10317);
evalcond[0]=(((r01*x10323))+((r02*x10317))+(((-1.0)*x10320*x10322)));
evalcond[1]=((((-1.0)*x10321*x10324))+(((-1.0)*r22*x10322))+((r21*x10325)));
evalcond[2]=((((-1.0)*r12*x10322))+(((-1.0)*x10319*x10324))+((x10317*x10318)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10322))+((r01*x10325))+(((-1.0)*x10320*x10324)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10321*x10322))+((cj1*sj2))+((r22*x10317))+((r21*x10323)));
evalcond[5]=(((r12*x10317))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10319*x10322))+((x10316*x10318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10326=((-1.0)*r21);
CheckValue<IkReal> x10329 = IKatan2WithCheck(IkReal(x10326),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10329.valid){
continue;
}
IkReal x10327=((1.0)*(x10329.value));
IkReal x10328=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10327)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10327)));
IkReal gconst4=(x10326*x10328);
IkReal gconst5=((1.0)*r20*x10328);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10330=((-1.0)*r21);
CheckValue<IkReal> x10333 = IKatan2WithCheck(IkReal(x10330),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10333.valid){
continue;
}
IkReal x10331=((1.0)*(x10333.value));
IkReal x10332=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10331)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10331)));
IkReal gconst4=(x10330*x10332);
IkReal gconst5=((1.0)*r20*x10332);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10334=((-1.0)*r21);
CheckValue<IkReal> x10337 = IKatan2WithCheck(IkReal(x10334),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10337.valid){
continue;
}
IkReal x10335=((1.0)*(x10337.value));
IkReal x10336=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10335)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10335)));
IkReal gconst4=(x10334*x10336);
IkReal gconst5=((1.0)*r20*x10336);
IkReal x10338=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10342=IKPowWithIntegerCheck(x10338,-1);
if(!x10342.valid){
continue;
}
IkReal x10339=x10342.value;
IkReal x10340=((1.0)*x10339);
IkReal x10341=((((-1.0)*x10340*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10340*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10339)));
j4eval[0]=x10341;
j4eval[1]=r02;
j4eval[2]=x10338;
j4eval[3]=IKsign(x10341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10343=(gconst5*r00);
IkReal x10344=(gconst4*r01);
CheckValue<IkReal> x10345=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10344*x10344)))+(((-1.0)*(x10343*x10343)))+(((2.0)*x10343*x10344)))),-1);
if(!x10345.valid){
continue;
}
CheckValue<IkReal> x10346 = IKatan2WithCheck(IkReal((x10343+(((-1.0)*x10344)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10345.value)))+(x10346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10347=IKsin(j4);
IkReal x10348=IKcos(j4);
IkReal x10349=(gconst4*r11);
IkReal x10350=(gconst5*r10);
IkReal x10351=(gconst4*r01);
IkReal x10352=(gconst5*r00);
IkReal x10353=(gconst4*r21);
IkReal x10354=(gconst5*r20);
IkReal x10355=((1.0)*x10348);
IkReal x10356=((1.0)*x10347);
evalcond[0]=((((-1.0)*r22*x10355))+(((-1.0)*x10354*x10356))+((x10347*x10353)));
evalcond[1]=(((x10347*x10349))+(((-1.0)*x10350*x10356))+(((-1.0)*r12*x10355)));
evalcond[2]=(((x10348*x10352))+(((-1.0)*x10351*x10355))+(((-1.0)*r02*x10356)));
evalcond[3]=((-1.0)+(((-1.0)*x10352*x10356))+((x10347*x10351))+(((-1.0)*r02*x10355)));
evalcond[4]=(((cj2*sj1))+((x10348*x10354))+((cj1*sj2))+(((-1.0)*r22*x10356))+(((-1.0)*x10353*x10355)));
evalcond[5]=(((x10348*x10350))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x10356))+(((-1.0)*x10349*x10355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10357=((1.0)*gconst5);
CheckValue<IkReal> x10358 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10358.valid){
continue;
}
CheckValue<IkReal> x10359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10357))+(((-1.0)*gconst4*r10)))),-1);
if(!x10359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10358.value)+(((1.5707963267949)*(x10359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10360=IKsin(j4);
IkReal x10361=IKcos(j4);
IkReal x10362=(gconst4*r11);
IkReal x10363=(gconst5*r10);
IkReal x10364=(gconst4*r01);
IkReal x10365=(gconst5*r00);
IkReal x10366=(gconst4*r21);
IkReal x10367=(gconst5*r20);
IkReal x10368=((1.0)*x10361);
IkReal x10369=((1.0)*x10360);
evalcond[0]=(((x10360*x10366))+(((-1.0)*x10367*x10369))+(((-1.0)*r22*x10368)));
evalcond[1]=((((-1.0)*x10363*x10369))+(((-1.0)*r12*x10368))+((x10360*x10362)));
evalcond[2]=(((x10361*x10365))+(((-1.0)*r02*x10369))+(((-1.0)*x10364*x10368)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10368))+(((-1.0)*x10365*x10369))+((x10360*x10364)));
evalcond[4]=(((cj2*sj1))+((x10361*x10367))+((cj1*sj2))+(((-1.0)*x10366*x10368))+(((-1.0)*r22*x10369)));
evalcond[5]=(((x10361*x10363))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10362*x10368))+(((-1.0)*r12*x10369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10370 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10370.valid){
continue;
}
CheckValue<IkReal> x10371=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10370.value)+(((1.5707963267949)*(x10371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10372=IKsin(j4);
IkReal x10373=IKcos(j4);
IkReal x10374=(gconst4*r11);
IkReal x10375=(gconst5*r10);
IkReal x10376=(gconst4*r01);
IkReal x10377=(gconst5*r00);
IkReal x10378=(gconst4*r21);
IkReal x10379=(gconst5*r20);
IkReal x10380=((1.0)*x10373);
IkReal x10381=((1.0)*x10372);
evalcond[0]=((((-1.0)*x10379*x10381))+((x10372*x10378))+(((-1.0)*r22*x10380)));
evalcond[1]=((((-1.0)*x10375*x10381))+((x10372*x10374))+(((-1.0)*r12*x10380)));
evalcond[2]=((((-1.0)*x10376*x10380))+(((-1.0)*r02*x10381))+((x10373*x10377)));
evalcond[3]=((-1.0)+(((-1.0)*x10377*x10381))+(((-1.0)*r02*x10380))+((x10372*x10376)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10373*x10379))+(((-1.0)*x10378*x10380))+(((-1.0)*r22*x10381)));
evalcond[5]=((((-1.0)*x10374*x10380))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10373*x10375))+(((-1.0)*r12*x10381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10382=gconst4*gconst4;
IkReal x10383=gconst5*gconst5;
IkReal x10384=(r01*r20);
IkReal x10385=(gconst4*sj3);
IkReal x10386=(r01*r21);
IkReal x10387=((1.0)*cj3);
IkReal x10388=(r00*r21);
IkReal x10389=(r00*r20);
IkReal x10390=(cj3*gconst4*gconst5);
IkReal x10391=((1.0)*x10383);
CheckValue<IkReal> x10392 = IKatan2WithCheck(IkReal((((r00*r22*x10385))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x10385*x10386))+((sj3*x10382*x10388))+(((-1.0)*sj3*x10384*x10391))+(((-1.0)*gconst5*x10385*x10389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10392.valid){
continue;
}
CheckValue<IkReal> x10393=IKPowWithIntegerCheck(IKsign((((x10384*x10390))+(((-1.0)*x10382*x10386*x10387))+(((-1.0)*r02*r22*x10387))+(((-1.0)*x10383*x10387*x10389))+((x10388*x10390)))),-1);
if(!x10393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10392.value)+(((1.5707963267949)*(x10393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10394=IKsin(j4);
IkReal x10395=IKcos(j4);
IkReal x10396=(sj1*sj2);
IkReal x10397=(gconst5*sj3);
IkReal x10398=(gconst4*r11);
IkReal x10399=(gconst5*r10);
IkReal x10400=((1.0)*cj1);
IkReal x10401=(gconst4*r01);
IkReal x10402=(cj2*sj1);
IkReal x10403=(gconst5*r00);
IkReal x10404=(gconst4*sj3);
IkReal x10405=(cj3*gconst5);
IkReal x10406=(cj3*gconst4);
IkReal x10407=(gconst4*r21);
IkReal x10408=(cj2*x10400);
IkReal x10409=((1.0)*x10395);
IkReal x10410=((1.0)*x10394);
IkReal x10411=(cj3*x10394);
IkReal x10412=(cj3*x10395);
evalcond[0]=((((-1.0)*r22*x10409))+(((-1.0)*gconst5*r20*x10410))+((x10394*x10407)));
evalcond[1]=(((x10394*x10398))+(((-1.0)*r12*x10409))+(((-1.0)*x10399*x10410)));
evalcond[2]=((-1.0)+((x10394*x10401))+(((-1.0)*x10403*x10410))+(((-1.0)*r02*x10409)));
evalcond[3]=(((r01*x10397))+((x10401*x10412))+(((-1.0)*cj3*x10403*x10409))+((r00*x10404))+((r02*x10411)));
evalcond[4]=(((r01*x10405))+((r00*x10406))+((r00*x10395*x10397))+(((-1.0)*sj3*x10401*x10409))+(((-1.0)*r02*sj3*x10410)));
evalcond[5]=(((r22*x10411))+((r21*x10395*x10406))+((r21*x10397))+((cj1*sj2))+(((-1.0)*r20*x10405*x10409))+((r20*x10404))+x10402);
evalcond[6]=(((r11*x10397))+((x10398*x10412))+(((-1.0)*x10408))+x10396+((r12*x10411))+(((-1.0)*cj3*x10399*x10409))+((r10*x10404)));
evalcond[7]=(((r21*x10405))+(((-1.0)*r22*sj3*x10410))+(((-1.0)*r21*x10404*x10409))+(((-1.0)*x10408))+x10396+((r20*x10406))+((r20*x10395*x10397)));
evalcond[8]=((((-1.0)*sj2*x10400))+((r10*x10395*x10397))+(((-1.0)*r12*sj3*x10410))+((r11*x10405))+((r10*x10406))+(((-1.0)*x10402))+(((-1.0)*sj3*x10398*x10409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10413=((1.0)*gconst5);
CheckValue<IkReal> x10414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10413))+(((-1.0)*gconst4*r10)))),-1);
if(!x10414.valid){
continue;
}
CheckValue<IkReal> x10415 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10413))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10414.value)))+(x10415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10416=IKsin(j4);
IkReal x10417=IKcos(j4);
IkReal x10418=(sj1*sj2);
IkReal x10419=(gconst5*sj3);
IkReal x10420=(gconst4*r11);
IkReal x10421=(gconst5*r10);
IkReal x10422=((1.0)*cj1);
IkReal x10423=(gconst4*r01);
IkReal x10424=(cj2*sj1);
IkReal x10425=(gconst5*r00);
IkReal x10426=(gconst4*sj3);
IkReal x10427=(cj3*gconst5);
IkReal x10428=(cj3*gconst4);
IkReal x10429=(gconst4*r21);
IkReal x10430=(cj2*x10422);
IkReal x10431=((1.0)*x10417);
IkReal x10432=((1.0)*x10416);
IkReal x10433=(cj3*x10416);
IkReal x10434=(cj3*x10417);
evalcond[0]=(((x10416*x10429))+(((-1.0)*gconst5*r20*x10432))+(((-1.0)*r22*x10431)));
evalcond[1]=(((x10416*x10420))+(((-1.0)*x10421*x10432))+(((-1.0)*r12*x10431)));
evalcond[2]=((-1.0)+((x10416*x10423))+(((-1.0)*r02*x10431))+(((-1.0)*x10425*x10432)));
evalcond[3]=((((-1.0)*cj3*x10425*x10431))+((r00*x10426))+((r01*x10419))+((x10423*x10434))+((r02*x10433)));
evalcond[4]=(((r01*x10427))+((r00*x10428))+(((-1.0)*sj3*x10423*x10431))+(((-1.0)*r02*sj3*x10432))+((r00*x10417*x10419)));
evalcond[5]=(((r21*x10419))+((r21*x10417*x10428))+((r22*x10433))+((cj1*sj2))+x10424+((r20*x10426))+(((-1.0)*r20*x10427*x10431)));
evalcond[6]=(((x10420*x10434))+((r11*x10419))+(((-1.0)*cj3*x10421*x10431))+((r12*x10433))+((r10*x10426))+x10418+(((-1.0)*x10430)));
evalcond[7]=((((-1.0)*r22*sj3*x10432))+(((-1.0)*r21*x10426*x10431))+((r20*x10417*x10419))+x10418+(((-1.0)*x10430))+((r20*x10428))+((r21*x10427)));
evalcond[8]=(((r10*x10417*x10419))+(((-1.0)*r12*sj3*x10432))+(((-1.0)*sj3*x10420*x10431))+(((-1.0)*sj2*x10422))+((r10*x10428))+(((-1.0)*x10424))+((r11*x10427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10435 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10435.valid){
continue;
}
CheckValue<IkReal> x10436=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10435.value)+(((1.5707963267949)*(x10436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10437=IKsin(j4);
IkReal x10438=IKcos(j4);
IkReal x10439=(sj1*sj2);
IkReal x10440=(gconst5*sj3);
IkReal x10441=(gconst4*r11);
IkReal x10442=(gconst5*r10);
IkReal x10443=((1.0)*cj1);
IkReal x10444=(gconst4*r01);
IkReal x10445=(cj2*sj1);
IkReal x10446=(gconst5*r00);
IkReal x10447=(gconst4*sj3);
IkReal x10448=(cj3*gconst5);
IkReal x10449=(cj3*gconst4);
IkReal x10450=(gconst4*r21);
IkReal x10451=(cj2*x10443);
IkReal x10452=((1.0)*x10438);
IkReal x10453=((1.0)*x10437);
IkReal x10454=(cj3*x10437);
IkReal x10455=(cj3*x10438);
evalcond[0]=((((-1.0)*gconst5*r20*x10453))+(((-1.0)*r22*x10452))+((x10437*x10450)));
evalcond[1]=((((-1.0)*x10442*x10453))+((x10437*x10441))+(((-1.0)*r12*x10452)));
evalcond[2]=((-1.0)+((x10437*x10444))+(((-1.0)*r02*x10452))+(((-1.0)*x10446*x10453)));
evalcond[3]=((((-1.0)*cj3*x10446*x10452))+((r00*x10447))+((r01*x10440))+((r02*x10454))+((x10444*x10455)));
evalcond[4]=((((-1.0)*r02*sj3*x10453))+((r00*x10438*x10440))+((r00*x10449))+(((-1.0)*sj3*x10444*x10452))+((r01*x10448)));
evalcond[5]=((((-1.0)*r20*x10448*x10452))+((cj1*sj2))+((r22*x10454))+((r20*x10447))+((r21*x10440))+((r21*x10438*x10449))+x10445);
evalcond[6]=(((r12*x10454))+((r11*x10440))+((x10441*x10455))+x10439+((r10*x10447))+(((-1.0)*x10451))+(((-1.0)*cj3*x10442*x10452)));
evalcond[7]=(((r20*x10438*x10440))+((r20*x10449))+(((-1.0)*r22*sj3*x10453))+(((-1.0)*r21*x10447*x10452))+((r21*x10448))+x10439+(((-1.0)*x10451)));
evalcond[8]=((((-1.0)*x10445))+(((-1.0)*sj3*x10441*x10452))+((r11*x10448))+(((-1.0)*sj2*x10443))+((r10*x10449))+(((-1.0)*r12*sj3*x10453))+((r10*x10438*x10440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10456=((-1.0)*r21);
CheckValue<IkReal> x10459 = IKatan2WithCheck(IkReal(x10456),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10459.valid){
continue;
}
IkReal x10457=((1.0)*(x10459.value));
IkReal x10458=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10457)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10457)));
IkReal gconst4=(x10456*x10458);
IkReal gconst5=((1.0)*r20*x10458);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10460=((-1.0)*r21);
CheckValue<IkReal> x10463 = IKatan2WithCheck(IkReal(x10460),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10463.valid){
continue;
}
IkReal x10461=((1.0)*(x10463.value));
IkReal x10462=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10461)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10461)));
IkReal gconst4=(x10460*x10462);
IkReal gconst5=((1.0)*r20*x10462);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10464=((-1.0)*r21);
CheckValue<IkReal> x10467 = IKatan2WithCheck(IkReal(x10464),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10467.valid){
continue;
}
IkReal x10465=((1.0)*(x10467.value));
IkReal x10466=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10465)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10465)));
IkReal gconst4=(x10464*x10466);
IkReal gconst5=((1.0)*r20*x10466);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10468=((-1.0)*r21);
CheckValue<IkReal> x10471 = IKatan2WithCheck(IkReal(x10468),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10471.valid){
continue;
}
IkReal x10469=((1.0)*(x10471.value));
IkReal x10470=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10469)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10469)));
IkReal gconst4=(x10468*x10470);
IkReal gconst5=((1.0)*r20*x10470);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10472=((-1.0)*r21);
CheckValue<IkReal> x10475 = IKatan2WithCheck(IkReal(x10472),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10475.valid){
continue;
}
IkReal x10473=((1.0)*(x10475.value));
IkReal x10474=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10473)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10473)));
IkReal gconst4=(x10472*x10474);
IkReal gconst5=((1.0)*r20*x10474);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10476=((-1.0)*r21);
CheckValue<IkReal> x10479 = IKatan2WithCheck(IkReal(x10476),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10479.valid){
continue;
}
IkReal x10477=((1.0)*(x10479.value));
IkReal x10478=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10477)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10477)));
IkReal gconst4=(x10476*x10478);
IkReal gconst5=((1.0)*r20*x10478);
IkReal x10480=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10484=IKPowWithIntegerCheck(x10480,-1);
if(!x10484.valid){
continue;
}
IkReal x10481=x10484.value;
IkReal x10482=((1.0)*x10481);
IkReal x10483=((((-1.0)*x10482*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10481))+(((-1.0)*(r12*r12)))+(((-1.0)*x10482*(r11*r11)*(r21*r21))));
j4eval[0]=x10483;
j4eval[1]=r12;
j4eval[2]=x10480;
j4eval[3]=IKsign(x10483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10485=(gconst5*r10);
IkReal x10486=(gconst4*r11);
CheckValue<IkReal> x10487 = IKatan2WithCheck(IkReal(((((-1.0)*x10486))+x10485)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10487.valid){
continue;
}
CheckValue<IkReal> x10488=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10485*x10485)))+(((2.0)*x10485*x10486))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10486*x10486))))),-1);
if(!x10488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10487.value)+(((1.5707963267949)*(x10488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10489=IKsin(j4);
IkReal x10490=IKcos(j4);
IkReal x10491=(gconst4*r11);
IkReal x10492=(gconst5*r10);
IkReal x10493=(gconst4*r01);
IkReal x10494=(gconst5*r00);
IkReal x10495=(gconst4*r21);
IkReal x10496=(gconst5*r20);
IkReal x10497=((1.0)*x10490);
IkReal x10498=((1.0)*x10489);
evalcond[0]=((((-1.0)*r22*x10497))+((x10489*x10495))+(((-1.0)*x10496*x10498)));
evalcond[1]=((((-1.0)*x10494*x10498))+((x10489*x10493))+(((-1.0)*r02*x10497)));
evalcond[2]=((((-1.0)*r12*x10498))+((x10490*x10492))+(((-1.0)*x10491*x10497)));
evalcond[3]=((-1.0)+((x10489*x10491))+(((-1.0)*x10492*x10498))+(((-1.0)*r12*x10497)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10493*x10497))+((x10490*x10494))+(((-1.0)*r02*x10498)));
evalcond[5]=((((-1.0)*x10495*x10497))+(((-1.0)*r22*x10498))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10490*x10496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10499=((1.0)*gconst5);
CheckValue<IkReal> x10500 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10500.valid){
continue;
}
CheckValue<IkReal> x10501=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10499))+(((-1.0)*gconst4*r20)))),-1);
if(!x10501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10500.value)+(((1.5707963267949)*(x10501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10502=IKsin(j4);
IkReal x10503=IKcos(j4);
IkReal x10504=(gconst4*r11);
IkReal x10505=(gconst5*r10);
IkReal x10506=(gconst4*r01);
IkReal x10507=(gconst5*r00);
IkReal x10508=(gconst4*r21);
IkReal x10509=(gconst5*r20);
IkReal x10510=((1.0)*x10503);
IkReal x10511=((1.0)*x10502);
evalcond[0]=((((-1.0)*r22*x10510))+(((-1.0)*x10509*x10511))+((x10502*x10508)));
evalcond[1]=((((-1.0)*r02*x10510))+((x10502*x10506))+(((-1.0)*x10507*x10511)));
evalcond[2]=((((-1.0)*x10504*x10510))+(((-1.0)*r12*x10511))+((x10503*x10505)));
evalcond[3]=((-1.0)+(((-1.0)*x10505*x10511))+(((-1.0)*r12*x10510))+((x10502*x10504)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10511))+((cj1*sj2))+((x10503*x10507))+(((-1.0)*x10506*x10510)));
evalcond[5]=((((-1.0)*r22*x10511))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10508*x10510))+((x10503*x10509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10512=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10512.valid){
continue;
}
CheckValue<IkReal> x10513 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10512.value)))+(x10513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10514=IKsin(j4);
IkReal x10515=IKcos(j4);
IkReal x10516=(gconst4*r11);
IkReal x10517=(gconst5*r10);
IkReal x10518=(gconst4*r01);
IkReal x10519=(gconst5*r00);
IkReal x10520=(gconst4*r21);
IkReal x10521=(gconst5*r20);
IkReal x10522=((1.0)*x10515);
IkReal x10523=((1.0)*x10514);
evalcond[0]=((((-1.0)*x10521*x10523))+(((-1.0)*r22*x10522))+((x10514*x10520)));
evalcond[1]=((((-1.0)*r02*x10522))+((x10514*x10518))+(((-1.0)*x10519*x10523)));
evalcond[2]=((((-1.0)*r12*x10523))+((x10515*x10517))+(((-1.0)*x10516*x10522)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10522))+(((-1.0)*x10517*x10523))+((x10514*x10516)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10518*x10522))+(((-1.0)*r02*x10523))+((x10515*x10519)));
evalcond[5]=((((-1.0)*x10520*x10522))+(((-1.0)*r22*x10523))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10515*x10521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10524=((-1.0)*r21);
CheckValue<IkReal> x10527 = IKatan2WithCheck(IkReal(x10524),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10527.valid){
continue;
}
IkReal x10525=((1.0)*(x10527.value));
IkReal x10526=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10525)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10525)));
IkReal gconst4=(x10524*x10526);
IkReal gconst5=((1.0)*r20*x10526);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10528=((-1.0)*r21);
CheckValue<IkReal> x10531 = IKatan2WithCheck(IkReal(x10528),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10531.valid){
continue;
}
IkReal x10529=((1.0)*(x10531.value));
IkReal x10530=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10529)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10529)));
IkReal gconst4=(x10528*x10530);
IkReal gconst5=((1.0)*r20*x10530);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10532=((-1.0)*r21);
CheckValue<IkReal> x10535 = IKatan2WithCheck(IkReal(x10532),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10535.valid){
continue;
}
IkReal x10533=((1.0)*(x10535.value));
IkReal x10534=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10533)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10533)));
IkReal gconst4=(x10532*x10534);
IkReal gconst5=((1.0)*r20*x10534);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10536=(gconst5*r10);
IkReal x10537=(gconst4*r11);
CheckValue<IkReal> x10538 = IKatan2WithCheck(IkReal(((((-1.0)*x10536))+x10537)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10538.valid){
continue;
}
CheckValue<IkReal> x10539=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10536*x10537))+(x10537*x10537)+(x10536*x10536))),-1);
if(!x10539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10538.value)+(((1.5707963267949)*(x10539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10540=IKcos(j4);
IkReal x10541=IKsin(j4);
IkReal x10542=(gconst4*r11);
IkReal x10543=(gconst5*r10);
IkReal x10544=(gconst5*r00);
IkReal x10545=(gconst5*r20);
IkReal x10546=((1.0)*x10540);
IkReal x10547=(gconst4*x10540);
IkReal x10548=((1.0)*x10541);
IkReal x10549=(gconst4*x10541);
evalcond[0]=((((-1.0)*x10543*x10546))+((x10540*x10542))+((r12*x10541)));
evalcond[1]=((((-1.0)*r22*x10546))+(((-1.0)*x10545*x10548))+((r21*x10549)));
evalcond[2]=((((-1.0)*x10544*x10548))+(((-1.0)*r02*x10546))+((r01*x10549)));
evalcond[3]=((-1.0)+(((-1.0)*x10543*x10548))+(((-1.0)*r12*x10546))+((x10541*x10542)));
evalcond[4]=((((-1.0)*x10544*x10546))+((cj2*sj1))+((cj1*sj2))+((r02*x10541))+((r01*x10547)));
evalcond[5]=(((r22*x10541))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10545*x10546))+((r21*x10547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10550=((1.0)*gconst5);
CheckValue<IkReal> x10551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10550))+(((-1.0)*gconst4*r20)))),-1);
if(!x10551.valid){
continue;
}
CheckValue<IkReal> x10552 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10551.value)))+(x10552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10553=IKcos(j4);
IkReal x10554=IKsin(j4);
IkReal x10555=(gconst4*r11);
IkReal x10556=(gconst5*r10);
IkReal x10557=(gconst5*r00);
IkReal x10558=(gconst5*r20);
IkReal x10559=((1.0)*x10553);
IkReal x10560=(gconst4*x10553);
IkReal x10561=((1.0)*x10554);
IkReal x10562=(gconst4*x10554);
evalcond[0]=((((-1.0)*x10556*x10559))+((r12*x10554))+((x10553*x10555)));
evalcond[1]=(((r21*x10562))+(((-1.0)*x10558*x10561))+(((-1.0)*r22*x10559)));
evalcond[2]=(((r01*x10562))+(((-1.0)*x10557*x10561))+(((-1.0)*r02*x10559)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10559))+(((-1.0)*x10556*x10561))+((x10554*x10555)));
evalcond[4]=(((r01*x10560))+((cj2*sj1))+((r02*x10554))+((cj1*sj2))+(((-1.0)*x10557*x10559)));
evalcond[5]=(((r22*x10554))+(((-1.0)*x10558*x10559))+((r21*x10560))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10563=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10563.valid){
continue;
}
CheckValue<IkReal> x10564 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10563.value)))+(x10564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10565=IKcos(j4);
IkReal x10566=IKsin(j4);
IkReal x10567=(gconst4*r11);
IkReal x10568=(gconst5*r10);
IkReal x10569=(gconst5*r00);
IkReal x10570=(gconst5*r20);
IkReal x10571=((1.0)*x10565);
IkReal x10572=(gconst4*x10565);
IkReal x10573=((1.0)*x10566);
IkReal x10574=(gconst4*x10566);
evalcond[0]=((((-1.0)*x10568*x10571))+((r12*x10566))+((x10565*x10567)));
evalcond[1]=((((-1.0)*r22*x10571))+((r21*x10574))+(((-1.0)*x10570*x10573)));
evalcond[2]=((((-1.0)*x10569*x10573))+((r01*x10574))+(((-1.0)*r02*x10571)));
evalcond[3]=((-1.0)+((x10566*x10567))+(((-1.0)*r12*x10571))+(((-1.0)*x10568*x10573)));
evalcond[4]=((((-1.0)*x10569*x10571))+((cj2*sj1))+((r01*x10572))+((cj1*sj2))+((r02*x10566)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10572))+((r22*x10566))+(((-1.0)*x10570*x10571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10575=((-1.0)*r21);
CheckValue<IkReal> x10578 = IKatan2WithCheck(IkReal(x10575),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10578.valid){
continue;
}
IkReal x10576=((1.0)*(x10578.value));
IkReal x10577=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10576)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10576)));
IkReal gconst4=(x10575*x10577);
IkReal gconst5=((1.0)*r20*x10577);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10579=((-1.0)*r21);
CheckValue<IkReal> x10582 = IKatan2WithCheck(IkReal(x10579),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10582.valid){
continue;
}
IkReal x10580=((1.0)*(x10582.value));
IkReal x10581=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10580)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10580)));
IkReal gconst4=(x10579*x10581);
IkReal gconst5=((1.0)*r20*x10581);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10583=((-1.0)*r21);
CheckValue<IkReal> x10586 = IKatan2WithCheck(IkReal(x10583),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10586.valid){
continue;
}
IkReal x10584=((1.0)*(x10586.value));
IkReal x10585=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10584)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10584)));
IkReal gconst4=(x10583*x10585);
IkReal gconst5=((1.0)*r20*x10585);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10587=(gconst5*r10);
IkReal x10588=(gconst4*r11);
CheckValue<IkReal> x10589=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10588*x10588)+(((-2.0)*x10587*x10588))+(x10587*x10587))),-1);
if(!x10589.valid){
continue;
}
CheckValue<IkReal> x10590 = IKatan2WithCheck(IkReal((x10588+(((-1.0)*x10587)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10589.value)))+(x10590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10591=IKcos(j4);
IkReal x10592=IKsin(j4);
IkReal x10593=(gconst5*r10);
IkReal x10594=(gconst5*r00);
IkReal x10595=(gconst5*r20);
IkReal x10596=((1.0)*x10591);
IkReal x10597=(gconst4*x10592);
IkReal x10598=(gconst4*x10591);
IkReal x10599=((1.0)*x10592);
evalcond[0]=(((r12*x10592))+((r11*x10598))+(((-1.0)*x10593*x10596)));
evalcond[1]=(((r21*x10597))+(((-1.0)*r22*x10596))+(((-1.0)*x10595*x10599)));
evalcond[2]=((((-1.0)*r02*x10596))+((r01*x10597))+(((-1.0)*x10594*x10599)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10596))+((r11*x10597))+(((-1.0)*x10593*x10599)));
evalcond[4]=(((r21*x10598))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10595*x10596))+((r22*x10592)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x10598))+(((-1.0)*x10594*x10596))+((cj1*cj2))+((r02*x10592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10600=((1.0)*gconst5);
CheckValue<IkReal> x10601 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10601.valid){
continue;
}
CheckValue<IkReal> x10602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10600))+(((-1.0)*gconst4*r20)))),-1);
if(!x10602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10601.value)+(((1.5707963267949)*(x10602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10603=IKcos(j4);
IkReal x10604=IKsin(j4);
IkReal x10605=(gconst5*r10);
IkReal x10606=(gconst5*r00);
IkReal x10607=(gconst5*r20);
IkReal x10608=((1.0)*x10603);
IkReal x10609=(gconst4*x10604);
IkReal x10610=(gconst4*x10603);
IkReal x10611=((1.0)*x10604);
evalcond[0]=(((r12*x10604))+(((-1.0)*x10605*x10608))+((r11*x10610)));
evalcond[1]=(((r21*x10609))+(((-1.0)*x10607*x10611))+(((-1.0)*r22*x10608)));
evalcond[2]=(((r01*x10609))+(((-1.0)*r02*x10608))+(((-1.0)*x10606*x10611)));
evalcond[3]=((-1.0)+((r11*x10609))+(((-1.0)*r12*x10608))+(((-1.0)*x10605*x10611)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10607*x10608))+((r22*x10604))+((r21*x10610)));
evalcond[5]=(((r02*x10604))+(((-1.0)*sj1*sj2))+(((-1.0)*x10606*x10608))+((r01*x10610))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10612=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10612.valid){
continue;
}
CheckValue<IkReal> x10613 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10612.value)))+(x10613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10614=IKcos(j4);
IkReal x10615=IKsin(j4);
IkReal x10616=(gconst5*r10);
IkReal x10617=(gconst5*r00);
IkReal x10618=(gconst5*r20);
IkReal x10619=((1.0)*x10614);
IkReal x10620=(gconst4*x10615);
IkReal x10621=(gconst4*x10614);
IkReal x10622=((1.0)*x10615);
evalcond[0]=(((r12*x10615))+(((-1.0)*x10616*x10619))+((r11*x10621)));
evalcond[1]=(((r21*x10620))+(((-1.0)*x10618*x10622))+(((-1.0)*r22*x10619)));
evalcond[2]=((((-1.0)*x10617*x10622))+((r01*x10620))+(((-1.0)*r02*x10619)));
evalcond[3]=((-1.0)+((r11*x10620))+(((-1.0)*r12*x10619))+(((-1.0)*x10616*x10622)));
evalcond[4]=(((r21*x10621))+((cj2*sj1))+((r22*x10615))+((cj1*sj2))+(((-1.0)*x10618*x10619)));
evalcond[5]=(((r02*x10615))+(((-1.0)*sj1*sj2))+((r01*x10621))+(((-1.0)*x10617*x10619))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10623=((-1.0)*r21);
CheckValue<IkReal> x10626 = IKatan2WithCheck(IkReal(x10623),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10626.valid){
continue;
}
IkReal x10624=((1.0)*(x10626.value));
IkReal x10625=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10624)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10624)));
IkReal gconst4=(x10623*x10625);
IkReal gconst5=((1.0)*r20*x10625);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10627=((-1.0)*r21);
CheckValue<IkReal> x10630 = IKatan2WithCheck(IkReal(x10627),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10630.valid){
continue;
}
IkReal x10628=((1.0)*(x10630.value));
IkReal x10629=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10628)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10628)));
IkReal gconst4=(x10627*x10629);
IkReal gconst5=((1.0)*r20*x10629);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10631=((-1.0)*r21);
CheckValue<IkReal> x10634 = IKatan2WithCheck(IkReal(x10631),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10634.valid){
continue;
}
IkReal x10632=((1.0)*(x10634.value));
IkReal x10633=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10632)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10632)));
IkReal gconst4=(x10631*x10633);
IkReal gconst5=((1.0)*r20*x10633);
IkReal x10635=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10639=IKPowWithIntegerCheck(x10635,-1);
if(!x10639.valid){
continue;
}
IkReal x10636=x10639.value;
IkReal x10637=((1.0)*x10636);
IkReal x10638=((((-2.0)*r10*r11*r20*r21*x10636))+(((-1.0)*x10637*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10637*(r11*r11)*(r21*r21))));
j4eval[0]=x10638;
j4eval[1]=r12;
j4eval[2]=x10635;
j4eval[3]=IKsign(x10638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10640=(gconst5*r10);
IkReal x10641=(gconst4*r11);
CheckValue<IkReal> x10642=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x10640*x10640)))+(((-1.0)*(x10641*x10641)))+(((2.0)*x10640*x10641)))),-1);
if(!x10642.valid){
continue;
}
CheckValue<IkReal> x10643 = IKatan2WithCheck(IkReal(((((-1.0)*x10641))+x10640)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10642.value)))+(x10643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10644=IKsin(j4);
IkReal x10645=IKcos(j4);
IkReal x10646=(gconst4*r11);
IkReal x10647=(gconst5*r10);
IkReal x10648=(gconst5*r00);
IkReal x10649=(gconst5*r20);
IkReal x10650=((1.0)*x10645);
IkReal x10651=(gconst4*x10644);
IkReal x10652=((1.0)*x10644);
evalcond[0]=((((-1.0)*r22*x10650))+(((-1.0)*x10649*x10652))+((r21*x10651)));
evalcond[1]=((((-1.0)*r02*x10650))+(((-1.0)*x10648*x10652))+((r01*x10651)));
evalcond[2]=((((-1.0)*r12*x10652))+(((-1.0)*x10646*x10650))+((x10645*x10647)));
evalcond[3]=((-1.0)+(((-1.0)*x10647*x10652))+(((-1.0)*r12*x10650))+((x10644*x10646)));
evalcond[4]=((((-1.0)*gconst4*r21*x10650))+((cj2*sj1))+(((-1.0)*r22*x10652))+((cj1*sj2))+((x10645*x10649)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10645*x10648))+(((-1.0)*r02*x10652))+(((-1.0)*gconst4*r01*x10650))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10653=((1.0)*gconst5);
CheckValue<IkReal> x10654 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10654.valid){
continue;
}
CheckValue<IkReal> x10655=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10653))+(((-1.0)*gconst4*r20)))),-1);
if(!x10655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10654.value)+(((1.5707963267949)*(x10655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10656=IKsin(j4);
IkReal x10657=IKcos(j4);
IkReal x10658=(gconst4*r11);
IkReal x10659=(gconst5*r10);
IkReal x10660=(gconst5*r00);
IkReal x10661=(gconst5*r20);
IkReal x10662=((1.0)*x10657);
IkReal x10663=(gconst4*x10656);
IkReal x10664=((1.0)*x10656);
evalcond[0]=((((-1.0)*x10661*x10664))+(((-1.0)*r22*x10662))+((r21*x10663)));
evalcond[1]=((((-1.0)*r02*x10662))+(((-1.0)*x10660*x10664))+((r01*x10663)));
evalcond[2]=(((x10657*x10659))+(((-1.0)*x10658*x10662))+(((-1.0)*r12*x10664)));
evalcond[3]=((-1.0)+((x10656*x10658))+(((-1.0)*x10659*x10664))+(((-1.0)*r12*x10662)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10657*x10661))+(((-1.0)*gconst4*r21*x10662))+(((-1.0)*r22*x10664)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10664))+((x10657*x10660))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10665=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10665.valid){
continue;
}
CheckValue<IkReal> x10666 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10665.value)))+(x10666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10667=IKsin(j4);
IkReal x10668=IKcos(j4);
IkReal x10669=(gconst4*r11);
IkReal x10670=(gconst5*r10);
IkReal x10671=(gconst5*r00);
IkReal x10672=(gconst5*r20);
IkReal x10673=((1.0)*x10668);
IkReal x10674=(gconst4*x10667);
IkReal x10675=((1.0)*x10667);
evalcond[0]=((((-1.0)*x10672*x10675))+(((-1.0)*r22*x10673))+((r21*x10674)));
evalcond[1]=((((-1.0)*r02*x10673))+((r01*x10674))+(((-1.0)*x10671*x10675)));
evalcond[2]=((((-1.0)*x10669*x10673))+((x10668*x10670))+(((-1.0)*r12*x10675)));
evalcond[3]=((-1.0)+((x10667*x10669))+(((-1.0)*x10670*x10675))+(((-1.0)*r12*x10673)));
evalcond[4]=(((cj2*sj1))+((x10668*x10672))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10673))+(((-1.0)*r22*x10675)));
evalcond[5]=(((x10668*x10671))+(((-1.0)*r02*x10675))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10676=((-1.0)*r21);
IkReal x10677=((-1.0)*px);
CheckValue<IkReal> x10679 = IKatan2WithCheck(IkReal(x10676),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10679.valid){
continue;
}
IkReal x10678=((1.0)*(x10679.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10678)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10677);
rxp1_1=(px*r21);
rxp1_2=(r11*x10677);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10678)));
IkReal gconst4=x10676;
IkReal gconst5=((1.0)*r20);
IkReal x10680=((1.0)*r11*r21);
IkReal x10681=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10681))+(((-1.0)*x10680)));
j4eval[1]=(((sj3*x10681))+((sj3*x10680)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10682=((-1.0)*r21);
IkReal x10683=((-1.0)*px);
CheckValue<IkReal> x10685 = IKatan2WithCheck(IkReal(x10682),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10685.valid){
continue;
}
IkReal x10684=((1.0)*(x10685.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10684)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10683);
rxp1_1=(px*r21);
rxp1_2=(r11*x10683);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10684)));
IkReal gconst4=x10682;
IkReal gconst5=((1.0)*r20);
IkReal x10686=((1.0)*cj3);
IkReal x10687=(r10*r20);
IkReal x10688=(r11*r21);
j4eval[0]=((((-1.0)*x10687))+(((-1.0)*x10688)));
j4eval[1]=((((-1.0)*x10686*x10688))+(((-1.0)*x10686*x10687)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10689=((-1.0)*r21);
IkReal x10690=((-1.0)*px);
CheckValue<IkReal> x10692 = IKatan2WithCheck(IkReal(x10689),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10692.valid){
continue;
}
IkReal x10691=((1.0)*(x10692.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10691)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10690);
rxp1_1=(px*r21);
rxp1_2=(r11*x10690);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10691)));
IkReal gconst4=x10689;
IkReal gconst5=((1.0)*r20);
IkReal x10693=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*r21*x10693))+((r10*r20*x10693)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10694=((1.0)*r11);
CheckValue<IkReal> x10695=IKPowWithIntegerCheck(r02,-1);
if(!x10695.valid){
continue;
}
CheckValue<IkReal> x10696=IKPowWithIntegerCheck(sj3,-1);
if(!x10696.valid){
continue;
}
CheckValue<IkReal> x10697=IKPowWithIntegerCheck(((((-1.0)*gconst4*sj3*x10694))+((gconst5*r10*sj3))),-1);
if(!x10697.valid){
continue;
}
if( IKabs(((x10695.value)*(x10696.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10697.value)*(((((-1.0)*cj3*gconst5*x10694))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10695.value)*(x10696.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10697.value)*(((((-1.0)*cj3*gconst5*x10694))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10695.value)*(x10696.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10697.value)*(((((-1.0)*cj3*gconst5*x10694))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10698=IKsin(j4);
IkReal x10699=IKcos(j4);
IkReal x10700=(cj2*sj1);
IkReal x10701=(cj1*sj2);
IkReal x10702=(gconst5*sj3);
IkReal x10703=(gconst4*r11);
IkReal x10704=(sj1*sj2);
IkReal x10705=((1.0)*gconst5);
IkReal x10706=(cj1*cj2);
IkReal x10707=(gconst4*r21);
IkReal x10708=(cj3*gconst4);
IkReal x10709=(gconst4*sj3);
IkReal x10710=(cj3*gconst5);
IkReal x10711=(r20*x10699);
IkReal x10712=(r10*x10699);
IkReal x10713=(cj3*x10699);
IkReal x10714=(r02*x10698);
IkReal x10715=(x10701+x10700);
IkReal x10716=((1.0)*sj3*x10699);
evalcond[0]=((-1.0)*r02*x10699);
evalcond[1]=((((-1.0)*r20*x10698*x10705))+((x10698*x10707)));
evalcond[2]=((((-1.0)*sj3*x10714))+x10715);
evalcond[3]=(((cj3*x10714))+(((-1.0)*x10704))+x10706);
evalcond[4]=((-1.0)+((x10698*x10703))+(((-1.0)*r10*x10698*x10705)));
evalcond[5]=((((-1.0)*x10703*x10716))+((r11*x10710))+((r10*x10708))+((x10702*x10712)));
evalcond[6]=(((x10703*x10713))+((r11*x10702))+((r10*x10709))+(((-1.0)*cj3*x10705*x10712)));
evalcond[7]=((((-1.0)*cj3*x10705*x10711))+((r21*x10702))+x10715+((r20*x10709))+((x10707*x10713)));
evalcond[8]=((((-1.0)*x10706))+((r21*x10710))+((x10702*x10711))+x10704+(((-1.0)*x10707*x10716))+((r20*x10708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10717=((1.0)*sj3);
IkReal x10718=(gconst4*r11);
IkReal x10719=((1.0)*gconst5*r10);
CheckValue<IkReal> x10720=IKPowWithIntegerCheck(((((-1.0)*x10719))+x10718),-1);
if(!x10720.valid){
continue;
}
CheckValue<IkReal> x10721=IKPowWithIntegerCheck((((cj3*x10718))+(((-1.0)*cj3*x10719))),-1);
if(!x10721.valid){
continue;
}
if( IKabs(x10720.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10721.value)*(((((-1.0)*gconst5*r11*x10717))+(((-1.0)*gconst4*r10*x10717)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10720.value)+IKsqr(((x10721.value)*(((((-1.0)*gconst5*r11*x10717))+(((-1.0)*gconst4*r10*x10717))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10720.value, ((x10721.value)*(((((-1.0)*gconst5*r11*x10717))+(((-1.0)*gconst4*r10*x10717))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10722=IKsin(j4);
IkReal x10723=IKcos(j4);
IkReal x10724=(cj2*sj1);
IkReal x10725=(cj1*sj2);
IkReal x10726=(gconst5*sj3);
IkReal x10727=(gconst4*r11);
IkReal x10728=(sj1*sj2);
IkReal x10729=((1.0)*gconst5);
IkReal x10730=(cj1*cj2);
IkReal x10731=(gconst4*r21);
IkReal x10732=(cj3*gconst4);
IkReal x10733=(gconst4*sj3);
IkReal x10734=(cj3*gconst5);
IkReal x10735=(r20*x10723);
IkReal x10736=(r10*x10723);
IkReal x10737=(cj3*x10723);
IkReal x10738=(r02*x10722);
IkReal x10739=(x10725+x10724);
IkReal x10740=((1.0)*sj3*x10723);
evalcond[0]=((-1.0)*r02*x10723);
evalcond[1]=((((-1.0)*r20*x10722*x10729))+((x10722*x10731)));
evalcond[2]=((((-1.0)*sj3*x10738))+x10739);
evalcond[3]=((((-1.0)*x10728))+x10730+((cj3*x10738)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10722*x10729))+((x10722*x10727)));
evalcond[5]=(((r10*x10732))+((x10726*x10736))+(((-1.0)*x10727*x10740))+((r11*x10734)));
evalcond[6]=(((r10*x10733))+(((-1.0)*cj3*x10729*x10736))+((x10727*x10737))+((r11*x10726)));
evalcond[7]=(((x10731*x10737))+((r21*x10726))+(((-1.0)*cj3*x10729*x10735))+((r20*x10733))+x10739);
evalcond[8]=((((-1.0)*x10731*x10740))+((r21*x10734))+((r20*x10732))+((x10726*x10735))+(((-1.0)*x10730))+x10728);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10741=((1.0)*gconst5);
IkReal x10742=(gconst4*r11);
CheckValue<IkReal> x10743=IKPowWithIntegerCheck(((((-1.0)*r10*x10741))+x10742),-1);
if(!x10743.valid){
continue;
}
CheckValue<IkReal> x10744=IKPowWithIntegerCheck(((((-1.0)*sj3*x10742))+((gconst5*r10*sj3))),-1);
if(!x10744.valid){
continue;
}
if( IKabs(x10743.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10744.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10741)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10743.value)+IKsqr(((x10744.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10741))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10743.value, ((x10744.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10741))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10745=IKsin(j4);
IkReal x10746=IKcos(j4);
IkReal x10747=(cj2*sj1);
IkReal x10748=(cj1*sj2);
IkReal x10749=(gconst5*sj3);
IkReal x10750=(gconst4*r11);
IkReal x10751=(sj1*sj2);
IkReal x10752=((1.0)*gconst5);
IkReal x10753=(cj1*cj2);
IkReal x10754=(gconst4*r21);
IkReal x10755=(cj3*gconst4);
IkReal x10756=(gconst4*sj3);
IkReal x10757=(cj3*gconst5);
IkReal x10758=(r20*x10746);
IkReal x10759=(r10*x10746);
IkReal x10760=(cj3*x10746);
IkReal x10761=(r02*x10745);
IkReal x10762=(x10748+x10747);
IkReal x10763=((1.0)*sj3*x10746);
evalcond[0]=((-1.0)*r02*x10746);
evalcond[1]=(((x10745*x10754))+(((-1.0)*r20*x10745*x10752)));
evalcond[2]=((((-1.0)*sj3*x10761))+x10762);
evalcond[3]=(((cj3*x10761))+x10753+(((-1.0)*x10751)));
evalcond[4]=((-1.0)+((x10745*x10750))+(((-1.0)*r10*x10745*x10752)));
evalcond[5]=(((r10*x10755))+((x10749*x10759))+(((-1.0)*x10750*x10763))+((r11*x10757)));
evalcond[6]=(((x10750*x10760))+((r10*x10756))+(((-1.0)*cj3*x10752*x10759))+((r11*x10749)));
evalcond[7]=((((-1.0)*cj3*x10752*x10758))+((r20*x10756))+x10762+((x10754*x10760))+((r21*x10749)));
evalcond[8]=((((-1.0)*x10754*x10763))+((x10749*x10758))+((r20*x10755))+x10751+((r21*x10757))+(((-1.0)*x10753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10764=gconst4*gconst4;
IkReal x10765=gconst5*gconst5;
IkReal x10766=(r10*r21);
IkReal x10767=((1.0)*cj3);
IkReal x10768=(r11*r21);
IkReal x10769=(r11*r20);
IkReal x10770=(r22*sj3);
IkReal x10771=(gconst4*r10);
IkReal x10772=((1.0)*sj3);
IkReal x10773=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10774 = IKatan2WithCheck(IkReal((((x10770*x10771))+((gconst5*r11*x10770)))),IkReal((((gconst4*gconst5*sj3*x10768))+(((-1.0)*gconst5*r20*x10771*x10772))+((sj3*x10764*x10766))+(((-1.0)*x10765*x10769*x10772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10774.valid){
continue;
}
CheckValue<IkReal> x10775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10765*x10767))+(((-1.0)*r12*r22*x10767))+((x10766*x10773))+(((-1.0)*x10764*x10767*x10768))+((x10769*x10773)))),-1);
if(!x10775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10774.value)+(((1.5707963267949)*(x10775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10776=IKsin(j4);
IkReal x10777=IKcos(j4);
IkReal x10778=(cj2*sj1);
IkReal x10779=(cj1*sj2);
IkReal x10780=(gconst5*sj3);
IkReal x10781=(gconst4*r11);
IkReal x10782=(sj1*sj2);
IkReal x10783=(gconst5*r10);
IkReal x10784=(cj1*cj2);
IkReal x10785=(gconst4*r01);
IkReal x10786=(gconst4*r21);
IkReal x10787=(gconst5*r00);
IkReal x10788=(cj3*gconst5);
IkReal x10789=(gconst4*sj3);
IkReal x10790=(cj3*gconst4);
IkReal x10791=((1.0)*x10777);
IkReal x10792=((1.0)*x10776);
IkReal x10793=(cj3*x10776);
IkReal x10794=(cj3*x10777);
IkReal x10795=(x10778+x10779);
evalcond[0]=((((-1.0)*gconst5*r20*x10792))+((x10776*x10786))+(((-1.0)*r22*x10791)));
evalcond[1]=((((-1.0)*r02*x10791))+(((-1.0)*x10787*x10792))+((x10776*x10785)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10791))+((x10776*x10781))+(((-1.0)*x10783*x10792)));
evalcond[3]=(((r11*x10780))+((r12*x10793))+(((-1.0)*cj3*x10783*x10791))+((x10781*x10794))+((r10*x10789)));
evalcond[4]=(((r10*x10790))+((r11*x10788))+(((-1.0)*sj3*x10781*x10791))+((r10*x10777*x10780))+(((-1.0)*r12*sj3*x10792)));
evalcond[5]=(((r21*x10780))+((r20*x10789))+x10795+((x10786*x10794))+(((-1.0)*r20*x10788*x10791))+((r22*x10793)));
evalcond[6]=((((-1.0)*r02*sj3*x10792))+((r01*x10788))+(((-1.0)*sj3*x10785*x10791))+((r00*x10790))+x10795+((r00*x10777*x10780)));
evalcond[7]=((((-1.0)*cj3*x10787*x10791))+((r02*x10793))+((r01*x10780))+((x10785*x10794))+(((-1.0)*x10782))+((r00*x10789))+x10784);
evalcond[8]=(((r21*x10788))+((r20*x10790))+(((-1.0)*r22*sj3*x10792))+(((-1.0)*x10784))+(((-1.0)*sj3*x10786*x10791))+((r20*x10777*x10780))+x10782);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10796=((1.0)*gconst5);
CheckValue<IkReal> x10797 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10796))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10797.valid){
continue;
}
CheckValue<IkReal> x10798=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10796))+(((-1.0)*gconst4*r20)))),-1);
if(!x10798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10797.value)+(((1.5707963267949)*(x10798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10799=IKsin(j4);
IkReal x10800=IKcos(j4);
IkReal x10801=(cj2*sj1);
IkReal x10802=(cj1*sj2);
IkReal x10803=(gconst5*sj3);
IkReal x10804=(gconst4*r11);
IkReal x10805=(sj1*sj2);
IkReal x10806=(gconst5*r10);
IkReal x10807=(cj1*cj2);
IkReal x10808=(gconst4*r01);
IkReal x10809=(gconst4*r21);
IkReal x10810=(gconst5*r00);
IkReal x10811=(cj3*gconst5);
IkReal x10812=(gconst4*sj3);
IkReal x10813=(cj3*gconst4);
IkReal x10814=((1.0)*x10800);
IkReal x10815=((1.0)*x10799);
IkReal x10816=(cj3*x10799);
IkReal x10817=(cj3*x10800);
IkReal x10818=(x10802+x10801);
evalcond[0]=((((-1.0)*gconst5*r20*x10815))+((x10799*x10809))+(((-1.0)*r22*x10814)));
evalcond[1]=((((-1.0)*x10810*x10815))+(((-1.0)*r02*x10814))+((x10799*x10808)));
evalcond[2]=((-1.0)+(((-1.0)*x10806*x10815))+(((-1.0)*r12*x10814))+((x10799*x10804)));
evalcond[3]=(((x10804*x10817))+((r11*x10803))+(((-1.0)*cj3*x10806*x10814))+((r10*x10812))+((r12*x10816)));
evalcond[4]=(((r10*x10813))+(((-1.0)*r12*sj3*x10815))+((r10*x10800*x10803))+((r11*x10811))+(((-1.0)*sj3*x10804*x10814)));
evalcond[5]=(((r22*x10816))+(((-1.0)*r20*x10811*x10814))+((x10809*x10817))+((r20*x10812))+((r21*x10803))+x10818);
evalcond[6]=((((-1.0)*sj3*x10808*x10814))+((r00*x10800*x10803))+(((-1.0)*r02*sj3*x10815))+((r01*x10811))+((r00*x10813))+x10818);
evalcond[7]=(((r02*x10816))+((x10808*x10817))+((r01*x10803))+(((-1.0)*cj3*x10810*x10814))+(((-1.0)*x10805))+((r00*x10812))+x10807);
evalcond[8]=((((-1.0)*sj3*x10809*x10814))+(((-1.0)*r22*sj3*x10815))+((r20*x10813))+(((-1.0)*x10807))+((r20*x10800*x10803))+((r21*x10811))+x10805);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10819=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10819.valid){
continue;
}
CheckValue<IkReal> x10820 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10819.value)))+(x10820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10821=IKsin(j4);
IkReal x10822=IKcos(j4);
IkReal x10823=(cj2*sj1);
IkReal x10824=(cj1*sj2);
IkReal x10825=(gconst5*sj3);
IkReal x10826=(gconst4*r11);
IkReal x10827=(sj1*sj2);
IkReal x10828=(gconst5*r10);
IkReal x10829=(cj1*cj2);
IkReal x10830=(gconst4*r01);
IkReal x10831=(gconst4*r21);
IkReal x10832=(gconst5*r00);
IkReal x10833=(cj3*gconst5);
IkReal x10834=(gconst4*sj3);
IkReal x10835=(cj3*gconst4);
IkReal x10836=((1.0)*x10822);
IkReal x10837=((1.0)*x10821);
IkReal x10838=(cj3*x10821);
IkReal x10839=(cj3*x10822);
IkReal x10840=(x10824+x10823);
evalcond[0]=((((-1.0)*gconst5*r20*x10837))+(((-1.0)*r22*x10836))+((x10821*x10831)));
evalcond[1]=((((-1.0)*x10832*x10837))+(((-1.0)*r02*x10836))+((x10821*x10830)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10836))+(((-1.0)*x10828*x10837))+((x10821*x10826)));
evalcond[3]=(((x10826*x10839))+((r10*x10834))+(((-1.0)*cj3*x10828*x10836))+((r12*x10838))+((r11*x10825)));
evalcond[4]=(((r10*x10822*x10825))+(((-1.0)*sj3*x10826*x10836))+((r10*x10835))+(((-1.0)*r12*sj3*x10837))+((r11*x10833)));
evalcond[5]=(((r21*x10825))+((r22*x10838))+((x10831*x10839))+(((-1.0)*r20*x10833*x10836))+((r20*x10834))+x10840);
evalcond[6]=(((r00*x10822*x10825))+(((-1.0)*sj3*x10830*x10836))+(((-1.0)*r02*sj3*x10837))+((r01*x10833))+((r00*x10835))+x10840);
evalcond[7]=((((-1.0)*x10827))+((r02*x10838))+((r00*x10834))+(((-1.0)*cj3*x10832*x10836))+((r01*x10825))+((x10830*x10839))+x10829);
evalcond[8]=((((-1.0)*x10829))+((r20*x10822*x10825))+(((-1.0)*sj3*x10831*x10836))+(((-1.0)*r22*sj3*x10837))+((r20*x10835))+((r21*x10833))+x10827);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10841=((-1.0)*r21);
CheckValue<IkReal> x10844 = IKatan2WithCheck(IkReal(x10841),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10844.valid){
continue;
}
IkReal x10842=((1.0)*(x10844.value));
IkReal x10843=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10842)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10842)));
IkReal gconst4=(x10841*x10843);
IkReal gconst5=((1.0)*r20*x10843);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10845=((-1.0)*r21);
CheckValue<IkReal> x10848 = IKatan2WithCheck(IkReal(x10845),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10848.valid){
continue;
}
IkReal x10846=((1.0)*(x10848.value));
IkReal x10847=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10846)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10846)));
IkReal gconst4=(x10845*x10847);
IkReal gconst5=((1.0)*r20*x10847);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10849=((-1.0)*r21);
CheckValue<IkReal> x10852 = IKatan2WithCheck(IkReal(x10849),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10852.valid){
continue;
}
IkReal x10850=((1.0)*(x10852.value));
IkReal x10851=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10850)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10850)));
IkReal gconst4=(x10849*x10851);
IkReal gconst5=((1.0)*r20*x10851);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10853=((-1.0)*r21);
CheckValue<IkReal> x10856 = IKatan2WithCheck(IkReal(x10853),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10856.valid){
continue;
}
IkReal x10854=((1.0)*(x10856.value));
IkReal x10855=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10854)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10854)));
IkReal gconst4=(x10853*x10855);
IkReal gconst5=((1.0)*r20*x10855);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10857=((-1.0)*r21);
CheckValue<IkReal> x10860 = IKatan2WithCheck(IkReal(x10857),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10860.valid){
continue;
}
IkReal x10858=((1.0)*(x10860.value));
IkReal x10859=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10858)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10858)));
IkReal gconst4=(x10857*x10859);
IkReal gconst5=((1.0)*r20*x10859);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10861=((-1.0)*r21);
CheckValue<IkReal> x10864 = IKatan2WithCheck(IkReal(x10861),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10864.valid){
continue;
}
IkReal x10862=((1.0)*(x10864.value));
IkReal x10863=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10862)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10862)));
IkReal gconst4=(x10861*x10863);
IkReal gconst5=((1.0)*r20*x10863);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10865=(gconst5*r10);
IkReal x10866=(gconst4*r11);
CheckValue<IkReal> x10867 = IKatan2WithCheck(IkReal(((((-1.0)*x10866))+x10865)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10867.valid){
continue;
}
CheckValue<IkReal> x10868=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10865*x10866))+(x10866*x10866)+(x10865*x10865))),-1);
if(!x10868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10867.value)+(((1.5707963267949)*(x10868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10869=IKsin(j4);
IkReal x10870=IKcos(j4);
IkReal x10871=(gconst4*r11);
IkReal x10872=((1.0)*cj1);
IkReal x10873=(gconst5*r10);
IkReal x10874=(gconst4*r01);
IkReal x10875=(gconst5*r00);
IkReal x10876=(gconst4*r21);
IkReal x10877=(gconst5*r20);
IkReal x10878=((1.0)*x10870);
IkReal x10879=((1.0)*x10869);
evalcond[0]=((((-1.0)*x10877*x10879))+(((-1.0)*r22*x10878))+((x10869*x10876)));
evalcond[1]=((((-1.0)*x10875*x10879))+(((-1.0)*r02*x10878))+((x10869*x10874)));
evalcond[2]=(((x10870*x10873))+(((-1.0)*r12*x10879))+(((-1.0)*x10871*x10878)));
evalcond[3]=((1.0)+(((-1.0)*x10873*x10879))+(((-1.0)*r12*x10878))+((x10869*x10871)));
evalcond[4]=(((x10870*x10877))+(((-1.0)*r22*x10879))+((sj1*sj2))+(((-1.0)*x10876*x10878))+(((-1.0)*cj2*x10872)));
evalcond[5]=(((x10870*x10875))+(((-1.0)*cj2*sj1))+(((-1.0)*x10874*x10878))+(((-1.0)*r02*x10879))+(((-1.0)*sj2*x10872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10880=((1.0)*gconst5);
CheckValue<IkReal> x10881 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10881.valid){
continue;
}
CheckValue<IkReal> x10882=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10880)))),-1);
if(!x10882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10881.value)+(((1.5707963267949)*(x10882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10883=IKsin(j4);
IkReal x10884=IKcos(j4);
IkReal x10885=(gconst4*r11);
IkReal x10886=((1.0)*cj1);
IkReal x10887=(gconst5*r10);
IkReal x10888=(gconst4*r01);
IkReal x10889=(gconst5*r00);
IkReal x10890=(gconst4*r21);
IkReal x10891=(gconst5*r20);
IkReal x10892=((1.0)*x10884);
IkReal x10893=((1.0)*x10883);
evalcond[0]=(((x10883*x10890))+(((-1.0)*x10891*x10893))+(((-1.0)*r22*x10892)));
evalcond[1]=(((x10883*x10888))+(((-1.0)*r02*x10892))+(((-1.0)*x10889*x10893)));
evalcond[2]=((((-1.0)*x10885*x10892))+(((-1.0)*r12*x10893))+((x10884*x10887)));
evalcond[3]=((1.0)+((x10883*x10885))+(((-1.0)*x10887*x10893))+(((-1.0)*r12*x10892)));
evalcond[4]=((((-1.0)*x10890*x10892))+((sj1*sj2))+(((-1.0)*cj2*x10886))+(((-1.0)*r22*x10893))+((x10884*x10891)));
evalcond[5]=((((-1.0)*sj2*x10886))+(((-1.0)*x10888*x10892))+(((-1.0)*r02*x10893))+(((-1.0)*cj2*sj1))+((x10884*x10889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10894 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10894.valid){
continue;
}
CheckValue<IkReal> x10895=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10894.value)+(((1.5707963267949)*(x10895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10896=IKsin(j4);
IkReal x10897=IKcos(j4);
IkReal x10898=(gconst4*r11);
IkReal x10899=((1.0)*cj1);
IkReal x10900=(gconst5*r10);
IkReal x10901=(gconst4*r01);
IkReal x10902=(gconst5*r00);
IkReal x10903=(gconst4*r21);
IkReal x10904=(gconst5*r20);
IkReal x10905=((1.0)*x10897);
IkReal x10906=((1.0)*x10896);
evalcond[0]=((((-1.0)*r22*x10905))+(((-1.0)*x10904*x10906))+((x10896*x10903)));
evalcond[1]=(((x10896*x10901))+(((-1.0)*x10902*x10906))+(((-1.0)*r02*x10905)));
evalcond[2]=((((-1.0)*r12*x10906))+((x10897*x10900))+(((-1.0)*x10898*x10905)));
evalcond[3]=((1.0)+(((-1.0)*x10900*x10906))+(((-1.0)*r12*x10905))+((x10896*x10898)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x10906))+(((-1.0)*cj2*x10899))+(((-1.0)*x10903*x10905))+((x10897*x10904)));
evalcond[5]=((((-1.0)*sj2*x10899))+(((-1.0)*cj2*sj1))+(((-1.0)*x10901*x10905))+((x10897*x10902))+(((-1.0)*r02*x10906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10907=((-1.0)*r21);
CheckValue<IkReal> x10910 = IKatan2WithCheck(IkReal(x10907),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10910.valid){
continue;
}
IkReal x10908=((1.0)*(x10910.value));
IkReal x10909=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10908)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10908)));
IkReal gconst4=(x10907*x10909);
IkReal gconst5=((1.0)*r20*x10909);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10911=((-1.0)*r21);
CheckValue<IkReal> x10914 = IKatan2WithCheck(IkReal(x10911),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10914.valid){
continue;
}
IkReal x10912=((1.0)*(x10914.value));
IkReal x10913=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10912)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10912)));
IkReal gconst4=(x10911*x10913);
IkReal gconst5=((1.0)*r20*x10913);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10915=((-1.0)*r21);
CheckValue<IkReal> x10918 = IKatan2WithCheck(IkReal(x10915),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10918.valid){
continue;
}
IkReal x10916=((1.0)*(x10918.value));
IkReal x10917=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10916)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10916)));
IkReal gconst4=(x10915*x10917);
IkReal gconst5=((1.0)*r20*x10917);
IkReal x10919=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10923=IKPowWithIntegerCheck(x10919,-1);
if(!x10923.valid){
continue;
}
IkReal x10920=x10923.value;
IkReal x10921=((1.0)*x10920);
IkReal x10922=((((-2.0)*r10*r11*r20*r21*x10920))+(((-1.0)*(r12*r12)))+(((-1.0)*x10921*(r10*r10)*(r20*r20)))+(((-1.0)*x10921*(r11*r11)*(r21*r21))));
j4eval[0]=x10922;
j4eval[1]=r12;
j4eval[2]=x10919;
j4eval[3]=IKsign(x10922);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10924=(gconst5*r10);
IkReal x10925=(gconst4*r11);
CheckValue<IkReal> x10926=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10924*x10924)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10925*x10925)))+(((2.0)*x10924*x10925)))),-1);
if(!x10926.valid){
continue;
}
CheckValue<IkReal> x10927 = IKatan2WithCheck(IkReal(((((-1.0)*x10924))+x10925)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10926.value)))+(x10927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10928=IKcos(j4);
IkReal x10929=IKsin(j4);
IkReal x10930=(gconst4*r11);
IkReal x10931=(gconst5*r10);
IkReal x10932=((1.0)*cj1);
IkReal x10933=(gconst5*r00);
IkReal x10934=(gconst5*r20);
IkReal x10935=((1.0)*x10928);
IkReal x10936=(gconst4*x10928);
IkReal x10937=((1.0)*x10929);
IkReal x10938=(gconst4*x10929);
evalcond[0]=((((-1.0)*x10931*x10935))+((x10928*x10930))+((r12*x10929)));
evalcond[1]=((((-1.0)*r22*x10935))+((r21*x10938))+(((-1.0)*x10934*x10937)));
evalcond[2]=((((-1.0)*r02*x10935))+((r01*x10938))+(((-1.0)*x10933*x10937)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10935))+(((-1.0)*x10931*x10937))+((x10929*x10930)));
evalcond[4]=(((sj1*sj2))+((r21*x10936))+(((-1.0)*cj2*x10932))+((r22*x10929))+(((-1.0)*x10934*x10935)));
evalcond[5]=(((r02*x10929))+(((-1.0)*cj2*sj1))+((r01*x10936))+(((-1.0)*x10933*x10935))+(((-1.0)*sj2*x10932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10939=((1.0)*gconst5);
CheckValue<IkReal> x10940=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10939)))),-1);
if(!x10940.valid){
continue;
}
CheckValue<IkReal> x10941 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10939))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10940.value)))+(x10941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10942=IKcos(j4);
IkReal x10943=IKsin(j4);
IkReal x10944=(gconst4*r11);
IkReal x10945=(gconst5*r10);
IkReal x10946=((1.0)*cj1);
IkReal x10947=(gconst5*r00);
IkReal x10948=(gconst5*r20);
IkReal x10949=((1.0)*x10942);
IkReal x10950=(gconst4*x10942);
IkReal x10951=((1.0)*x10943);
IkReal x10952=(gconst4*x10943);
evalcond[0]=((((-1.0)*x10945*x10949))+((x10942*x10944))+((r12*x10943)));
evalcond[1]=((((-1.0)*x10948*x10951))+(((-1.0)*r22*x10949))+((r21*x10952)));
evalcond[2]=((((-1.0)*x10947*x10951))+((r01*x10952))+(((-1.0)*r02*x10949)));
evalcond[3]=((1.0)+((x10943*x10944))+(((-1.0)*x10945*x10951))+(((-1.0)*r12*x10949)));
evalcond[4]=((((-1.0)*x10948*x10949))+((sj1*sj2))+((r21*x10950))+((r22*x10943))+(((-1.0)*cj2*x10946)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x10950))+(((-1.0)*sj2*x10946))+((r02*x10943))+(((-1.0)*x10947*x10949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10953 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10953.valid){
continue;
}
CheckValue<IkReal> x10954=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10953.value)+(((1.5707963267949)*(x10954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10955=IKcos(j4);
IkReal x10956=IKsin(j4);
IkReal x10957=(gconst4*r11);
IkReal x10958=(gconst5*r10);
IkReal x10959=((1.0)*cj1);
IkReal x10960=(gconst5*r00);
IkReal x10961=(gconst5*r20);
IkReal x10962=((1.0)*x10955);
IkReal x10963=(gconst4*x10955);
IkReal x10964=((1.0)*x10956);
IkReal x10965=(gconst4*x10956);
evalcond[0]=(((x10955*x10957))+(((-1.0)*x10958*x10962))+((r12*x10956)));
evalcond[1]=((((-1.0)*x10961*x10964))+(((-1.0)*r22*x10962))+((r21*x10965)));
evalcond[2]=((((-1.0)*x10960*x10964))+((r01*x10965))+(((-1.0)*r02*x10962)));
evalcond[3]=((1.0)+((x10956*x10957))+(((-1.0)*x10958*x10964))+(((-1.0)*r12*x10962)));
evalcond[4]=((((-1.0)*x10961*x10962))+(((-1.0)*cj2*x10959))+((r22*x10956))+((sj1*sj2))+((r21*x10963)));
evalcond[5]=(((r02*x10956))+(((-1.0)*x10960*x10962))+((r01*x10963))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10966=((-1.0)*r21);
CheckValue<IkReal> x10969 = IKatan2WithCheck(IkReal(x10966),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10969.valid){
continue;
}
IkReal x10967=((1.0)*(x10969.value));
IkReal x10968=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10967)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10967)));
IkReal gconst4=(x10966*x10968);
IkReal gconst5=((1.0)*r20*x10968);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10970=((-1.0)*r21);
CheckValue<IkReal> x10973 = IKatan2WithCheck(IkReal(x10970),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10973.valid){
continue;
}
IkReal x10971=((1.0)*(x10973.value));
IkReal x10972=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10971)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10971)));
IkReal gconst4=(x10970*x10972);
IkReal gconst5=((1.0)*r20*x10972);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10974=((-1.0)*r21);
CheckValue<IkReal> x10977 = IKatan2WithCheck(IkReal(x10974),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10977.valid){
continue;
}
IkReal x10975=((1.0)*(x10977.value));
IkReal x10976=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10975)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10975)));
IkReal gconst4=(x10974*x10976);
IkReal gconst5=((1.0)*r20*x10976);
IkReal x10978=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10982=IKPowWithIntegerCheck(x10978,-1);
if(!x10982.valid){
continue;
}
IkReal x10979=x10982.value;
IkReal x10980=((1.0)*x10979);
IkReal x10981=((((-1.0)*x10980*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10980*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10979)));
j4eval[0]=x10981;
j4eval[1]=r12;
j4eval[2]=x10978;
j4eval[3]=IKsign(x10981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10983=(gconst5*r10);
IkReal x10984=(gconst4*r11);
CheckValue<IkReal> x10985 = IKatan2WithCheck(IkReal(((((-1.0)*x10983))+x10984)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10985.valid){
continue;
}
CheckValue<IkReal> x10986=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10984*x10984)))+(((2.0)*x10983*x10984))+(((-1.0)*(x10983*x10983)))+(((-1.0)*(r12*r12))))),-1);
if(!x10986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10985.value)+(((1.5707963267949)*(x10986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10987=IKcos(j4);
IkReal x10988=IKsin(j4);
IkReal x10989=(gconst4*r11);
IkReal x10990=(gconst5*r10);
IkReal x10991=(gconst5*r00);
IkReal x10992=(gconst5*r20);
IkReal x10993=((1.0)*x10987);
IkReal x10994=(gconst4*x10987);
IkReal x10995=((1.0)*x10988);
IkReal x10996=(gconst4*x10988);
evalcond[0]=(((r12*x10988))+((x10987*x10989))+(((-1.0)*x10990*x10993)));
evalcond[1]=((((-1.0)*x10992*x10995))+((r21*x10996))+(((-1.0)*r22*x10993)));
evalcond[2]=(((r01*x10996))+(((-1.0)*x10991*x10995))+(((-1.0)*r02*x10993)));
evalcond[3]=((1.0)+(((-1.0)*x10990*x10995))+(((-1.0)*r12*x10993))+((x10988*x10989)));
evalcond[4]=(((r22*x10988))+((cj2*sj1))+(((-1.0)*x10992*x10993))+((r21*x10994))+((cj1*sj2)));
evalcond[5]=(((r01*x10994))+(((-1.0)*x10991*x10993))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10997=((1.0)*gconst5);
CheckValue<IkReal> x10998=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10997)))),-1);
if(!x10998.valid){
continue;
}
CheckValue<IkReal> x10999 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10997))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10998.value)))+(x10999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11000=IKcos(j4);
IkReal x11001=IKsin(j4);
IkReal x11002=(gconst4*r11);
IkReal x11003=(gconst5*r10);
IkReal x11004=(gconst5*r00);
IkReal x11005=(gconst5*r20);
IkReal x11006=((1.0)*x11000);
IkReal x11007=(gconst4*x11000);
IkReal x11008=((1.0)*x11001);
IkReal x11009=(gconst4*x11001);
evalcond[0]=(((x11000*x11002))+((r12*x11001))+(((-1.0)*x11003*x11006)));
evalcond[1]=((((-1.0)*r22*x11006))+(((-1.0)*x11005*x11008))+((r21*x11009)));
evalcond[2]=((((-1.0)*r02*x11006))+(((-1.0)*x11004*x11008))+((r01*x11009)));
evalcond[3]=((1.0)+((x11001*x11002))+(((-1.0)*x11003*x11008))+(((-1.0)*r12*x11006)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11005*x11006))+((r21*x11007))+((r22*x11001)));
evalcond[5]=(((r02*x11001))+(((-1.0)*x11004*x11006))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x11007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11010 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11010.valid){
continue;
}
CheckValue<IkReal> x11011=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11010.value)+(((1.5707963267949)*(x11011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11012=IKcos(j4);
IkReal x11013=IKsin(j4);
IkReal x11014=(gconst4*r11);
IkReal x11015=(gconst5*r10);
IkReal x11016=(gconst5*r00);
IkReal x11017=(gconst5*r20);
IkReal x11018=((1.0)*x11012);
IkReal x11019=(gconst4*x11012);
IkReal x11020=((1.0)*x11013);
IkReal x11021=(gconst4*x11013);
evalcond[0]=((((-1.0)*x11015*x11018))+((x11012*x11014))+((r12*x11013)));
evalcond[1]=((((-1.0)*r22*x11018))+((r21*x11021))+(((-1.0)*x11017*x11020)));
evalcond[2]=(((r01*x11021))+(((-1.0)*r02*x11018))+(((-1.0)*x11016*x11020)));
evalcond[3]=((1.0)+(((-1.0)*x11015*x11020))+((x11013*x11014))+(((-1.0)*r12*x11018)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11013))+((r21*x11019))+(((-1.0)*x11017*x11018)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x11019))+(((-1.0)*x11016*x11018))+((r02*x11013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11022=((-1.0)*r21);
CheckValue<IkReal> x11025 = IKatan2WithCheck(IkReal(x11022),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11025.valid){
continue;
}
IkReal x11023=((1.0)*(x11025.value));
IkReal x11024=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11023)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11023)));
IkReal gconst4=(x11022*x11024);
IkReal gconst5=((1.0)*r20*x11024);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11026=((-1.0)*r21);
CheckValue<IkReal> x11029 = IKatan2WithCheck(IkReal(x11026),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11029.valid){
continue;
}
IkReal x11027=((1.0)*(x11029.value));
IkReal x11028=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11027)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11027)));
IkReal gconst4=(x11026*x11028);
IkReal gconst5=((1.0)*r20*x11028);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11030=((-1.0)*r21);
CheckValue<IkReal> x11033 = IKatan2WithCheck(IkReal(x11030),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11033.valid){
continue;
}
IkReal x11031=((1.0)*(x11033.value));
IkReal x11032=x9735;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11031)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11031)));
IkReal gconst4=(x11030*x11032);
IkReal gconst5=((1.0)*r20*x11032);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11034=(gconst5*r10);
IkReal x11035=(gconst4*r11);
CheckValue<IkReal> x11036 = IKatan2WithCheck(IkReal(((((-1.0)*x11035))+x11034)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11036.valid){
continue;
}
CheckValue<IkReal> x11037=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11034*x11035))+(x11035*x11035)+(x11034*x11034))),-1);
if(!x11037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11036.value)+(((1.5707963267949)*(x11037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11038=IKsin(j4);
IkReal x11039=IKcos(j4);
IkReal x11040=(gconst4*r11);
IkReal x11041=(gconst5*r10);
IkReal x11042=(gconst4*r01);
IkReal x11043=(gconst5*r00);
IkReal x11044=(gconst4*r21);
IkReal x11045=(gconst5*r20);
IkReal x11046=((1.0)*x11039);
IkReal x11047=((1.0)*x11038);
evalcond[0]=((((-1.0)*x11045*x11047))+(((-1.0)*r22*x11046))+((x11038*x11044)));
evalcond[1]=((((-1.0)*x11043*x11047))+(((-1.0)*r02*x11046))+((x11038*x11042)));
evalcond[2]=((((-1.0)*r12*x11047))+((x11039*x11041))+(((-1.0)*x11040*x11046)));
evalcond[3]=((1.0)+(((-1.0)*x11041*x11047))+(((-1.0)*r12*x11046))+((x11038*x11040)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11047))+((cj1*sj2))+(((-1.0)*x11044*x11046))+((x11039*x11045)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11042*x11046))+(((-1.0)*r02*x11047))+((x11039*x11043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11048=((1.0)*gconst5);
CheckValue<IkReal> x11049 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11048))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11049.valid){
continue;
}
CheckValue<IkReal> x11050=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11048)))),-1);
if(!x11050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11049.value)+(((1.5707963267949)*(x11050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11051=IKsin(j4);
IkReal x11052=IKcos(j4);
IkReal x11053=(gconst4*r11);
IkReal x11054=(gconst5*r10);
IkReal x11055=(gconst4*r01);
IkReal x11056=(gconst5*r00);
IkReal x11057=(gconst4*r21);
IkReal x11058=(gconst5*r20);
IkReal x11059=((1.0)*x11052);
IkReal x11060=((1.0)*x11051);
evalcond[0]=((((-1.0)*r22*x11059))+(((-1.0)*x11058*x11060))+((x11051*x11057)));
evalcond[1]=(((x11051*x11055))+(((-1.0)*x11056*x11060))+(((-1.0)*r02*x11059)));
evalcond[2]=(((x11052*x11054))+(((-1.0)*x11053*x11059))+(((-1.0)*r12*x11060)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11059))+((x11051*x11053))+(((-1.0)*x11054*x11060)));
evalcond[4]=((((-1.0)*r22*x11060))+((cj2*sj1))+((cj1*sj2))+((x11052*x11058))+(((-1.0)*x11057*x11059)));
evalcond[5]=((((-1.0)*r02*x11060))+((x11052*x11056))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11055*x11059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11061 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11061.valid){
continue;
}
CheckValue<IkReal> x11062=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11061.value)+(((1.5707963267949)*(x11062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11063=IKsin(j4);
IkReal x11064=IKcos(j4);
IkReal x11065=(gconst4*r11);
IkReal x11066=(gconst5*r10);
IkReal x11067=(gconst4*r01);
IkReal x11068=(gconst5*r00);
IkReal x11069=(gconst4*r21);
IkReal x11070=(gconst5*r20);
IkReal x11071=((1.0)*x11064);
IkReal x11072=((1.0)*x11063);
evalcond[0]=(((x11063*x11069))+(((-1.0)*x11070*x11072))+(((-1.0)*r22*x11071)));
evalcond[1]=(((x11063*x11067))+(((-1.0)*r02*x11071))+(((-1.0)*x11068*x11072)));
evalcond[2]=(((x11064*x11066))+(((-1.0)*x11065*x11071))+(((-1.0)*r12*x11072)));
evalcond[3]=((1.0)+((x11063*x11065))+(((-1.0)*x11066*x11072))+(((-1.0)*r12*x11071)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11064*x11070))+(((-1.0)*r22*x11072))+(((-1.0)*x11069*x11071)));
evalcond[5]=(((x11064*x11068))+(((-1.0)*x11067*x11071))+(((-1.0)*cj1*cj2))+(((-1.0)*r02*x11072))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11073=gconst4*gconst4;
IkReal x11074=gconst5*gconst5;
IkReal x11075=(r10*r21);
IkReal x11076=((1.0)*cj3);
IkReal x11077=(r11*r21);
IkReal x11078=(r11*r20);
IkReal x11079=(r22*sj3);
IkReal x11080=(gconst4*r10);
IkReal x11081=((1.0)*sj3);
IkReal x11082=(cj3*gconst4*gconst5);
CheckValue<IkReal> x11083 = IKatan2WithCheck(IkReal((((x11079*x11080))+((gconst5*r11*x11079)))),IkReal(((((-1.0)*x11074*x11078*x11081))+(((-1.0)*gconst5*r20*x11080*x11081))+((gconst4*gconst5*sj3*x11077))+((sj3*x11073*x11075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11083.valid){
continue;
}
CheckValue<IkReal> x11084=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11073*x11076*x11077))+(((-1.0)*r10*r20*x11074*x11076))+(((-1.0)*r12*r22*x11076))+((x11075*x11082))+((x11078*x11082)))),-1);
if(!x11084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11083.value)+(((1.5707963267949)*(x11084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11085=IKsin(j4);
IkReal x11086=IKcos(j4);
IkReal x11087=(sj1*sj2);
IkReal x11088=(gconst5*sj3);
IkReal x11089=(cj3*gconst5);
IkReal x11090=(gconst4*r11);
IkReal x11091=((1.0)*cj1);
IkReal x11092=(gconst4*r01);
IkReal x11093=(cj2*sj1);
IkReal x11094=(gconst4*r21);
IkReal x11095=(gconst4*sj3);
IkReal x11096=(cj3*gconst4);
IkReal x11097=(cj2*x11091);
IkReal x11098=((1.0)*x11086);
IkReal x11099=((1.0)*x11085);
IkReal x11100=(cj3*x11085);
IkReal x11101=(cj3*x11086);
evalcond[0]=((((-1.0)*r22*x11098))+(((-1.0)*gconst5*r20*x11099))+((x11085*x11094)));
evalcond[1]=((((-1.0)*r02*x11098))+(((-1.0)*gconst5*r00*x11099))+((x11085*x11092)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11098))+(((-1.0)*gconst5*r10*x11099))+((x11085*x11090)));
evalcond[3]=(((x11090*x11101))+((r11*x11088))+((r10*x11095))+(((-1.0)*r10*x11089*x11098))+((r12*x11100)));
evalcond[4]=((((-1.0)*r12*sj3*x11099))+((r10*x11086*x11088))+((r11*x11089))+((r10*x11096))+(((-1.0)*sj3*x11090*x11098)));
evalcond[5]=(((r21*x11088))+((cj1*sj2))+((r20*x11095))+x11093+((x11094*x11101))+((r22*x11100))+(((-1.0)*r20*x11089*x11098)));
evalcond[6]=(((x11092*x11101))+((r02*x11100))+((r01*x11088))+(((-1.0)*x11097))+x11087+((r00*x11095))+(((-1.0)*r00*x11089*x11098)));
evalcond[7]=(((r20*x11086*x11088))+((r21*x11089))+(((-1.0)*x11097))+((r20*x11096))+x11087+(((-1.0)*r22*sj3*x11099))+(((-1.0)*sj3*x11094*x11098)));
evalcond[8]=(((r00*x11086*x11088))+(((-1.0)*r02*sj3*x11099))+((r01*x11089))+(((-1.0)*x11093))+((r00*x11096))+(((-1.0)*sj2*x11091))+(((-1.0)*sj3*x11092*x11098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11102=((1.0)*gconst5);
CheckValue<IkReal> x11103 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11103.valid){
continue;
}
CheckValue<IkReal> x11104=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11102)))),-1);
if(!x11104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11103.value)+(((1.5707963267949)*(x11104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11105=IKsin(j4);
IkReal x11106=IKcos(j4);
IkReal x11107=(sj1*sj2);
IkReal x11108=(gconst5*sj3);
IkReal x11109=(cj3*gconst5);
IkReal x11110=(gconst4*r11);
IkReal x11111=((1.0)*cj1);
IkReal x11112=(gconst4*r01);
IkReal x11113=(cj2*sj1);
IkReal x11114=(gconst4*r21);
IkReal x11115=(gconst4*sj3);
IkReal x11116=(cj3*gconst4);
IkReal x11117=(cj2*x11111);
IkReal x11118=((1.0)*x11106);
IkReal x11119=((1.0)*x11105);
IkReal x11120=(cj3*x11105);
IkReal x11121=(cj3*x11106);
evalcond[0]=(((x11105*x11114))+(((-1.0)*gconst5*r20*x11119))+(((-1.0)*r22*x11118)));
evalcond[1]=(((x11105*x11112))+(((-1.0)*gconst5*r00*x11119))+(((-1.0)*r02*x11118)));
evalcond[2]=((1.0)+((x11105*x11110))+(((-1.0)*gconst5*r10*x11119))+(((-1.0)*r12*x11118)));
evalcond[3]=(((r10*x11115))+((r12*x11120))+((x11110*x11121))+(((-1.0)*r10*x11109*x11118))+((r11*x11108)));
evalcond[4]=((((-1.0)*r12*sj3*x11119))+((r10*x11116))+((r10*x11106*x11108))+(((-1.0)*sj3*x11110*x11118))+((r11*x11109)));
evalcond[5]=(((x11114*x11121))+((cj1*sj2))+((r22*x11120))+x11113+((r21*x11108))+(((-1.0)*r20*x11109*x11118))+((r20*x11115)));
evalcond[6]=((((-1.0)*r00*x11109*x11118))+x11107+((r02*x11120))+((x11112*x11121))+(((-1.0)*x11117))+((r00*x11115))+((r01*x11108)));
evalcond[7]=(x11107+((r21*x11109))+(((-1.0)*r22*sj3*x11119))+(((-1.0)*sj3*x11114*x11118))+((r20*x11116))+(((-1.0)*x11117))+((r20*x11106*x11108)));
evalcond[8]=((((-1.0)*x11113))+(((-1.0)*r02*sj3*x11119))+(((-1.0)*sj3*x11112*x11118))+(((-1.0)*sj2*x11111))+((r00*x11116))+((r01*x11109))+((r00*x11106*x11108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11122 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11122.valid){
continue;
}
CheckValue<IkReal> x11123=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11122.value)+(((1.5707963267949)*(x11123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11124=IKsin(j4);
IkReal x11125=IKcos(j4);
IkReal x11126=(sj1*sj2);
IkReal x11127=(gconst5*sj3);
IkReal x11128=(cj3*gconst5);
IkReal x11129=(gconst4*r11);
IkReal x11130=((1.0)*cj1);
IkReal x11131=(gconst4*r01);
IkReal x11132=(cj2*sj1);
IkReal x11133=(gconst4*r21);
IkReal x11134=(gconst4*sj3);
IkReal x11135=(cj3*gconst4);
IkReal x11136=(cj2*x11130);
IkReal x11137=((1.0)*x11125);
IkReal x11138=((1.0)*x11124);
IkReal x11139=(cj3*x11124);
IkReal x11140=(cj3*x11125);
evalcond[0]=(((x11124*x11133))+(((-1.0)*r22*x11137))+(((-1.0)*gconst5*r20*x11138)));
evalcond[1]=(((x11124*x11131))+(((-1.0)*gconst5*r00*x11138))+(((-1.0)*r02*x11137)));
evalcond[2]=((1.0)+((x11124*x11129))+(((-1.0)*gconst5*r10*x11138))+(((-1.0)*r12*x11137)));
evalcond[3]=((((-1.0)*r10*x11128*x11137))+((r10*x11134))+((r11*x11127))+((x11129*x11140))+((r12*x11139)));
evalcond[4]=(((r10*x11125*x11127))+(((-1.0)*r12*sj3*x11138))+(((-1.0)*sj3*x11129*x11137))+((r10*x11135))+((r11*x11128)));
evalcond[5]=(((r22*x11139))+((x11133*x11140))+((r21*x11127))+((cj1*sj2))+(((-1.0)*r20*x11128*x11137))+x11132+((r20*x11134)));
evalcond[6]=(((r02*x11139))+x11126+(((-1.0)*r00*x11128*x11137))+((x11131*x11140))+(((-1.0)*x11136))+((r01*x11127))+((r00*x11134)));
evalcond[7]=((((-1.0)*sj3*x11133*x11137))+((r21*x11128))+x11126+(((-1.0)*r22*sj3*x11138))+((r20*x11135))+(((-1.0)*x11136))+((r20*x11125*x11127)));
evalcond[8]=((((-1.0)*r02*sj3*x11138))+(((-1.0)*x11132))+((r00*x11125*x11127))+(((-1.0)*sj2*x11130))+(((-1.0)*sj3*x11131*x11137))+((r01*x11128))+((r00*x11135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11141=((-1.0)*r21);
IkReal x11142=((-1.0)*r20);
CheckValue<IkReal> x11144 = IKatan2WithCheck(IkReal(x11141),IkReal(x11142),IKFAST_ATAN2_MAGTHRESH);
if(!x11144.valid){
continue;
}
IkReal x11143=((1.0)*(x11144.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11143)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11142);
rxp0_2=(py*r00);
rxp1_0=(py*x11141);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11143)));
IkReal gconst4=x11141;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11145=((-1.0)*r21);
IkReal x11146=((-1.0)*r20);
CheckValue<IkReal> x11148 = IKatan2WithCheck(IkReal(x11145),IkReal(x11146),IKFAST_ATAN2_MAGTHRESH);
if(!x11148.valid){
continue;
}
IkReal x11147=((1.0)*(x11148.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11147)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11146);
rxp0_2=(py*r00);
rxp1_0=(py*x11145);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11147)));
IkReal gconst4=x11145;
IkReal gconst5=((1.0)*r20);
IkReal x11149=((1.0)*cj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=(((x11149*(r00*r00)))+(((-1.0)*x11149*(r21*r21)))+(((-1.0)*x11149)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11150=((-1.0)*r21);
IkReal x11151=((-1.0)*r20);
CheckValue<IkReal> x11153 = IKatan2WithCheck(IkReal(x11150),IkReal(x11151),IKFAST_ATAN2_MAGTHRESH);
if(!x11153.valid){
continue;
}
IkReal x11152=((1.0)*(x11153.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11152)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11151);
rxp0_2=(py*r00);
rxp1_0=(py*x11150);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11152)));
IkReal gconst4=x11150;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11154=((-1.0)*r21);
IkReal x11155=((-1.0)*r20);
CheckValue<IkReal> x11157 = IKatan2WithCheck(IkReal(x11154),IkReal(x11155),IKFAST_ATAN2_MAGTHRESH);
if(!x11157.valid){
continue;
}
IkReal x11156=((1.0)*(x11157.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11156)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11155);
rxp0_2=(py*r00);
rxp1_0=(py*x11154);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11156)));
IkReal gconst4=x11154;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11158=((-1.0)*r21);
IkReal x11159=((-1.0)*r20);
CheckValue<IkReal> x11161 = IKatan2WithCheck(IkReal(x11158),IkReal(x11159),IKFAST_ATAN2_MAGTHRESH);
if(!x11161.valid){
continue;
}
IkReal x11160=((1.0)*(x11161.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11160)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11159);
rxp0_2=(py*r00);
rxp1_0=(py*x11158);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11160)));
IkReal gconst4=x11158;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11162=((-1.0)*r21);
IkReal x11163=((-1.0)*r20);
CheckValue<IkReal> x11165 = IKatan2WithCheck(IkReal(x11162),IkReal(x11163),IKFAST_ATAN2_MAGTHRESH);
if(!x11165.valid){
continue;
}
IkReal x11164=((1.0)*(x11165.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11164)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11163);
rxp0_2=(py*r00);
rxp1_0=(py*x11162);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11164)));
IkReal gconst4=x11162;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11168=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11168.valid){
continue;
}
IkReal x11166=x11168.value;
IkReal x11167=(cj0*x11166);
cj4array[0]=((((-1.0)*cj1*cj2*x11167))+((sj1*sj2*x11167)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11169=IKsin(j4);
IkReal x11170=IKcos(j4);
IkReal x11171=(gconst4*x11169);
IkReal x11172=((1.0)*x11170);
IkReal x11173=((1.0)*gconst5*x11169);
evalcond[0]=(r12*x11169);
evalcond[1]=((((-1.0)*r12*x11172))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11173))+((r21*x11171)));
evalcond[3]=((((-1.0)*r00*x11173))+((r01*x11171)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((gconst4*r21*x11170))+(((-1.0)*gconst5*r20*x11172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11176=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11176.valid){
continue;
}
IkReal x11174=x11176.value;
IkReal x11175=((1.0)*x11174);
cj4array[0]=((((-1.0)*cj2*sj1*x11175))+(((-1.0)*cj1*sj2*x11175)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11177=IKsin(j4);
IkReal x11178=IKcos(j4);
IkReal x11179=(gconst4*r01);
IkReal x11180=((1.0)*cj0);
IkReal x11181=((1.0)*gconst5*r00);
evalcond[0]=(r12*x11177);
evalcond[1]=((((-1.0)*x11180))+(((-1.0)*r12*x11178)));
evalcond[2]=((((-1.0)*gconst5*r20*x11177))+((gconst4*r21*x11177)));
evalcond[3]=(((x11177*x11179))+(((-1.0)*x11177*x11181)));
evalcond[4]=(((x11178*x11179))+(((-1.0)*sj1*sj2*x11180))+((cj0*cj1*cj2))+(((-1.0)*x11178*x11181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11182=IKPowWithIntegerCheck(r12,-1);
if(!x11182.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11182.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11183=IKsin(j4);
IkReal x11184=IKcos(j4);
IkReal x11185=(gconst4*r01);
IkReal x11186=(gconst4*r21);
IkReal x11187=((1.0)*gconst5*r00);
IkReal x11188=((1.0)*gconst5*r20);
evalcond[0]=(r12*x11183);
evalcond[1]=((((-1.0)*x11183*x11188))+((x11183*x11186)));
evalcond[2]=((((-1.0)*x11183*x11187))+((x11183*x11185)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11184*x11188))+((x11184*x11186)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x11184*x11187))+((cj0*cj1*cj2))+((x11184*x11185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11189=((-1.0)*r21);
IkReal x11190=((-1.0)*r20);
CheckValue<IkReal> x11192 = IKatan2WithCheck(IkReal(x11189),IkReal(x11190),IKFAST_ATAN2_MAGTHRESH);
if(!x11192.valid){
continue;
}
IkReal x11191=((1.0)*(x11192.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11191)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11190);
rxp0_2=(py*r00);
rxp1_0=(py*x11189);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11191)));
IkReal gconst4=x11189;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11193=((-1.0)*r21);
IkReal x11194=((-1.0)*r20);
CheckValue<IkReal> x11196 = IKatan2WithCheck(IkReal(x11193),IkReal(x11194),IKFAST_ATAN2_MAGTHRESH);
if(!x11196.valid){
continue;
}
IkReal x11195=((1.0)*(x11196.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11195)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11194);
rxp0_2=(py*r00);
rxp1_0=(py*x11193);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11195)));
IkReal gconst4=x11193;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11197=((-1.0)*r21);
IkReal x11198=((-1.0)*r20);
CheckValue<IkReal> x11200 = IKatan2WithCheck(IkReal(x11197),IkReal(x11198),IKFAST_ATAN2_MAGTHRESH);
if(!x11200.valid){
continue;
}
IkReal x11199=((1.0)*(x11200.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11199)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11198);
rxp0_2=(py*r00);
rxp1_0=(py*x11197);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11199)));
IkReal gconst4=x11197;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11203=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11203.valid){
continue;
}
IkReal x11201=x11203.value;
IkReal x11202=(cj0*x11201);
cj4array[0]=(((sj1*sj2*x11202))+(((-1.0)*cj1*cj2*x11202)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11204=IKsin(j4);
IkReal x11205=IKcos(j4);
IkReal x11206=(gconst4*x11204);
IkReal x11207=((1.0)*x11205);
IkReal x11208=((1.0)*gconst5*x11204);
evalcond[0]=((-1.0)*r12*x11204);
evalcond[1]=((((-1.0)*r12*x11207))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11206))+(((-1.0)*r20*x11208)));
evalcond[3]=((((-1.0)*r00*x11208))+((r01*x11206)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11207))+((gconst5*r20*x11205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11211=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11211.valid){
continue;
}
IkReal x11209=x11211.value;
IkReal x11210=((1.0)*x11209);
cj4array[0]=((((-1.0)*cj2*sj1*x11210))+(((-1.0)*cj1*sj2*x11210)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11212=IKsin(j4);
IkReal x11213=IKcos(j4);
IkReal x11214=(gconst5*r00);
IkReal x11215=(gconst4*r01);
IkReal x11216=((1.0)*cj0);
IkReal x11217=((1.0)*x11212);
IkReal x11218=((1.0)*x11213);
evalcond[0]=((-1.0)*r12*x11212);
evalcond[1]=((((-1.0)*x11216))+(((-1.0)*r12*x11218)));
evalcond[2]=((((-1.0)*gconst5*r20*x11217))+((gconst4*r21*x11212)));
evalcond[3]=(((x11212*x11215))+(((-1.0)*x11214*x11217)));
evalcond[4]=((((-1.0)*sj1*sj2*x11216))+((cj0*cj1*cj2))+(((-1.0)*x11215*x11218))+((x11213*x11214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11219=IKPowWithIntegerCheck(r12,-1);
if(!x11219.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11219.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11220=IKsin(j4);
IkReal x11221=IKcos(j4);
IkReal x11222=(gconst5*r00);
IkReal x11223=(gconst5*r20);
IkReal x11224=(gconst4*r01);
IkReal x11225=(gconst4*r21);
IkReal x11226=((1.0)*x11220);
IkReal x11227=((1.0)*x11221);
evalcond[0]=((-1.0)*r12*x11220);
evalcond[1]=(((x11220*x11225))+(((-1.0)*x11223*x11226)));
evalcond[2]=(((x11220*x11224))+(((-1.0)*x11222*x11226)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x11225*x11227))+((cj1*sj2))+((x11221*x11223)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((x11221*x11222))+((cj0*cj1*cj2))+(((-1.0)*x11224*x11227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11228=((-1.0)*r21);
IkReal x11229=((-1.0)*r20);
CheckValue<IkReal> x11231 = IKatan2WithCheck(IkReal(x11228),IkReal(x11229),IKFAST_ATAN2_MAGTHRESH);
if(!x11231.valid){
continue;
}
IkReal x11230=((1.0)*(x11231.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11230)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11229);
rxp0_2=(py*r00);
rxp1_0=(py*x11228);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11230)));
IkReal gconst4=x11228;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11232=((-1.0)*r21);
IkReal x11233=((-1.0)*r20);
CheckValue<IkReal> x11235 = IKatan2WithCheck(IkReal(x11232),IkReal(x11233),IKFAST_ATAN2_MAGTHRESH);
if(!x11235.valid){
continue;
}
IkReal x11234=((1.0)*(x11235.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11234)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11233);
rxp0_2=(py*r00);
rxp1_0=(py*x11232);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11234)));
IkReal gconst4=x11232;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11236=((-1.0)*r21);
IkReal x11237=((-1.0)*r20);
CheckValue<IkReal> x11239 = IKatan2WithCheck(IkReal(x11236),IkReal(x11237),IKFAST_ATAN2_MAGTHRESH);
if(!x11239.valid){
continue;
}
IkReal x11238=((1.0)*(x11239.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11238)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11237);
rxp0_2=(py*r00);
rxp1_0=(py*x11236);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11238)));
IkReal gconst4=x11236;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11242=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11242.valid){
continue;
}
IkReal x11240=x11242.value;
IkReal x11241=((1.0)*cj0*x11240);
cj4array[0]=((((-1.0)*cj1*sj2*x11241))+(((-1.0)*cj2*sj1*x11241)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11243=IKsin(j4);
IkReal x11244=IKcos(j4);
IkReal x11245=(gconst4*x11243);
IkReal x11246=((1.0)*x11244);
IkReal x11247=((1.0)*gconst5*x11243);
evalcond[0]=((-1.0)*r12*x11243);
evalcond[1]=((((-1.0)*r12*x11246))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11247))+((r21*x11245)));
evalcond[3]=((((-1.0)*r00*x11247))+((r01*x11245)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst5*r20*x11244))+(((-1.0)*gconst4*r21*x11246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11249=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11249.valid){
continue;
}
IkReal x11248=x11249.value;
cj4array[0]=(((cj1*cj2*x11248))+(((-1.0)*sj1*sj2*x11248)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11250=IKsin(j4);
IkReal x11251=IKcos(j4);
IkReal x11252=(gconst5*r00);
IkReal x11253=(gconst4*r01);
IkReal x11254=((1.0)*x11250);
IkReal x11255=((1.0)*x11251);
evalcond[0]=((-1.0)*r12*x11250);
evalcond[1]=((((-1.0)*r12*x11255))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst5*r20*x11254))+((gconst4*r21*x11250)));
evalcond[3]=(((x11250*x11253))+(((-1.0)*x11252*x11254)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*x11253*x11255))+((cj0*cj1*sj2))+((x11251*x11252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11256=IKPowWithIntegerCheck(r12,-1);
if(!x11256.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11256.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11257=IKsin(j4);
IkReal x11258=IKcos(j4);
IkReal x11259=(gconst5*r00);
IkReal x11260=(gconst5*r20);
IkReal x11261=((1.0)*x11257);
IkReal x11262=(gconst4*x11257);
IkReal x11263=((1.0)*gconst4*x11258);
evalcond[0]=((-1.0)*r12*x11257);
evalcond[1]=((((-1.0)*x11260*x11261))+((r21*x11262)));
evalcond[2]=((((-1.0)*x11259*x11261))+((r01*x11262)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11258*x11260))+(((-1.0)*r21*x11263)));
evalcond[4]=(((x11258*x11259))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*r01*x11263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11264=((-1.0)*r21);
IkReal x11265=((-1.0)*r20);
CheckValue<IkReal> x11267 = IKatan2WithCheck(IkReal(x11264),IkReal(x11265),IKFAST_ATAN2_MAGTHRESH);
if(!x11267.valid){
continue;
}
IkReal x11266=((1.0)*(x11267.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11266)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11265);
rxp0_2=(py*r00);
rxp1_0=(py*x11264);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11266)));
IkReal gconst4=x11264;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11268=((-1.0)*r21);
IkReal x11269=((-1.0)*r20);
CheckValue<IkReal> x11271 = IKatan2WithCheck(IkReal(x11268),IkReal(x11269),IKFAST_ATAN2_MAGTHRESH);
if(!x11271.valid){
continue;
}
IkReal x11270=((1.0)*(x11271.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11270)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11269);
rxp0_2=(py*r00);
rxp1_0=(py*x11268);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11270)));
IkReal gconst4=x11268;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11272=((-1.0)*r21);
IkReal x11273=((-1.0)*r20);
CheckValue<IkReal> x11275 = IKatan2WithCheck(IkReal(x11272),IkReal(x11273),IKFAST_ATAN2_MAGTHRESH);
if(!x11275.valid){
continue;
}
IkReal x11274=((1.0)*(x11275.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11274)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11273);
rxp0_2=(py*r00);
rxp1_0=(py*x11272);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11274)));
IkReal gconst4=x11272;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11278=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11278.valid){
continue;
}
IkReal x11276=x11278.value;
IkReal x11277=((1.0)*cj0*x11276);
cj4array[0]=((((-1.0)*cj2*sj1*x11277))+(((-1.0)*cj1*sj2*x11277)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11279=IKsin(j4);
IkReal x11280=IKcos(j4);
IkReal x11281=(gconst4*x11279);
IkReal x11282=((1.0)*x11280);
IkReal x11283=((1.0)*gconst5*x11279);
evalcond[0]=(r12*x11279);
evalcond[1]=((((-1.0)*r12*x11282))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11281))+(((-1.0)*r20*x11283)));
evalcond[3]=((((-1.0)*r00*x11283))+((r01*x11281)));
evalcond[4]=((((-1.0)*gconst5*r20*x11282))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst4*r21*x11280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11285=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11285.valid){
continue;
}
IkReal x11284=x11285.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11284))+((cj1*cj2*x11284)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11286=IKsin(j4);
IkReal x11287=IKcos(j4);
IkReal x11288=(gconst4*r01);
IkReal x11289=((1.0)*gconst5*r00);
evalcond[0]=(r12*x11286);
evalcond[1]=((((-1.0)*r12*x11287))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst5*r20*x11286))+((gconst4*r21*x11286)));
evalcond[3]=((((-1.0)*x11286*x11289))+((x11286*x11288)));
evalcond[4]=(((x11287*x11288))+(((-1.0)*x11287*x11289))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11290=IKPowWithIntegerCheck(r12,-1);
if(!x11290.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11290.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11291=IKsin(j4);
IkReal x11292=IKcos(j4);
IkReal x11293=((1.0)*gconst5*r00);
IkReal x11294=(gconst4*x11291);
IkReal x11295=(gconst4*x11292);
IkReal x11296=((1.0)*gconst5*r20);
evalcond[0]=(r12*x11291);
evalcond[1]=((((-1.0)*x11291*x11296))+((r21*x11294)));
evalcond[2]=(((r01*x11294))+(((-1.0)*x11291*x11293)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11295))+(((-1.0)*x11292*x11296)));
evalcond[4]=(((r01*x11295))+((cj0*cj2*sj1))+(((-1.0)*x11292*x11293))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11298=IKPowWithIntegerCheck(r12,-1);
if(!x11298.valid){
continue;
}
IkReal x11297=x11298.value;
CheckValue<IkReal> x11299=IKPowWithIntegerCheck(sj3,-1);
if(!x11299.valid){
continue;
}
if( IKabs((x11297*(x11299.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11297)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11297*(x11299.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11297))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11297*(x11299.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11297));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11300=IKsin(j4);
IkReal x11301=IKcos(j4);
IkReal x11302=((1.0)*r12);
IkReal x11303=(cj2*sj0);
IkReal x11304=(sj1*sj2);
IkReal x11305=(gconst4*sj3);
IkReal x11306=(cj1*cj2);
IkReal x11307=(gconst4*r01);
IkReal x11308=(cj2*sj1);
IkReal x11309=(gconst4*r21);
IkReal x11310=((1.0)*gconst5);
IkReal x11311=(gconst5*sj3);
IkReal x11312=(cj3*gconst5);
IkReal x11313=(cj3*gconst4);
IkReal x11314=(cj1*sj2);
IkReal x11315=((1.0)*cj0);
IkReal x11316=(cj3*x11301);
IkReal x11317=((1.0)*x11301);
IkReal x11318=(x11301*x11311);
evalcond[0]=((((-1.0)*x11301*x11302))+(((-1.0)*x11315)));
evalcond[1]=((((-1.0)*r20*x11300*x11310))+((x11300*x11309)));
evalcond[2]=(sj0+(((-1.0)*r00*x11300*x11310))+((x11300*x11307)));
evalcond[3]=(((sj0*x11314))+((sj1*x11303))+(((-1.0)*sj3*x11300*x11302)));
evalcond[4]=((((-1.0)*sj0*x11304))+((cj3*r12*x11300))+((cj1*x11303)));
evalcond[5]=(((r20*x11305))+(((-1.0)*r20*x11310*x11316))+((r21*x11311))+x11308+x11314+((x11309*x11316)));
evalcond[6]=(((r21*x11312))+x11304+(((-1.0)*x11306))+((r20*x11313))+((r20*x11318))+(((-1.0)*r21*x11305*x11317)));
evalcond[7]=(((cj0*x11314))+((r01*x11312))+((r00*x11313))+((r00*x11318))+((cj0*x11308))+(((-1.0)*r01*x11305*x11317)));
evalcond[8]=((((-1.0)*x11304*x11315))+((r00*x11305))+((x11307*x11316))+((r01*x11311))+(((-1.0)*r00*x11310*x11316))+((cj0*x11306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11319=((1.0)*gconst5);
CheckValue<IkReal> x11320=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*r00*x11319))),-1);
if(!x11320.valid){
continue;
}
CheckValue<IkReal> x11321=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11319))),-1);
if(!x11321.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11320.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11321.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11319)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11320.value)))+IKsqr(((x11321.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11319))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11320.value)), ((x11321.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11319))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11322=IKsin(j4);
IkReal x11323=IKcos(j4);
IkReal x11324=((1.0)*r12);
IkReal x11325=(cj2*sj0);
IkReal x11326=(sj1*sj2);
IkReal x11327=(gconst4*sj3);
IkReal x11328=(cj1*cj2);
IkReal x11329=(gconst4*r01);
IkReal x11330=(cj2*sj1);
IkReal x11331=(gconst4*r21);
IkReal x11332=((1.0)*gconst5);
IkReal x11333=(gconst5*sj3);
IkReal x11334=(cj3*gconst5);
IkReal x11335=(cj3*gconst4);
IkReal x11336=(cj1*sj2);
IkReal x11337=((1.0)*cj0);
IkReal x11338=(cj3*x11323);
IkReal x11339=((1.0)*x11323);
IkReal x11340=(x11323*x11333);
evalcond[0]=((((-1.0)*x11337))+(((-1.0)*x11323*x11324)));
evalcond[1]=(((x11322*x11331))+(((-1.0)*r20*x11322*x11332)));
evalcond[2]=(sj0+(((-1.0)*r00*x11322*x11332))+((x11322*x11329)));
evalcond[3]=(((sj1*x11325))+((sj0*x11336))+(((-1.0)*sj3*x11322*x11324)));
evalcond[4]=((((-1.0)*sj0*x11326))+((cj3*r12*x11322))+((cj1*x11325)));
evalcond[5]=(x11330+x11336+((x11331*x11338))+((r21*x11333))+(((-1.0)*r20*x11332*x11338))+((r20*x11327)));
evalcond[6]=(x11326+((r20*x11335))+((r20*x11340))+((r21*x11334))+(((-1.0)*r21*x11327*x11339))+(((-1.0)*x11328)));
evalcond[7]=((((-1.0)*r01*x11327*x11339))+((cj0*x11330))+((cj0*x11336))+((r00*x11340))+((r01*x11334))+((r00*x11335)));
evalcond[8]=(((x11329*x11338))+((cj0*x11328))+((r01*x11333))+((r00*x11327))+(((-1.0)*r00*x11332*x11338))+(((-1.0)*x11326*x11337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11341=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11341.valid){
continue;
}
CheckValue<IkReal> x11342=IKPowWithIntegerCheck(r12,-1);
if(!x11342.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11341.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11342.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11341.value)))+IKsqr(((-1.0)*cj0*(x11342.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11341.value)), ((-1.0)*cj0*(x11342.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11343=IKsin(j4);
IkReal x11344=IKcos(j4);
IkReal x11345=((1.0)*r12);
IkReal x11346=(cj2*sj0);
IkReal x11347=(sj1*sj2);
IkReal x11348=(gconst4*sj3);
IkReal x11349=(cj1*cj2);
IkReal x11350=(gconst4*r01);
IkReal x11351=(cj2*sj1);
IkReal x11352=(gconst4*r21);
IkReal x11353=((1.0)*gconst5);
IkReal x11354=(gconst5*sj3);
IkReal x11355=(cj3*gconst5);
IkReal x11356=(cj3*gconst4);
IkReal x11357=(cj1*sj2);
IkReal x11358=((1.0)*cj0);
IkReal x11359=(cj3*x11344);
IkReal x11360=((1.0)*x11344);
IkReal x11361=(x11344*x11354);
evalcond[0]=((((-1.0)*x11358))+(((-1.0)*x11344*x11345)));
evalcond[1]=((((-1.0)*r20*x11343*x11353))+((x11343*x11352)));
evalcond[2]=(sj0+((x11343*x11350))+(((-1.0)*r00*x11343*x11353)));
evalcond[3]=(((sj0*x11357))+(((-1.0)*sj3*x11343*x11345))+((sj1*x11346)));
evalcond[4]=((((-1.0)*sj0*x11347))+((cj1*x11346))+((cj3*r12*x11343)));
evalcond[5]=(x11351+x11357+((r20*x11348))+((x11352*x11359))+((r21*x11354))+(((-1.0)*r20*x11353*x11359)));
evalcond[6]=((((-1.0)*r21*x11348*x11360))+x11347+((r20*x11356))+(((-1.0)*x11349))+((r21*x11355))+((r20*x11361)));
evalcond[7]=(((r00*x11361))+(((-1.0)*r01*x11348*x11360))+((cj0*x11351))+((cj0*x11357))+((r01*x11355))+((r00*x11356)));
evalcond[8]=((((-1.0)*r00*x11353*x11359))+((cj0*x11349))+(((-1.0)*x11347*x11358))+((r01*x11354))+((r00*x11348))+((x11350*x11359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11362=((1.0)*gconst5);
CheckValue<IkReal> x11363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11362))+(((-1.0)*gconst4*r20)))),-1);
if(!x11363.valid){
continue;
}
CheckValue<IkReal> x11364 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11362))+(((-1.0)*r10*sj0*x11362))+((cj0*gconst4*r01))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11363.value)))+(x11364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11365=IKsin(j4);
IkReal x11366=IKcos(j4);
IkReal x11367=(gconst4*r11);
IkReal x11368=(cj2*sj0);
IkReal x11369=(sj1*sj2);
IkReal x11370=(gconst4*sj3);
IkReal x11371=(gconst5*r10);
IkReal x11372=(cj1*cj2);
IkReal x11373=(gconst4*r01);
IkReal x11374=(cj2*sj1);
IkReal x11375=(gconst4*r21);
IkReal x11376=(gconst5*r00);
IkReal x11377=(gconst5*sj3);
IkReal x11378=(cj3*gconst5);
IkReal x11379=(cj3*gconst4);
IkReal x11380=(cj1*sj2);
IkReal x11381=((1.0)*cj0);
IkReal x11382=((1.0)*x11366);
IkReal x11383=((1.0)*x11365);
IkReal x11384=(cj3*x11365);
IkReal x11385=(cj3*x11366);
IkReal x11386=(x11366*x11377);
evalcond[0]=((((-1.0)*gconst5*r20*x11383))+(((-1.0)*r22*x11382))+((x11365*x11375)));
evalcond[1]=(sj0+(((-1.0)*r02*x11382))+(((-1.0)*x11376*x11383))+((x11365*x11373)));
evalcond[2]=((((-1.0)*x11381))+(((-1.0)*r12*x11382))+((x11365*x11367))+(((-1.0)*x11371*x11383)));
evalcond[3]=(((r20*x11370))+((x11375*x11385))+((r21*x11377))+x11374+x11380+((r22*x11384))+(((-1.0)*r20*x11378*x11382)));
evalcond[4]=(((r20*x11379))+(((-1.0)*x11372))+((r21*x11378))+((r20*x11386))+x11369+(((-1.0)*r21*x11370*x11382))+(((-1.0)*r22*sj3*x11383)));
evalcond[5]=(((r00*x11379))+((cj0*x11380))+((r01*x11378))+(((-1.0)*r02*sj3*x11383))+(((-1.0)*r01*x11370*x11382))+((cj0*x11374))+((sj3*x11366*x11376)));
evalcond[6]=(((r02*x11384))+((r00*x11370))+((x11373*x11385))+((r01*x11377))+(((-1.0)*x11369*x11381))+((cj0*x11372))+(((-1.0)*cj3*x11376*x11382)));
evalcond[7]=(((sj1*x11368))+(((-1.0)*r12*sj3*x11383))+(((-1.0)*sj3*x11367*x11382))+((r10*x11379))+((sj0*x11380))+((r11*x11378))+((sj3*x11366*x11371)));
evalcond[8]=(((r12*x11384))+(((-1.0)*sj0*x11369))+((x11367*x11385))+((cj1*x11368))+((r10*x11370))+((r11*x11377))+(((-1.0)*cj3*x11371*x11382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11387=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11387.valid){
continue;
}
CheckValue<IkReal> x11388 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11387.value)))+(x11388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11389=IKsin(j4);
IkReal x11390=IKcos(j4);
IkReal x11391=(gconst4*r11);
IkReal x11392=(cj2*sj0);
IkReal x11393=(sj1*sj2);
IkReal x11394=(gconst4*sj3);
IkReal x11395=(gconst5*r10);
IkReal x11396=(cj1*cj2);
IkReal x11397=(gconst4*r01);
IkReal x11398=(cj2*sj1);
IkReal x11399=(gconst4*r21);
IkReal x11400=(gconst5*r00);
IkReal x11401=(gconst5*sj3);
IkReal x11402=(cj3*gconst5);
IkReal x11403=(cj3*gconst4);
IkReal x11404=(cj1*sj2);
IkReal x11405=((1.0)*cj0);
IkReal x11406=((1.0)*x11390);
IkReal x11407=((1.0)*x11389);
IkReal x11408=(cj3*x11389);
IkReal x11409=(cj3*x11390);
IkReal x11410=(x11390*x11401);
evalcond[0]=((((-1.0)*gconst5*r20*x11407))+((x11389*x11399))+(((-1.0)*r22*x11406)));
evalcond[1]=(sj0+(((-1.0)*r02*x11406))+(((-1.0)*x11400*x11407))+((x11389*x11397)));
evalcond[2]=((((-1.0)*x11405))+((x11389*x11391))+(((-1.0)*r12*x11406))+(((-1.0)*x11395*x11407)));
evalcond[3]=(((r21*x11401))+x11404+((r20*x11394))+((r22*x11408))+x11398+(((-1.0)*r20*x11402*x11406))+((x11399*x11409)));
evalcond[4]=((((-1.0)*r22*sj3*x11407))+((r21*x11402))+x11393+(((-1.0)*r21*x11394*x11406))+(((-1.0)*x11396))+((r20*x11403))+((r20*x11410)));
evalcond[5]=(((cj0*x11404))+(((-1.0)*r02*sj3*x11407))+((sj3*x11390*x11400))+((r01*x11402))+((r00*x11403))+(((-1.0)*r01*x11394*x11406))+((cj0*x11398)));
evalcond[6]=(((r00*x11394))+(((-1.0)*cj3*x11400*x11406))+((r02*x11408))+(((-1.0)*x11393*x11405))+((x11397*x11409))+((r01*x11401))+((cj0*x11396)));
evalcond[7]=(((sj3*x11390*x11395))+((r10*x11403))+(((-1.0)*r12*sj3*x11407))+((r11*x11402))+((sj1*x11392))+(((-1.0)*sj3*x11391*x11406))+((sj0*x11404)));
evalcond[8]=(((r12*x11408))+((r11*x11401))+((cj1*x11392))+((r10*x11394))+(((-1.0)*sj0*x11393))+(((-1.0)*cj3*x11395*x11406))+((x11391*x11409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11411=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11411.valid){
continue;
}
CheckValue<IkReal> x11412 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11411.value)))+(x11412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11413=IKsin(j4);
IkReal x11414=IKcos(j4);
IkReal x11415=(gconst4*r11);
IkReal x11416=(cj2*sj0);
IkReal x11417=(sj1*sj2);
IkReal x11418=(gconst4*sj3);
IkReal x11419=(gconst5*r10);
IkReal x11420=(cj1*cj2);
IkReal x11421=(gconst4*r01);
IkReal x11422=(cj2*sj1);
IkReal x11423=(gconst4*r21);
IkReal x11424=(gconst5*r00);
IkReal x11425=(gconst5*sj3);
IkReal x11426=(cj3*gconst5);
IkReal x11427=(cj3*gconst4);
IkReal x11428=(cj1*sj2);
IkReal x11429=((1.0)*cj0);
IkReal x11430=((1.0)*x11414);
IkReal x11431=((1.0)*x11413);
IkReal x11432=(cj3*x11413);
IkReal x11433=(cj3*x11414);
IkReal x11434=(x11414*x11425);
evalcond[0]=((((-1.0)*gconst5*r20*x11431))+(((-1.0)*r22*x11430))+((x11413*x11423)));
evalcond[1]=(sj0+(((-1.0)*x11424*x11431))+(((-1.0)*r02*x11430))+((x11413*x11421)));
evalcond[2]=((((-1.0)*r12*x11430))+(((-1.0)*x11419*x11431))+(((-1.0)*x11429))+((x11413*x11415)));
evalcond[3]=(x11428+x11422+((x11423*x11433))+((r21*x11425))+((r22*x11432))+((r20*x11418))+(((-1.0)*r20*x11426*x11430)));
evalcond[4]=(((r20*x11434))+((r20*x11427))+x11417+((r21*x11426))+(((-1.0)*x11420))+(((-1.0)*r21*x11418*x11430))+(((-1.0)*r22*sj3*x11431)));
evalcond[5]=(((sj3*x11414*x11424))+(((-1.0)*r01*x11418*x11430))+((cj0*x11428))+((cj0*x11422))+((r01*x11426))+((r00*x11427))+(((-1.0)*r02*sj3*x11431)));
evalcond[6]=((((-1.0)*x11417*x11429))+((r02*x11432))+(((-1.0)*cj3*x11424*x11430))+((r00*x11418))+((cj0*x11420))+((r01*x11425))+((x11421*x11433)));
evalcond[7]=(((sj3*x11414*x11419))+((r10*x11427))+((sj0*x11428))+(((-1.0)*r12*sj3*x11431))+((sj1*x11416))+((r11*x11426))+(((-1.0)*sj3*x11415*x11430)));
evalcond[8]=((((-1.0)*cj3*x11419*x11430))+((r10*x11418))+(((-1.0)*sj0*x11417))+((cj1*x11416))+((r11*x11425))+((r12*x11432))+((x11415*x11433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11436 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11436)==0){
continue;
}
IkReal x11435=pow(x11436,-0.5);
CheckValue<IkReal> x11437 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11437.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11437.value));
IkReal gconst7=((-1.0)*r01*x11435);
IkReal gconst8=(r00*x11435);
CheckValue<IkReal> x11438 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11438.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11438.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11441 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11441.valid){
continue;
}
IkReal x11439=((-1.0)*(x11441.value));
IkReal x11440=x11435;
sj5=gconst7;
cj5=gconst8;
j5=x11439;
IkReal gconst6=x11439;
IkReal gconst7=((-1.0)*r01*x11440);
IkReal gconst8=(r00*x11440);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11442=((1.0)*gconst8);
CheckValue<IkReal> x11443 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11442))+((cj0*gconst7*r01))+((gconst7*r11*sj0))+(((-1.0)*r10*sj0*x11442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11443.valid){
continue;
}
CheckValue<IkReal> x11444=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11442))+(((-1.0)*gconst7*r20)))),-1);
if(!x11444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11443.value)+(((1.5707963267949)*(x11444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11445=IKsin(j4);
IkReal x11446=IKcos(j4);
IkReal x11447=(gconst7*sj3);
IkReal x11448=(cj3*gconst8);
IkReal x11449=(cj2*sj0);
IkReal x11450=(cj3*gconst7);
IkReal x11451=(sj1*sj2);
IkReal x11452=(cj1*cj2);
IkReal x11453=(cj2*sj1);
IkReal x11454=((1.0)*cj0);
IkReal x11455=(gconst8*sj3);
IkReal x11456=(cj1*sj2);
IkReal x11457=((1.0)*x11446);
IkReal x11458=((1.0)*x11445);
IkReal x11459=(cj3*x11445);
IkReal x11460=(gconst7*x11445);
IkReal x11461=(x11446*x11455);
evalcond[0]=((((-1.0)*gconst8*r20*x11458))+((r21*x11460))+(((-1.0)*r22*x11457)));
evalcond[1]=(((r01*x11460))+sj0+(((-1.0)*r02*x11457))+(((-1.0)*gconst8*r00*x11458)));
evalcond[2]=((((-1.0)*gconst8*r10*x11458))+((r11*x11460))+(((-1.0)*r12*x11457))+(((-1.0)*x11454)));
evalcond[3]=(x11456+x11453+(((-1.0)*r20*x11448*x11457))+((r21*x11446*x11450))+((r21*x11455))+((r20*x11447))+((r22*x11459)));
evalcond[4]=(x11451+((r20*x11450))+(((-1.0)*x11452))+(((-1.0)*r21*x11447*x11457))+((r20*x11461))+(((-1.0)*r22*sj3*x11458))+((r21*x11448)));
evalcond[5]=(((cj0*x11456))+((cj0*x11453))+(((-1.0)*r01*x11447*x11457))+((r00*x11450))+(((-1.0)*r02*sj3*x11458))+((r01*x11448))+((r00*x11461)));
evalcond[6]=(((r00*x11447))+((cj0*x11452))+((r02*x11459))+(((-1.0)*r00*x11448*x11457))+((r01*x11446*x11450))+((r01*x11455))+(((-1.0)*x11451*x11454)));
evalcond[7]=(((r10*x11450))+((sj0*x11456))+(((-1.0)*r12*sj3*x11458))+(((-1.0)*r11*x11447*x11457))+((r11*x11448))+((r10*x11461))+((sj1*x11449)));
evalcond[8]=(((cj1*x11449))+((r11*x11446*x11450))+(((-1.0)*sj0*x11451))+((r10*x11447))+((r12*x11459))+((r11*x11455))+(((-1.0)*r10*x11448*x11457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11462 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11462.valid){
continue;
}
CheckValue<IkReal> x11463=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x11463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11462.value)+(((1.5707963267949)*(x11463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11464=IKsin(j4);
IkReal x11465=IKcos(j4);
IkReal x11466=(gconst7*sj3);
IkReal x11467=(cj3*gconst8);
IkReal x11468=(cj2*sj0);
IkReal x11469=(cj3*gconst7);
IkReal x11470=(sj1*sj2);
IkReal x11471=(cj1*cj2);
IkReal x11472=(cj2*sj1);
IkReal x11473=((1.0)*cj0);
IkReal x11474=(gconst8*sj3);
IkReal x11475=(cj1*sj2);
IkReal x11476=((1.0)*x11465);
IkReal x11477=((1.0)*x11464);
IkReal x11478=(cj3*x11464);
IkReal x11479=(gconst7*x11464);
IkReal x11480=(x11465*x11474);
evalcond[0]=((((-1.0)*gconst8*r20*x11477))+(((-1.0)*r22*x11476))+((r21*x11479)));
evalcond[1]=(sj0+(((-1.0)*gconst8*r00*x11477))+(((-1.0)*r02*x11476))+((r01*x11479)));
evalcond[2]=((((-1.0)*r12*x11476))+((r11*x11479))+(((-1.0)*x11473))+(((-1.0)*gconst8*r10*x11477)));
evalcond[3]=(((r21*x11465*x11469))+x11475+x11472+((r22*x11478))+((r20*x11466))+((r21*x11474))+(((-1.0)*r20*x11467*x11476)));
evalcond[4]=((((-1.0)*x11471))+((r20*x11480))+x11470+(((-1.0)*r21*x11466*x11476))+(((-1.0)*r22*sj3*x11477))+((r20*x11469))+((r21*x11467)));
evalcond[5]=(((r01*x11467))+(((-1.0)*r02*sj3*x11477))+(((-1.0)*r01*x11466*x11476))+((r00*x11480))+((cj0*x11475))+((cj0*x11472))+((r00*x11469)));
evalcond[6]=((((-1.0)*x11470*x11473))+((cj0*x11471))+((r02*x11478))+(((-1.0)*r00*x11467*x11476))+((r01*x11465*x11469))+((r00*x11466))+((r01*x11474)));
evalcond[7]=((((-1.0)*r11*x11466*x11476))+((r11*x11467))+((r10*x11469))+(((-1.0)*r12*sj3*x11477))+((sj0*x11475))+((sj1*x11468))+((r10*x11480)));
evalcond[8]=((((-1.0)*sj0*x11470))+((r11*x11465*x11469))+((r12*x11478))+((cj1*x11468))+((r11*x11474))+((r10*x11466))+(((-1.0)*r10*x11467*x11476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11482 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11482)==0){
continue;
}
IkReal x11481=pow(x11482,-0.5);
CheckValue<IkReal> x11483 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11483.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11483.value))));
IkReal gconst10=((1.0)*r01*x11481);
IkReal gconst11=((-1.0)*r00*x11481);
CheckValue<IkReal> x11484 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11484.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11484.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11487 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11487.valid){
continue;
}
IkReal x11485=((1.0)*(x11487.value));
IkReal x11486=x11481;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11485)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11485)));
IkReal gconst10=((1.0)*r01*x11486);
IkReal gconst11=((-1.0)*r00*x11486);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x11490 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11490.valid){
continue;
}
IkReal x11488=((1.0)*(x11490.value));
IkReal x11489=x11481;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11488)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11488)));
IkReal gconst10=((1.0)*r01*x11489);
IkReal gconst11=((-1.0)*r00*x11489);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11493 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11493.valid){
continue;
}
IkReal x11491=((1.0)*(x11493.value));
IkReal x11492=x11481;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11491)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11491)));
IkReal gconst10=((1.0)*r01*x11492);
IkReal gconst11=((-1.0)*r00*x11492);
IkReal x11494=r02*r02;
IkReal x11495=(r12*sj0);
IkReal x11496=x11481;
IkReal x11497=(cj0*x11496);
j4eval[0]=((IKabs((((x11494*x11497))+(((-1.0)*x11497))+((r02*x11495*x11496)))))+(IKabs((x11495+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11500 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11500.valid){
continue;
}
IkReal x11498=((1.0)*(x11500.value));
IkReal x11499=x11481;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11498)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11498)));
IkReal gconst10=((1.0)*r01*x11499);
IkReal gconst11=((-1.0)*r00*x11499);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11503 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11503.valid){
continue;
}
IkReal x11501=((1.0)*(x11503.value));
IkReal x11502=x11481;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11501)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11501)));
IkReal gconst10=((1.0)*r01*x11502);
IkReal gconst11=((-1.0)*r00*x11502);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11504=gconst10*gconst10;
IkReal x11505=gconst11*gconst11;
IkReal x11506=(r11*sj3);
IkReal x11507=((1.0)*cj3);
IkReal x11508=(cj3*r10);
IkReal x11509=(gconst10*gconst11);
IkReal x11510=(r10*sj3);
IkReal x11511=(r21*x11504);
IkReal x11512=((1.0)*r20*x11505);
CheckValue<IkReal> x11513 = IKatan2WithCheck(IkReal((((gconst11*r22*x11506))+((gconst10*r22*x11510)))),IkReal((((x11510*x11511))+((r21*x11506*x11509))+(((-1.0)*r20*x11509*x11510))+(((-1.0)*x11506*x11512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11513.valid){
continue;
}
CheckValue<IkReal> x11514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x11507))+(((-1.0)*r11*x11507*x11511))+(((-1.0)*r10*r20*x11505*x11507))+((cj3*r11*r20*x11509))+((r21*x11508*x11509)))),-1);
if(!x11514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11513.value)+(((1.5707963267949)*(x11514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11515=IKsin(j4);
IkReal x11516=IKcos(j4);
IkReal x11517=(cj2*sj1);
IkReal x11518=(cj1*sj2);
IkReal x11519=(cj3*r10);
IkReal x11520=(gconst11*r20);
IkReal x11521=(gconst11*r21);
IkReal x11522=(cj3*gconst11);
IkReal x11523=(sj1*sj2);
IkReal x11524=(r10*sj3);
IkReal x11525=(cj1*cj2);
IkReal x11526=(gconst10*sj3);
IkReal x11527=(gconst11*sj3);
IkReal x11528=(cj3*gconst10);
IkReal x11529=((1.0)*x11516);
IkReal x11530=((1.0)*x11515);
IkReal x11531=(cj3*x11515);
IkReal x11532=(gconst10*x11515);
IkReal x11533=(gconst11*x11516);
IkReal x11534=(x11518+x11517);
IkReal x11535=(x11516*x11528);
evalcond[0]=(((r21*x11532))+(((-1.0)*r22*x11529))+(((-1.0)*x11520*x11530)));
evalcond[1]=((((-1.0)*r02*x11529))+((r01*x11532))+(((-1.0)*gconst11*r00*x11530)));
evalcond[2]=((-1.0)+(((-1.0)*gconst11*r10*x11530))+((r11*x11532))+(((-1.0)*r12*x11529)));
evalcond[3]=(((r12*x11531))+((r11*x11527))+((r11*x11535))+(((-1.0)*gconst11*x11519*x11529))+((gconst10*x11524)));
evalcond[4]=(((x11524*x11533))+(((-1.0)*r12*sj3*x11530))+((r11*x11522))+((gconst10*x11519))+(((-1.0)*r11*x11526*x11529)));
evalcond[5]=(((r22*x11531))+x11534+((sj3*x11521))+((r21*x11535))+(((-1.0)*cj3*x11520*x11529))+((r20*x11526)));
evalcond[6]=(x11534+(((-1.0)*r02*sj3*x11530))+(((-1.0)*r01*x11526*x11529))+((r00*x11516*x11527))+((r01*x11522))+((r00*x11528)));
evalcond[7]=(x11525+(((-1.0)*r00*x11522*x11529))+((r01*x11535))+((r01*x11527))+((r00*x11526))+(((-1.0)*x11523))+((r02*x11531)));
evalcond[8]=(x11523+((cj3*x11521))+((sj3*x11516*x11520))+((r20*x11528))+(((-1.0)*r22*sj3*x11530))+(((-1.0)*r21*x11526*x11529))+(((-1.0)*x11525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11536=((1.0)*gconst11);
CheckValue<IkReal> x11537 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r01))+(((-1.0)*r00*x11536)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11537.valid){
continue;
}
CheckValue<IkReal> x11538=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11536)))),-1);
if(!x11538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11537.value)+(((1.5707963267949)*(x11538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11539=IKsin(j4);
IkReal x11540=IKcos(j4);
IkReal x11541=(cj2*sj1);
IkReal x11542=(cj1*sj2);
IkReal x11543=(cj3*r10);
IkReal x11544=(gconst11*r20);
IkReal x11545=(gconst11*r21);
IkReal x11546=(cj3*gconst11);
IkReal x11547=(sj1*sj2);
IkReal x11548=(r10*sj3);
IkReal x11549=(cj1*cj2);
IkReal x11550=(gconst10*sj3);
IkReal x11551=(gconst11*sj3);
IkReal x11552=(cj3*gconst10);
IkReal x11553=((1.0)*x11540);
IkReal x11554=((1.0)*x11539);
IkReal x11555=(cj3*x11539);
IkReal x11556=(gconst10*x11539);
IkReal x11557=(gconst11*x11540);
IkReal x11558=(x11541+x11542);
IkReal x11559=(x11540*x11552);
evalcond[0]=(((r21*x11556))+(((-1.0)*x11544*x11554))+(((-1.0)*r22*x11553)));
evalcond[1]=((((-1.0)*r02*x11553))+((r01*x11556))+(((-1.0)*gconst11*r00*x11554)));
evalcond[2]=((-1.0)+((r11*x11556))+(((-1.0)*gconst11*r10*x11554))+(((-1.0)*r12*x11553)));
evalcond[3]=(((r12*x11555))+((r11*x11551))+((r11*x11559))+(((-1.0)*gconst11*x11543*x11553))+((gconst10*x11548)));
evalcond[4]=((((-1.0)*r12*sj3*x11554))+((x11548*x11557))+((gconst10*x11543))+((r11*x11546))+(((-1.0)*r11*x11550*x11553)));
evalcond[5]=(((sj3*x11545))+(((-1.0)*cj3*x11544*x11553))+((r21*x11559))+x11558+((r22*x11555))+((r20*x11550)));
evalcond[6]=(x11558+((r01*x11546))+((r00*x11540*x11551))+((r00*x11552))+(((-1.0)*r02*sj3*x11554))+(((-1.0)*r01*x11550*x11553)));
evalcond[7]=(x11549+((r02*x11555))+(((-1.0)*x11547))+((r00*x11550))+((r01*x11551))+((r01*x11559))+(((-1.0)*r00*x11546*x11553)));
evalcond[8]=((((-1.0)*r22*sj3*x11554))+x11547+(((-1.0)*r21*x11550*x11553))+((sj3*x11540*x11544))+(((-1.0)*x11549))+((r20*x11552))+((cj3*x11545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11560 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11560.valid){
continue;
}
CheckValue<IkReal> x11561=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11560.value)+(((1.5707963267949)*(x11561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11562=IKsin(j4);
IkReal x11563=IKcos(j4);
IkReal x11564=(cj2*sj1);
IkReal x11565=(cj1*sj2);
IkReal x11566=(cj3*r10);
IkReal x11567=(gconst11*r20);
IkReal x11568=(gconst11*r21);
IkReal x11569=(cj3*gconst11);
IkReal x11570=(sj1*sj2);
IkReal x11571=(r10*sj3);
IkReal x11572=(cj1*cj2);
IkReal x11573=(gconst10*sj3);
IkReal x11574=(gconst11*sj3);
IkReal x11575=(cj3*gconst10);
IkReal x11576=((1.0)*x11563);
IkReal x11577=((1.0)*x11562);
IkReal x11578=(cj3*x11562);
IkReal x11579=(gconst10*x11562);
IkReal x11580=(gconst11*x11563);
IkReal x11581=(x11564+x11565);
IkReal x11582=(x11563*x11575);
evalcond[0]=(((r21*x11579))+(((-1.0)*x11567*x11577))+(((-1.0)*r22*x11576)));
evalcond[1]=(((r01*x11579))+(((-1.0)*gconst11*r00*x11577))+(((-1.0)*r02*x11576)));
evalcond[2]=((-1.0)+(((-1.0)*gconst11*r10*x11577))+((r11*x11579))+(((-1.0)*r12*x11576)));
evalcond[3]=(((gconst10*x11571))+(((-1.0)*gconst11*x11566*x11576))+((r12*x11578))+((r11*x11574))+((r11*x11582)));
evalcond[4]=(((x11571*x11580))+((gconst10*x11566))+(((-1.0)*r11*x11573*x11576))+((r11*x11569))+(((-1.0)*r12*sj3*x11577)));
evalcond[5]=((((-1.0)*cj3*x11567*x11576))+x11581+((r20*x11573))+((r21*x11582))+((r22*x11578))+((sj3*x11568)));
evalcond[6]=(x11581+((r00*x11575))+((r01*x11569))+(((-1.0)*r02*sj3*x11577))+(((-1.0)*r01*x11573*x11576))+((r00*x11563*x11574)));
evalcond[7]=(((r01*x11582))+((r01*x11574))+x11572+((r00*x11573))+(((-1.0)*x11570))+((r02*x11578))+(((-1.0)*r00*x11569*x11576)));
evalcond[8]=(x11570+((r20*x11575))+(((-1.0)*r22*sj3*x11577))+(((-1.0)*x11572))+((sj3*x11563*x11567))+((cj3*x11568))+(((-1.0)*r21*x11573*x11576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11585 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11585.valid){
continue;
}
IkReal x11583=((1.0)*(x11585.value));
IkReal x11584=x11481;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11583)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11583)));
IkReal gconst10=((1.0)*r01*x11584);
IkReal gconst11=((-1.0)*r00*x11584);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11588 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11588.valid){
continue;
}
IkReal x11586=((1.0)*(x11588.value));
IkReal x11587=x11481;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11586)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11586)));
IkReal gconst10=((1.0)*r01*x11587);
IkReal gconst11=((-1.0)*r00*x11587);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11589=gconst10*gconst10;
IkReal x11590=gconst11*gconst11;
IkReal x11591=(r11*sj3);
IkReal x11592=((1.0)*cj3);
IkReal x11593=(cj3*r10);
IkReal x11594=(gconst10*gconst11);
IkReal x11595=(r10*sj3);
IkReal x11596=(r21*x11589);
IkReal x11597=((1.0)*r20*x11590);
CheckValue<IkReal> x11598 = IKatan2WithCheck(IkReal((((gconst11*r22*x11591))+((gconst10*r22*x11595)))),IkReal(((((-1.0)*r20*x11594*x11595))+(((-1.0)*x11591*x11597))+((r21*x11591*x11594))+((x11595*x11596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11598.valid){
continue;
}
CheckValue<IkReal> x11599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x11592))+(((-1.0)*r11*x11592*x11596))+((cj3*r11*r20*x11594))+((r21*x11593*x11594))+(((-1.0)*r10*r20*x11590*x11592)))),-1);
if(!x11599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11598.value)+(((1.5707963267949)*(x11599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11600=IKsin(j4);
IkReal x11601=IKcos(j4);
IkReal x11602=(sj1*sj2);
IkReal x11603=(cj3*r10);
IkReal x11604=(gconst11*r20);
IkReal x11605=(gconst11*r21);
IkReal x11606=(cj3*gconst11);
IkReal x11607=(r10*sj3);
IkReal x11608=((1.0)*cj1);
IkReal x11609=(gconst10*sj3);
IkReal x11610=(cj2*sj1);
IkReal x11611=(gconst11*sj3);
IkReal x11612=(cj3*gconst10);
IkReal x11613=(cj2*x11608);
IkReal x11614=((1.0)*x11601);
IkReal x11615=((1.0)*x11600);
IkReal x11616=(cj3*x11600);
IkReal x11617=(gconst10*x11600);
IkReal x11618=(gconst11*x11601);
IkReal x11619=(x11601*x11612);
evalcond[0]=(((r21*x11617))+(((-1.0)*x11604*x11615))+(((-1.0)*r22*x11614)));
evalcond[1]=((((-1.0)*gconst11*r00*x11615))+((r01*x11617))+(((-1.0)*r02*x11614)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11614))+((r11*x11617))+(((-1.0)*gconst11*r10*x11615)));
evalcond[3]=(((r12*x11616))+(((-1.0)*gconst11*x11603*x11614))+((r11*x11611))+((r11*x11619))+((gconst10*x11607)));
evalcond[4]=(((gconst10*x11603))+(((-1.0)*r11*x11609*x11614))+((x11607*x11618))+((r11*x11606))+(((-1.0)*r12*sj3*x11615)));
evalcond[5]=(x11610+((cj1*sj2))+((r21*x11619))+((r22*x11616))+(((-1.0)*cj3*x11604*x11614))+((sj3*x11605))+((r20*x11609)));
evalcond[6]=(x11602+(((-1.0)*x11613))+((r00*x11609))+((r02*x11616))+((r01*x11619))+((r01*x11611))+(((-1.0)*r00*x11606*x11614)));
evalcond[7]=(x11602+((cj3*x11605))+(((-1.0)*x11613))+((sj3*x11601*x11604))+(((-1.0)*r22*sj3*x11615))+((r20*x11612))+(((-1.0)*r21*x11609*x11614)));
evalcond[8]=((((-1.0)*sj2*x11608))+(((-1.0)*x11610))+((r01*x11606))+(((-1.0)*r01*x11609*x11614))+(((-1.0)*r02*sj3*x11615))+((r00*x11612))+((r00*x11601*x11611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11620=((1.0)*gconst11);
CheckValue<IkReal> x11621=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11620)))),-1);
if(!x11621.valid){
continue;
}
CheckValue<IkReal> x11622 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*r20*x11620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11621.value)))+(x11622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11623=IKsin(j4);
IkReal x11624=IKcos(j4);
IkReal x11625=(sj1*sj2);
IkReal x11626=(cj3*r10);
IkReal x11627=(gconst11*r20);
IkReal x11628=(gconst11*r21);
IkReal x11629=(cj3*gconst11);
IkReal x11630=(r10*sj3);
IkReal x11631=((1.0)*cj1);
IkReal x11632=(gconst10*sj3);
IkReal x11633=(cj2*sj1);
IkReal x11634=(gconst11*sj3);
IkReal x11635=(cj3*gconst10);
IkReal x11636=(cj2*x11631);
IkReal x11637=((1.0)*x11624);
IkReal x11638=((1.0)*x11623);
IkReal x11639=(cj3*x11623);
IkReal x11640=(gconst10*x11623);
IkReal x11641=(gconst11*x11624);
IkReal x11642=(x11624*x11635);
evalcond[0]=((((-1.0)*r22*x11637))+((r21*x11640))+(((-1.0)*x11627*x11638)));
evalcond[1]=((((-1.0)*r02*x11637))+(((-1.0)*gconst11*r00*x11638))+((r01*x11640)));
evalcond[2]=((1.0)+((r11*x11640))+(((-1.0)*gconst11*r10*x11638))+(((-1.0)*r12*x11637)));
evalcond[3]=(((r11*x11634))+((r11*x11642))+((r12*x11639))+((gconst10*x11630))+(((-1.0)*gconst11*x11626*x11637)));
evalcond[4]=((((-1.0)*r12*sj3*x11638))+((r11*x11629))+(((-1.0)*r11*x11632*x11637))+((x11630*x11641))+((gconst10*x11626)));
evalcond[5]=(x11633+((r22*x11639))+((cj1*sj2))+((r21*x11642))+((sj3*x11628))+((r20*x11632))+(((-1.0)*cj3*x11627*x11637)));
evalcond[6]=((((-1.0)*x11636))+x11625+(((-1.0)*r00*x11629*x11637))+((r02*x11639))+((r00*x11632))+((r01*x11642))+((r01*x11634)));
evalcond[7]=((((-1.0)*x11636))+x11625+((cj3*x11628))+(((-1.0)*r21*x11632*x11637))+((r20*x11635))+((sj3*x11624*x11627))+(((-1.0)*r22*sj3*x11638)));
evalcond[8]=((((-1.0)*x11633))+(((-1.0)*r02*sj3*x11638))+((r00*x11624*x11634))+((r01*x11629))+(((-1.0)*r01*x11632*x11637))+((r00*x11635))+(((-1.0)*sj2*x11631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11643 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r01))+(((-1.0)*gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11643.valid){
continue;
}
CheckValue<IkReal> x11644=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11643.value)+(((1.5707963267949)*(x11644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11645=IKsin(j4);
IkReal x11646=IKcos(j4);
IkReal x11647=(sj1*sj2);
IkReal x11648=(cj3*r10);
IkReal x11649=(gconst11*r20);
IkReal x11650=(gconst11*r21);
IkReal x11651=(cj3*gconst11);
IkReal x11652=(r10*sj3);
IkReal x11653=((1.0)*cj1);
IkReal x11654=(gconst10*sj3);
IkReal x11655=(cj2*sj1);
IkReal x11656=(gconst11*sj3);
IkReal x11657=(cj3*gconst10);
IkReal x11658=(cj2*x11653);
IkReal x11659=((1.0)*x11646);
IkReal x11660=((1.0)*x11645);
IkReal x11661=(cj3*x11645);
IkReal x11662=(gconst10*x11645);
IkReal x11663=(gconst11*x11646);
IkReal x11664=(x11646*x11657);
evalcond[0]=(((r21*x11662))+(((-1.0)*r22*x11659))+(((-1.0)*x11649*x11660)));
evalcond[1]=((((-1.0)*r02*x11659))+((r01*x11662))+(((-1.0)*gconst11*r00*x11660)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11659))+(((-1.0)*gconst11*r10*x11660))+((r11*x11662)));
evalcond[3]=(((r11*x11656))+(((-1.0)*gconst11*x11648*x11659))+((gconst10*x11652))+((r11*x11664))+((r12*x11661)));
evalcond[4]=(((r11*x11651))+(((-1.0)*r11*x11654*x11659))+((gconst10*x11648))+(((-1.0)*r12*sj3*x11660))+((x11652*x11663)));
evalcond[5]=((((-1.0)*cj3*x11649*x11659))+((r21*x11664))+x11655+((cj1*sj2))+((r20*x11654))+((sj3*x11650))+((r22*x11661)));
evalcond[6]=((((-1.0)*x11658))+(((-1.0)*r00*x11651*x11659))+x11647+((r01*x11664))+((r02*x11661))+((r01*x11656))+((r00*x11654)));
evalcond[7]=((((-1.0)*x11658))+x11647+(((-1.0)*r21*x11654*x11659))+(((-1.0)*r22*sj3*x11660))+((cj3*x11650))+((sj3*x11646*x11649))+((r20*x11657)));
evalcond[8]=(((r00*x11646*x11656))+(((-1.0)*r01*x11654*x11659))+(((-1.0)*r02*sj3*x11660))+(((-1.0)*x11655))+((r01*x11651))+(((-1.0)*sj2*x11653))+((r00*x11657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11667 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11667.valid){
continue;
}
IkReal x11665=((1.0)*(x11667.value));
IkReal x11666=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11665)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11666);
rxp0_2=(py*r00);
rxp1_0=(r21*x11666);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11665)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11670 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11670.valid){
continue;
}
IkReal x11668=((1.0)*(x11670.value));
IkReal x11669=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11668)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11669);
rxp0_2=(py*r00);
rxp1_0=(r21*x11669);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11668)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
IkReal x11671=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=(((r00*r20*x11671))+((r01*r21*x11671)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11674 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11674.valid){
continue;
}
IkReal x11672=((1.0)*(x11674.value));
IkReal x11673=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11672)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11673);
rxp0_2=(py*r00);
rxp1_0=(r21*x11673);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11672)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11677 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11677.valid){
continue;
}
IkReal x11675=((1.0)*(x11677.value));
IkReal x11676=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11675)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11676);
rxp0_2=(py*r00);
rxp1_0=(r21*x11676);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11675)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11680 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11680.valid){
continue;
}
IkReal x11678=((1.0)*(x11680.value));
IkReal x11679=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11678)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11679);
rxp0_2=(py*r00);
rxp1_0=(r21*x11679);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11678)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11683 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11683.valid){
continue;
}
IkReal x11681=((1.0)*(x11683.value));
IkReal x11682=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11681)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11682);
rxp0_2=(py*r00);
rxp1_0=(r21*x11682);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11681)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11686=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11686.valid){
continue;
}
IkReal x11684=x11686.value;
IkReal x11685=(cj0*x11684);
cj4array[0]=(((sj1*sj2*x11685))+(((-1.0)*cj1*cj2*x11685)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11687=IKsin(j4);
IkReal x11688=IKcos(j4);
IkReal x11689=(gconst10*r21);
IkReal x11690=((1.0)*gconst11*r20);
evalcond[0]=(r12*x11687);
evalcond[1]=((((-1.0)*r12*x11688))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11687*x11690))+((x11687*x11689)));
evalcond[3]=(((gconst10*r01*x11687))+(((-1.0)*gconst11*r00*x11687)));
evalcond[4]=(((cj2*sj1))+((x11688*x11689))+((cj1*sj2))+(((-1.0)*x11688*x11690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11693=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11693.valid){
continue;
}
IkReal x11691=x11693.value;
IkReal x11692=((1.0)*x11691);
cj4array[0]=((((-1.0)*cj2*sj1*x11692))+(((-1.0)*cj1*sj2*x11692)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11694=IKsin(j4);
IkReal x11695=IKcos(j4);
IkReal x11696=(gconst10*r01);
IkReal x11697=((1.0)*cj0);
IkReal x11698=((1.0)*x11695);
IkReal x11699=((1.0)*gconst11*x11694);
evalcond[0]=(r12*x11694);
evalcond[1]=((((-1.0)*r12*x11698))+(((-1.0)*x11697)));
evalcond[2]=(((gconst10*r21*x11694))+(((-1.0)*r20*x11699)));
evalcond[3]=(((x11694*x11696))+(((-1.0)*r00*x11699)));
evalcond[4]=(((x11695*x11696))+((cj0*cj1*cj2))+(((-1.0)*gconst11*r00*x11698))+(((-1.0)*sj1*sj2*x11697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11700=IKPowWithIntegerCheck(r12,-1);
if(!x11700.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11700.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11701=IKsin(j4);
IkReal x11702=IKcos(j4);
IkReal x11703=(gconst10*x11702);
IkReal x11704=(gconst10*x11701);
IkReal x11705=((1.0)*gconst11*r20);
IkReal x11706=((1.0)*gconst11*r00);
evalcond[0]=(r12*x11701);
evalcond[1]=((((-1.0)*x11701*x11705))+((r21*x11704)));
evalcond[2]=((((-1.0)*x11701*x11706))+((r01*x11704)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x11702*x11705))+((cj1*sj2))+((r21*x11703)));
evalcond[4]=((((-1.0)*x11702*x11706))+(((-1.0)*cj0*sj1*sj2))+((r01*x11703))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11709 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11709.valid){
continue;
}
IkReal x11707=((1.0)*(x11709.value));
IkReal x11708=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11707)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11708);
rxp0_2=(py*r00);
rxp1_0=(r21*x11708);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11707)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11712 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11712.valid){
continue;
}
IkReal x11710=((1.0)*(x11712.value));
IkReal x11711=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11710)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11711);
rxp0_2=(py*r00);
rxp1_0=(r21*x11711);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11710)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11715 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11715.valid){
continue;
}
IkReal x11713=((1.0)*(x11715.value));
IkReal x11714=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11713)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11714);
rxp0_2=(py*r00);
rxp1_0=(r21*x11714);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11713)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11718=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11718.valid){
continue;
}
IkReal x11716=x11718.value;
IkReal x11717=(cj0*x11716);
cj4array[0]=((((-1.0)*cj1*cj2*x11717))+((sj1*sj2*x11717)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11719=IKsin(j4);
IkReal x11720=IKcos(j4);
IkReal x11721=(gconst10*x11719);
IkReal x11722=((1.0)*x11720);
IkReal x11723=((1.0)*gconst11*x11719);
evalcond[0]=((-1.0)*r12*x11719);
evalcond[1]=((((-1.0)*r12*x11722))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11723))+((r21*x11721)));
evalcond[3]=(((r01*x11721))+(((-1.0)*r00*x11723)));
evalcond[4]=((((-1.0)*gconst10*r21*x11722))+((cj2*sj1))+((gconst11*r20*x11720))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11726=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11726.valid){
continue;
}
IkReal x11724=x11726.value;
IkReal x11725=((1.0)*x11724);
cj4array[0]=((((-1.0)*cj2*sj1*x11725))+(((-1.0)*cj1*sj2*x11725)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11727=IKsin(j4);
IkReal x11728=IKcos(j4);
IkReal x11729=((1.0)*cj0);
IkReal x11730=(gconst10*x11727);
IkReal x11731=((1.0)*x11728);
IkReal x11732=((1.0)*gconst11*x11727);
evalcond[0]=((-1.0)*r12*x11727);
evalcond[1]=((((-1.0)*x11729))+(((-1.0)*r12*x11731)));
evalcond[2]=((((-1.0)*r20*x11732))+((r21*x11730)));
evalcond[3]=(((r01*x11730))+(((-1.0)*r00*x11732)));
evalcond[4]=((((-1.0)*sj1*sj2*x11729))+((gconst11*r00*x11728))+(((-1.0)*gconst10*r01*x11731))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11733=IKPowWithIntegerCheck(r12,-1);
if(!x11733.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11733.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11734=IKsin(j4);
IkReal x11735=IKcos(j4);
IkReal x11736=(gconst10*x11734);
IkReal x11737=(gconst11*x11735);
IkReal x11738=((1.0)*gconst11*x11734);
IkReal x11739=((1.0)*gconst10*x11735);
evalcond[0]=((-1.0)*r12*x11734);
evalcond[1]=((((-1.0)*r20*x11738))+((r21*x11736)));
evalcond[2]=(((r01*x11736))+(((-1.0)*r00*x11738)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x11739))+((cj1*sj2))+((r20*x11737)));
evalcond[4]=(((r00*x11737))+(((-1.0)*r01*x11739))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11742 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11742.valid){
continue;
}
IkReal x11740=((1.0)*(x11742.value));
IkReal x11741=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11740)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11741);
rxp0_2=(py*r00);
rxp1_0=(r21*x11741);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11740)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11745 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11745.valid){
continue;
}
IkReal x11743=((1.0)*(x11745.value));
IkReal x11744=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11743)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11744);
rxp0_2=(py*r00);
rxp1_0=(r21*x11744);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11743)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11748 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11748.valid){
continue;
}
IkReal x11746=((1.0)*(x11748.value));
IkReal x11747=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11746)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11747);
rxp0_2=(py*r00);
rxp1_0=(r21*x11747);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11746)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11751=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11751.valid){
continue;
}
IkReal x11749=x11751.value;
IkReal x11750=((1.0)*cj0*x11749);
cj4array[0]=((((-1.0)*cj2*sj1*x11750))+(((-1.0)*cj1*sj2*x11750)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11752=IKsin(j4);
IkReal x11753=IKcos(j4);
IkReal x11754=(gconst10*x11752);
IkReal x11755=((1.0)*x11753);
IkReal x11756=((1.0)*gconst11*x11752);
evalcond[0]=((-1.0)*r12*x11752);
evalcond[1]=((((-1.0)*r12*x11755))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11754))+(((-1.0)*r20*x11756)));
evalcond[3]=(((r01*x11754))+(((-1.0)*r00*x11756)));
evalcond[4]=((((-1.0)*gconst10*r21*x11755))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst11*r20*x11753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11758=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11758.valid){
continue;
}
IkReal x11757=x11758.value;
cj4array[0]=(((cj1*cj2*x11757))+(((-1.0)*sj1*sj2*x11757)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11759=IKsin(j4);
IkReal x11760=IKcos(j4);
IkReal x11761=(gconst10*x11759);
IkReal x11762=((1.0)*x11760);
IkReal x11763=((1.0)*gconst11*x11759);
evalcond[0]=((-1.0)*r12*x11759);
evalcond[1]=((((-1.0)*r12*x11762))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11761))+(((-1.0)*r20*x11763)));
evalcond[3]=((((-1.0)*r00*x11763))+((r01*x11761)));
evalcond[4]=(((gconst11*r00*x11760))+(((-1.0)*gconst10*r01*x11762))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11764=IKPowWithIntegerCheck(r12,-1);
if(!x11764.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11764.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11765=IKsin(j4);
IkReal x11766=IKcos(j4);
IkReal x11767=(gconst10*x11765);
IkReal x11768=(gconst11*x11766);
IkReal x11769=((1.0)*gconst11*x11765);
IkReal x11770=((1.0)*gconst10*x11766);
evalcond[0]=((-1.0)*r12*x11765);
evalcond[1]=(((r21*x11767))+(((-1.0)*r20*x11769)));
evalcond[2]=((((-1.0)*r00*x11769))+((r01*x11767)));
evalcond[3]=(((r20*x11768))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11770)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*r01*x11770))+((cj0*cj1*sj2))+((r00*x11768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11773 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11773.valid){
continue;
}
IkReal x11771=((1.0)*(x11773.value));
IkReal x11772=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11771)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11772);
rxp0_2=(py*r00);
rxp1_0=(r21*x11772);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11771)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11776 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11776.valid){
continue;
}
IkReal x11774=((1.0)*(x11776.value));
IkReal x11775=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11774)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11775);
rxp0_2=(py*r00);
rxp1_0=(r21*x11775);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11774)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11779 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11779.valid){
continue;
}
IkReal x11777=((1.0)*(x11779.value));
IkReal x11778=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11777)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11778);
rxp0_2=(py*r00);
rxp1_0=(r21*x11778);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11777)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11782=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11782.valid){
continue;
}
IkReal x11780=x11782.value;
IkReal x11781=((1.0)*cj0*x11780);
cj4array[0]=((((-1.0)*cj2*sj1*x11781))+(((-1.0)*cj1*sj2*x11781)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11783=IKsin(j4);
IkReal x11784=IKcos(j4);
IkReal x11785=(gconst10*r21);
IkReal x11786=((1.0)*gconst11*r20);
evalcond[0]=(r12*x11783);
evalcond[1]=((((-1.0)*r12*x11784))+(((-1.0)*cj0)));
evalcond[2]=(((x11783*x11785))+(((-1.0)*x11783*x11786)));
evalcond[3]=((((-1.0)*gconst11*r00*x11783))+((gconst10*r01*x11783)));
evalcond[4]=(((x11784*x11785))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11784*x11786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11788=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11788.valid){
continue;
}
IkReal x11787=x11788.value;
cj4array[0]=(((cj1*cj2*x11787))+(((-1.0)*sj1*sj2*x11787)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11789=IKsin(j4);
IkReal x11790=IKcos(j4);
IkReal x11791=(gconst10*r01);
IkReal x11792=((1.0)*x11790);
IkReal x11793=((1.0)*gconst11*x11789);
evalcond[0]=(r12*x11789);
evalcond[1]=((((-1.0)*r12*x11792))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11793))+((gconst10*r21*x11789)));
evalcond[3]=((((-1.0)*r00*x11793))+((x11789*x11791)));
evalcond[4]=(((x11790*x11791))+(((-1.0)*gconst11*r00*x11792))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11794=IKPowWithIntegerCheck(r12,-1);
if(!x11794.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11794.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11795=IKsin(j4);
IkReal x11796=IKcos(j4);
IkReal x11797=(gconst10*x11796);
IkReal x11798=(gconst10*x11795);
IkReal x11799=((1.0)*gconst11*r20);
IkReal x11800=((1.0)*gconst11*r00);
evalcond[0]=(r12*x11795);
evalcond[1]=((((-1.0)*x11795*x11799))+((r21*x11798)));
evalcond[2]=((((-1.0)*x11795*x11800))+((r01*x11798)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11796*x11799))+((r21*x11797)));
evalcond[4]=((((-1.0)*x11796*x11800))+((cj0*cj2*sj1))+((r01*x11797))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11802=IKPowWithIntegerCheck(r12,-1);
if(!x11802.valid){
continue;
}
IkReal x11801=x11802.value;
CheckValue<IkReal> x11803=IKPowWithIntegerCheck(sj3,-1);
if(!x11803.valid){
continue;
}
if( IKabs((x11801*(x11803.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11801)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11801*(x11803.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11801))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11801*(x11803.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11801));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11804=IKsin(j4);
IkReal x11805=IKcos(j4);
IkReal x11806=(cj2*sj0);
IkReal x11807=(gconst11*r20);
IkReal x11808=(cj3*gconst11);
IkReal x11809=(sj1*sj2);
IkReal x11810=(gconst11*r00);
IkReal x11811=(cj2*sj1);
IkReal x11812=(cj1*cj2);
IkReal x11813=(gconst10*sj3);
IkReal x11814=(cj3*gconst10);
IkReal x11815=(gconst11*sj3);
IkReal x11816=(cj1*sj2);
IkReal x11817=((1.0)*cj0);
IkReal x11818=((1.0)*x11804);
IkReal x11819=((1.0)*x11805);
IkReal x11820=(gconst10*x11804);
IkReal x11821=(sj3*x11805);
evalcond[0]=((((-1.0)*r12*x11819))+(((-1.0)*x11817)));
evalcond[1]=((((-1.0)*x11807*x11818))+((r21*x11820)));
evalcond[2]=(sj0+(((-1.0)*x11810*x11818))+((r01*x11820)));
evalcond[3]=(((sj0*x11816))+(((-1.0)*r12*sj3*x11818))+((sj1*x11806)));
evalcond[4]=(((cj1*x11806))+(((-1.0)*sj0*x11809))+((cj3*r12*x11804)));
evalcond[5]=((((-1.0)*cj3*x11807*x11819))+((r21*x11805*x11814))+((r21*x11815))+((r20*x11813))+x11816+x11811);
evalcond[6]=(((r21*x11808))+(((-1.0)*x11812))+(((-1.0)*r21*x11813*x11819))+((r20*x11814))+x11809+((x11807*x11821)));
evalcond[7]=((((-1.0)*r01*x11813*x11819))+((r00*x11814))+((cj0*x11816))+((cj0*x11811))+((r01*x11808))+((x11810*x11821)));
evalcond[8]=(((r01*x11815))+(((-1.0)*r00*x11808*x11819))+((r00*x11813))+(((-1.0)*x11809*x11817))+((cj0*x11812))+((r01*x11805*x11814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11822=((1.0)*gconst11);
CheckValue<IkReal> x11823=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*r00*x11822))),-1);
if(!x11823.valid){
continue;
}
CheckValue<IkReal> x11824=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11822))+((cj3*gconst10*r21))),-1);
if(!x11824.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11823.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11824.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*r21*sj3*x11822))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11823.value)))+IKsqr(((x11824.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*r21*sj3*x11822))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11823.value)), ((x11824.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*r21*sj3*x11822))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11825=IKsin(j4);
IkReal x11826=IKcos(j4);
IkReal x11827=(cj2*sj0);
IkReal x11828=(gconst11*r20);
IkReal x11829=(cj3*gconst11);
IkReal x11830=(sj1*sj2);
IkReal x11831=(gconst11*r00);
IkReal x11832=(cj2*sj1);
IkReal x11833=(cj1*cj2);
IkReal x11834=(gconst10*sj3);
IkReal x11835=(cj3*gconst10);
IkReal x11836=(gconst11*sj3);
IkReal x11837=(cj1*sj2);
IkReal x11838=((1.0)*cj0);
IkReal x11839=((1.0)*x11825);
IkReal x11840=((1.0)*x11826);
IkReal x11841=(gconst10*x11825);
IkReal x11842=(sj3*x11826);
evalcond[0]=((((-1.0)*r12*x11840))+(((-1.0)*x11838)));
evalcond[1]=(((r21*x11841))+(((-1.0)*x11828*x11839)));
evalcond[2]=(sj0+(((-1.0)*x11831*x11839))+((r01*x11841)));
evalcond[3]=(((sj1*x11827))+(((-1.0)*r12*sj3*x11839))+((sj0*x11837)));
evalcond[4]=(((cj3*r12*x11825))+((cj1*x11827))+(((-1.0)*sj0*x11830)));
evalcond[5]=(((r21*x11826*x11835))+((r21*x11836))+(((-1.0)*cj3*x11828*x11840))+((r20*x11834))+x11837+x11832);
evalcond[6]=(((x11828*x11842))+(((-1.0)*r21*x11834*x11840))+(((-1.0)*x11833))+((r20*x11835))+((r21*x11829))+x11830);
evalcond[7]=(((x11831*x11842))+((cj0*x11832))+((cj0*x11837))+((r01*x11829))+((r00*x11835))+(((-1.0)*r01*x11834*x11840)));
evalcond[8]=((((-1.0)*x11830*x11838))+((r01*x11826*x11835))+(((-1.0)*r00*x11829*x11840))+((cj0*x11833))+((r00*x11834))+((r01*x11836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11843=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11843.valid){
continue;
}
CheckValue<IkReal> x11844=IKPowWithIntegerCheck(r12,-1);
if(!x11844.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11843.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11844.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11843.value)))+IKsqr(((-1.0)*cj0*(x11844.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11843.value)), ((-1.0)*cj0*(x11844.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11845=IKsin(j4);
IkReal x11846=IKcos(j4);
IkReal x11847=(cj2*sj0);
IkReal x11848=(gconst11*r20);
IkReal x11849=(cj3*gconst11);
IkReal x11850=(sj1*sj2);
IkReal x11851=(gconst11*r00);
IkReal x11852=(cj2*sj1);
IkReal x11853=(cj1*cj2);
IkReal x11854=(gconst10*sj3);
IkReal x11855=(cj3*gconst10);
IkReal x11856=(gconst11*sj3);
IkReal x11857=(cj1*sj2);
IkReal x11858=((1.0)*cj0);
IkReal x11859=((1.0)*x11845);
IkReal x11860=((1.0)*x11846);
IkReal x11861=(gconst10*x11845);
IkReal x11862=(sj3*x11846);
evalcond[0]=((((-1.0)*x11858))+(((-1.0)*r12*x11860)));
evalcond[1]=(((r21*x11861))+(((-1.0)*x11848*x11859)));
evalcond[2]=(sj0+(((-1.0)*x11851*x11859))+((r01*x11861)));
evalcond[3]=((((-1.0)*r12*sj3*x11859))+((sj1*x11847))+((sj0*x11857)));
evalcond[4]=((((-1.0)*sj0*x11850))+((cj1*x11847))+((cj3*r12*x11845)));
evalcond[5]=(((r21*x11856))+((r20*x11854))+((r21*x11846*x11855))+(((-1.0)*cj3*x11848*x11860))+x11852+x11857);
evalcond[6]=(((r21*x11849))+((r20*x11855))+(((-1.0)*r21*x11854*x11860))+(((-1.0)*x11853))+((x11848*x11862))+x11850);
evalcond[7]=(((cj0*x11852))+((cj0*x11857))+((x11851*x11862))+(((-1.0)*r01*x11854*x11860))+((r00*x11855))+((r01*x11849)));
evalcond[8]=(((cj0*x11853))+(((-1.0)*r00*x11849*x11860))+(((-1.0)*x11850*x11858))+((r01*x11846*x11855))+((r01*x11856))+((r00*x11854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11865 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11865.valid){
continue;
}
IkReal x11863=((1.0)*(x11865.value));
IkReal x11864=x11481;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11863)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11863)));
IkReal gconst10=((1.0)*r01*x11864);
IkReal gconst11=((-1.0)*r00*x11864);
IkReal x11866=r02*r02;
IkReal x11867=(r12*sj0);
IkReal x11868=x11481;
IkReal x11869=(cj0*x11868);
j4eval[0]=((IKabs((x11867+((cj0*r02)))))+(IKabs(((((-1.0)*x11869))+((r02*x11867*x11868))+((x11866*x11869))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11870=((1.0)*r02);
IkReal x11871=(sj1*sj2);
IkReal x11872=(cj1*cj2);
IkReal x11873=((1.0)*sj3);
IkReal x11874=(gconst10*r21*sj3);
IkReal x11875=(gconst11*r20*sj3);
IkReal x11876=(cj3*gconst11*r21);
IkReal x11877=(cj3*gconst10*r20);
CheckValue<IkReal> x11878=IKPowWithIntegerCheck((((gconst10*r01*x11875))+(((-1.0)*r00*r20*x11873*(gconst11*gconst11)))+(((-1.0)*r01*r21*x11873*(gconst10*gconst10)))+((gconst11*r00*x11874))),-1);
if(!x11878.valid){
continue;
}
CheckValue<IkReal> x11879=IKPowWithIntegerCheck(((((-1.0)*gconst10*r21*x11873))+x11875),-1);
if(!x11879.valid){
continue;
}
if( IKabs(((x11878.value)*(((((-1.0)*x11870*x11871))+(((-1.0)*x11870*x11876))+(((-1.0)*x11870*x11877))+(((-1.0)*gconst11*r20*sj0*x11873))+((sj0*x11874))+((r02*x11872)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11879.value)*(((((-1.0)*x11876))+(((-1.0)*x11877))+(((-1.0)*x11871))+x11872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11878.value)*(((((-1.0)*x11870*x11871))+(((-1.0)*x11870*x11876))+(((-1.0)*x11870*x11877))+(((-1.0)*gconst11*r20*sj0*x11873))+((sj0*x11874))+((r02*x11872))))))+IKsqr(((x11879.value)*(((((-1.0)*x11876))+(((-1.0)*x11877))+(((-1.0)*x11871))+x11872))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11878.value)*(((((-1.0)*x11870*x11871))+(((-1.0)*x11870*x11876))+(((-1.0)*x11870*x11877))+(((-1.0)*gconst11*r20*sj0*x11873))+((sj0*x11874))+((r02*x11872))))), ((x11879.value)*(((((-1.0)*x11876))+(((-1.0)*x11877))+(((-1.0)*x11871))+x11872))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11880=IKsin(j4);
IkReal x11881=IKcos(j4);
IkReal x11882=(gconst10*sj3);
IkReal x11883=(cj3*r10);
IkReal x11884=(gconst11*r20);
IkReal x11885=(gconst11*sj3);
IkReal x11886=(cj3*r00);
IkReal x11887=(sj1*sj2);
IkReal x11888=(cj3*gconst11);
IkReal x11889=(cj1*cj2);
IkReal x11890=(cj2*sj1);
IkReal x11891=(cj1*sj2);
IkReal x11892=((1.0)*cj0);
IkReal x11893=((1.0)*x11880);
IkReal x11894=(gconst10*x11880);
IkReal x11895=((1.0)*x11881);
IkReal x11896=(cj3*x11880);
IkReal x11897=(gconst11*x11895);
IkReal x11898=(cj3*gconst10*x11881);
evalcond[0]=(((r21*x11894))+(((-1.0)*x11884*x11893)));
evalcond[1]=(sj0+((r01*x11894))+(((-1.0)*gconst11*r00*x11893))+(((-1.0)*r02*x11895)));
evalcond[2]=((((-1.0)*r12*x11895))+(((-1.0)*x11892))+(((-1.0)*gconst11*r10*x11893))+((r11*x11894)));
evalcond[3]=((((-1.0)*cj3*x11884*x11895))+((r21*x11885))+((r21*x11898))+x11890+x11891+((r20*x11882)));
evalcond[4]=((((-1.0)*x11889))+((r21*x11888))+(((-1.0)*r21*x11882*x11895))+((cj3*gconst10*r20))+((sj3*x11881*x11884))+x11887);
evalcond[5]=(((gconst10*x11886))+((r01*x11888))+((r00*x11881*x11885))+((cj0*x11891))+((cj0*x11890))+(((-1.0)*r01*x11882*x11895))+(((-1.0)*r02*sj3*x11893)));
evalcond[6]=((((-1.0)*x11887*x11892))+((r01*x11885))+((r00*x11882))+(((-1.0)*x11886*x11897))+((r01*x11898))+((r02*x11896))+((cj0*x11889)));
evalcond[7]=(((sj0*x11891))+((sj0*x11890))+((gconst10*x11883))+(((-1.0)*r11*x11882*x11895))+((r10*x11881*x11885))+(((-1.0)*r12*sj3*x11893))+((r11*x11888)));
evalcond[8]=((((-1.0)*sj0*x11887))+(((-1.0)*x11883*x11897))+((r10*x11882))+((r11*x11898))+((sj0*x11889))+((r12*x11896))+((r11*x11885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11899=((1.0)*gconst11);
CheckValue<IkReal> x11900=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11899)))),-1);
if(!x11900.valid){
continue;
}
CheckValue<IkReal> x11901 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11899))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x11899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11900.value)))+(x11901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11902=IKsin(j4);
IkReal x11903=IKcos(j4);
IkReal x11904=(gconst10*sj3);
IkReal x11905=(cj3*r10);
IkReal x11906=(gconst11*r20);
IkReal x11907=(gconst11*sj3);
IkReal x11908=(cj3*r00);
IkReal x11909=(sj1*sj2);
IkReal x11910=(cj3*gconst11);
IkReal x11911=(cj1*cj2);
IkReal x11912=(cj2*sj1);
IkReal x11913=(cj1*sj2);
IkReal x11914=((1.0)*cj0);
IkReal x11915=((1.0)*x11902);
IkReal x11916=(gconst10*x11902);
IkReal x11917=((1.0)*x11903);
IkReal x11918=(cj3*x11902);
IkReal x11919=(gconst11*x11917);
IkReal x11920=(cj3*gconst10*x11903);
evalcond[0]=(((r21*x11916))+(((-1.0)*x11906*x11915)));
evalcond[1]=(sj0+(((-1.0)*gconst11*r00*x11915))+((r01*x11916))+(((-1.0)*r02*x11917)));
evalcond[2]=(((r11*x11916))+(((-1.0)*r12*x11917))+(((-1.0)*gconst11*r10*x11915))+(((-1.0)*x11914)));
evalcond[3]=(x11913+x11912+((r21*x11920))+((r21*x11907))+((r20*x11904))+(((-1.0)*cj3*x11906*x11917)));
evalcond[4]=(x11909+(((-1.0)*x11911))+((r21*x11910))+((cj3*gconst10*r20))+((sj3*x11903*x11906))+(((-1.0)*r21*x11904*x11917)));
evalcond[5]=(((r00*x11903*x11907))+(((-1.0)*r02*sj3*x11915))+((r01*x11910))+(((-1.0)*r01*x11904*x11917))+((cj0*x11912))+((cj0*x11913))+((gconst10*x11908)));
evalcond[6]=((((-1.0)*x11908*x11919))+((r00*x11904))+((r01*x11907))+((cj0*x11911))+((r02*x11918))+((r01*x11920))+(((-1.0)*x11909*x11914)));
evalcond[7]=((((-1.0)*r11*x11904*x11917))+((r11*x11910))+((sj0*x11912))+((sj0*x11913))+((r10*x11903*x11907))+(((-1.0)*r12*sj3*x11915))+((gconst10*x11905)));
evalcond[8]=(((sj0*x11911))+(((-1.0)*x11905*x11919))+((r11*x11920))+(((-1.0)*sj0*x11909))+((r10*x11904))+((r11*x11907))+((r12*x11918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11921=((1.0)*gconst11);
CheckValue<IkReal> x11922=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11921)))),-1);
if(!x11922.valid){
continue;
}
CheckValue<IkReal> x11923 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11921))+(((-1.0)*cj0*r00*x11921))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11922.value)))+(x11923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11924=IKsin(j4);
IkReal x11925=IKcos(j4);
IkReal x11926=(gconst10*sj3);
IkReal x11927=(cj3*r10);
IkReal x11928=(gconst11*r20);
IkReal x11929=(gconst11*sj3);
IkReal x11930=(cj3*gconst11);
IkReal x11931=(sj1*sj2);
IkReal x11932=(cj1*cj2);
IkReal x11933=(cj2*sj1);
IkReal x11934=(cj1*sj2);
IkReal x11935=(cj3*gconst10);
IkReal x11936=((1.0)*cj0);
IkReal x11937=((1.0)*x11925);
IkReal x11938=((1.0)*x11924);
IkReal x11939=(cj3*x11924);
IkReal x11940=(gconst10*x11924);
IkReal x11941=(x11925*x11935);
evalcond[0]=(((r21*x11940))+(((-1.0)*r22*x11937))+(((-1.0)*x11928*x11938)));
evalcond[1]=(sj0+(((-1.0)*r02*x11937))+((r01*x11940))+(((-1.0)*gconst11*r00*x11938)));
evalcond[2]=(((r11*x11940))+(((-1.0)*x11936))+(((-1.0)*gconst11*r10*x11938))+(((-1.0)*r12*x11937)));
evalcond[3]=(x11934+x11933+((r21*x11929))+((r20*x11926))+((r21*x11941))+((r22*x11939))+(((-1.0)*cj3*x11928*x11937)));
evalcond[4]=(x11931+(((-1.0)*r21*x11926*x11937))+((r21*x11930))+(((-1.0)*r22*sj3*x11938))+((r20*x11935))+((sj3*x11925*x11928))+(((-1.0)*x11932)));
evalcond[5]=((((-1.0)*r02*sj3*x11938))+((r00*x11925*x11929))+((cj0*x11934))+((cj0*x11933))+(((-1.0)*r01*x11926*x11937))+((r00*x11935))+((r01*x11930)));
evalcond[6]=(((cj0*x11932))+((r02*x11939))+(((-1.0)*x11931*x11936))+((r01*x11941))+(((-1.0)*r00*x11930*x11937))+((r01*x11929))+((r00*x11926)));
evalcond[7]=(((gconst10*x11927))+(((-1.0)*r12*sj3*x11938))+((r11*x11930))+((sj0*x11934))+((sj0*x11933))+(((-1.0)*r11*x11926*x11937))+((r10*x11925*x11929)));
evalcond[8]=((((-1.0)*sj0*x11931))+((r11*x11941))+((r10*x11926))+((r11*x11929))+(((-1.0)*gconst11*x11927*x11937))+((r12*x11939))+((sj0*x11932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11942 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11942.valid){
continue;
}
CheckValue<IkReal> x11943=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11942.value)+(((1.5707963267949)*(x11943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11944=IKsin(j4);
IkReal x11945=IKcos(j4);
IkReal x11946=(gconst10*sj3);
IkReal x11947=(cj3*r10);
IkReal x11948=(gconst11*r20);
IkReal x11949=(gconst11*sj3);
IkReal x11950=(cj3*gconst11);
IkReal x11951=(sj1*sj2);
IkReal x11952=(cj1*cj2);
IkReal x11953=(cj2*sj1);
IkReal x11954=(cj1*sj2);
IkReal x11955=(cj3*gconst10);
IkReal x11956=((1.0)*cj0);
IkReal x11957=((1.0)*x11945);
IkReal x11958=((1.0)*x11944);
IkReal x11959=(cj3*x11944);
IkReal x11960=(gconst10*x11944);
IkReal x11961=(x11945*x11955);
evalcond[0]=((((-1.0)*r22*x11957))+(((-1.0)*x11948*x11958))+((r21*x11960)));
evalcond[1]=(((r01*x11960))+(((-1.0)*r02*x11957))+sj0+(((-1.0)*gconst11*r00*x11958)));
evalcond[2]=((((-1.0)*r12*x11957))+(((-1.0)*x11956))+((r11*x11960))+(((-1.0)*gconst11*r10*x11958)));
evalcond[3]=(x11954+x11953+((r20*x11946))+((r21*x11949))+((r21*x11961))+((r22*x11959))+(((-1.0)*cj3*x11948*x11957)));
evalcond[4]=(x11951+((r20*x11955))+((r21*x11950))+(((-1.0)*x11952))+(((-1.0)*r22*sj3*x11958))+(((-1.0)*r21*x11946*x11957))+((sj3*x11945*x11948)));
evalcond[5]=((((-1.0)*r02*sj3*x11958))+((cj0*x11953))+((cj0*x11954))+((r01*x11950))+((r00*x11955))+(((-1.0)*r01*x11946*x11957))+((r00*x11945*x11949)));
evalcond[6]=(((r01*x11961))+((r02*x11959))+((cj0*x11952))+(((-1.0)*x11951*x11956))+((r00*x11946))+((r01*x11949))+(((-1.0)*r00*x11950*x11957)));
evalcond[7]=((((-1.0)*r11*x11946*x11957))+(((-1.0)*r12*sj3*x11958))+((r11*x11950))+((r10*x11945*x11949))+((sj0*x11953))+((sj0*x11954))+((gconst10*x11947)));
evalcond[8]=(((r11*x11949))+((r12*x11959))+((r11*x11961))+(((-1.0)*gconst11*x11947*x11957))+((r10*x11946))+(((-1.0)*sj0*x11951))+((sj0*x11952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11962=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11962.valid){
continue;
}
CheckValue<IkReal> x11963 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11962.value)))+(x11963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11964=IKsin(j4);
IkReal x11965=IKcos(j4);
IkReal x11966=(gconst10*sj3);
IkReal x11967=(cj3*r10);
IkReal x11968=(gconst11*r20);
IkReal x11969=(gconst11*sj3);
IkReal x11970=(cj3*gconst11);
IkReal x11971=(sj1*sj2);
IkReal x11972=(cj1*cj2);
IkReal x11973=(cj2*sj1);
IkReal x11974=(cj1*sj2);
IkReal x11975=(cj3*gconst10);
IkReal x11976=((1.0)*cj0);
IkReal x11977=((1.0)*x11965);
IkReal x11978=((1.0)*x11964);
IkReal x11979=(cj3*x11964);
IkReal x11980=(gconst10*x11964);
IkReal x11981=(x11965*x11975);
evalcond[0]=(((r21*x11980))+(((-1.0)*r22*x11977))+(((-1.0)*x11968*x11978)));
evalcond[1]=(sj0+(((-1.0)*gconst11*r00*x11978))+(((-1.0)*r02*x11977))+((r01*x11980)));
evalcond[2]=((((-1.0)*r12*x11977))+(((-1.0)*x11976))+(((-1.0)*gconst11*r10*x11978))+((r11*x11980)));
evalcond[3]=(x11973+x11974+((r21*x11981))+((r20*x11966))+(((-1.0)*cj3*x11968*x11977))+((r21*x11969))+((r22*x11979)));
evalcond[4]=(x11971+(((-1.0)*x11972))+(((-1.0)*r21*x11966*x11977))+((sj3*x11965*x11968))+((r20*x11975))+(((-1.0)*r22*sj3*x11978))+((r21*x11970)));
evalcond[5]=(((r00*x11975))+((r00*x11965*x11969))+((r01*x11970))+((cj0*x11974))+((cj0*x11973))+(((-1.0)*r02*sj3*x11978))+(((-1.0)*r01*x11966*x11977)));
evalcond[6]=(((r01*x11969))+((r00*x11966))+(((-1.0)*r00*x11970*x11977))+((cj0*x11972))+((r02*x11979))+(((-1.0)*x11971*x11976))+((r01*x11981)));
evalcond[7]=(((gconst10*x11967))+((r11*x11970))+(((-1.0)*r12*sj3*x11978))+((r10*x11965*x11969))+((sj0*x11974))+((sj0*x11973))+(((-1.0)*r11*x11966*x11977)));
evalcond[8]=(((r11*x11969))+((r12*x11979))+((r10*x11966))+((sj0*x11972))+((r11*x11981))+(((-1.0)*gconst11*x11967*x11977))+(((-1.0)*sj0*x11971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11982=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11982;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11983=((1.0)*cj5);
IkReal x11984=((((-1.0)*r21*x11983))+(((-1.0)*r20*sj5)));
j4eval[0]=x11984;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x11983))+((r11*sj5))))));
j4eval[2]=IKsign(x11984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11985=cj5*cj5;
IkReal x11986=(cj3*r01);
IkReal x11987=(cj5*sj5);
IkReal x11988=((1.0)*cj3);
IkReal x11989=(((cj3*r00*r21*x11987))+(((-1.0)*r02*r22*x11988))+(((-1.0)*r00*r20*x11985*x11988))+((r20*x11986*x11987))+(((-1.0)*r21*x11986))+((r21*x11985*x11986)));
j4eval[0]=x11989;
j4eval[1]=IKsign(x11989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11990=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11990;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11991=((1.0)*cj5);
IkReal x11992=((((-1.0)*r21*x11991))+(((-1.0)*r20*sj5)));
j4eval[0]=x11992;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x11991))))));
j4eval[2]=IKsign(x11992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11993=cj5*cj5;
IkReal x11994=r01*r01;
IkReal x11995=(cj5*r00);
IkReal x11996=(r01*sj5);
IkReal x11997=(x11994+(((-1.0)*x11993*x11994))+(((-2.0)*x11995*x11996))+(r02*r02)+((x11993*(r00*r00))));
j4eval[0]=x11997;
j4eval[1]=((IKabs(r02))+(IKabs((x11995+(((-1.0)*x11996))))));
j4eval[2]=IKsign(x11997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11998=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11998);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11998);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11999=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11999);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11999);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12000=((1.0)*cj2);
CheckValue<IkReal> x12001=IKPowWithIntegerCheck(r22,-1);
if(!x12001.valid){
continue;
}
CheckValue<IkReal> x12002=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12002.valid){
continue;
}
if( IKabs(((x12001.value)*((((sj1*sj2))+(((-1.0)*cj1*x12000)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12002.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12000)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12001.value)*((((sj1*sj2))+(((-1.0)*cj1*x12000))))))+IKsqr(((x12002.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12000))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12001.value)*((((sj1*sj2))+(((-1.0)*cj1*x12000))))), ((x12002.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12000))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12003=IKsin(j4);
IkReal x12004=IKcos(j4);
IkReal x12005=(cj5*x12004);
IkReal x12006=(sj5*x12003);
IkReal x12007=((1.0)*cj5*x12003);
IkReal x12008=((1.0)*sj5*x12004);
evalcond[0]=((-1.0)*r22*x12004);
evalcond[1]=((((-1.0)*r10*x12007))+((r11*x12006)));
evalcond[2]=((((-1.0)*r22*x12003))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[3]=(((r00*x12005))+(((-1.0)*r01*x12008)));
evalcond[4]=((1.0)+(((-1.0)*r00*x12007))+((r01*x12006)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r10*x12005))+(((-1.0)*r11*x12008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12009=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12009.valid){
continue;
}
CheckValue<IkReal> x12010=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12010.valid){
continue;
}
if( IKabs(((-1.0)*(x12009.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12010.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12009.value)))+IKsqr(((x12010.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12009.value)), ((x12010.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12011=IKsin(j4);
IkReal x12012=IKcos(j4);
IkReal x12013=(cj5*x12012);
IkReal x12014=(sj5*x12011);
IkReal x12015=((1.0)*cj5*x12011);
IkReal x12016=((1.0)*sj5*x12012);
evalcond[0]=((-1.0)*r22*x12012);
evalcond[1]=(((r11*x12014))+(((-1.0)*r10*x12015)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12011)));
evalcond[3]=((((-1.0)*r01*x12016))+((r00*x12013)));
evalcond[4]=((1.0)+((r01*x12014))+(((-1.0)*r00*x12015)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r10*x12013))+(((-1.0)*r11*x12016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12017=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12017);
rxp0_2=(py*r00);
rxp1_0=(r21*x12017);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12018=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12018);
rxp0_2=(py*r00);
rxp1_0=(r21*x12018);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12019=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12019.valid){
continue;
}
CheckValue<IkReal> x12020=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12020.valid){
continue;
}
if( IKabs(((-1.0)*(x12019.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12020.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12019.value)))+IKsqr(((x12020.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12019.value)), ((x12020.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12021=IKsin(j4);
IkReal x12022=IKcos(j4);
IkReal x12023=(cj5*r00);
IkReal x12024=(cj5*r20);
IkReal x12025=(r21*sj5);
IkReal x12026=(r01*sj5);
IkReal x12027=((1.0)*x12021);
IkReal x12028=((1.0)*x12022);
evalcond[0]=((-1.0)*r12*x12022);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12027)));
evalcond[2]=(((x12021*x12025))+(((-1.0)*x12024*x12027)));
evalcond[3]=((((-1.0)*x12026*x12028))+((x12022*x12023)));
evalcond[4]=((1.0)+((x12021*x12026))+(((-1.0)*x12023*x12027)));
evalcond[5]=((((-1.0)*x12025*x12028))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12022*x12024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12029=IKPowWithIntegerCheck(r12,-1);
if(!x12029.valid){
continue;
}
CheckValue<IkReal> x12030=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12030.valid){
continue;
}
if( IKabs(((x12029.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12030.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12029.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12030.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12029.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12030.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12031=IKsin(j4);
IkReal x12032=IKcos(j4);
IkReal x12033=(cj5*r00);
IkReal x12034=(cj5*r20);
IkReal x12035=(r21*sj5);
IkReal x12036=(r01*sj5);
IkReal x12037=((1.0)*x12031);
IkReal x12038=((1.0)*x12032);
evalcond[0]=((-1.0)*r12*x12032);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12037)));
evalcond[2]=((((-1.0)*x12034*x12037))+((x12031*x12035)));
evalcond[3]=((((-1.0)*x12036*x12038))+((x12032*x12033)));
evalcond[4]=((1.0)+(((-1.0)*x12033*x12037))+((x12031*x12036)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12035*x12038))+((x12032*x12034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12039=cj5*cj5;
IkReal x12040=r01*r01;
IkReal x12041=(r01*sj5);
IkReal x12042=(cj5*r00);
CheckValue<IkReal> x12043 = IKatan2WithCheck(IkReal(((((-1.0)*x12041))+x12042)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12043.valid){
continue;
}
CheckValue<IkReal> x12044=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12041*x12042))+(((-1.0)*x12039*x12040))+x12040+(r02*r02)+((x12039*(r00*r00))))),-1);
if(!x12044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12043.value)+(((1.5707963267949)*(x12044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12045=IKsin(j4);
IkReal x12046=IKcos(j4);
IkReal x12047=(cj5*r10);
IkReal x12048=(r01*sj5);
IkReal x12049=(cj5*r00);
IkReal x12050=(cj5*r20);
IkReal x12051=((1.0)*x12046);
IkReal x12052=((1.0)*x12045);
IkReal x12053=(sj5*x12045);
evalcond[0]=((((-1.0)*r22*x12051))+(((-1.0)*x12050*x12052))+((r21*x12053)));
evalcond[1]=((((-1.0)*r12*x12051))+((r11*x12053))+(((-1.0)*x12047*x12052)));
evalcond[2]=((((-1.0)*x12048*x12051))+(((-1.0)*r02*x12052))+((x12046*x12049)));
evalcond[3]=((1.0)+(((-1.0)*x12049*x12052))+(((-1.0)*r02*x12051))+((x12045*x12048)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x12051))+((x12046*x12047))+(((-1.0)*r12*x12052)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12046*x12050))+(((-1.0)*r22*x12052))+(((-1.0)*r21*sj5*x12051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12054=((1.0)*cj5);
CheckValue<IkReal> x12055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12054))+(((-1.0)*r20*sj5)))),-1);
if(!x12055.valid){
continue;
}
CheckValue<IkReal> x12056 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12054))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12055.value)))+(x12056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12057=IKsin(j4);
IkReal x12058=IKcos(j4);
IkReal x12059=(cj5*r10);
IkReal x12060=(r01*sj5);
IkReal x12061=(cj5*r00);
IkReal x12062=(cj5*r20);
IkReal x12063=((1.0)*x12058);
IkReal x12064=((1.0)*x12057);
IkReal x12065=(sj5*x12057);
evalcond[0]=(((r21*x12065))+(((-1.0)*x12062*x12064))+(((-1.0)*r22*x12063)));
evalcond[1]=((((-1.0)*r12*x12063))+(((-1.0)*x12059*x12064))+((r11*x12065)));
evalcond[2]=((((-1.0)*r02*x12064))+(((-1.0)*x12060*x12063))+((x12058*x12061)));
evalcond[3]=((1.0)+(((-1.0)*x12061*x12064))+((x12057*x12060))+(((-1.0)*r02*x12063)));
evalcond[4]=(((cj2*sj1))+((x12058*x12059))+((cj1*sj2))+(((-1.0)*r12*x12064))+(((-1.0)*r11*sj5*x12063)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12064))+((x12058*x12062))+(((-1.0)*r21*sj5*x12063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12066 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12066.valid){
continue;
}
CheckValue<IkReal> x12067=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12066.value)+(((1.5707963267949)*(x12067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12068=IKsin(j4);
IkReal x12069=IKcos(j4);
IkReal x12070=(cj5*r10);
IkReal x12071=(r01*sj5);
IkReal x12072=(cj5*r00);
IkReal x12073=(cj5*r20);
IkReal x12074=((1.0)*x12069);
IkReal x12075=((1.0)*x12068);
IkReal x12076=(sj5*x12068);
evalcond[0]=((((-1.0)*x12073*x12075))+(((-1.0)*r22*x12074))+((r21*x12076)));
evalcond[1]=(((r11*x12076))+(((-1.0)*r12*x12074))+(((-1.0)*x12070*x12075)));
evalcond[2]=((((-1.0)*r02*x12075))+(((-1.0)*x12071*x12074))+((x12069*x12072)));
evalcond[3]=((1.0)+(((-1.0)*x12072*x12075))+(((-1.0)*r02*x12074))+((x12068*x12071)));
evalcond[4]=((((-1.0)*r11*sj5*x12074))+((cj2*sj1))+((cj1*sj2))+((x12069*x12070))+(((-1.0)*r12*x12075)));
evalcond[5]=((((-1.0)*r21*sj5*x12074))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12069*x12073))+(((-1.0)*r22*x12075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12077=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12077;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12078=((1.0)*cj5);
IkReal x12079=((((-1.0)*r21*x12078))+(((-1.0)*r20*sj5)));
j4eval[0]=x12079;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12078))+((r11*sj5))))));
j4eval[2]=IKsign(x12079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12080=cj5*cj5;
IkReal x12081=r01*r01;
IkReal x12082=(r01*sj5);
IkReal x12083=(cj5*r00);
IkReal x12084=((((2.0)*x12082*x12083))+(((-1.0)*x12081))+(((-1.0)*x12080*(r00*r00)))+(((-1.0)*(r02*r02)))+((x12080*x12081)));
j4eval[0]=x12084;
j4eval[1]=IKsign(x12084);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12083))+x12082))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12085=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12085);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12085);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12086=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12086);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12086);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12087=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12087)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x12087)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12088=((1.0)*cj5);
CheckValue<IkReal> x12089=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12088))),-1);
if(!x12089.valid){
continue;
}
CheckValue<IkReal> x12090=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12088))),-1);
if(!x12090.valid){
continue;
}
if( IKabs(((-1.0)*(x12089.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12090.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12089.value)))+IKsqr(((x12090.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12089.value)), ((x12090.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12091=IKsin(j4);
IkReal x12092=IKcos(j4);
IkReal x12093=((1.0)*cj5);
IkReal x12094=(sj5*x12092);
IkReal x12095=(sj5*x12091);
evalcond[0]=((-1.0)*r22*x12092);
evalcond[1]=(((r22*x12091))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[2]=(((r11*x12095))+(((-1.0)*r10*x12091*x12093)));
evalcond[3]=(((r01*x12094))+(((-1.0)*r00*x12092*x12093)));
evalcond[4]=((1.0)+((r01*x12095))+(((-1.0)*r00*x12091*x12093)));
evalcond[5]=(((r11*x12094))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r10*x12092*x12093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12096=((1.0)*sj1);
CheckValue<IkReal> x12097=IKPowWithIntegerCheck(r22,-1);
if(!x12097.valid){
continue;
}
CheckValue<IkReal> x12098=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12098.valid){
continue;
}
if( IKabs(((x12097.value)*(((((-1.0)*sj2*x12096))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12098.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12096)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12097.value)*(((((-1.0)*sj2*x12096))+((cj1*cj2))))))+IKsqr(((x12098.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12096))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12097.value)*(((((-1.0)*sj2*x12096))+((cj1*cj2))))), ((x12098.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12096))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12099=IKsin(j4);
IkReal x12100=IKcos(j4);
IkReal x12101=((1.0)*cj5);
IkReal x12102=(sj5*x12100);
IkReal x12103=(sj5*x12099);
evalcond[0]=((-1.0)*r22*x12100);
evalcond[1]=(((r22*x12099))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[2]=((((-1.0)*r10*x12099*x12101))+((r11*x12103)));
evalcond[3]=((((-1.0)*r00*x12100*x12101))+((r01*x12102)));
evalcond[4]=((1.0)+(((-1.0)*r00*x12099*x12101))+((r01*x12103)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r10*x12100*x12101))+((r11*x12102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12104=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12104);
rxp0_2=(py*r00);
rxp1_0=(r21*x12104);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12105=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12105)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12105)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12106=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12106);
rxp0_2=(py*r00);
rxp1_0=(r21*x12106);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12107=((1.0)*sj1);
CheckValue<IkReal> x12108=IKPowWithIntegerCheck(r12,-1);
if(!x12108.valid){
continue;
}
CheckValue<IkReal> x12109=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12109.valid){
continue;
}
if( IKabs(((x12108.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12107)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12109.value)*(((((-1.0)*sj2*x12107))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12108.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12107))))))+IKsqr(((x12109.value)*(((((-1.0)*sj2*x12107))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12108.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12107))))), ((x12109.value)*(((((-1.0)*sj2*x12107))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12110=IKsin(j4);
IkReal x12111=IKcos(j4);
IkReal x12112=((1.0)*cj5*r00);
IkReal x12113=(sj5*x12111);
IkReal x12114=(sj5*x12110);
IkReal x12115=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12111);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r12*x12110)));
evalcond[2]=((((-1.0)*x12110*x12115))+((r21*x12114)));
evalcond[3]=(((r01*x12113))+(((-1.0)*x12111*x12112)));
evalcond[4]=((1.0)+((r01*x12114))+(((-1.0)*x12110*x12112)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12111*x12115))+((r21*x12113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12116=((1.0)*cj5);
CheckValue<IkReal> x12117=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12116))),-1);
if(!x12117.valid){
continue;
}
CheckValue<IkReal> x12118=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12116))),-1);
if(!x12118.valid){
continue;
}
if( IKabs(((-1.0)*(x12117.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12118.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12117.value)))+IKsqr(((x12118.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12117.value)), ((x12118.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12119=IKsin(j4);
IkReal x12120=IKcos(j4);
IkReal x12121=((1.0)*cj5*r00);
IkReal x12122=(sj5*x12120);
IkReal x12123=(sj5*x12119);
IkReal x12124=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12120);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r12*x12119)));
evalcond[2]=(((r21*x12123))+(((-1.0)*x12119*x12124)));
evalcond[3]=(((r01*x12122))+(((-1.0)*x12120*x12121)));
evalcond[4]=((1.0)+((r01*x12123))+(((-1.0)*x12119*x12121)));
evalcond[5]=(((r21*x12122))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12120*x12124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12125=cj5*cj5;
IkReal x12126=r01*r01;
IkReal x12127=(r01*sj5);
IkReal x12128=(cj5*r00);
CheckValue<IkReal> x12129 = IKatan2WithCheck(IkReal((x12127+(((-1.0)*x12128)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12129.valid){
continue;
}
CheckValue<IkReal> x12130=IKPowWithIntegerCheck(IKsign((((x12125*x12126))+(((-1.0)*(r02*r02)))+(((-1.0)*x12125*(r00*r00)))+(((2.0)*x12127*x12128))+(((-1.0)*x12126)))),-1);
if(!x12130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12129.value)+(((1.5707963267949)*(x12130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12131=IKcos(j4);
IkReal x12132=IKsin(j4);
IkReal x12133=(cj5*r00);
IkReal x12134=(cj5*r10);
IkReal x12135=(r21*sj5);
IkReal x12136=(cj5*r20);
IkReal x12137=((1.0)*x12131);
IkReal x12138=((1.0)*x12132);
IkReal x12139=(sj5*x12132);
IkReal x12140=(sj5*x12131);
evalcond[0]=(((r01*x12140))+(((-1.0)*x12133*x12137))+((r02*x12132)));
evalcond[1]=((((-1.0)*r22*x12137))+(((-1.0)*x12136*x12138))+((x12132*x12135)));
evalcond[2]=((((-1.0)*x12134*x12138))+(((-1.0)*r12*x12137))+((r11*x12139)));
evalcond[3]=((1.0)+((r01*x12139))+(((-1.0)*x12133*x12138))+(((-1.0)*r02*x12137)));
evalcond[4]=(((cj2*sj1))+((r12*x12132))+((cj1*sj2))+((r11*x12140))+(((-1.0)*x12134*x12137)));
evalcond[5]=(((x12131*x12135))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12132))+(((-1.0)*x12136*x12137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12141=((1.0)*cj5);
CheckValue<IkReal> x12142 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x12141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12142.valid){
continue;
}
CheckValue<IkReal> x12143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12141))+(((-1.0)*r20*sj5)))),-1);
if(!x12143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12142.value)+(((1.5707963267949)*(x12143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12144=IKcos(j4);
IkReal x12145=IKsin(j4);
IkReal x12146=(cj5*r00);
IkReal x12147=(cj5*r10);
IkReal x12148=(r21*sj5);
IkReal x12149=(cj5*r20);
IkReal x12150=((1.0)*x12144);
IkReal x12151=((1.0)*x12145);
IkReal x12152=(sj5*x12145);
IkReal x12153=(sj5*x12144);
evalcond[0]=(((r02*x12145))+((r01*x12153))+(((-1.0)*x12146*x12150)));
evalcond[1]=((((-1.0)*r22*x12150))+((x12145*x12148))+(((-1.0)*x12149*x12151)));
evalcond[2]=((((-1.0)*r12*x12150))+((r11*x12152))+(((-1.0)*x12147*x12151)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12150))+((r01*x12152))+(((-1.0)*x12146*x12151)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x12145))+((r11*x12153))+(((-1.0)*x12147*x12150)));
evalcond[5]=(((r22*x12145))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12149*x12150))+((x12144*x12148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12154 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12154.valid){
continue;
}
CheckValue<IkReal> x12155=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12154.value)+(((1.5707963267949)*(x12155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12156=IKcos(j4);
IkReal x12157=IKsin(j4);
IkReal x12158=(cj5*r00);
IkReal x12159=(cj5*r10);
IkReal x12160=(r21*sj5);
IkReal x12161=(cj5*r20);
IkReal x12162=((1.0)*x12156);
IkReal x12163=((1.0)*x12157);
IkReal x12164=(sj5*x12157);
IkReal x12165=(sj5*x12156);
evalcond[0]=(((r02*x12157))+((r01*x12165))+(((-1.0)*x12158*x12162)));
evalcond[1]=((((-1.0)*r22*x12162))+(((-1.0)*x12161*x12163))+((x12157*x12160)));
evalcond[2]=(((r11*x12164))+(((-1.0)*r12*x12162))+(((-1.0)*x12159*x12163)));
evalcond[3]=((1.0)+((r01*x12164))+(((-1.0)*r02*x12162))+(((-1.0)*x12158*x12163)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x12157))+((r11*x12165))+(((-1.0)*x12159*x12162)));
evalcond[5]=(((x12156*x12160))+((r22*x12157))+(((-1.0)*x12161*x12162))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12167 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12167)==0){
continue;
}
IkReal x12166=pow(x12167,-0.5);
CheckValue<IkReal> x12168 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12168.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12168.value));
IkReal gconst25=((-1.0)*r11*x12166);
IkReal gconst26=(r10*x12166);
CheckValue<IkReal> x12169 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12169.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12169.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12172 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12172.valid){
continue;
}
IkReal x12170=((-1.0)*(x12172.value));
IkReal x12171=x12166;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x12170;
IkReal gconst24=x12170;
IkReal gconst25=((-1.0)*r11*x12171);
IkReal gconst26=(r10*x12171);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12175 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12175.valid){
continue;
}
IkReal x12173=((-1.0)*(x12175.value));
IkReal x12174=x12166;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x12173;
IkReal gconst24=x12173;
IkReal gconst25=((-1.0)*r11*x12174);
IkReal gconst26=(r10*x12174);
CheckValue<IkReal> x12183=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12183.valid){
continue;
}
IkReal x12176=x12183.value;
IkReal x12177=(sj3*x12176);
IkReal x12178=(r20*x12177);
IkReal x12179=(r00*x12177);
IkReal x12180=(r01*x12177);
IkReal x12181=(r21*x12177);
IkReal x12182=(r10*r11*x12177);
j4eval[0]=IKsign((((r21*x12180*(r11*r11)))+((r00*x12178*(r10*r10)))+((r01*r10*r11*x12178))+((r10*r11*r21*x12179))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12184=gconst25*gconst25;
IkReal x12185=gconst26*gconst26;
IkReal x12186=(cj3*r20);
IkReal x12187=(gconst26*r01);
IkReal x12188=(r22*sj3);
IkReal x12189=(r20*sj3);
IkReal x12190=(r21*sj3);
IkReal x12191=((1.0)*cj3);
IkReal x12192=((1.0)*x12185);
IkReal x12193=(gconst25*gconst26*r00);
CheckValue<IkReal> x12194=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12186*x12192))+((gconst25*x12186*x12187))+((cj3*r21*x12193))+(((-1.0)*r01*r21*x12184*x12191))+(((-1.0)*r02*r22*x12191)))),-1);
if(!x12194.valid){
continue;
}
CheckValue<IkReal> x12195 = IKatan2WithCheck(IkReal((((x12187*x12188))+((gconst25*r00*x12188)))),IkReal((((r00*x12184*x12190))+(((-1.0)*x12189*x12193))+((gconst25*x12187*x12190))+(((-1.0)*r01*x12189*x12192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12194.value)))+(x12195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12196=IKsin(j4);
IkReal x12197=IKcos(j4);
IkReal x12198=(cj2*sj1);
IkReal x12199=(cj1*sj2);
IkReal x12200=(gconst26*sj3);
IkReal x12201=(gconst25*sj3);
IkReal x12202=(gconst26*r10);
IkReal x12203=(gconst25*r11);
IkReal x12204=(sj1*sj2);
IkReal x12205=(cj3*gconst25);
IkReal x12206=(cj1*cj2);
IkReal x12207=(gconst26*r00);
IkReal x12208=(gconst26*r20);
IkReal x12209=(cj3*gconst26);
IkReal x12210=((1.0)*x12197);
IkReal x12211=((1.0)*x12196);
IkReal x12212=(cj3*x12196);
IkReal x12213=(gconst25*x12196);
IkReal x12214=(x12198+x12199);
evalcond[0]=((((-1.0)*r22*x12210))+((r21*x12213))+(((-1.0)*x12208*x12211)));
evalcond[1]=((((-1.0)*x12202*x12211))+(((-1.0)*r12*x12210))+((x12196*x12203)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12210))+(((-1.0)*x12207*x12211))+((r01*x12213)));
evalcond[3]=(((r02*x12212))+(((-1.0)*cj3*x12207*x12210))+((r01*x12197*x12205))+((r01*x12200))+((r00*x12201)));
evalcond[4]=((((-1.0)*r01*x12201*x12210))+((r00*x12197*x12200))+(((-1.0)*r02*sj3*x12211))+((r01*x12209))+((r00*x12205)));
evalcond[5]=(((r22*x12212))+(((-1.0)*cj3*x12208*x12210))+x12214+((r21*x12197*x12205))+((r21*x12200))+((r20*x12201)));
evalcond[6]=((((-1.0)*r12*sj3*x12211))+x12214+((r10*x12197*x12200))+((r10*x12205))+(((-1.0)*r11*x12201*x12210))+((r11*x12209)));
evalcond[7]=((((-1.0)*x12204))+((r12*x12212))+((cj3*x12197*x12203))+(((-1.0)*cj3*x12202*x12210))+x12206+((r10*x12201))+((r11*x12200)));
evalcond[8]=((((-1.0)*x12206))+(((-1.0)*r21*x12201*x12210))+x12204+(((-1.0)*r22*sj3*x12211))+((r21*x12209))+((r20*x12205))+((r20*x12197*x12200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12215=gconst25*gconst25;
IkReal x12216=gconst26*gconst26;
IkReal x12217=(r01*sj3);
IkReal x12218=(gconst25*gconst26);
IkReal x12219=(cj3*r00);
IkReal x12220=(cj3*r01);
IkReal x12221=(r00*sj3);
IkReal x12222=(r21*x12215);
IkReal x12223=((1.0)*cj3*r20);
CheckValue<IkReal> x12224=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12217*x12218))+((x12217*x12222))+((r20*x12216*x12221))+((r02*r22*sj3))+(((-1.0)*r21*x12218*x12221)))),-1);
if(!x12224.valid){
continue;
}
CheckValue<IkReal> x12225 = IKatan2WithCheck(IkReal((((gconst25*r22*x12219))+((gconst26*r22*x12220)))),IkReal((((r21*x12218*x12220))+((x12219*x12222))+(((-1.0)*r20*x12218*x12219))+(((-1.0)*r20*x12216*x12220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12224.value)))+(x12225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12226=IKsin(j4);
IkReal x12227=IKcos(j4);
IkReal x12228=(cj2*sj1);
IkReal x12229=(cj1*sj2);
IkReal x12230=(gconst26*sj3);
IkReal x12231=(gconst25*sj3);
IkReal x12232=(gconst26*r10);
IkReal x12233=(gconst25*r11);
IkReal x12234=(sj1*sj2);
IkReal x12235=(cj3*gconst25);
IkReal x12236=(cj1*cj2);
IkReal x12237=(gconst26*r00);
IkReal x12238=(gconst26*r20);
IkReal x12239=(cj3*gconst26);
IkReal x12240=((1.0)*x12227);
IkReal x12241=((1.0)*x12226);
IkReal x12242=(cj3*x12226);
IkReal x12243=(gconst25*x12226);
IkReal x12244=(x12228+x12229);
evalcond[0]=((((-1.0)*r22*x12240))+(((-1.0)*x12238*x12241))+((r21*x12243)));
evalcond[1]=((((-1.0)*r12*x12240))+((x12226*x12233))+(((-1.0)*x12232*x12241)));
evalcond[2]=((1.0)+((r01*x12243))+(((-1.0)*r02*x12240))+(((-1.0)*x12237*x12241)));
evalcond[3]=(((r01*x12230))+((r00*x12231))+((r01*x12227*x12235))+(((-1.0)*cj3*x12237*x12240))+((r02*x12242)));
evalcond[4]=((((-1.0)*r02*sj3*x12241))+((r01*x12239))+((r00*x12235))+(((-1.0)*r01*x12231*x12240))+((r00*x12227*x12230)));
evalcond[5]=(((r20*x12231))+x12244+(((-1.0)*cj3*x12238*x12240))+((r21*x12227*x12235))+((r22*x12242))+((r21*x12230)));
evalcond[6]=(((r10*x12235))+x12244+(((-1.0)*r11*x12231*x12240))+((r10*x12227*x12230))+((r11*x12239))+(((-1.0)*r12*sj3*x12241)));
evalcond[7]=(((r10*x12231))+((cj3*x12227*x12233))+(((-1.0)*cj3*x12232*x12240))+((r12*x12242))+x12236+(((-1.0)*x12234))+((r11*x12230)));
evalcond[8]=(((r20*x12227*x12230))+(((-1.0)*r21*x12231*x12240))+(((-1.0)*r22*sj3*x12241))+((r20*x12235))+x12234+(((-1.0)*x12236))+((r21*x12239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12245=((1.0)*gconst26);
CheckValue<IkReal> x12246=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12245))+(((-1.0)*gconst25*r20)))),-1);
if(!x12246.valid){
continue;
}
CheckValue<IkReal> x12247 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12245))+((gconst25*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12246.value)))+(x12247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12248=IKsin(j4);
IkReal x12249=IKcos(j4);
IkReal x12250=(cj2*sj1);
IkReal x12251=(cj1*sj2);
IkReal x12252=(gconst26*sj3);
IkReal x12253=(gconst25*sj3);
IkReal x12254=(gconst26*r10);
IkReal x12255=(gconst25*r11);
IkReal x12256=(sj1*sj2);
IkReal x12257=(cj3*gconst25);
IkReal x12258=(cj1*cj2);
IkReal x12259=(gconst26*r00);
IkReal x12260=(gconst26*r20);
IkReal x12261=(cj3*gconst26);
IkReal x12262=((1.0)*x12249);
IkReal x12263=((1.0)*x12248);
IkReal x12264=(cj3*x12248);
IkReal x12265=(gconst25*x12248);
IkReal x12266=(x12251+x12250);
evalcond[0]=((((-1.0)*x12260*x12263))+((r21*x12265))+(((-1.0)*r22*x12262)));
evalcond[1]=((((-1.0)*r12*x12262))+(((-1.0)*x12254*x12263))+((x12248*x12255)));
evalcond[2]=((1.0)+((r01*x12265))+(((-1.0)*r02*x12262))+(((-1.0)*x12259*x12263)));
evalcond[3]=(((r01*x12252))+((r00*x12253))+((r01*x12249*x12257))+((r02*x12264))+(((-1.0)*cj3*x12259*x12262)));
evalcond[4]=(((r01*x12261))+(((-1.0)*r01*x12253*x12262))+((r00*x12249*x12252))+((r00*x12257))+(((-1.0)*r02*sj3*x12263)));
evalcond[5]=(((r21*x12249*x12257))+x12266+((r20*x12253))+((r21*x12252))+((r22*x12264))+(((-1.0)*cj3*x12260*x12262)));
evalcond[6]=(((r10*x12249*x12252))+((r11*x12261))+((r10*x12257))+x12266+(((-1.0)*r11*x12253*x12262))+(((-1.0)*r12*sj3*x12263)));
evalcond[7]=(((r12*x12264))+(((-1.0)*cj3*x12254*x12262))+((r10*x12253))+((r11*x12252))+x12258+((cj3*x12249*x12255))+(((-1.0)*x12256)));
evalcond[8]=((((-1.0)*r22*sj3*x12263))+x12256+(((-1.0)*r21*x12253*x12262))+((r20*x12257))+(((-1.0)*x12258))+((r20*x12249*x12252))+((r21*x12261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12268 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12268)==0){
continue;
}
IkReal x12267=pow(x12268,-0.5);
CheckValue<IkReal> x12269 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12269.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x12269.value))));
IkReal gconst28=((1.0)*r11*x12267);
IkReal gconst29=((-1.0)*r10*x12267);
CheckValue<IkReal> x12270 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12270.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12270.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12273 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12273.valid){
continue;
}
IkReal x12271=((1.0)*(x12273.value));
IkReal x12272=x12267;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12271)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12271)));
IkReal gconst28=((1.0)*r11*x12272);
IkReal gconst29=((-1.0)*r10*x12272);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12274=gconst29*gconst29;
IkReal x12275=gconst28*gconst28;
IkReal x12276=(cj3*r01);
IkReal x12277=(cj3*r00);
IkReal x12278=(r00*sj3);
IkReal x12279=(r01*sj3);
IkReal x12280=(gconst28*gconst29);
IkReal x12281=((1.0)*r20);
IkReal x12282=(r20*x12274);
IkReal x12283=(r21*x12275);
CheckValue<IkReal> x12284=IKPowWithIntegerCheck(IKsign((((x12279*x12283))+(((-1.0)*r21*x12278*x12280))+((x12278*x12282))+(((-1.0)*x12279*x12280*x12281))+((r02*r22*sj3)))),-1);
if(!x12284.valid){
continue;
}
CheckValue<IkReal> x12285 = IKatan2WithCheck(IkReal((((gconst28*r22*x12277))+((gconst29*r22*x12276)))),IkReal((((r21*x12276*x12280))+(((-1.0)*x12277*x12280*x12281))+(((-1.0)*x12274*x12276*x12281))+((x12277*x12283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12284.value)))+(x12285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12286=IKsin(j4);
IkReal x12287=IKcos(j4);
IkReal x12288=(cj2*sj1);
IkReal x12289=(cj1*sj2);
IkReal x12290=(gconst29*r20);
IkReal x12291=(gconst28*r20);
IkReal x12292=(sj1*sj2);
IkReal x12293=(cj1*cj2);
IkReal x12294=(r11*sj3);
IkReal x12295=(gconst29*r01);
IkReal x12296=(gconst29*r10);
IkReal x12297=(cj3*gconst28);
IkReal x12298=(cj3*gconst29);
IkReal x12299=(gconst28*sj3);
IkReal x12300=(gconst29*r00);
IkReal x12301=((1.0)*x12287);
IkReal x12302=((1.0)*x12286);
IkReal x12303=(gconst28*x12286);
IkReal x12304=(cj3*x12286);
IkReal x12305=(sj3*x12287);
IkReal x12306=(x12288+x12289);
evalcond[0]=(((r21*x12303))+(((-1.0)*r22*x12301))+(((-1.0)*x12290*x12302)));
evalcond[1]=((((-1.0)*x12296*x12302))+((r11*x12303))+(((-1.0)*r12*x12301)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12301))+((r01*x12303))+(((-1.0)*x12300*x12302)));
evalcond[3]=(((r00*x12299))+((r01*x12287*x12297))+((sj3*x12295))+(((-1.0)*r00*x12298*x12301))+((r02*x12304)));
evalcond[4]=(((x12300*x12305))+((cj3*x12295))+((r00*x12297))+(((-1.0)*r02*sj3*x12302))+(((-1.0)*r01*x12299*x12301)));
evalcond[5]=(((gconst29*r21*sj3))+(((-1.0)*cj3*x12290*x12301))+((r21*x12287*x12297))+x12306+((sj3*x12291))+((r22*x12304)));
evalcond[6]=((((-1.0)*r12*sj3*x12302))+((r10*x12297))+x12306+((r11*x12298))+((x12296*x12305))+(((-1.0)*gconst28*x12294*x12301)));
evalcond[7]=(((r10*x12299))+((gconst29*x12294))+x12293+(((-1.0)*cj3*x12296*x12301))+((r12*x12304))+(((-1.0)*x12292))+((r11*x12287*x12297)));
evalcond[8]=(((r21*x12298))+((x12290*x12305))+(((-1.0)*r22*sj3*x12302))+((cj3*x12291))+x12292+(((-1.0)*x12293))+(((-1.0)*r21*x12299*x12301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12307=((1.0)*gconst29);
CheckValue<IkReal> x12308=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12307))+(((-1.0)*gconst28*r20)))),-1);
if(!x12308.valid){
continue;
}
CheckValue<IkReal> x12309 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12307))+((gconst28*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12308.value)))+(x12309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12310=IKsin(j4);
IkReal x12311=IKcos(j4);
IkReal x12312=(cj2*sj1);
IkReal x12313=(cj1*sj2);
IkReal x12314=(gconst29*r20);
IkReal x12315=(gconst28*r20);
IkReal x12316=(sj1*sj2);
IkReal x12317=(cj1*cj2);
IkReal x12318=(r11*sj3);
IkReal x12319=(gconst29*r01);
IkReal x12320=(gconst29*r10);
IkReal x12321=(cj3*gconst28);
IkReal x12322=(cj3*gconst29);
IkReal x12323=(gconst28*sj3);
IkReal x12324=(gconst29*r00);
IkReal x12325=((1.0)*x12311);
IkReal x12326=((1.0)*x12310);
IkReal x12327=(gconst28*x12310);
IkReal x12328=(cj3*x12310);
IkReal x12329=(sj3*x12311);
IkReal x12330=(x12312+x12313);
evalcond[0]=((((-1.0)*r22*x12325))+((r21*x12327))+(((-1.0)*x12314*x12326)));
evalcond[1]=((((-1.0)*x12320*x12326))+(((-1.0)*r12*x12325))+((r11*x12327)));
evalcond[2]=((1.0)+((r01*x12327))+(((-1.0)*x12324*x12326))+(((-1.0)*r02*x12325)));
evalcond[3]=(((r01*x12311*x12321))+(((-1.0)*r00*x12322*x12325))+((sj3*x12319))+((r00*x12323))+((r02*x12328)));
evalcond[4]=(((r00*x12321))+((x12324*x12329))+(((-1.0)*r02*sj3*x12326))+(((-1.0)*r01*x12323*x12325))+((cj3*x12319)));
evalcond[5]=((((-1.0)*cj3*x12314*x12325))+((gconst29*r21*sj3))+((sj3*x12315))+x12330+((r22*x12328))+((r21*x12311*x12321)));
evalcond[6]=(x12330+(((-1.0)*r12*sj3*x12326))+((r10*x12321))+((r11*x12322))+(((-1.0)*gconst28*x12318*x12325))+((x12320*x12329)));
evalcond[7]=(((gconst29*x12318))+((r11*x12311*x12321))+x12317+(((-1.0)*x12316))+(((-1.0)*cj3*x12320*x12325))+((r10*x12323))+((r12*x12328)));
evalcond[8]=(((x12314*x12329))+x12316+(((-1.0)*r21*x12323*x12325))+(((-1.0)*x12317))+((r21*x12322))+(((-1.0)*r22*sj3*x12326))+((cj3*x12315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12331=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12331);
rxp0_2=(py*r00);
rxp1_0=(r21*x12331);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12332=(cj5*r00);
IkReal x12333=(r01*sj5);
j4eval[0]=(x12333+(((-1.0)*x12332)));
j4eval[1]=((((-1.0)*sj3*x12333))+((sj3*x12332)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12334=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12334);
rxp0_2=(py*r00);
rxp1_0=(r21*x12334);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12335=(r01*sj5);
IkReal x12336=((1.0)*cj5*r00);
j4eval[0]=(x12335+(((-1.0)*x12336)));
j4eval[1]=(((cj3*x12335))+(((-1.0)*cj3*x12336)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12337=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12337);
rxp0_2=(py*r00);
rxp1_0=(r21*x12337);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12338=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12338);
rxp0_2=(py*r00);
rxp1_0=(r21*x12338);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12339=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12339);
rxp0_2=(py*r00);
rxp1_0=(r21*x12339);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal x12340=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12340)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12340)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12341=((1.0)*cj5);
CheckValue<IkReal> x12342=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12341))),-1);
if(!x12342.valid){
continue;
}
CheckValue<IkReal> x12343=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12341))),-1);
if(!x12343.valid){
continue;
}
if( IKabs(((-1.0)*(x12342.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12343.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12342.value)))+IKsqr(((x12343.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12342.value)), ((x12343.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12344=IKsin(j4);
IkReal x12345=IKcos(j4);
IkReal x12346=((1.0)*cj5*r00);
IkReal x12347=(sj5*x12345);
IkReal x12348=(sj5*x12344);
IkReal x12349=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12345);
evalcond[1]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x12344)));
evalcond[2]=((((-1.0)*x12344*x12349))+((r21*x12348)));
evalcond[3]=((((-1.0)*x12345*x12346))+((r01*x12347)));
evalcond[4]=((1.0)+(((-1.0)*x12344*x12346))+((r01*x12348)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12345*x12349))+((cj1*sj2))+((r21*x12347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12350=((1.0)*cj2);
CheckValue<IkReal> x12351=IKPowWithIntegerCheck(r12,-1);
if(!x12351.valid){
continue;
}
CheckValue<IkReal> x12352=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12352.valid){
continue;
}
if( IKabs(((x12351.value)*((((sj1*sj2))+(((-1.0)*cj1*x12350)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12352.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12350)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12351.value)*((((sj1*sj2))+(((-1.0)*cj1*x12350))))))+IKsqr(((x12352.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12350))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12351.value)*((((sj1*sj2))+(((-1.0)*cj1*x12350))))), ((x12352.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12350))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12353=IKsin(j4);
IkReal x12354=IKcos(j4);
IkReal x12355=((1.0)*cj5*r00);
IkReal x12356=(sj5*x12354);
IkReal x12357=(sj5*x12353);
IkReal x12358=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12354);
evalcond[1]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x12353)));
evalcond[2]=((((-1.0)*x12353*x12358))+((r21*x12357)));
evalcond[3]=((((-1.0)*x12354*x12355))+((r01*x12356)));
evalcond[4]=((1.0)+(((-1.0)*x12353*x12355))+((r01*x12357)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12354*x12358))+((cj1*sj2))+((r21*x12356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12359=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12359);
rxp0_2=(py*r00);
rxp1_0=(r21*x12359);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12360=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12360);
rxp0_2=(py*r00);
rxp1_0=(r21*x12360);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12361=((1.0)*sj1);
CheckValue<IkReal> x12362=IKPowWithIntegerCheck(r12,-1);
if(!x12362.valid){
continue;
}
CheckValue<IkReal> x12363=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12363.valid){
continue;
}
if( IKabs(((x12362.value)*(((((-1.0)*sj2*x12361))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12363.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12361)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12362.value)*(((((-1.0)*sj2*x12361))+((cj1*cj2))))))+IKsqr(((x12363.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12361))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12362.value)*(((((-1.0)*sj2*x12361))+((cj1*cj2))))), ((x12363.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12361))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12364=IKsin(j4);
IkReal x12365=IKcos(j4);
IkReal x12366=(cj5*r00);
IkReal x12367=(cj5*r20);
IkReal x12368=(r21*sj5);
IkReal x12369=(r01*sj5);
IkReal x12370=((1.0)*x12364);
IkReal x12371=((1.0)*x12365);
evalcond[0]=((-1.0)*r12*x12365);
evalcond[1]=(((x12364*x12368))+(((-1.0)*x12367*x12370)));
evalcond[2]=((((-1.0)*x12369*x12371))+((x12365*x12366)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x12370))+((cj1*cj2)));
evalcond[4]=((1.0)+((x12364*x12369))+(((-1.0)*x12366*x12370)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12368*x12371))+((cj1*sj2))+((x12365*x12367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12372=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12372.valid){
continue;
}
CheckValue<IkReal> x12373=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12373.valid){
continue;
}
if( IKabs(((-1.0)*(x12372.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12373.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12372.value)))+IKsqr(((x12373.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12372.value)), ((x12373.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12374=IKsin(j4);
IkReal x12375=IKcos(j4);
IkReal x12376=(cj5*r00);
IkReal x12377=(cj5*r20);
IkReal x12378=(r21*sj5);
IkReal x12379=(r01*sj5);
IkReal x12380=((1.0)*x12374);
IkReal x12381=((1.0)*x12375);
evalcond[0]=((-1.0)*r12*x12375);
evalcond[1]=((((-1.0)*x12377*x12380))+((x12374*x12378)));
evalcond[2]=(((x12375*x12376))+(((-1.0)*x12379*x12381)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x12380)));
evalcond[4]=((1.0)+(((-1.0)*x12376*x12380))+((x12374*x12379)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12375*x12377))+(((-1.0)*x12378*x12381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12382=((1.0)*r01);
CheckValue<IkReal> x12383=IKPowWithIntegerCheck(r12,-1);
if(!x12383.valid){
continue;
}
CheckValue<IkReal> x12384=IKPowWithIntegerCheck(sj3,-1);
if(!x12384.valid){
continue;
}
CheckValue<IkReal> x12385=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x12382))+((cj5*r00*sj3))),-1);
if(!x12385.valid){
continue;
}
if( IKabs(((x12383.value)*(x12384.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12385.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12382)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12383.value)*(x12384.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12385.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12382))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12383.value)*(x12384.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12385.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12382))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12386=IKsin(j4);
IkReal x12387=IKcos(j4);
IkReal x12388=(cj2*sj1);
IkReal x12389=(cj1*sj2);
IkReal x12390=(sj1*sj2);
IkReal x12391=(cj5*sj3);
IkReal x12392=(cj3*cj5);
IkReal x12393=(r21*sj5);
IkReal x12394=(cj1*cj2);
IkReal x12395=(r00*sj5);
IkReal x12396=(r01*sj5);
IkReal x12397=(r20*sj5);
IkReal x12398=((1.0)*x12386);
IkReal x12399=(r20*x12387);
IkReal x12400=(r00*x12387);
IkReal x12401=(cj3*x12387);
IkReal x12402=(x12389+x12388);
IkReal x12403=((1.0)*sj3*x12387);
evalcond[0]=((-1.0)*r12*x12387);
evalcond[1]=(((x12386*x12393))+(((-1.0)*cj5*r20*x12398)));
evalcond[2]=(x12402+(((-1.0)*r12*sj3*x12398)));
evalcond[3]=(x12394+(((-1.0)*x12390))+((cj3*r12*x12386)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x12398))+((x12386*x12396)));
evalcond[5]=(((cj3*x12395))+((x12391*x12400))+((r01*x12392))+(((-1.0)*x12396*x12403)));
evalcond[6]=(((x12396*x12401))+((r01*x12391))+(((-1.0)*x12392*x12400))+((sj3*x12395)));
evalcond[7]=((((-1.0)*x12392*x12399))+((r21*x12391))+((x12393*x12401))+((sj3*x12397))+x12402);
evalcond[8]=(((cj3*x12397))+(((-1.0)*x12393*x12403))+x12390+((x12391*x12399))+((r21*x12392))+(((-1.0)*x12394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12404=((1.0)*r00);
IkReal x12405=(r01*sj5);
CheckValue<IkReal> x12406=IKPowWithIntegerCheck(((((-1.0)*cj5*x12404))+x12405),-1);
if(!x12406.valid){
continue;
}
CheckValue<IkReal> x12407=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x12404))+((cj3*x12405))),-1);
if(!x12407.valid){
continue;
}
if( IKabs(((-1.0)*(x12406.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12407.value)*(((((-1.0)*sj3*sj5*x12404))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12406.value)))+IKsqr(((x12407.value)*(((((-1.0)*sj3*sj5*x12404))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12406.value)), ((x12407.value)*(((((-1.0)*sj3*sj5*x12404))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12408=IKsin(j4);
IkReal x12409=IKcos(j4);
IkReal x12410=(cj2*sj1);
IkReal x12411=(cj1*sj2);
IkReal x12412=(sj1*sj2);
IkReal x12413=(cj5*sj3);
IkReal x12414=(cj3*cj5);
IkReal x12415=(r21*sj5);
IkReal x12416=(cj1*cj2);
IkReal x12417=(r00*sj5);
IkReal x12418=(r01*sj5);
IkReal x12419=(r20*sj5);
IkReal x12420=((1.0)*x12408);
IkReal x12421=(r20*x12409);
IkReal x12422=(r00*x12409);
IkReal x12423=(cj3*x12409);
IkReal x12424=(x12411+x12410);
IkReal x12425=((1.0)*sj3*x12409);
evalcond[0]=((-1.0)*r12*x12409);
evalcond[1]=(((x12408*x12415))+(((-1.0)*cj5*r20*x12420)));
evalcond[2]=((((-1.0)*r12*sj3*x12420))+x12424);
evalcond[3]=(((cj3*r12*x12408))+(((-1.0)*x12412))+x12416);
evalcond[4]=((1.0)+((x12408*x12418))+(((-1.0)*cj5*r00*x12420)));
evalcond[5]=(((cj3*x12417))+(((-1.0)*x12418*x12425))+((r01*x12414))+((x12413*x12422)));
evalcond[6]=(((sj3*x12417))+(((-1.0)*x12414*x12422))+((r01*x12413))+((x12418*x12423)));
evalcond[7]=(((sj3*x12419))+(((-1.0)*x12414*x12421))+((r21*x12413))+x12424+((x12415*x12423)));
evalcond[8]=(((cj3*x12419))+((r21*x12414))+(((-1.0)*x12416))+x12412+(((-1.0)*x12415*x12425))+((x12413*x12421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12426=((1.0)*r01);
IkReal x12427=(cj5*r00);
CheckValue<IkReal> x12428=IKPowWithIntegerCheck(((((-1.0)*x12427))+((r01*sj5))),-1);
if(!x12428.valid){
continue;
}
CheckValue<IkReal> x12429=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x12426))+((sj3*x12427))),-1);
if(!x12429.valid){
continue;
}
if( IKabs(((-1.0)*(x12428.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12429.value)*(((((-1.0)*cj3*cj5*x12426))+(((-1.0)*cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12428.value)))+IKsqr(((x12429.value)*(((((-1.0)*cj3*cj5*x12426))+(((-1.0)*cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12428.value)), ((x12429.value)*(((((-1.0)*cj3*cj5*x12426))+(((-1.0)*cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12430=IKsin(j4);
IkReal x12431=IKcos(j4);
IkReal x12432=(cj2*sj1);
IkReal x12433=(cj1*sj2);
IkReal x12434=(sj1*sj2);
IkReal x12435=(cj5*sj3);
IkReal x12436=(cj3*cj5);
IkReal x12437=(r21*sj5);
IkReal x12438=(cj1*cj2);
IkReal x12439=(r00*sj5);
IkReal x12440=(r01*sj5);
IkReal x12441=(r20*sj5);
IkReal x12442=((1.0)*x12430);
IkReal x12443=(r20*x12431);
IkReal x12444=(r00*x12431);
IkReal x12445=(cj3*x12431);
IkReal x12446=(x12433+x12432);
IkReal x12447=((1.0)*sj3*x12431);
evalcond[0]=((-1.0)*r12*x12431);
evalcond[1]=(((x12430*x12437))+(((-1.0)*cj5*r20*x12442)));
evalcond[2]=((((-1.0)*r12*sj3*x12442))+x12446);
evalcond[3]=(((cj3*r12*x12430))+x12438+(((-1.0)*x12434)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x12442))+((x12430*x12440)));
evalcond[5]=((((-1.0)*x12440*x12447))+((cj3*x12439))+((x12435*x12444))+((r01*x12436)));
evalcond[6]=(((x12440*x12445))+(((-1.0)*x12436*x12444))+((sj3*x12439))+((r01*x12435)));
evalcond[7]=(((r21*x12435))+(((-1.0)*x12436*x12443))+((sj3*x12441))+x12446+((x12437*x12445)));
evalcond[8]=(((r21*x12436))+((cj3*x12441))+(((-1.0)*x12437*x12447))+((x12435*x12443))+x12434+(((-1.0)*x12438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12448=cj5*cj5;
IkReal x12449=(cj3*r20);
IkReal x12450=(r21*sj3);
IkReal x12451=((1.0)*cj3);
IkReal x12452=(r01*r21);
IkReal x12453=(r01*sj3);
IkReal x12454=(r00*sj5);
IkReal x12455=(cj5*r01*sj5);
IkReal x12456=((1.0)*x12448);
CheckValue<IkReal> x12457 = IKatan2WithCheck(IkReal((((r22*sj3*x12454))+((cj5*r22*x12453)))),IkReal(((((-1.0)*r20*x12453*x12456))+((x12450*x12455))+(((-1.0)*r00*x12450*x12456))+(((-1.0)*cj5*r20*sj3*x12454))+((r00*x12450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12457.valid){
continue;
}
CheckValue<IkReal> x12458=IKPowWithIntegerCheck(IKsign((((cj3*x12448*x12452))+(((-1.0)*r00*x12449*x12456))+(((-1.0)*x12451*x12452))+((cj3*cj5*r21*x12454))+(((-1.0)*r02*r22*x12451))+((x12449*x12455)))),-1);
if(!x12458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12457.value)+(((1.5707963267949)*(x12458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12459=IKsin(j4);
IkReal x12460=IKcos(j4);
IkReal x12461=(cj2*sj1);
IkReal x12462=(cj1*sj2);
IkReal x12463=(r11*sj5);
IkReal x12464=(cj5*r10);
IkReal x12465=(sj1*sj2);
IkReal x12466=(cj5*r01);
IkReal x12467=(cj5*r00);
IkReal x12468=(cj3*sj5);
IkReal x12469=(r21*sj5);
IkReal x12470=(cj1*cj2);
IkReal x12471=(cj5*sj3);
IkReal x12472=(sj3*sj5);
IkReal x12473=(r01*sj5);
IkReal x12474=(cj3*cj5);
IkReal x12475=(cj5*r20);
IkReal x12476=((1.0)*x12460);
IkReal x12477=((1.0)*x12459);
IkReal x12478=(cj3*x12460);
IkReal x12479=(sj3*x12460);
IkReal x12480=(cj3*x12459);
IkReal x12481=(x12462+x12461);
evalcond[0]=((((-1.0)*r22*x12476))+(((-1.0)*x12475*x12477))+((x12459*x12469)));
evalcond[1]=((((-1.0)*x12464*x12477))+((x12459*x12463))+(((-1.0)*r12*x12476)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12476))+(((-1.0)*x12467*x12477))+((x12459*x12473)));
evalcond[3]=(((r00*x12472))+((sj3*x12466))+((r02*x12480))+((r01*x12460*x12468))+(((-1.0)*cj3*x12467*x12476)));
evalcond[4]=(((cj3*x12466))+((r00*x12468))+(((-1.0)*r01*x12472*x12476))+(((-1.0)*r02*sj3*x12477))+((x12467*x12479)));
evalcond[5]=((((-1.0)*r20*x12474*x12476))+((r22*x12480))+((r20*x12472))+((r21*x12460*x12468))+x12481+((r21*x12471)));
evalcond[6]=(((x12464*x12479))+(((-1.0)*sj3*x12463*x12476))+((r11*x12474))+(((-1.0)*r12*sj3*x12477))+x12481+((r10*x12468)));
evalcond[7]=((((-1.0)*x12465))+((x12463*x12478))+((r11*x12471))+((r12*x12480))+(((-1.0)*cj3*x12464*x12476))+x12470+((r10*x12472)));
evalcond[8]=((((-1.0)*x12470))+((r20*x12468))+(((-1.0)*r22*sj3*x12477))+(((-1.0)*sj3*x12469*x12476))+x12465+((r20*x12460*x12471))+((r21*x12474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12482=((1.0)*cj5);
CheckValue<IkReal> x12483 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12482))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12483.valid){
continue;
}
CheckValue<IkReal> x12484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12482))+(((-1.0)*r20*sj5)))),-1);
if(!x12484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12483.value)+(((1.5707963267949)*(x12484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12485=IKsin(j4);
IkReal x12486=IKcos(j4);
IkReal x12487=(cj2*sj1);
IkReal x12488=(cj1*sj2);
IkReal x12489=(r11*sj5);
IkReal x12490=(cj5*r10);
IkReal x12491=(sj1*sj2);
IkReal x12492=(cj5*r01);
IkReal x12493=(cj5*r00);
IkReal x12494=(cj3*sj5);
IkReal x12495=(r21*sj5);
IkReal x12496=(cj1*cj2);
IkReal x12497=(cj5*sj3);
IkReal x12498=(sj3*sj5);
IkReal x12499=(r01*sj5);
IkReal x12500=(cj3*cj5);
IkReal x12501=(cj5*r20);
IkReal x12502=((1.0)*x12486);
IkReal x12503=((1.0)*x12485);
IkReal x12504=(cj3*x12486);
IkReal x12505=(sj3*x12486);
IkReal x12506=(cj3*x12485);
IkReal x12507=(x12487+x12488);
evalcond[0]=((((-1.0)*r22*x12502))+(((-1.0)*x12501*x12503))+((x12485*x12495)));
evalcond[1]=(((x12485*x12489))+(((-1.0)*r12*x12502))+(((-1.0)*x12490*x12503)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12502))+((x12485*x12499))+(((-1.0)*x12493*x12503)));
evalcond[3]=(((r00*x12498))+((r01*x12486*x12494))+(((-1.0)*cj3*x12493*x12502))+((r02*x12506))+((sj3*x12492)));
evalcond[4]=(((r00*x12494))+((x12493*x12505))+((cj3*x12492))+(((-1.0)*r02*sj3*x12503))+(((-1.0)*r01*x12498*x12502)));
evalcond[5]=(((r20*x12498))+(((-1.0)*r20*x12500*x12502))+((r21*x12497))+((r21*x12486*x12494))+x12507+((r22*x12506)));
evalcond[6]=(((r11*x12500))+((r10*x12494))+(((-1.0)*sj3*x12489*x12502))+(((-1.0)*r12*sj3*x12503))+((x12490*x12505))+x12507);
evalcond[7]=(((r10*x12498))+x12496+(((-1.0)*cj3*x12490*x12502))+((r12*x12506))+(((-1.0)*x12491))+((x12489*x12504))+((r11*x12497)));
evalcond[8]=((((-1.0)*r22*sj3*x12503))+((r20*x12494))+((r20*x12486*x12497))+((r21*x12500))+(((-1.0)*sj3*x12495*x12502))+x12491+(((-1.0)*x12496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12508 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12508.valid){
continue;
}
CheckValue<IkReal> x12509=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12508.value)+(((1.5707963267949)*(x12509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12510=IKsin(j4);
IkReal x12511=IKcos(j4);
IkReal x12512=(cj2*sj1);
IkReal x12513=(cj1*sj2);
IkReal x12514=(r11*sj5);
IkReal x12515=(cj5*r10);
IkReal x12516=(sj1*sj2);
IkReal x12517=(cj5*r01);
IkReal x12518=(cj5*r00);
IkReal x12519=(cj3*sj5);
IkReal x12520=(r21*sj5);
IkReal x12521=(cj1*cj2);
IkReal x12522=(cj5*sj3);
IkReal x12523=(sj3*sj5);
IkReal x12524=(r01*sj5);
IkReal x12525=(cj3*cj5);
IkReal x12526=(cj5*r20);
IkReal x12527=((1.0)*x12511);
IkReal x12528=((1.0)*x12510);
IkReal x12529=(cj3*x12511);
IkReal x12530=(sj3*x12511);
IkReal x12531=(cj3*x12510);
IkReal x12532=(x12512+x12513);
evalcond[0]=(((x12510*x12520))+(((-1.0)*r22*x12527))+(((-1.0)*x12526*x12528)));
evalcond[1]=(((x12510*x12514))+(((-1.0)*r12*x12527))+(((-1.0)*x12515*x12528)));
evalcond[2]=((1.0)+(((-1.0)*x12518*x12528))+((x12510*x12524))+(((-1.0)*r02*x12527)));
evalcond[3]=((((-1.0)*cj3*x12518*x12527))+((r01*x12511*x12519))+((r02*x12531))+((r00*x12523))+((sj3*x12517)));
evalcond[4]=((((-1.0)*r02*sj3*x12528))+(((-1.0)*r01*x12523*x12527))+((r00*x12519))+((x12518*x12530))+((cj3*x12517)));
evalcond[5]=((((-1.0)*r20*x12525*x12527))+((r21*x12522))+((r20*x12523))+((r21*x12511*x12519))+((r22*x12531))+x12532);
evalcond[6]=((((-1.0)*r12*sj3*x12528))+(((-1.0)*sj3*x12514*x12527))+((x12515*x12530))+((r10*x12519))+((r11*x12525))+x12532);
evalcond[7]=(((r10*x12523))+((x12514*x12529))+(((-1.0)*x12516))+((r11*x12522))+x12521+(((-1.0)*cj3*x12515*x12527))+((r12*x12531)));
evalcond[8]=(((r20*x12519))+((r21*x12525))+((r20*x12511*x12522))+(((-1.0)*r22*sj3*x12528))+(((-1.0)*sj3*x12520*x12527))+x12516+(((-1.0)*x12521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12533=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12533;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12534=((1.0)*cj5);
IkReal x12535=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12534)));
j4eval[0]=x12535;
j4eval[1]=((IKabs(((((-1.0)*r20*x12534))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12536=cj5*cj5;
IkReal x12537=(cj3*r01);
IkReal x12538=(cj5*sj5);
IkReal x12539=((1.0)*cj3);
IkReal x12540=((((-1.0)*r02*r22*x12539))+((cj3*r00*r21*x12538))+((r20*x12537*x12538))+(((-1.0)*r00*r20*x12536*x12539))+(((-1.0)*r21*x12537))+((r21*x12536*x12537)));
j4eval[0]=x12540;
j4eval[1]=IKsign(x12540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12541=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12541;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12542=((1.0)*cj5);
IkReal x12543=((((-1.0)*r11*x12542))+(((-1.0)*r10*sj5)));
j4eval[0]=x12543;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12542))))));
j4eval[2]=IKsign(x12543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12544=cj5*cj5;
IkReal x12545=r01*r01;
IkReal x12546=(r01*sj5);
IkReal x12547=(cj5*r00);
IkReal x12548=((((2.0)*x12546*x12547))+(((-1.0)*x12545))+(((-1.0)*(r02*r02)))+((x12544*x12545))+(((-1.0)*x12544*(r00*r00))));
j4eval[0]=x12548;
j4eval[1]=IKsign(x12548);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12546))+x12547))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12549=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12549);
rxp0_2=(py*r00);
rxp1_0=(r21*x12549);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12550=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12550);
rxp0_2=(py*r00);
rxp1_0=(r21*x12550);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12551=((1.0)*sj1);
CheckValue<IkReal> x12552=IKPowWithIntegerCheck(r12,-1);
if(!x12552.valid){
continue;
}
CheckValue<IkReal> x12553=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12553.valid){
continue;
}
if( IKabs(((x12552.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12551)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12553.value)*((((cj1*cj2))+(((-1.0)*sj2*x12551)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12552.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12551))))))+IKsqr(((x12553.value)*((((cj1*cj2))+(((-1.0)*sj2*x12551))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12552.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12551))))), ((x12553.value)*((((cj1*cj2))+(((-1.0)*sj2*x12551))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12554=IKsin(j4);
IkReal x12555=IKcos(j4);
IkReal x12556=((1.0)*cj1);
IkReal x12557=(r21*sj5);
IkReal x12558=(r01*sj5);
IkReal x12559=(cj5*x12555);
IkReal x12560=((1.0)*x12555);
IkReal x12561=((1.0)*cj5*x12554);
evalcond[0]=((-1.0)*r12*x12555);
evalcond[1]=(((x12554*x12557))+(((-1.0)*r20*x12561)));
evalcond[2]=(((r00*x12559))+(((-1.0)*x12558*x12560)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12561))+((x12554*x12558)));
evalcond[4]=((((-1.0)*r12*x12554))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12556)));
evalcond[5]=(((r20*x12559))+((sj1*sj2))+(((-1.0)*x12557*x12560))+(((-1.0)*cj2*x12556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12562=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12562.valid){
continue;
}
CheckValue<IkReal> x12563=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12563.valid){
continue;
}
if( IKabs(x12562.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12563.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12562.value)+IKsqr(((x12563.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12562.value, ((x12563.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12564=IKsin(j4);
IkReal x12565=IKcos(j4);
IkReal x12566=((1.0)*cj1);
IkReal x12567=(r21*sj5);
IkReal x12568=(r01*sj5);
IkReal x12569=(cj5*x12565);
IkReal x12570=((1.0)*x12565);
IkReal x12571=((1.0)*cj5*x12564);
evalcond[0]=((-1.0)*r12*x12565);
evalcond[1]=((((-1.0)*r20*x12571))+((x12564*x12567)));
evalcond[2]=(((r00*x12569))+(((-1.0)*x12568*x12570)));
evalcond[3]=((-1.0)+((x12564*x12568))+(((-1.0)*r00*x12571)));
evalcond[4]=((((-1.0)*r12*x12564))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12566)));
evalcond[5]=(((r20*x12569))+((sj1*sj2))+(((-1.0)*cj2*x12566))+(((-1.0)*x12567*x12570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12572=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12572);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12572);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12573=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12573);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12573);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12574=IKPowWithIntegerCheck(r22,-1);
if(!x12574.valid){
continue;
}
CheckValue<IkReal> x12575=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12575.valid){
continue;
}
if( IKabs(((x12574.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12575.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12574.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12575.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12574.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12575.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12576=IKsin(j4);
IkReal x12577=IKcos(j4);
IkReal x12578=((1.0)*cj2);
IkReal x12579=(cj5*x12577);
IkReal x12580=(sj5*x12576);
IkReal x12581=((1.0)*sj5*x12577);
IkReal x12582=((1.0)*cj5*x12576);
evalcond[0]=((-1.0)*r22*x12577);
evalcond[1]=((((-1.0)*r10*x12582))+((r11*x12580)));
evalcond[2]=((((-1.0)*r22*x12576))+((sj1*sj2))+(((-1.0)*cj1*x12578)));
evalcond[3]=((((-1.0)*r01*x12581))+((r00*x12579)));
evalcond[4]=((-1.0)+((r01*x12580))+(((-1.0)*r00*x12582)));
evalcond[5]=((((-1.0)*sj1*x12578))+(((-1.0)*r11*x12581))+(((-1.0)*cj1*sj2))+((r10*x12579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12583=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12583.valid){
continue;
}
CheckValue<IkReal> x12584=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12584.valid){
continue;
}
if( IKabs(x12583.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12584.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12583.value)+IKsqr(((x12584.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12583.value, ((x12584.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12585=IKsin(j4);
IkReal x12586=IKcos(j4);
IkReal x12587=((1.0)*cj2);
IkReal x12588=(cj5*x12586);
IkReal x12589=(sj5*x12585);
IkReal x12590=((1.0)*sj5*x12586);
IkReal x12591=((1.0)*cj5*x12585);
evalcond[0]=((-1.0)*r22*x12586);
evalcond[1]=((((-1.0)*r10*x12591))+((r11*x12589)));
evalcond[2]=((((-1.0)*r22*x12585))+((sj1*sj2))+(((-1.0)*cj1*x12587)));
evalcond[3]=((((-1.0)*r01*x12590))+((r00*x12588)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12591))+((r01*x12589)));
evalcond[5]=((((-1.0)*r11*x12590))+(((-1.0)*sj1*x12587))+(((-1.0)*cj1*sj2))+((r10*x12588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12592=cj5*cj5;
IkReal x12593=r01*r01;
IkReal x12594=(r01*sj5);
IkReal x12595=(cj5*r00);
CheckValue<IkReal> x12596 = IKatan2WithCheck(IkReal((x12595+(((-1.0)*x12594)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12596.valid){
continue;
}
CheckValue<IkReal> x12597=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x12594*x12595))+((x12592*x12593))+(((-1.0)*x12592*(r00*r00)))+(((-1.0)*x12593)))),-1);
if(!x12597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12596.value)+(((1.5707963267949)*(x12597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12598=IKsin(j4);
IkReal x12599=IKcos(j4);
IkReal x12600=(cj5*r10);
IkReal x12601=(r01*sj5);
IkReal x12602=((1.0)*cj2);
IkReal x12603=(cj5*r00);
IkReal x12604=(cj5*r20);
IkReal x12605=((1.0)*x12599);
IkReal x12606=((1.0)*x12598);
IkReal x12607=(sj5*x12598);
evalcond[0]=((((-1.0)*r22*x12605))+((r21*x12607))+(((-1.0)*x12604*x12606)));
evalcond[1]=(((r11*x12607))+(((-1.0)*x12600*x12606))+(((-1.0)*r12*x12605)));
evalcond[2]=(((x12599*x12603))+(((-1.0)*x12601*x12605))+(((-1.0)*r02*x12606)));
evalcond[3]=((-1.0)+((x12598*x12601))+(((-1.0)*r02*x12605))+(((-1.0)*x12603*x12606)));
evalcond[4]=(((x12599*x12604))+(((-1.0)*cj1*x12602))+(((-1.0)*r21*sj5*x12605))+((sj1*sj2))+(((-1.0)*r22*x12606)));
evalcond[5]=((((-1.0)*r11*sj5*x12605))+((x12599*x12600))+(((-1.0)*sj1*x12602))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12608=((1.0)*cj5);
CheckValue<IkReal> x12609=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12608)))),-1);
if(!x12609.valid){
continue;
}
CheckValue<IkReal> x12610 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12609.value)))+(x12610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12611=IKsin(j4);
IkReal x12612=IKcos(j4);
IkReal x12613=(cj5*r10);
IkReal x12614=(r01*sj5);
IkReal x12615=((1.0)*cj2);
IkReal x12616=(cj5*r00);
IkReal x12617=(cj5*r20);
IkReal x12618=((1.0)*x12612);
IkReal x12619=((1.0)*x12611);
IkReal x12620=(sj5*x12611);
evalcond[0]=((((-1.0)*r22*x12618))+((r21*x12620))+(((-1.0)*x12617*x12619)));
evalcond[1]=((((-1.0)*r12*x12618))+(((-1.0)*x12613*x12619))+((r11*x12620)));
evalcond[2]=((((-1.0)*x12614*x12618))+(((-1.0)*r02*x12619))+((x12612*x12616)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12618))+((x12611*x12614))+(((-1.0)*x12616*x12619)));
evalcond[4]=((((-1.0)*cj1*x12615))+(((-1.0)*r22*x12619))+((sj1*sj2))+((x12612*x12617))+(((-1.0)*r21*sj5*x12618)));
evalcond[5]=((((-1.0)*r12*x12619))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12615))+((x12612*x12613))+(((-1.0)*r11*sj5*x12618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12621=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12621.valid){
continue;
}
CheckValue<IkReal> x12622 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12621.value)))+(x12622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12623=IKsin(j4);
IkReal x12624=IKcos(j4);
IkReal x12625=(cj5*r10);
IkReal x12626=(r01*sj5);
IkReal x12627=((1.0)*cj2);
IkReal x12628=(cj5*r00);
IkReal x12629=(cj5*r20);
IkReal x12630=((1.0)*x12624);
IkReal x12631=((1.0)*x12623);
IkReal x12632=(sj5*x12623);
evalcond[0]=((((-1.0)*r22*x12630))+((r21*x12632))+(((-1.0)*x12629*x12631)));
evalcond[1]=(((r11*x12632))+(((-1.0)*x12625*x12631))+(((-1.0)*r12*x12630)));
evalcond[2]=((((-1.0)*x12626*x12630))+((x12624*x12628))+(((-1.0)*r02*x12631)));
evalcond[3]=((-1.0)+(((-1.0)*x12628*x12631))+((x12623*x12626))+(((-1.0)*r02*x12630)));
evalcond[4]=((((-1.0)*r22*x12631))+((sj1*sj2))+(((-1.0)*r21*sj5*x12630))+((x12624*x12629))+(((-1.0)*cj1*x12627)));
evalcond[5]=((((-1.0)*r11*sj5*x12630))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12627))+((x12624*x12625))+(((-1.0)*r12*x12631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12633=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12633;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12634=((1.0)*cj5);
IkReal x12635=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12634)));
j4eval[0]=x12635;
j4eval[1]=((IKabs(((((-1.0)*r20*x12634))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12635);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12636=cj5*cj5;
IkReal x12637=r01*r01;
IkReal x12638=(cj5*r00);
IkReal x12639=(r01*sj5);
IkReal x12640=((((-1.0)*x12636*x12637))+(((-2.0)*x12638*x12639))+((x12636*(r00*r00)))+x12637+(r02*r02));
j4eval[0]=x12640;
j4eval[1]=IKsign(x12640);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12638))+x12639))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12641=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12641);
rxp0_2=(py*r00);
rxp1_0=(r21*x12641);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12642=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12642)));
j4eval[1]=((((-1.0)*r20*x12642))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12643=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12643);
rxp0_2=(py*r00);
rxp1_0=(r21*x12643);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12644=IKPowWithIntegerCheck(r12,-1);
if(!x12644.valid){
continue;
}
CheckValue<IkReal> x12645=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12645.valid){
continue;
}
if( IKabs(((x12644.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12645.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12644.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12645.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12644.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12645.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12646=IKsin(j4);
IkReal x12647=IKcos(j4);
IkReal x12648=((1.0)*cj2);
IkReal x12649=((1.0)*cj5*r00);
IkReal x12650=(sj5*x12647);
IkReal x12651=(sj5*x12646);
IkReal x12652=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12647);
evalcond[1]=(((r21*x12651))+(((-1.0)*x12646*x12652)));
evalcond[2]=((((-1.0)*x12647*x12649))+((r01*x12650)));
evalcond[3]=(((r12*x12646))+(((-1.0)*sj1*x12648))+(((-1.0)*cj1*sj2)));
evalcond[4]=((-1.0)+((r01*x12651))+(((-1.0)*x12646*x12649)));
evalcond[5]=((((-1.0)*x12647*x12652))+((r21*x12650))+((sj1*sj2))+(((-1.0)*cj1*x12648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12653=((1.0)*cj5);
CheckValue<IkReal> x12654=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12653))),-1);
if(!x12654.valid){
continue;
}
CheckValue<IkReal> x12655=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12653))),-1);
if(!x12655.valid){
continue;
}
if( IKabs(x12654.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12655.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12654.value)+IKsqr(((x12655.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12654.value, ((x12655.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12656=IKsin(j4);
IkReal x12657=IKcos(j4);
IkReal x12658=((1.0)*cj2);
IkReal x12659=((1.0)*cj5*r00);
IkReal x12660=(sj5*x12657);
IkReal x12661=(sj5*x12656);
IkReal x12662=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12657);
evalcond[1]=(((r21*x12661))+(((-1.0)*x12656*x12662)));
evalcond[2]=(((r01*x12660))+(((-1.0)*x12657*x12659)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r12*x12656))+(((-1.0)*sj1*x12658)));
evalcond[4]=((-1.0)+(((-1.0)*x12656*x12659))+((r01*x12661)));
evalcond[5]=(((r21*x12660))+(((-1.0)*cj1*x12658))+(((-1.0)*x12657*x12662))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12663=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12663);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12663);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12664=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12664)));
j4eval[1]=((((-1.0)*r10*x12664))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12665=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12665);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12665);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12666=IKPowWithIntegerCheck(r22,-1);
if(!x12666.valid){
continue;
}
CheckValue<IkReal> x12667=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12667.valid){
continue;
}
if( IKabs(((x12666.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12667.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12666.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12667.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12666.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12667.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12668=IKsin(j4);
IkReal x12669=IKcos(j4);
IkReal x12670=((1.0)*cj5);
IkReal x12671=((1.0)*cj2);
IkReal x12672=(sj5*x12669);
IkReal x12673=(sj5*x12668);
evalcond[0]=((-1.0)*r22*x12669);
evalcond[1]=((((-1.0)*cj1*x12671))+((sj1*sj2))+((r22*x12668)));
evalcond[2]=((((-1.0)*r10*x12668*x12670))+((r11*x12673)));
evalcond[3]=((((-1.0)*r00*x12669*x12670))+((r01*x12672)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12668*x12670))+((r01*x12673)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r10*x12669*x12670))+((r11*x12672))+(((-1.0)*sj1*x12671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12674=((1.0)*cj5);
CheckValue<IkReal> x12675=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12674))),-1);
if(!x12675.valid){
continue;
}
CheckValue<IkReal> x12676=IKPowWithIntegerCheck(((((-1.0)*r10*x12674))+((r11*sj5))),-1);
if(!x12676.valid){
continue;
}
if( IKabs(x12675.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12676.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12675.value)+IKsqr(((x12676.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12675.value, ((x12676.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12677=IKsin(j4);
IkReal x12678=IKcos(j4);
IkReal x12679=((1.0)*cj5);
IkReal x12680=((1.0)*cj2);
IkReal x12681=(sj5*x12678);
IkReal x12682=(sj5*x12677);
evalcond[0]=((-1.0)*r22*x12678);
evalcond[1]=((((-1.0)*cj1*x12680))+((r22*x12677))+((sj1*sj2)));
evalcond[2]=(((r11*x12682))+(((-1.0)*r10*x12677*x12679)));
evalcond[3]=((((-1.0)*r00*x12678*x12679))+((r01*x12681)));
evalcond[4]=((-1.0)+((r01*x12682))+(((-1.0)*r00*x12677*x12679)));
evalcond[5]=((((-1.0)*sj1*x12680))+((r11*x12681))+(((-1.0)*cj1*sj2))+(((-1.0)*r10*x12678*x12679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12683=cj5*cj5;
IkReal x12684=r01*r01;
IkReal x12685=(r01*sj5);
IkReal x12686=(cj5*r00);
CheckValue<IkReal> x12687 = IKatan2WithCheck(IkReal((x12685+(((-1.0)*x12686)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12687.valid){
continue;
}
CheckValue<IkReal> x12688=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12685*x12686))+x12684+(r02*r02)+((x12683*(r00*r00)))+(((-1.0)*x12683*x12684)))),-1);
if(!x12688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12687.value)+(((1.5707963267949)*(x12688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12689=IKcos(j4);
IkReal x12690=IKsin(j4);
IkReal x12691=(cj5*r00);
IkReal x12692=(cj5*r10);
IkReal x12693=(r21*sj5);
IkReal x12694=((1.0)*cj2);
IkReal x12695=(cj5*r20);
IkReal x12696=((1.0)*x12689);
IkReal x12697=((1.0)*x12690);
IkReal x12698=(sj5*x12690);
IkReal x12699=(sj5*x12689);
evalcond[0]=(((r02*x12690))+(((-1.0)*x12691*x12696))+((r01*x12699)));
evalcond[1]=((((-1.0)*r22*x12696))+((x12690*x12693))+(((-1.0)*x12695*x12697)));
evalcond[2]=((((-1.0)*r12*x12696))+(((-1.0)*x12692*x12697))+((r11*x12698)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12696))+(((-1.0)*x12691*x12697))+((r01*x12698)));
evalcond[4]=((((-1.0)*cj1*x12694))+((r22*x12690))+((sj1*sj2))+((x12689*x12693))+(((-1.0)*x12695*x12696)));
evalcond[5]=((((-1.0)*x12692*x12696))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12694))+((r11*x12699))+((r12*x12690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12700=((1.0)*cj5);
CheckValue<IkReal> x12701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12700))+(((-1.0)*r10*sj5)))),-1);
if(!x12701.valid){
continue;
}
CheckValue<IkReal> x12702 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12701.value)))+(x12702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12703=IKcos(j4);
IkReal x12704=IKsin(j4);
IkReal x12705=(cj5*r00);
IkReal x12706=(cj5*r10);
IkReal x12707=(r21*sj5);
IkReal x12708=((1.0)*cj2);
IkReal x12709=(cj5*r20);
IkReal x12710=((1.0)*x12703);
IkReal x12711=((1.0)*x12704);
IkReal x12712=(sj5*x12704);
IkReal x12713=(sj5*x12703);
evalcond[0]=((((-1.0)*x12705*x12710))+((r02*x12704))+((r01*x12713)));
evalcond[1]=((((-1.0)*r22*x12710))+(((-1.0)*x12709*x12711))+((x12704*x12707)));
evalcond[2]=((((-1.0)*x12706*x12711))+(((-1.0)*r12*x12710))+((r11*x12712)));
evalcond[3]=((-1.0)+(((-1.0)*x12705*x12711))+((r01*x12712))+(((-1.0)*r02*x12710)));
evalcond[4]=(((r22*x12704))+((sj1*sj2))+(((-1.0)*x12709*x12710))+(((-1.0)*cj1*x12708))+((x12703*x12707)));
evalcond[5]=((((-1.0)*x12706*x12710))+((r12*x12704))+(((-1.0)*sj1*x12708))+((r11*x12713))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12714=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12714.valid){
continue;
}
CheckValue<IkReal> x12715 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12714.value)))+(x12715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12716=IKcos(j4);
IkReal x12717=IKsin(j4);
IkReal x12718=(cj5*r00);
IkReal x12719=(cj5*r10);
IkReal x12720=(r21*sj5);
IkReal x12721=((1.0)*cj2);
IkReal x12722=(cj5*r20);
IkReal x12723=((1.0)*x12716);
IkReal x12724=((1.0)*x12717);
IkReal x12725=(sj5*x12717);
IkReal x12726=(sj5*x12716);
evalcond[0]=(((r02*x12717))+(((-1.0)*x12718*x12723))+((r01*x12726)));
evalcond[1]=((((-1.0)*r22*x12723))+(((-1.0)*x12722*x12724))+((x12717*x12720)));
evalcond[2]=(((r11*x12725))+(((-1.0)*x12719*x12724))+(((-1.0)*r12*x12723)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12723))+(((-1.0)*x12718*x12724))+((r01*x12725)));
evalcond[4]=(((r22*x12717))+((x12716*x12720))+(((-1.0)*x12722*x12723))+((sj1*sj2))+(((-1.0)*cj1*x12721)));
evalcond[5]=((((-1.0)*sj1*x12721))+((r12*x12717))+((r11*x12726))+(((-1.0)*cj1*sj2))+(((-1.0)*x12719*x12723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12727=((-1.0)*r10);
IkReal x12729 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12729)==0){
continue;
}
IkReal x12728=pow(x12729,-0.5);
CheckValue<IkReal> x12730 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12727),IKFAST_ATAN2_MAGTHRESH);
if(!x12730.valid){
continue;
}
IkReal gconst30=((-1.0)*(x12730.value));
IkReal gconst31=(r11*x12728);
IkReal gconst32=(x12727*x12728);
CheckValue<IkReal> x12731 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12731.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12731.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12732=((-1.0)*r10);
IkReal x12733=x12728;
CheckValue<IkReal> x12735 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12732),IKFAST_ATAN2_MAGTHRESH);
if(!x12735.valid){
continue;
}
IkReal x12734=((-1.0)*(x12735.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12734;
IkReal gconst30=x12734;
IkReal gconst31=(r11*x12733);
IkReal gconst32=(x12732*x12733);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12736=((-1.0)*r10);
IkReal x12737=x12728;
CheckValue<IkReal> x12739 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12736),IKFAST_ATAN2_MAGTHRESH);
if(!x12739.valid){
continue;
}
IkReal x12738=((-1.0)*(x12739.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12738;
IkReal gconst30=x12738;
IkReal gconst31=(r11*x12737);
IkReal gconst32=(x12736*x12737);
CheckValue<IkReal> x12747=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12747.valid){
continue;
}
IkReal x12740=x12747.value;
IkReal x12741=(sj3*x12740);
IkReal x12742=(r20*x12741);
IkReal x12743=(r00*x12741);
IkReal x12744=(r01*x12741);
IkReal x12745=(r21*x12741);
IkReal x12746=(r10*r11*x12741);
j4eval[0]=IKsign((((r01*r10*r11*x12742))+((r00*x12742*(r10*r10)))+((r21*x12744*(r11*r11)))+((r10*r11*r21*x12743))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12748=gconst31*gconst31;
IkReal x12749=gconst32*gconst32;
IkReal x12750=(r01*r20);
IkReal x12751=(r00*r21);
IkReal x12752=((1.0)*cj3);
IkReal x12753=(r01*r21);
IkReal x12754=(gconst32*sj3);
IkReal x12755=(cj3*gconst31*gconst32);
IkReal x12756=(gconst31*r00*sj3);
CheckValue<IkReal> x12757=IKPowWithIntegerCheck(IKsign((((x12751*x12755))+(((-1.0)*x12748*x12752*x12753))+(((-1.0)*r02*r22*x12752))+(((-1.0)*r00*r20*x12749*x12752))+((x12750*x12755)))),-1);
if(!x12757.valid){
continue;
}
CheckValue<IkReal> x12758 = IKatan2WithCheck(IkReal((((r22*x12756))+((r01*r22*x12754)))),IkReal(((((-1.0)*sj3*x12749*x12750))+((sj3*x12748*x12751))+(((-1.0)*gconst31*r00*r20*x12754))+((gconst31*x12753*x12754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12757.value)))+(x12758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12759=IKsin(j4);
IkReal x12760=IKcos(j4);
IkReal x12761=(sj1*sj2);
IkReal x12762=(gconst31*r00);
IkReal x12763=(r21*sj3);
IkReal x12764=(cj3*gconst32);
IkReal x12765=(gconst31*r11);
IkReal x12766=(gconst31*sj3);
IkReal x12767=(gconst31*r01);
IkReal x12768=((1.0)*cj2);
IkReal x12769=(gconst32*r10);
IkReal x12770=(cj1*sj2);
IkReal x12771=(cj3*gconst31);
IkReal x12772=(gconst32*r00);
IkReal x12773=(gconst32*sj3);
IkReal x12774=(gconst32*r20);
IkReal x12775=(gconst31*r21);
IkReal x12776=(cj1*x12768);
IkReal x12777=((1.0)*x12760);
IkReal x12778=((1.0)*x12759);
IkReal x12779=(cj3*x12760);
IkReal x12780=(sj3*x12760);
IkReal x12781=(cj3*x12759);
evalcond[0]=((((-1.0)*r22*x12777))+(((-1.0)*x12774*x12778))+((x12759*x12775)));
evalcond[1]=(((x12759*x12765))+(((-1.0)*x12769*x12778))+(((-1.0)*r12*x12777)));
evalcond[2]=((-1.0)+((x12759*x12767))+(((-1.0)*x12772*x12778))+(((-1.0)*r02*x12777)));
evalcond[3]=((((-1.0)*r00*x12764*x12777))+((r01*x12773))+((sj3*x12762))+((x12767*x12779))+((r02*x12781)));
evalcond[4]=(((cj3*x12762))+((x12772*x12780))+(((-1.0)*r02*sj3*x12778))+(((-1.0)*r01*x12766*x12777))+((r01*x12764)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x12764*x12777))+((r21*x12760*x12771))+((r20*x12766))+x12770+((r22*x12781))+((gconst32*x12763)));
evalcond[6]=(((x12765*x12779))+(((-1.0)*r10*x12764*x12777))+((r12*x12781))+x12761+((r11*x12773))+(((-1.0)*x12776))+((r10*x12766)));
evalcond[7]=(((r20*x12771))+((r21*x12764))+((r20*x12760*x12773))+(((-1.0)*r22*sj3*x12778))+(((-1.0)*gconst31*x12763*x12777))+x12761+(((-1.0)*x12776)));
evalcond[8]=((((-1.0)*r12*sj3*x12778))+(((-1.0)*sj1*x12768))+(((-1.0)*sj3*x12765*x12777))+(((-1.0)*x12770))+((x12769*x12780))+((r11*x12764))+((r10*x12771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12782=gconst31*gconst31;
IkReal x12783=gconst32*gconst32;
IkReal x12784=(r00*r20);
IkReal x12785=(cj3*r22);
IkReal x12786=(gconst31*r00);
IkReal x12787=(gconst32*r01);
IkReal x12788=((1.0)*gconst32);
IkReal x12789=(cj3*gconst31);
IkReal x12790=((1.0)*r20);
IkReal x12791=(r21*x12782);
CheckValue<IkReal> x12792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj3*x12786*x12788))+((sj3*x12783*x12784))+((r01*sj3*x12791))+((r02*r22*sj3))+(((-1.0)*gconst31*sj3*x12787*x12790)))),-1);
if(!x12792.valid){
continue;
}
CheckValue<IkReal> x12793 = IKatan2WithCheck(IkReal((((x12785*x12787))+((x12785*x12786)))),IkReal((((cj3*r00*x12791))+((r21*x12787*x12789))+(((-1.0)*x12784*x12788*x12789))+(((-1.0)*cj3*r01*x12783*x12790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12792.value)))+(x12793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12794=IKsin(j4);
IkReal x12795=IKcos(j4);
IkReal x12796=(sj1*sj2);
IkReal x12797=(gconst31*r00);
IkReal x12798=(r21*sj3);
IkReal x12799=(cj3*gconst32);
IkReal x12800=(gconst31*r11);
IkReal x12801=(gconst31*sj3);
IkReal x12802=(gconst31*r01);
IkReal x12803=((1.0)*cj2);
IkReal x12804=(gconst32*r10);
IkReal x12805=(cj1*sj2);
IkReal x12806=(cj3*gconst31);
IkReal x12807=(gconst32*r00);
IkReal x12808=(gconst32*sj3);
IkReal x12809=(gconst32*r20);
IkReal x12810=(gconst31*r21);
IkReal x12811=(cj1*x12803);
IkReal x12812=((1.0)*x12795);
IkReal x12813=((1.0)*x12794);
IkReal x12814=(cj3*x12795);
IkReal x12815=(sj3*x12795);
IkReal x12816=(cj3*x12794);
evalcond[0]=((((-1.0)*x12809*x12813))+((x12794*x12810))+(((-1.0)*r22*x12812)));
evalcond[1]=(((x12794*x12800))+(((-1.0)*r12*x12812))+(((-1.0)*x12804*x12813)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12812))+((x12794*x12802))+(((-1.0)*x12807*x12813)));
evalcond[3]=((((-1.0)*r00*x12799*x12812))+((r02*x12816))+((x12802*x12814))+((r01*x12808))+((sj3*x12797)));
evalcond[4]=(((x12807*x12815))+(((-1.0)*r01*x12801*x12812))+((cj3*x12797))+((r01*x12799))+(((-1.0)*r02*sj3*x12813)));
evalcond[5]=(((r21*x12795*x12806))+((cj2*sj1))+x12805+((r20*x12801))+(((-1.0)*r20*x12799*x12812))+((gconst32*x12798))+((r22*x12816)));
evalcond[6]=(((r10*x12801))+((x12800*x12814))+(((-1.0)*x12811))+((r12*x12816))+(((-1.0)*r10*x12799*x12812))+((r11*x12808))+x12796);
evalcond[7]=(((r20*x12806))+(((-1.0)*x12811))+((r20*x12795*x12808))+(((-1.0)*r22*sj3*x12813))+x12796+((r21*x12799))+(((-1.0)*gconst31*x12798*x12812)));
evalcond[8]=(((r10*x12806))+(((-1.0)*sj1*x12803))+((r11*x12799))+(((-1.0)*x12805))+(((-1.0)*r12*sj3*x12813))+((x12804*x12815))+(((-1.0)*sj3*x12800*x12812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12817=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12817.valid){
continue;
}
CheckValue<IkReal> x12818 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst31*r11))+(((-1.0)*gconst32*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12817.value)))+(x12818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12819=IKsin(j4);
IkReal x12820=IKcos(j4);
IkReal x12821=(sj1*sj2);
IkReal x12822=(gconst31*r00);
IkReal x12823=(r21*sj3);
IkReal x12824=(cj3*gconst32);
IkReal x12825=(gconst31*r11);
IkReal x12826=(gconst31*sj3);
IkReal x12827=(gconst31*r01);
IkReal x12828=((1.0)*cj2);
IkReal x12829=(gconst32*r10);
IkReal x12830=(cj1*sj2);
IkReal x12831=(cj3*gconst31);
IkReal x12832=(gconst32*r00);
IkReal x12833=(gconst32*sj3);
IkReal x12834=(gconst32*r20);
IkReal x12835=(gconst31*r21);
IkReal x12836=(cj1*x12828);
IkReal x12837=((1.0)*x12820);
IkReal x12838=((1.0)*x12819);
IkReal x12839=(cj3*x12820);
IkReal x12840=(sj3*x12820);
IkReal x12841=(cj3*x12819);
evalcond[0]=((((-1.0)*r22*x12837))+(((-1.0)*x12834*x12838))+((x12819*x12835)));
evalcond[1]=(((x12819*x12825))+(((-1.0)*x12829*x12838))+(((-1.0)*r12*x12837)));
evalcond[2]=((-1.0)+((x12819*x12827))+(((-1.0)*x12832*x12838))+(((-1.0)*r02*x12837)));
evalcond[3]=(((r02*x12841))+((x12827*x12839))+((sj3*x12822))+((r01*x12833))+(((-1.0)*r00*x12824*x12837)));
evalcond[4]=(((x12832*x12840))+((cj3*x12822))+((r01*x12824))+(((-1.0)*r02*sj3*x12838))+(((-1.0)*r01*x12826*x12837)));
evalcond[5]=(((cj2*sj1))+x12830+((r22*x12841))+(((-1.0)*r20*x12824*x12837))+((r20*x12826))+((gconst32*x12823))+((r21*x12820*x12831)));
evalcond[6]=(x12821+(((-1.0)*r10*x12824*x12837))+((r10*x12826))+((x12825*x12839))+((r11*x12833))+(((-1.0)*x12836))+((r12*x12841)));
evalcond[7]=(x12821+((r20*x12820*x12833))+((r21*x12824))+(((-1.0)*x12836))+((r20*x12831))+(((-1.0)*r22*sj3*x12838))+(((-1.0)*gconst31*x12823*x12837)));
evalcond[8]=(((r10*x12831))+((x12829*x12840))+((r11*x12824))+(((-1.0)*sj1*x12828))+(((-1.0)*x12830))+(((-1.0)*r12*sj3*x12838))+(((-1.0)*sj3*x12825*x12837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12842=((-1.0)*r11);
IkReal x12844 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12844)==0){
continue;
}
IkReal x12843=pow(x12844,-0.5);
CheckValue<IkReal> x12845 = IKatan2WithCheck(IkReal(x12842),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12845.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x12845.value))));
IkReal gconst34=(x12842*x12843);
IkReal gconst35=((1.0)*r10*x12843);
CheckValue<IkReal> x12846 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12846.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12846.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12847=((-1.0)*r11);
CheckValue<IkReal> x12850 = IKatan2WithCheck(IkReal(x12847),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12850.valid){
continue;
}
IkReal x12848=((1.0)*(x12850.value));
IkReal x12849=x12843;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x12848)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x12848)));
IkReal gconst34=(x12847*x12849);
IkReal gconst35=((1.0)*r10*x12849);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12851=gconst35*gconst35;
IkReal x12852=gconst34*gconst34;
IkReal x12853=((1.0)*gconst35);
IkReal x12854=(r21*sj3);
IkReal x12855=(cj3*r21);
IkReal x12856=(gconst35*r01);
IkReal x12857=(r01*r20);
IkReal x12858=(cj3*gconst34*r00);
CheckValue<IkReal> x12859=IKPowWithIntegerCheck(IKsign((((r01*x12852*x12854))+((r00*r20*sj3*x12851))+(((-1.0)*gconst34*r00*x12853*x12854))+(((-1.0)*gconst34*sj3*x12853*x12857))+((r02*r22*sj3)))),-1);
if(!x12859.valid){
continue;
}
CheckValue<IkReal> x12860 = IKatan2WithCheck(IkReal((((r22*x12858))+((cj3*r22*x12856)))),IkReal(((((-1.0)*r20*x12853*x12858))+((gconst34*x12855*x12856))+(((-1.0)*cj3*x12851*x12857))+((r00*x12852*x12855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12859.value)))+(x12860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12861=IKsin(j4);
IkReal x12862=IKcos(j4);
IkReal x12863=(sj1*sj2);
IkReal x12864=(gconst35*r00);
IkReal x12865=(gconst35*sj3);
IkReal x12866=(gconst34*r20);
IkReal x12867=(cj3*gconst34);
IkReal x12868=(gconst34*r21);
IkReal x12869=((1.0)*cj1);
IkReal x12870=(cj2*sj1);
IkReal x12871=(gconst35*r10);
IkReal x12872=(gconst34*sj3);
IkReal x12873=(cj3*gconst35);
IkReal x12874=(cj2*x12869);
IkReal x12875=((1.0)*x12862);
IkReal x12876=((1.0)*x12861);
IkReal x12877=(cj3*x12861);
IkReal x12878=(gconst34*x12861);
evalcond[0]=((((-1.0)*r22*x12875))+((x12861*x12868))+(((-1.0)*gconst35*r20*x12876)));
evalcond[1]=((((-1.0)*x12871*x12876))+(((-1.0)*r12*x12875))+((r11*x12878)));
evalcond[2]=((-1.0)+(((-1.0)*x12864*x12876))+((r01*x12878))+(((-1.0)*r02*x12875)));
evalcond[3]=(((r00*x12872))+((r02*x12877))+(((-1.0)*cj3*x12864*x12875))+((r01*x12862*x12867))+((r01*x12865)));
evalcond[4]=((((-1.0)*r02*sj3*x12876))+((r01*x12873))+((sj3*x12862*x12864))+((r00*x12867))+(((-1.0)*r01*x12872*x12875)));
evalcond[5]=(x12870+((r21*x12865))+(((-1.0)*r20*x12873*x12875))+((r22*x12877))+((cj1*sj2))+((r21*x12862*x12867))+((sj3*x12866)));
evalcond[6]=(x12863+((r11*x12865))+((r10*x12872))+((r11*x12862*x12867))+((r12*x12877))+(((-1.0)*x12874))+(((-1.0)*cj3*x12871*x12875)));
evalcond[7]=(x12863+((r20*x12862*x12865))+((cj3*x12866))+((r21*x12873))+(((-1.0)*x12874))+(((-1.0)*sj3*x12868*x12875))+(((-1.0)*r22*sj3*x12876)));
evalcond[8]=((((-1.0)*sj2*x12869))+(((-1.0)*r11*x12872*x12875))+((r11*x12873))+(((-1.0)*x12870))+((r10*x12862*x12865))+((r10*x12867))+(((-1.0)*r12*sj3*x12876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12879=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x12879.valid){
continue;
}
CheckValue<IkReal> x12880 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst35*r10))+((gconst34*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12879.value)))+(x12880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12881=IKsin(j4);
IkReal x12882=IKcos(j4);
IkReal x12883=(sj1*sj2);
IkReal x12884=(gconst35*r00);
IkReal x12885=(gconst35*sj3);
IkReal x12886=(gconst34*r20);
IkReal x12887=(cj3*gconst34);
IkReal x12888=(gconst34*r21);
IkReal x12889=((1.0)*cj1);
IkReal x12890=(cj2*sj1);
IkReal x12891=(gconst35*r10);
IkReal x12892=(gconst34*sj3);
IkReal x12893=(cj3*gconst35);
IkReal x12894=(cj2*x12889);
IkReal x12895=((1.0)*x12882);
IkReal x12896=((1.0)*x12881);
IkReal x12897=(cj3*x12881);
IkReal x12898=(gconst34*x12881);
evalcond[0]=((((-1.0)*r22*x12895))+(((-1.0)*gconst35*r20*x12896))+((x12881*x12888)));
evalcond[1]=((((-1.0)*x12891*x12896))+((r11*x12898))+(((-1.0)*r12*x12895)));
evalcond[2]=((-1.0)+(((-1.0)*x12884*x12896))+((r01*x12898))+(((-1.0)*r02*x12895)));
evalcond[3]=(((r00*x12892))+((r02*x12897))+((r01*x12885))+((r01*x12882*x12887))+(((-1.0)*cj3*x12884*x12895)));
evalcond[4]=(((r01*x12893))+((r00*x12887))+(((-1.0)*r02*sj3*x12896))+((sj3*x12882*x12884))+(((-1.0)*r01*x12892*x12895)));
evalcond[5]=(x12890+((r22*x12897))+((cj1*sj2))+(((-1.0)*r20*x12893*x12895))+((r21*x12882*x12887))+((r21*x12885))+((sj3*x12886)));
evalcond[6]=(((r12*x12897))+x12883+(((-1.0)*cj3*x12891*x12895))+((r10*x12892))+(((-1.0)*x12894))+((r11*x12885))+((r11*x12882*x12887)));
evalcond[7]=(x12883+((r21*x12893))+(((-1.0)*r22*sj3*x12896))+((r20*x12882*x12885))+((cj3*x12886))+(((-1.0)*x12894))+(((-1.0)*sj3*x12888*x12895)));
evalcond[8]=((((-1.0)*sj2*x12889))+(((-1.0)*x12890))+((r10*x12882*x12885))+(((-1.0)*r11*x12892*x12895))+((r10*x12887))+(((-1.0)*r12*sj3*x12896))+((r11*x12893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12900 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12900)==0){
continue;
}
IkReal x12899=pow(x12900,-0.5);
CheckValue<IkReal> x12901 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12901.valid){
continue;
}
IkReal gconst36=((-1.0)*(x12901.value));
IkReal gconst37=((-1.0)*r21*x12899);
IkReal gconst38=(r20*x12899);
CheckValue<IkReal> x12902 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12902.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12902.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12905 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12905.valid){
continue;
}
IkReal x12903=((-1.0)*(x12905.value));
IkReal x12904=x12899;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12903;
IkReal gconst36=x12903;
IkReal gconst37=((-1.0)*r21*x12904);
IkReal gconst38=(r20*x12904);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12908 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12908.valid){
continue;
}
IkReal x12906=((-1.0)*(x12908.value));
IkReal x12907=x12899;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12906;
IkReal gconst36=x12906;
IkReal gconst37=((-1.0)*r21*x12907);
IkReal gconst38=(r20*x12907);
CheckValue<IkReal> x12916=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12916.valid){
continue;
}
IkReal x12909=x12916.value;
IkReal x12910=(sj3*x12909);
IkReal x12911=(r11*x12910);
IkReal x12912=(r00*x12910);
IkReal x12913=(r01*x12910);
IkReal x12914=(r10*x12910);
IkReal x12915=(r20*r21*x12910);
j4eval[0]=IKsign((((r01*x12911*(r21*r21)))+((r02*r12*sj3))+((r00*r20*r21*x12911))+((r10*r20*r21*x12913))+((r10*x12912*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12917=gconst37*gconst37;
IkReal x12918=gconst38*gconst38;
IkReal x12919=((1.0)*cj3);
IkReal x12920=(gconst38*r01);
IkReal x12921=(cj3*gconst37);
IkReal x12922=(r12*sj3);
IkReal x12923=(gconst37*r00);
IkReal x12924=(r00*r11);
IkReal x12925=((1.0)*r10*sj3);
CheckValue<IkReal> x12926=IKPowWithIntegerCheck(IKsign((((gconst38*x12921*x12924))+(((-1.0)*r01*r11*x12917*x12919))+(((-1.0)*r02*r12*x12919))+((r10*x12920*x12921))+(((-1.0)*r00*r10*x12918*x12919)))),-1);
if(!x12926.valid){
continue;
}
CheckValue<IkReal> x12927 = IKatan2WithCheck(IkReal((((x12920*x12922))+((x12922*x12923)))),IkReal((((gconst37*r11*sj3*x12920))+(((-1.0)*r01*x12918*x12925))+(((-1.0)*gconst38*x12923*x12925))+((sj3*x12917*x12924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12926.value)))+(x12927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12928=IKsin(j4);
IkReal x12929=IKcos(j4);
IkReal x12930=(sj1*sj2);
IkReal x12931=(gconst38*sj3);
IkReal x12932=(cj3*gconst38);
IkReal x12933=(cj3*gconst37);
IkReal x12934=((1.0)*cj1);
IkReal x12935=(gconst37*sj3);
IkReal x12936=(cj2*sj1);
IkReal x12937=(cj2*x12934);
IkReal x12938=((1.0)*x12929);
IkReal x12939=((1.0)*x12928);
IkReal x12940=(cj3*x12928);
IkReal x12941=(gconst37*x12928);
evalcond[0]=(((r21*x12941))+(((-1.0)*gconst38*r20*x12939))+(((-1.0)*r22*x12938)));
evalcond[1]=((((-1.0)*r12*x12938))+(((-1.0)*gconst38*r10*x12939))+((r11*x12941)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12938))+((r01*x12941))+(((-1.0)*gconst38*r00*x12939)));
evalcond[3]=(((r01*x12929*x12933))+(((-1.0)*r00*x12932*x12938))+((r01*x12931))+((r00*x12935))+((r02*x12940)));
evalcond[4]=((((-1.0)*r01*x12935*x12938))+(((-1.0)*r02*sj3*x12939))+((r00*x12929*x12931))+((r01*x12932))+((r00*x12933)));
evalcond[5]=(x12936+((r20*x12935))+((r22*x12940))+((cj1*sj2))+((r21*x12929*x12933))+((r21*x12931))+(((-1.0)*r20*x12932*x12938)));
evalcond[6]=(x12930+(((-1.0)*r10*x12932*x12938))+((r11*x12931))+((r12*x12940))+((r11*x12929*x12933))+((r10*x12935))+(((-1.0)*x12937)));
evalcond[7]=(x12930+((r20*x12933))+(((-1.0)*r22*sj3*x12939))+((r20*x12929*x12931))+(((-1.0)*x12937))+((r21*x12932))+(((-1.0)*r21*x12935*x12938)));
evalcond[8]=(((r11*x12932))+((r10*x12929*x12931))+(((-1.0)*r11*x12935*x12938))+(((-1.0)*x12936))+(((-1.0)*sj2*x12934))+((r10*x12933))+(((-1.0)*r12*sj3*x12939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12942=gconst37*gconst37;
IkReal x12943=gconst38*gconst38;
IkReal x12944=(r10*sj3);
IkReal x12945=(r00*r11);
IkReal x12946=(r01*r11);
IkReal x12947=(cj3*gconst37);
IkReal x12948=(cj3*r10);
IkReal x12949=((1.0)*gconst37*gconst38);
CheckValue<IkReal> x12950 = IKatan2WithCheck(IkReal((((cj3*gconst38*r01*r12))+((r00*r12*x12947)))),IkReal(((((-1.0)*gconst38*r00*r10*x12947))+(((-1.0)*r01*x12943*x12948))+((cj3*x12942*x12945))+((gconst38*x12946*x12947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12950.valid){
continue;
}
CheckValue<IkReal> x12951=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x12945*x12949))+((r00*x12943*x12944))+((sj3*x12942*x12946))+(((-1.0)*r01*x12944*x12949)))),-1);
if(!x12951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12950.value)+(((1.5707963267949)*(x12951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12952=IKsin(j4);
IkReal x12953=IKcos(j4);
IkReal x12954=(sj1*sj2);
IkReal x12955=(gconst38*sj3);
IkReal x12956=(cj3*gconst38);
IkReal x12957=(cj3*gconst37);
IkReal x12958=((1.0)*cj1);
IkReal x12959=(gconst37*sj3);
IkReal x12960=(cj2*sj1);
IkReal x12961=(cj2*x12958);
IkReal x12962=((1.0)*x12953);
IkReal x12963=((1.0)*x12952);
IkReal x12964=(cj3*x12952);
IkReal x12965=(gconst37*x12952);
evalcond[0]=((((-1.0)*gconst38*r20*x12963))+(((-1.0)*r22*x12962))+((r21*x12965)));
evalcond[1]=((((-1.0)*gconst38*r10*x12963))+(((-1.0)*r12*x12962))+((r11*x12965)));
evalcond[2]=((-1.0)+((r01*x12965))+(((-1.0)*gconst38*r00*x12963))+(((-1.0)*r02*x12962)));
evalcond[3]=(((r01*x12953*x12957))+((r01*x12955))+((r00*x12959))+((r02*x12964))+(((-1.0)*r00*x12956*x12962)));
evalcond[4]=((((-1.0)*r02*sj3*x12963))+((r00*x12953*x12955))+((r01*x12956))+((r00*x12957))+(((-1.0)*r01*x12959*x12962)));
evalcond[5]=(x12960+((cj1*sj2))+((r21*x12955))+(((-1.0)*r20*x12956*x12962))+((r22*x12964))+((r20*x12959))+((r21*x12953*x12957)));
evalcond[6]=(x12954+((r10*x12959))+(((-1.0)*x12961))+((r11*x12953*x12957))+((r11*x12955))+(((-1.0)*r10*x12956*x12962))+((r12*x12964)));
evalcond[7]=(x12954+(((-1.0)*x12961))+((r21*x12956))+((r20*x12953*x12955))+((r20*x12957))+(((-1.0)*r21*x12959*x12962))+(((-1.0)*r22*sj3*x12963)));
evalcond[8]=(((r10*x12957))+(((-1.0)*r12*sj3*x12963))+((r10*x12953*x12955))+(((-1.0)*r11*x12959*x12962))+(((-1.0)*x12960))+((r11*x12956))+(((-1.0)*sj2*x12958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12966=((1.0)*gconst38);
CheckValue<IkReal> x12967 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst37*r21))+(((-1.0)*r20*x12966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12967.valid){
continue;
}
CheckValue<IkReal> x12968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12966))+(((-1.0)*gconst37*r10)))),-1);
if(!x12968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12967.value)+(((1.5707963267949)*(x12968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12969=IKsin(j4);
IkReal x12970=IKcos(j4);
IkReal x12971=(sj1*sj2);
IkReal x12972=(gconst38*sj3);
IkReal x12973=(cj3*gconst38);
IkReal x12974=(cj3*gconst37);
IkReal x12975=((1.0)*cj1);
IkReal x12976=(gconst37*sj3);
IkReal x12977=(cj2*sj1);
IkReal x12978=(cj2*x12975);
IkReal x12979=((1.0)*x12970);
IkReal x12980=((1.0)*x12969);
IkReal x12981=(cj3*x12969);
IkReal x12982=(gconst37*x12969);
evalcond[0]=((((-1.0)*gconst38*r20*x12980))+((r21*x12982))+(((-1.0)*r22*x12979)));
evalcond[1]=(((r11*x12982))+(((-1.0)*r12*x12979))+(((-1.0)*gconst38*r10*x12980)));
evalcond[2]=((-1.0)+(((-1.0)*gconst38*r00*x12980))+((r01*x12982))+(((-1.0)*r02*x12979)));
evalcond[3]=(((r01*x12972))+((r00*x12976))+(((-1.0)*r00*x12973*x12979))+((r02*x12981))+((r01*x12970*x12974)));
evalcond[4]=(((r01*x12973))+((r00*x12970*x12972))+((r00*x12974))+(((-1.0)*r01*x12976*x12979))+(((-1.0)*r02*sj3*x12980)));
evalcond[5]=(x12977+((r21*x12970*x12974))+((r22*x12981))+((cj1*sj2))+((r20*x12976))+(((-1.0)*r20*x12973*x12979))+((r21*x12972)));
evalcond[6]=(x12971+((r11*x12970*x12974))+(((-1.0)*x12978))+(((-1.0)*r10*x12973*x12979))+((r12*x12981))+((r11*x12972))+((r10*x12976)));
evalcond[7]=(x12971+(((-1.0)*x12978))+((r20*x12974))+(((-1.0)*r21*x12976*x12979))+(((-1.0)*r22*sj3*x12980))+((r20*x12970*x12972))+((r21*x12973)));
evalcond[8]=(((r10*x12970*x12972))+(((-1.0)*r11*x12976*x12979))+(((-1.0)*r12*sj3*x12980))+(((-1.0)*sj2*x12975))+(((-1.0)*x12977))+((r11*x12973))+((r10*x12974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12984 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12984)==0){
continue;
}
IkReal x12983=pow(x12984,-0.5);
CheckValue<IkReal> x12985 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12985.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x12985.value))));
IkReal gconst40=((1.0)*r21*x12983);
IkReal gconst41=((-1.0)*r20*x12983);
CheckValue<IkReal> x12986 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12986.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12986.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12989 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12989.valid){
continue;
}
IkReal x12987=((1.0)*(x12989.value));
IkReal x12988=x12983;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12987)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12987)));
IkReal gconst40=((1.0)*r21*x12988);
IkReal gconst41=((-1.0)*r20*x12988);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12992 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12992.valid){
continue;
}
IkReal x12990=((1.0)*(x12992.value));
IkReal x12991=x12983;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12990)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12990)));
IkReal gconst40=((1.0)*r21*x12991);
IkReal gconst41=((-1.0)*r20*x12991);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12995 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12995.valid){
continue;
}
IkReal x12993=((1.0)*(x12995.value));
IkReal x12994=x12983;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12993)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12993)));
IkReal gconst40=((1.0)*r21*x12994);
IkReal gconst41=((-1.0)*r20*x12994);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12996=gconst40*gconst40;
IkReal x12997=gconst41*gconst41;
IkReal x12998=(gconst41*sj3);
IkReal x12999=((1.0)*cj3);
IkReal x13000=(gconst40*r00);
IkReal x13001=((1.0)*r20);
IkReal x13002=(gconst40*r01);
IkReal x13003=(cj3*gconst41);
IkReal x13004=(r21*x12996);
CheckValue<IkReal> x13005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x12997*x12999))+(((-1.0)*r01*x12999*x13004))+((r21*x13000*x13003))+(((-1.0)*r02*r22*x12999))+((r20*x13002*x13003)))),-1);
if(!x13005.valid){
continue;
}
CheckValue<IkReal> x13006 = IKatan2WithCheck(IkReal((((r22*sj3*x13000))+((r01*r22*x12998)))),IkReal(((((-1.0)*x12998*x13000*x13001))+((r21*x12998*x13002))+((r00*sj3*x13004))+(((-1.0)*r01*sj3*x12997*x13001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13005.value)))+(x13006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13007=IKsin(j4);
IkReal x13008=IKcos(j4);
IkReal x13009=(sj1*sj2);
IkReal x13010=(gconst40*sj3);
IkReal x13011=(gconst41*sj3);
IkReal x13012=(gconst41*r20);
IkReal x13013=(cj3*gconst41);
IkReal x13014=((1.0)*cj2);
IkReal x13015=(cj1*sj2);
IkReal x13016=(cj3*gconst40);
IkReal x13017=(cj1*x13014);
IkReal x13018=((1.0)*x13008);
IkReal x13019=((1.0)*x13007);
IkReal x13020=(cj3*x13007);
IkReal x13021=(gconst40*x13007);
IkReal x13022=(x13008*x13016);
evalcond[0]=((((-1.0)*x13012*x13019))+((r21*x13021))+(((-1.0)*r22*x13018)));
evalcond[1]=((((-1.0)*gconst41*r10*x13019))+((r11*x13021))+(((-1.0)*r12*x13018)));
evalcond[2]=((-1.0)+((r01*x13021))+(((-1.0)*gconst41*r00*x13019))+(((-1.0)*r02*x13018)));
evalcond[3]=(((r01*x13022))+(((-1.0)*r00*x13013*x13018))+((r00*x13010))+((r01*x13011))+((r02*x13020)));
evalcond[4]=(((r00*x13016))+(((-1.0)*r02*sj3*x13019))+((r01*x13013))+((r00*x13008*x13011))+(((-1.0)*r01*x13010*x13018)));
evalcond[5]=(((cj2*sj1))+((r21*x13022))+((r21*x13011))+((r20*x13010))+(((-1.0)*cj3*x13012*x13018))+x13015+((r22*x13020)));
evalcond[6]=((((-1.0)*x13017))+(((-1.0)*r10*x13013*x13018))+((r11*x13011))+((r11*x13022))+x13009+((r12*x13020))+((r10*x13010)));
evalcond[7]=((((-1.0)*r21*x13010*x13018))+((r21*x13013))+(((-1.0)*x13017))+(((-1.0)*r22*sj3*x13019))+((r20*x13016))+((r20*x13008*x13011))+x13009);
evalcond[8]=((((-1.0)*r11*x13010*x13018))+(((-1.0)*sj1*x13014))+(((-1.0)*x13015))+((r11*x13013))+(((-1.0)*r12*sj3*x13019))+((r10*x13016))+((r10*x13008*x13011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13023=((1.0)*gconst41);
CheckValue<IkReal> x13024 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*r20*x13023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13024.valid){
continue;
}
CheckValue<IkReal> x13025=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r10))+(((-1.0)*r11*x13023)))),-1);
if(!x13025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13024.value)+(((1.5707963267949)*(x13025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13026=IKsin(j4);
IkReal x13027=IKcos(j4);
IkReal x13028=(sj1*sj2);
IkReal x13029=(gconst40*sj3);
IkReal x13030=(gconst41*sj3);
IkReal x13031=(gconst41*r20);
IkReal x13032=(cj3*gconst41);
IkReal x13033=((1.0)*cj2);
IkReal x13034=(cj1*sj2);
IkReal x13035=(cj3*gconst40);
IkReal x13036=(cj1*x13033);
IkReal x13037=((1.0)*x13027);
IkReal x13038=((1.0)*x13026);
IkReal x13039=(cj3*x13026);
IkReal x13040=(gconst40*x13026);
IkReal x13041=(x13027*x13035);
evalcond[0]=((((-1.0)*x13031*x13038))+((r21*x13040))+(((-1.0)*r22*x13037)));
evalcond[1]=(((r11*x13040))+(((-1.0)*r12*x13037))+(((-1.0)*gconst41*r10*x13038)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13037))+((r01*x13040))+(((-1.0)*gconst41*r00*x13038)));
evalcond[3]=(((r00*x13029))+(((-1.0)*r00*x13032*x13037))+((r01*x13030))+((r01*x13041))+((r02*x13039)));
evalcond[4]=(((r00*x13027*x13030))+((r01*x13032))+(((-1.0)*r01*x13029*x13037))+((r00*x13035))+(((-1.0)*r02*sj3*x13038)));
evalcond[5]=(((cj2*sj1))+((r22*x13039))+((r21*x13041))+((r20*x13029))+((r21*x13030))+x13034+(((-1.0)*cj3*x13031*x13037)));
evalcond[6]=(((r11*x13041))+((r11*x13030))+((r12*x13039))+(((-1.0)*r10*x13032*x13037))+x13028+(((-1.0)*x13036))+((r10*x13029)));
evalcond[7]=((((-1.0)*r22*sj3*x13038))+((r21*x13032))+((r20*x13027*x13030))+x13028+(((-1.0)*x13036))+((r20*x13035))+(((-1.0)*r21*x13029*x13037)));
evalcond[8]=((((-1.0)*x13034))+((r11*x13032))+((r10*x13035))+(((-1.0)*r12*sj3*x13038))+(((-1.0)*sj1*x13033))+(((-1.0)*r11*x13029*x13037))+((r10*x13027*x13030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13042=IKPowWithIntegerCheck(IKsign((((gconst41*r21))+((gconst40*r20)))),-1);
if(!x13042.valid){
continue;
}
CheckValue<IkReal> x13043 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst41*r10))+((gconst40*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13042.value)))+(x13043.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13044=IKsin(j4);
IkReal x13045=IKcos(j4);
IkReal x13046=(sj1*sj2);
IkReal x13047=(gconst40*sj3);
IkReal x13048=(gconst41*sj3);
IkReal x13049=(gconst41*r20);
IkReal x13050=(cj3*gconst41);
IkReal x13051=((1.0)*cj2);
IkReal x13052=(cj1*sj2);
IkReal x13053=(cj3*gconst40);
IkReal x13054=(cj1*x13051);
IkReal x13055=((1.0)*x13045);
IkReal x13056=((1.0)*x13044);
IkReal x13057=(cj3*x13044);
IkReal x13058=(gconst40*x13044);
IkReal x13059=(x13045*x13053);
evalcond[0]=((((-1.0)*x13049*x13056))+((r21*x13058))+(((-1.0)*r22*x13055)));
evalcond[1]=((((-1.0)*r12*x13055))+((r11*x13058))+(((-1.0)*gconst41*r10*x13056)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13055))+(((-1.0)*gconst41*r00*x13056))+((r01*x13058)));
evalcond[3]=(((r02*x13057))+((r01*x13048))+((r00*x13047))+(((-1.0)*r00*x13050*x13055))+((r01*x13059)));
evalcond[4]=((((-1.0)*r01*x13047*x13055))+((r00*x13045*x13048))+(((-1.0)*r02*sj3*x13056))+((r00*x13053))+((r01*x13050)));
evalcond[5]=(((cj2*sj1))+((r20*x13047))+((r21*x13048))+((r21*x13059))+((r22*x13057))+(((-1.0)*cj3*x13049*x13055))+x13052);
evalcond[6]=((((-1.0)*r10*x13050*x13055))+((r12*x13057))+((r11*x13048))+((r10*x13047))+x13046+((r11*x13059))+(((-1.0)*x13054)));
evalcond[7]=(((r20*x13053))+((r21*x13050))+(((-1.0)*r21*x13047*x13055))+((r20*x13045*x13048))+x13046+(((-1.0)*x13054))+(((-1.0)*r22*sj3*x13056)));
evalcond[8]=((((-1.0)*sj1*x13051))+((r10*x13045*x13048))+(((-1.0)*x13052))+(((-1.0)*r12*sj3*x13056))+((r10*x13053))+(((-1.0)*r11*x13047*x13055))+((r11*x13050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13060=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13060);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13060);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13061=(cj5*r00);
IkReal x13062=(r01*sj5);
j4eval[0]=((((-1.0)*x13061))+x13062);
j4eval[1]=(((sj3*x13061))+(((-1.0)*sj3*x13062)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13063=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13063);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13063);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13064=(r01*sj5);
IkReal x13065=((1.0)*cj5*r00);
j4eval[0]=(x13064+(((-1.0)*x13065)));
j4eval[1]=(((cj3*x13064))+(((-1.0)*cj3*x13065)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13066=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13066);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13066);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13067=((1.0)*cj3);
CheckValue<IkReal> x13068=IKPowWithIntegerCheck(cj3,-1);
if(!x13068.valid){
continue;
}
CheckValue<IkReal> x13069=IKPowWithIntegerCheck(r22,-1);
if(!x13069.valid){
continue;
}
CheckValue<IkReal> x13070=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x13070.valid){
continue;
}
if( IKabs(((x13068.value)*(x13069.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13070.value)*(((((-1.0)*cj5*r01*x13067))+(((-1.0)*r00*sj5*x13067)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13068.value)*(x13069.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13070.value)*(((((-1.0)*cj5*r01*x13067))+(((-1.0)*r00*sj5*x13067))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13068.value)*(x13069.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13070.value)*(((((-1.0)*cj5*r01*x13067))+(((-1.0)*r00*sj5*x13067))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13071=IKsin(j4);
IkReal x13072=IKcos(j4);
IkReal x13073=(sj1*sj2);
IkReal x13074=(cj5*sj3);
IkReal x13075=(r11*sj5);
IkReal x13076=(cj3*cj5);
IkReal x13077=((1.0)*cj1);
IkReal x13078=(cj3*sj5);
IkReal x13079=(sj3*sj5);
IkReal x13080=(cj2*sj1);
IkReal x13081=(r01*sj5);
IkReal x13082=((1.0)*sj3);
IkReal x13083=(cj2*x13077);
IkReal x13084=(r10*x13072);
IkReal x13085=(r22*x13071);
IkReal x13086=(cj3*x13072);
IkReal x13087=((1.0)*cj5*x13071);
evalcond[0]=((-1.0)*r22*x13072);
evalcond[1]=(((cj3*x13085))+((cj1*sj2))+x13080);
evalcond[2]=((((-1.0)*r10*x13087))+((x13071*x13075)));
evalcond[3]=((-1.0)+((x13071*x13081))+(((-1.0)*r00*x13087)));
evalcond[4]=((((-1.0)*x13083))+(((-1.0)*x13082*x13085))+x13073);
evalcond[5]=(((r00*x13078))+((r01*x13076))+((r00*x13072*x13074))+(((-1.0)*r01*x13072*x13079)));
evalcond[6]=((((-1.0)*r00*x13072*x13076))+((r00*x13079))+((r01*x13074))+((r01*x13072*x13078)));
evalcond[7]=((((-1.0)*x13083))+((x13075*x13086))+((r10*x13079))+(((-1.0)*x13076*x13084))+((r11*x13074))+x13073);
evalcond[8]=(((r10*x13078))+((x13074*x13084))+((r11*x13076))+(((-1.0)*sj2*x13077))+(((-1.0)*x13072*x13075*x13082))+(((-1.0)*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13088=((1.0)*sj3);
IkReal x13089=(r01*sj5);
IkReal x13090=((1.0)*cj5*r00);
CheckValue<IkReal> x13091=IKPowWithIntegerCheck((x13089+(((-1.0)*x13090))),-1);
if(!x13091.valid){
continue;
}
CheckValue<IkReal> x13092=IKPowWithIntegerCheck((((cj3*x13089))+(((-1.0)*cj3*x13090))),-1);
if(!x13092.valid){
continue;
}
if( IKabs(x13091.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13092.value)*(((((-1.0)*r00*sj5*x13088))+(((-1.0)*cj5*r01*x13088)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13091.value)+IKsqr(((x13092.value)*(((((-1.0)*r00*sj5*x13088))+(((-1.0)*cj5*r01*x13088))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13091.value, ((x13092.value)*(((((-1.0)*r00*sj5*x13088))+(((-1.0)*cj5*r01*x13088))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13093=IKsin(j4);
IkReal x13094=IKcos(j4);
IkReal x13095=(sj1*sj2);
IkReal x13096=(cj5*sj3);
IkReal x13097=(r11*sj5);
IkReal x13098=(cj3*cj5);
IkReal x13099=((1.0)*cj1);
IkReal x13100=(cj3*sj5);
IkReal x13101=(sj3*sj5);
IkReal x13102=(cj2*sj1);
IkReal x13103=(r01*sj5);
IkReal x13104=((1.0)*sj3);
IkReal x13105=(cj2*x13099);
IkReal x13106=(r10*x13094);
IkReal x13107=(r22*x13093);
IkReal x13108=(cj3*x13094);
IkReal x13109=((1.0)*cj5*x13093);
evalcond[0]=((-1.0)*r22*x13094);
evalcond[1]=(((cj1*sj2))+((cj3*x13107))+x13102);
evalcond[2]=(((x13093*x13097))+(((-1.0)*r10*x13109)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x13109))+((x13093*x13103)));
evalcond[4]=((((-1.0)*x13105))+(((-1.0)*x13104*x13107))+x13095);
evalcond[5]=(((r00*x13100))+((r00*x13094*x13096))+((r01*x13098))+(((-1.0)*r01*x13094*x13101)));
evalcond[6]=(((r00*x13101))+((r01*x13094*x13100))+((r01*x13096))+(((-1.0)*r00*x13094*x13098)));
evalcond[7]=(((x13097*x13108))+((r11*x13096))+(((-1.0)*x13105))+(((-1.0)*x13098*x13106))+x13095+((r10*x13101)));
evalcond[8]=(((x13096*x13106))+(((-1.0)*x13094*x13097*x13104))+((r11*x13098))+(((-1.0)*x13102))+((r10*x13100))+(((-1.0)*sj2*x13099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13110=((1.0)*cj3);
IkReal x13111=(cj5*r00);
IkReal x13112=(r01*sj5);
CheckValue<IkReal> x13113=IKPowWithIntegerCheck(((((-1.0)*x13111))+x13112),-1);
if(!x13113.valid){
continue;
}
CheckValue<IkReal> x13114=IKPowWithIntegerCheck(((((-1.0)*sj3*x13112))+((sj3*x13111))),-1);
if(!x13114.valid){
continue;
}
if( IKabs(x13113.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13114.value)*(((((-1.0)*r00*sj5*x13110))+(((-1.0)*cj5*r01*x13110)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13113.value)+IKsqr(((x13114.value)*(((((-1.0)*r00*sj5*x13110))+(((-1.0)*cj5*r01*x13110))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13113.value, ((x13114.value)*(((((-1.0)*r00*sj5*x13110))+(((-1.0)*cj5*r01*x13110))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13115=IKsin(j4);
IkReal x13116=IKcos(j4);
IkReal x13117=(sj1*sj2);
IkReal x13118=(cj5*sj3);
IkReal x13119=(r11*sj5);
IkReal x13120=(cj3*cj5);
IkReal x13121=((1.0)*cj1);
IkReal x13122=(cj3*sj5);
IkReal x13123=(sj3*sj5);
IkReal x13124=(cj2*sj1);
IkReal x13125=(r01*sj5);
IkReal x13126=((1.0)*sj3);
IkReal x13127=(cj2*x13121);
IkReal x13128=(r10*x13116);
IkReal x13129=(r22*x13115);
IkReal x13130=(cj3*x13116);
IkReal x13131=((1.0)*cj5*x13115);
evalcond[0]=((-1.0)*r22*x13116);
evalcond[1]=(((cj3*x13129))+((cj1*sj2))+x13124);
evalcond[2]=((((-1.0)*r10*x13131))+((x13115*x13119)));
evalcond[3]=((-1.0)+((x13115*x13125))+(((-1.0)*r00*x13131)));
evalcond[4]=((((-1.0)*x13126*x13129))+(((-1.0)*x13127))+x13117);
evalcond[5]=(((r00*x13116*x13118))+((r00*x13122))+((r01*x13120))+(((-1.0)*r01*x13116*x13123)));
evalcond[6]=((((-1.0)*r00*x13116*x13120))+((r00*x13123))+((r01*x13116*x13122))+((r01*x13118)));
evalcond[7]=(((r10*x13123))+((x13119*x13130))+(((-1.0)*x13120*x13128))+(((-1.0)*x13127))+x13117+((r11*x13118)));
evalcond[8]=(((r10*x13122))+(((-1.0)*sj2*x13121))+((r11*x13120))+((x13118*x13128))+(((-1.0)*x13116*x13119*x13126))+(((-1.0)*x13124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13132=cj5*cj5;
IkReal x13133=(cj3*r20);
IkReal x13134=(r21*sj3);
IkReal x13135=((1.0)*cj3);
IkReal x13136=(r01*r21);
IkReal x13137=(r01*sj3);
IkReal x13138=(r00*sj5);
IkReal x13139=(cj5*r01*sj5);
IkReal x13140=((1.0)*x13132);
CheckValue<IkReal> x13141=IKPowWithIntegerCheck(IKsign((((cj3*x13132*x13136))+(((-1.0)*x13135*x13136))+(((-1.0)*r00*x13133*x13140))+((x13133*x13139))+((cj3*cj5*r21*x13138))+(((-1.0)*r02*r22*x13135)))),-1);
if(!x13141.valid){
continue;
}
CheckValue<IkReal> x13142 = IKatan2WithCheck(IkReal((((r22*sj3*x13138))+((cj5*r22*x13137)))),IkReal(((((-1.0)*r20*x13137*x13140))+(((-1.0)*r00*x13134*x13140))+((r00*x13134))+((x13134*x13139))+(((-1.0)*cj5*r20*sj3*x13138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13141.value)))+(x13142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13143=IKsin(j4);
IkReal x13144=IKcos(j4);
IkReal x13145=(sj1*sj2);
IkReal x13146=(r11*sj5);
IkReal x13147=(cj5*r10);
IkReal x13148=(cj5*r01);
IkReal x13149=(cj5*r00);
IkReal x13150=((1.0)*cj1);
IkReal x13151=(cj3*sj5);
IkReal x13152=(r21*sj5);
IkReal x13153=(cj5*sj3);
IkReal x13154=(sj3*sj5);
IkReal x13155=(cj2*sj1);
IkReal x13156=(r01*sj5);
IkReal x13157=(cj3*cj5);
IkReal x13158=(cj5*r20);
IkReal x13159=(cj2*x13150);
IkReal x13160=((1.0)*x13144);
IkReal x13161=((1.0)*x13143);
IkReal x13162=(cj3*x13144);
IkReal x13163=(sj3*x13144);
IkReal x13164=(cj3*x13143);
evalcond[0]=((((-1.0)*x13158*x13161))+(((-1.0)*r22*x13160))+((x13143*x13152)));
evalcond[1]=((((-1.0)*x13147*x13161))+((x13143*x13146))+(((-1.0)*r12*x13160)));
evalcond[2]=((-1.0)+(((-1.0)*x13149*x13161))+(((-1.0)*r02*x13160))+((x13143*x13156)));
evalcond[3]=(((r02*x13164))+((sj3*x13148))+((r01*x13144*x13151))+((r00*x13154))+(((-1.0)*cj3*x13149*x13160)));
evalcond[4]=(((x13149*x13163))+((cj3*x13148))+(((-1.0)*r01*x13154*x13160))+(((-1.0)*r02*sj3*x13161))+((r00*x13151)));
evalcond[5]=(((r21*x13153))+((r20*x13154))+((cj1*sj2))+((r22*x13164))+x13155+((r21*x13144*x13151))+(((-1.0)*r20*x13157*x13160)));
evalcond[6]=((((-1.0)*cj3*x13147*x13160))+(((-1.0)*x13159))+((x13146*x13162))+((r11*x13153))+((r10*x13154))+x13145+((r12*x13164)));
evalcond[7]=((((-1.0)*r22*sj3*x13161))+((r20*x13144*x13153))+((r21*x13157))+((r20*x13151))+(((-1.0)*x13159))+(((-1.0)*sj3*x13152*x13160))+x13145);
evalcond[8]=((((-1.0)*sj2*x13150))+(((-1.0)*sj3*x13146*x13160))+((x13147*x13163))+((r11*x13157))+(((-1.0)*r12*sj3*x13161))+((r10*x13151))+(((-1.0)*x13155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13165=((1.0)*cj5);
CheckValue<IkReal> x13166 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13165))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13166.valid){
continue;
}
CheckValue<IkReal> x13167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13165)))),-1);
if(!x13167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13166.value)+(((1.5707963267949)*(x13167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13168=IKsin(j4);
IkReal x13169=IKcos(j4);
IkReal x13170=(sj1*sj2);
IkReal x13171=(r11*sj5);
IkReal x13172=(cj5*r10);
IkReal x13173=(cj5*r01);
IkReal x13174=(cj5*r00);
IkReal x13175=((1.0)*cj1);
IkReal x13176=(cj3*sj5);
IkReal x13177=(r21*sj5);
IkReal x13178=(cj5*sj3);
IkReal x13179=(sj3*sj5);
IkReal x13180=(cj2*sj1);
IkReal x13181=(r01*sj5);
IkReal x13182=(cj3*cj5);
IkReal x13183=(cj5*r20);
IkReal x13184=(cj2*x13175);
IkReal x13185=((1.0)*x13169);
IkReal x13186=((1.0)*x13168);
IkReal x13187=(cj3*x13169);
IkReal x13188=(sj3*x13169);
IkReal x13189=(cj3*x13168);
evalcond[0]=((((-1.0)*x13183*x13186))+(((-1.0)*r22*x13185))+((x13168*x13177)));
evalcond[1]=((((-1.0)*r12*x13185))+(((-1.0)*x13172*x13186))+((x13168*x13171)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13185))+(((-1.0)*x13174*x13186))+((x13168*x13181)));
evalcond[3]=(((r02*x13189))+((r00*x13179))+(((-1.0)*cj3*x13174*x13185))+((sj3*x13173))+((r01*x13169*x13176)));
evalcond[4]=(((r00*x13176))+((x13174*x13188))+((cj3*x13173))+(((-1.0)*r01*x13179*x13185))+(((-1.0)*r02*sj3*x13186)));
evalcond[5]=(((r22*x13189))+((r21*x13169*x13176))+((r20*x13179))+((cj1*sj2))+(((-1.0)*r20*x13182*x13185))+((r21*x13178))+x13180);
evalcond[6]=((((-1.0)*x13184))+((r12*x13189))+((x13171*x13187))+(((-1.0)*cj3*x13172*x13185))+x13170+((r11*x13178))+((r10*x13179)));
evalcond[7]=((((-1.0)*x13184))+(((-1.0)*sj3*x13177*x13185))+((r20*x13176))+((r21*x13182))+(((-1.0)*r22*sj3*x13186))+x13170+((r20*x13169*x13178)));
evalcond[8]=((((-1.0)*sj3*x13171*x13185))+(((-1.0)*x13180))+((r11*x13182))+(((-1.0)*sj2*x13175))+((x13172*x13188))+((r10*x13176))+(((-1.0)*r12*sj3*x13186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13190=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13190.valid){
continue;
}
CheckValue<IkReal> x13191 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13190.value)))+(x13191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13192=IKsin(j4);
IkReal x13193=IKcos(j4);
IkReal x13194=(sj1*sj2);
IkReal x13195=(r11*sj5);
IkReal x13196=(cj5*r10);
IkReal x13197=(cj5*r01);
IkReal x13198=(cj5*r00);
IkReal x13199=((1.0)*cj1);
IkReal x13200=(cj3*sj5);
IkReal x13201=(r21*sj5);
IkReal x13202=(cj5*sj3);
IkReal x13203=(sj3*sj5);
IkReal x13204=(cj2*sj1);
IkReal x13205=(r01*sj5);
IkReal x13206=(cj3*cj5);
IkReal x13207=(cj5*r20);
IkReal x13208=(cj2*x13199);
IkReal x13209=((1.0)*x13193);
IkReal x13210=((1.0)*x13192);
IkReal x13211=(cj3*x13193);
IkReal x13212=(sj3*x13193);
IkReal x13213=(cj3*x13192);
evalcond[0]=((((-1.0)*x13207*x13210))+((x13192*x13201))+(((-1.0)*r22*x13209)));
evalcond[1]=((((-1.0)*r12*x13209))+((x13192*x13195))+(((-1.0)*x13196*x13210)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13209))+(((-1.0)*x13198*x13210))+((x13192*x13205)));
evalcond[3]=((((-1.0)*cj3*x13198*x13209))+((r00*x13203))+((r01*x13193*x13200))+((r02*x13213))+((sj3*x13197)));
evalcond[4]=(((r00*x13200))+(((-1.0)*r02*sj3*x13210))+(((-1.0)*r01*x13203*x13209))+((x13198*x13212))+((cj3*x13197)));
evalcond[5]=((((-1.0)*r20*x13206*x13209))+((cj1*sj2))+((r21*x13202))+x13204+((r22*x13213))+((r21*x13193*x13200))+((r20*x13203)));
evalcond[6]=(((r12*x13213))+((r10*x13203))+(((-1.0)*cj3*x13196*x13209))+((r11*x13202))+((x13195*x13211))+x13194+(((-1.0)*x13208)));
evalcond[7]=(((r20*x13193*x13202))+(((-1.0)*sj3*x13201*x13209))+(((-1.0)*r22*sj3*x13210))+((r21*x13206))+x13194+(((-1.0)*x13208))+((r20*x13200)));
evalcond[8]=(((r10*x13200))+((r11*x13206))+((x13196*x13212))+(((-1.0)*sj3*x13195*x13209))+(((-1.0)*sj2*x13199))+(((-1.0)*r12*sj3*x13210))+(((-1.0)*x13204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13215 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13215)==0){
continue;
}
IkReal x13214=pow(x13215,-0.5);
CheckValue<IkReal> x13216 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13216.valid){
continue;
}
IkReal gconst12=((-1.0)*(x13216.value));
IkReal gconst13=((-1.0)*r11*x13214);
IkReal gconst14=(r10*x13214);
CheckValue<IkReal> x13217 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13217.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13217.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13220 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13220.valid){
continue;
}
IkReal x13218=((-1.0)*(x13220.value));
IkReal x13219=x13214;
sj5=gconst13;
cj5=gconst14;
j5=x13218;
IkReal gconst12=x13218;
IkReal gconst13=((-1.0)*r11*x13219);
IkReal gconst14=(r10*x13219);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13221=((1.0)*gconst14);
CheckValue<IkReal> x13222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13221))+(((-1.0)*gconst13*r20)))),-1);
if(!x13222.valid){
continue;
}
CheckValue<IkReal> x13223 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x13221))+((cj0*gconst13*r01))+((gconst13*r11*sj0))+(((-1.0)*r10*sj0*x13221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13222.value)))+(x13223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13224=IKsin(j4);
IkReal x13225=IKcos(j4);
IkReal x13226=((1.0)*r22);
IkReal x13227=((1.0)*r12);
IkReal x13228=(cj2*sj0);
IkReal x13229=(gconst13*sj3);
IkReal x13230=(gconst13*r01);
IkReal x13231=(sj1*sj2);
IkReal x13232=(gconst14*sj3);
IkReal x13233=(cj1*cj2);
IkReal x13234=((1.0)*gconst14);
IkReal x13235=(cj3*gconst13);
IkReal x13236=(cj3*gconst14);
IkReal x13237=(cj2*sj1);
IkReal x13238=((1.0)*r02);
IkReal x13239=(cj1*sj2);
IkReal x13240=((1.0)*cj0);
IkReal x13241=(sj3*x13224);
IkReal x13242=(cj3*x13225);
IkReal x13243=(cj3*x13224);
IkReal x13244=(gconst13*x13224);
IkReal x13245=((1.0)*x13225);
evalcond[0]=((((-1.0)*r20*x13224*x13234))+((r21*x13244))+(((-1.0)*x13225*x13226)));
evalcond[1]=((((-1.0)*r00*x13224*x13234))+sj0+(((-1.0)*x13225*x13238))+((x13224*x13230)));
evalcond[2]=(((r11*x13244))+(((-1.0)*x13225*x13227))+(((-1.0)*r10*x13224*x13234))+(((-1.0)*x13240)));
evalcond[3]=((((-1.0)*r20*x13234*x13242))+((r22*x13243))+((r21*x13232))+x13239+x13237+((r20*x13229))+((r21*x13225*x13235)));
evalcond[4]=(((r20*x13235))+((r21*x13236))+(((-1.0)*x13226*x13241))+(((-1.0)*r21*x13229*x13245))+x13231+(((-1.0)*x13233))+((r20*x13225*x13232)));
evalcond[5]=(((r01*x13236))+((r00*x13225*x13232))+(((-1.0)*r01*x13229*x13245))+((cj0*x13237))+((cj0*x13239))+(((-1.0)*x13238*x13241))+((r00*x13235)));
evalcond[6]=(((x13230*x13242))+((r01*x13232))+((r02*x13243))+(((-1.0)*x13231*x13240))+((r00*x13229))+((cj0*x13233))+(((-1.0)*r00*x13234*x13242)));
evalcond[7]=(((r10*x13235))+(((-1.0)*r11*x13229*x13245))+(((-1.0)*x13227*x13241))+((sj1*x13228))+((r10*x13225*x13232))+((r11*x13236))+((sj0*x13239)));
evalcond[8]=(((r11*x13225*x13235))+((r10*x13229))+((r11*x13232))+((r12*x13243))+(((-1.0)*r10*x13234*x13242))+((cj1*x13228))+(((-1.0)*sj0*x13231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13246 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13246.valid){
continue;
}
CheckValue<IkReal> x13247=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x13247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13246.value)+(((1.5707963267949)*(x13247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13248=IKsin(j4);
IkReal x13249=IKcos(j4);
IkReal x13250=((1.0)*r22);
IkReal x13251=((1.0)*r12);
IkReal x13252=(cj2*sj0);
IkReal x13253=(gconst13*sj3);
IkReal x13254=(gconst13*r01);
IkReal x13255=(sj1*sj2);
IkReal x13256=(gconst14*sj3);
IkReal x13257=(cj1*cj2);
IkReal x13258=((1.0)*gconst14);
IkReal x13259=(cj3*gconst13);
IkReal x13260=(cj3*gconst14);
IkReal x13261=(cj2*sj1);
IkReal x13262=((1.0)*r02);
IkReal x13263=(cj1*sj2);
IkReal x13264=((1.0)*cj0);
IkReal x13265=(sj3*x13248);
IkReal x13266=(cj3*x13249);
IkReal x13267=(cj3*x13248);
IkReal x13268=(gconst13*x13248);
IkReal x13269=((1.0)*x13249);
evalcond[0]=(((r21*x13268))+(((-1.0)*r20*x13248*x13258))+(((-1.0)*x13249*x13250)));
evalcond[1]=(sj0+((x13248*x13254))+(((-1.0)*x13249*x13262))+(((-1.0)*r00*x13248*x13258)));
evalcond[2]=(((r11*x13268))+(((-1.0)*x13264))+(((-1.0)*x13249*x13251))+(((-1.0)*r10*x13248*x13258)));
evalcond[3]=(((r21*x13256))+(((-1.0)*r20*x13258*x13266))+((r21*x13249*x13259))+((r22*x13267))+x13263+x13261+((r20*x13253)));
evalcond[4]=((((-1.0)*x13257))+(((-1.0)*x13250*x13265))+((r21*x13260))+((r20*x13249*x13256))+(((-1.0)*r21*x13253*x13269))+x13255+((r20*x13259)));
evalcond[5]=((((-1.0)*r01*x13253*x13269))+((r01*x13260))+((r00*x13249*x13256))+((r00*x13259))+(((-1.0)*x13262*x13265))+((cj0*x13261))+((cj0*x13263)));
evalcond[6]=((((-1.0)*x13255*x13264))+((x13254*x13266))+((r01*x13256))+((r00*x13253))+((r02*x13267))+((cj0*x13257))+(((-1.0)*r00*x13258*x13266)));
evalcond[7]=(((r11*x13260))+((r10*x13249*x13256))+((sj1*x13252))+((r10*x13259))+(((-1.0)*r11*x13253*x13269))+((sj0*x13263))+(((-1.0)*x13251*x13265)));
evalcond[8]=(((r10*x13253))+((r12*x13267))+(((-1.0)*sj0*x13255))+((cj1*x13252))+((r11*x13249*x13259))+((r11*x13256))+(((-1.0)*r10*x13258*x13266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13271 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13271)==0){
continue;
}
IkReal x13270=pow(x13271,-0.5);
CheckValue<IkReal> x13272 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13272.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x13272.value))));
IkReal gconst16=((1.0)*r11*x13270);
IkReal gconst17=((-1.0)*r10*x13270);
CheckValue<IkReal> x13273 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13273.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13273.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13276 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13276.valid){
continue;
}
IkReal x13274=((1.0)*(x13276.value));
IkReal x13275=x13270;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13274)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13274)));
IkReal gconst16=((1.0)*r11*x13275);
IkReal gconst17=((-1.0)*r10*x13275);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13279 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13279.valid){
continue;
}
IkReal x13277=((1.0)*(x13279.value));
IkReal x13278=x13270;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13277)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13277)));
IkReal gconst16=((1.0)*r11*x13278);
IkReal gconst17=((-1.0)*r10*x13278);
IkReal x13280=r12*r12;
IkReal x13281=(cj0*r02);
IkReal x13282=x13270;
IkReal x13283=(sj0*x13282);
j4eval[0]=((IKabs((((r12*sj0))+x13281)))+(IKabs(((((-1.0)*x13283))+((x13280*x13283))+((r12*x13281*x13282))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13286 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13286.valid){
continue;
}
IkReal x13284=((1.0)*(x13286.value));
IkReal x13285=x13270;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13284)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13284)));
IkReal gconst16=((1.0)*r11*x13285);
IkReal gconst17=((-1.0)*r10*x13285);
IkReal x13287=((1.0)*cj3);
CheckValue<IkReal> x13292=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13292.valid){
continue;
}
IkReal x13288=x13292.value;
IkReal x13289=(cj3*x13288);
IkReal x13290=(x13287*x13288);
IkReal x13291=((((-1.0)*x13287*(r22*r22)))+(((-1.0)*x13290*(r10*r10)*(r20*r20)))+(((-1.0)*x13290*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x13289)));
j4eval[0]=x13291;
j4eval[1]=IKsign(x13291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13295 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13295.valid){
continue;
}
IkReal x13293=((1.0)*(x13295.value));
IkReal x13294=x13270;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13293)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13293)));
IkReal gconst16=((1.0)*r11*x13294);
IkReal gconst17=((-1.0)*r10*x13294);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13298 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13298.valid){
continue;
}
IkReal x13296=((1.0)*(x13298.value));
IkReal x13297=x13270;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13296)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13296)));
IkReal gconst16=((1.0)*r11*x13297);
IkReal gconst17=((-1.0)*r10*x13297);
IkReal x13299=r12*r12;
IkReal x13300=(cj0*r02);
IkReal x13301=x13270;
IkReal x13302=(sj0*x13301);
j4eval[0]=((IKabs((((r12*x13300*x13301))+((x13299*x13302))+(((-1.0)*x13302)))))+(IKabs((((r12*sj0))+x13300))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13305 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13305.valid){
continue;
}
IkReal x13303=((1.0)*(x13305.value));
IkReal x13304=x13270;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13303)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13303)));
IkReal gconst16=((1.0)*r11*x13304);
IkReal gconst17=((-1.0)*r10*x13304);
IkReal x13306=r12*r12;
IkReal x13307=(sj1*sj2);
IkReal x13308=((1.0)*cj1*cj2);
CheckValue<IkReal> x13312=IKPowWithIntegerCheck(((-1.0)+x13306),-1);
if(!x13312.valid){
continue;
}
IkReal x13309=x13312.value;
if((((1.0)+(((-1.0)*x13306)))) < -0.00001)
continue;
IkReal x13310=IKsqrt(((1.0)+(((-1.0)*x13306))));
IkReal x13311=(r12*r22*x13309*x13310);
j4eval[0]=((IKabs((((r22*x13307))+(((-1.0)*r22*x13308)))))+(IKabs(((((-1.0)*x13308*x13311))+((x13307*x13311))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13313=(gconst17*r20);
IkReal x13314=(cj1*cj2);
IkReal x13315=(sj1*sj2);
IkReal x13316=(gconst16*r21);
CheckValue<IkReal> x13317=IKPowWithIntegerCheck(IKsign(((x13316*x13316)+(r22*r22)+(x13313*x13313)+(((-2.0)*x13313*x13316)))),-1);
if(!x13317.valid){
continue;
}
CheckValue<IkReal> x13318 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13314))+((r22*x13315)))),IkReal(((((-1.0)*x13313*x13315))+(((-1.0)*x13314*x13316))+((x13313*x13314))+((x13315*x13316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13317.value)))+(x13318.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13319=IKsin(j4);
IkReal x13320=IKcos(j4);
IkReal x13321=(gconst16*r01);
IkReal x13322=(cj2*sj1);
IkReal x13323=(gconst16*r21);
IkReal x13324=(gconst16*r11);
IkReal x13325=(cj1*sj2);
IkReal x13326=((1.0)*x13320);
IkReal x13327=(gconst17*x13320);
IkReal x13328=((1.0)*x13319);
evalcond[0]=((((-1.0)*r22*x13326))+(((-1.0)*gconst17*r20*x13328))+((x13319*x13323)));
evalcond[1]=((((-1.0)*r02*x13326))+sj0+((x13319*x13321))+(((-1.0)*gconst17*r00*x13328)));
evalcond[2]=((((-1.0)*r12*x13326))+(((-1.0)*gconst17*r10*x13328))+((x13319*x13324))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x13328))+(((-1.0)*cj1*cj2))+((r20*x13327))+((sj1*sj2))+(((-1.0)*x13323*x13326)));
evalcond[4]=((((-1.0)*x13321*x13326))+((cj0*x13322))+((cj0*x13325))+(((-1.0)*r02*x13328))+((r00*x13327)));
evalcond[5]=((((-1.0)*r12*x13328))+((r10*x13327))+(((-1.0)*x13324*x13326))+((sj0*x13322))+((sj0*x13325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13329=((1.0)*gconst17);
CheckValue<IkReal> x13330=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13329)))),-1);
if(!x13330.valid){
continue;
}
CheckValue<IkReal> x13331 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x13329))+((gconst16*r11*sj0))+(((-1.0)*cj0*r00*x13329))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13330.value)))+(x13331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13332=IKsin(j4);
IkReal x13333=IKcos(j4);
IkReal x13334=(gconst16*r01);
IkReal x13335=(cj2*sj1);
IkReal x13336=(gconst16*r21);
IkReal x13337=(gconst16*r11);
IkReal x13338=(cj1*sj2);
IkReal x13339=((1.0)*x13333);
IkReal x13340=(gconst17*x13333);
IkReal x13341=((1.0)*x13332);
evalcond[0]=((((-1.0)*gconst17*r20*x13341))+(((-1.0)*r22*x13339))+((x13332*x13336)));
evalcond[1]=(sj0+(((-1.0)*gconst17*r00*x13341))+((x13332*x13334))+(((-1.0)*r02*x13339)));
evalcond[2]=((((-1.0)*gconst17*r10*x13341))+(((-1.0)*r12*x13339))+((x13332*x13337))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x13336*x13339))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x13340))+(((-1.0)*r22*x13341)));
evalcond[4]=((((-1.0)*r02*x13341))+(((-1.0)*x13334*x13339))+((r00*x13340))+((cj0*x13338))+((cj0*x13335)));
evalcond[5]=((((-1.0)*x13337*x13339))+((r10*x13340))+(((-1.0)*r12*x13341))+((sj0*x13335))+((sj0*x13338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13342=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13342.valid){
continue;
}
CheckValue<IkReal> x13343 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13342.value)))+(x13343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13344=IKsin(j4);
IkReal x13345=IKcos(j4);
IkReal x13346=(gconst16*r01);
IkReal x13347=(cj2*sj1);
IkReal x13348=(gconst16*r21);
IkReal x13349=(gconst16*r11);
IkReal x13350=(cj1*sj2);
IkReal x13351=((1.0)*x13345);
IkReal x13352=(gconst17*x13345);
IkReal x13353=((1.0)*x13344);
evalcond[0]=((((-1.0)*r22*x13351))+((x13344*x13348))+(((-1.0)*gconst17*r20*x13353)));
evalcond[1]=((((-1.0)*r02*x13351))+((x13344*x13346))+sj0+(((-1.0)*gconst17*r00*x13353)));
evalcond[2]=(((x13344*x13349))+(((-1.0)*r12*x13351))+(((-1.0)*gconst17*r10*x13353))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x13353))+((r20*x13352))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13348*x13351)));
evalcond[4]=(((cj0*x13350))+(((-1.0)*x13346*x13351))+(((-1.0)*r02*x13353))+((cj0*x13347))+((r00*x13352)));
evalcond[5]=((((-1.0)*r12*x13353))+((r10*x13352))+((sj0*x13347))+(((-1.0)*x13349*x13351))+((sj0*x13350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13356 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13356.valid){
continue;
}
IkReal x13354=((1.0)*(x13356.value));
IkReal x13355=x13270;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13354)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13354)));
IkReal gconst16=((1.0)*r11*x13355);
IkReal gconst17=((-1.0)*r10*x13355);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13359 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13359.valid){
continue;
}
IkReal x13357=((1.0)*(x13359.value));
IkReal x13358=x13270;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13357)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13357)));
IkReal gconst16=((1.0)*r11*x13358);
IkReal gconst17=((-1.0)*r10*x13358);
IkReal x13360=r12*r12;
IkReal x13361=(cj0*r02);
IkReal x13362=x13270;
IkReal x13363=(sj0*x13362);
j4eval[0]=((IKabs(((((-1.0)*x13363))+((r12*x13361*x13362))+((x13360*x13363)))))+(IKabs((((r12*sj0))+x13361))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13366 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13366.valid){
continue;
}
IkReal x13364=((1.0)*(x13366.value));
IkReal x13365=x13270;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13364)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13364)));
IkReal gconst16=((1.0)*r11*x13365);
IkReal gconst17=((-1.0)*r10*x13365);
IkReal x13367=r12*r12;
IkReal x13368=(sj1*sj2);
IkReal x13369=((1.0)+(((-1.0)*x13367)));
IkReal x13370=((1.0)*cj1*cj2);
CheckValue<IkReal> x13377=IKPowWithIntegerCheck(x13369,-1);
if(!x13377.valid){
continue;
}
IkReal x13371=x13377.value;
CheckValue<IkReal> x13378=IKPowWithIntegerCheck(((-1.0)+x13367),-1);
if(!x13378.valid){
continue;
}
IkReal x13372=x13378.value;
IkReal x13373=((1.0)*x13371);
if((x13369) < -0.00001)
continue;
IkReal x13374=IKsqrt(x13369);
IkReal x13375=(r12*r22*x13372*x13374);
IkReal x13376=((((-2.0)*r10*r11*r20*r21*x13371))+(((-1.0)*(r22*r22)))+(((-1.0)*x13373*(r10*r10)*(r20*r20)))+(((-1.0)*x13373*(r11*r11)*(r21*r21))));
j4eval[0]=x13376;
j4eval[1]=((IKabs(((((-1.0)*r22*x13370))+((r22*x13368)))))+(IKabs(((((-1.0)*x13370*x13375))+((x13368*x13375))))));
j4eval[2]=IKsign(x13376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13379=(gconst17*r20);
IkReal x13380=(cj1*cj2);
IkReal x13381=(sj1*sj2);
IkReal x13382=(gconst16*r21);
CheckValue<IkReal> x13383 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13380))+((r22*x13381)))),IkReal((((x13381*x13382))+(((-1.0)*x13379*x13381))+(((-1.0)*x13380*x13382))+((x13379*x13380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13383.valid){
continue;
}
CheckValue<IkReal> x13384=IKPowWithIntegerCheck(IKsign(((((2.0)*x13379*x13382))+(((-1.0)*(x13382*x13382)))+(((-1.0)*(x13379*x13379)))+(((-1.0)*(r22*r22))))),-1);
if(!x13384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13383.value)+(((1.5707963267949)*(x13384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13385=IKsin(j4);
IkReal x13386=IKcos(j4);
IkReal x13387=(cj2*sj1);
IkReal x13388=(gconst17*r20);
IkReal x13389=(gconst17*r00);
IkReal x13390=(gconst17*r10);
IkReal x13391=(cj1*sj2);
IkReal x13392=((1.0)*x13386);
IkReal x13393=(gconst16*x13385);
IkReal x13394=((1.0)*x13385);
IkReal x13395=(gconst16*x13386);
evalcond[0]=(((r21*x13393))+(((-1.0)*r22*x13392))+(((-1.0)*x13388*x13394)));
evalcond[1]=(sj0+(((-1.0)*x13389*x13394))+((r01*x13393))+(((-1.0)*r02*x13392)));
evalcond[2]=(((r11*x13393))+(((-1.0)*x13390*x13394))+(((-1.0)*r12*x13392))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x13395))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13388*x13392))+((r22*x13385)));
evalcond[4]=((((-1.0)*x13389*x13392))+((r01*x13395))+((cj0*x13387))+((r02*x13385))+((cj0*x13391)));
evalcond[5]=(((r11*x13395))+((sj0*x13387))+((sj0*x13391))+((r12*x13385))+(((-1.0)*x13390*x13392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13396=((1.0)*gconst17);
CheckValue<IkReal> x13397=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13396)))),-1);
if(!x13397.valid){
continue;
}
CheckValue<IkReal> x13398 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x13396))+((gconst16*r11*sj0))+(((-1.0)*cj0*r00*x13396))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13397.value)))+(x13398.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13399=IKsin(j4);
IkReal x13400=IKcos(j4);
IkReal x13401=(cj2*sj1);
IkReal x13402=(gconst17*r20);
IkReal x13403=(gconst17*r00);
IkReal x13404=(gconst17*r10);
IkReal x13405=(cj1*sj2);
IkReal x13406=((1.0)*x13400);
IkReal x13407=(gconst16*x13399);
IkReal x13408=((1.0)*x13399);
IkReal x13409=(gconst16*x13400);
evalcond[0]=(((r21*x13407))+(((-1.0)*x13402*x13408))+(((-1.0)*r22*x13406)));
evalcond[1]=((((-1.0)*r02*x13406))+((r01*x13407))+sj0+(((-1.0)*x13403*x13408)));
evalcond[2]=(((r11*x13407))+(((-1.0)*r12*x13406))+(((-1.0)*x13404*x13408))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x13409))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13402*x13406))+((r22*x13399)));
evalcond[4]=(((r01*x13409))+((cj0*x13401))+((cj0*x13405))+(((-1.0)*x13403*x13406))+((r02*x13399)));
evalcond[5]=(((r11*x13409))+((r12*x13399))+((sj0*x13401))+((sj0*x13405))+(((-1.0)*x13404*x13406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13410=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13410.valid){
continue;
}
CheckValue<IkReal> x13411 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13410.value)))+(x13411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13412=IKsin(j4);
IkReal x13413=IKcos(j4);
IkReal x13414=(cj2*sj1);
IkReal x13415=(gconst17*r20);
IkReal x13416=(gconst17*r00);
IkReal x13417=(gconst17*r10);
IkReal x13418=(cj1*sj2);
IkReal x13419=((1.0)*x13413);
IkReal x13420=(gconst16*x13412);
IkReal x13421=((1.0)*x13412);
IkReal x13422=(gconst16*x13413);
evalcond[0]=((((-1.0)*x13415*x13421))+(((-1.0)*r22*x13419))+((r21*x13420)));
evalcond[1]=(sj0+(((-1.0)*x13416*x13421))+(((-1.0)*r02*x13419))+((r01*x13420)));
evalcond[2]=((((-1.0)*r12*x13419))+((r11*x13420))+(((-1.0)*x13417*x13421))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x13412))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x13422))+(((-1.0)*x13415*x13419)));
evalcond[4]=(((r02*x13412))+((cj0*x13414))+((cj0*x13418))+(((-1.0)*x13416*x13419))+((r01*x13422)));
evalcond[5]=(((r11*x13422))+((sj0*x13414))+((sj0*x13418))+((r12*x13412))+(((-1.0)*x13417*x13419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13425 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13425.valid){
continue;
}
IkReal x13423=((1.0)*(x13425.value));
IkReal x13424=x13270;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13423)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13423)));
IkReal gconst16=((1.0)*r11*x13424);
IkReal gconst17=((-1.0)*r10*x13424);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13426=gconst16*gconst16;
IkReal x13427=gconst17*gconst17;
IkReal x13428=(cj3*r00);
IkReal x13429=(cj3*r01);
IkReal x13430=((1.0)*r20);
IkReal x13431=(gconst16*gconst17);
IkReal x13432=(r00*sj3);
IkReal x13433=(r01*sj3);
IkReal x13434=(r21*x13426);
CheckValue<IkReal> x13435=IKPowWithIntegerCheck(IKsign((((r20*x13427*x13432))+(((-1.0)*r21*x13431*x13432))+((x13433*x13434))+(((-1.0)*x13430*x13431*x13433))+((r02*r22*sj3)))),-1);
if(!x13435.valid){
continue;
}
CheckValue<IkReal> x13436 = IKatan2WithCheck(IkReal((((gconst16*r22*x13428))+((gconst17*r22*x13429)))),IkReal((((x13428*x13434))+(((-1.0)*x13428*x13430*x13431))+(((-1.0)*x13427*x13429*x13430))+((r21*x13429*x13431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13435.value)))+(x13436.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13437=IKsin(j4);
IkReal x13438=IKcos(j4);
IkReal x13439=(sj1*sj2);
IkReal x13440=(cj3*gconst17);
IkReal x13441=(gconst16*r21);
IkReal x13442=(gconst16*r20);
IkReal x13443=(gconst17*r20);
IkReal x13444=(gconst17*sj3);
IkReal x13445=(cj3*gconst16);
IkReal x13446=(cj2*sj1);
IkReal x13447=((1.0)*cj1);
IkReal x13448=(gconst16*sj3);
IkReal x13449=(cj2*x13447);
IkReal x13450=((1.0)*x13438);
IkReal x13451=(gconst16*x13437);
IkReal x13452=((1.0)*x13437);
IkReal x13453=(cj3*x13438);
IkReal x13454=(cj3*x13437);
evalcond[0]=((((-1.0)*r22*x13450))+(((-1.0)*x13443*x13452))+((x13437*x13441)));
evalcond[1]=(((r11*x13451))+(((-1.0)*gconst17*r10*x13452))+(((-1.0)*r12*x13450)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13450))+((r01*x13451))+(((-1.0)*gconst17*r00*x13452)));
evalcond[3]=(((r00*x13448))+((r01*x13444))+((r02*x13454))+((r01*x13438*x13445))+(((-1.0)*r00*x13440*x13450)));
evalcond[4]=(((r00*x13438*x13444))+(((-1.0)*r02*sj3*x13452))+(((-1.0)*r01*x13448*x13450))+((r00*x13445))+((r01*x13440)));
evalcond[5]=(x13446+(((-1.0)*r20*x13440*x13450))+((x13441*x13453))+((cj1*sj2))+((sj3*x13442))+((r22*x13454))+((r21*x13444)));
evalcond[6]=(x13439+((r12*x13454))+(((-1.0)*r10*x13440*x13450))+(((-1.0)*x13449))+((r11*x13438*x13445))+((r10*x13448))+((r11*x13444)));
evalcond[7]=(x13439+((sj3*x13438*x13443))+(((-1.0)*x13449))+(((-1.0)*sj3*x13441*x13450))+((cj3*x13442))+((r21*x13440))+(((-1.0)*r22*sj3*x13452)));
evalcond[8]=((((-1.0)*r12*sj3*x13452))+((r10*x13445))+(((-1.0)*r11*x13448*x13450))+((r10*x13438*x13444))+((r11*x13440))+(((-1.0)*x13446))+(((-1.0)*sj2*x13447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13455 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst17*r10))+((gconst16*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13455.valid){
continue;
}
CheckValue<IkReal> x13456=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x13456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13455.value)+(((1.5707963267949)*(x13456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13457=IKsin(j4);
IkReal x13458=IKcos(j4);
IkReal x13459=(sj1*sj2);
IkReal x13460=(cj3*gconst17);
IkReal x13461=(gconst16*r21);
IkReal x13462=(gconst16*r20);
IkReal x13463=(gconst17*r20);
IkReal x13464=(gconst17*sj3);
IkReal x13465=(cj3*gconst16);
IkReal x13466=(cj2*sj1);
IkReal x13467=((1.0)*cj1);
IkReal x13468=(gconst16*sj3);
IkReal x13469=(cj2*x13467);
IkReal x13470=((1.0)*x13458);
IkReal x13471=(gconst16*x13457);
IkReal x13472=((1.0)*x13457);
IkReal x13473=(cj3*x13458);
IkReal x13474=(cj3*x13457);
evalcond[0]=((((-1.0)*x13463*x13472))+((x13457*x13461))+(((-1.0)*r22*x13470)));
evalcond[1]=(((r11*x13471))+(((-1.0)*gconst17*r10*x13472))+(((-1.0)*r12*x13470)));
evalcond[2]=((-1.0)+((r01*x13471))+(((-1.0)*r02*x13470))+(((-1.0)*gconst17*r00*x13472)));
evalcond[3]=((((-1.0)*r00*x13460*x13470))+((r02*x13474))+((r01*x13458*x13465))+((r01*x13464))+((r00*x13468)));
evalcond[4]=(((r00*x13458*x13464))+(((-1.0)*r02*sj3*x13472))+(((-1.0)*r01*x13468*x13470))+((r01*x13460))+((r00*x13465)));
evalcond[5]=(x13466+((r21*x13464))+(((-1.0)*r20*x13460*x13470))+((sj3*x13462))+((cj1*sj2))+((r22*x13474))+((x13461*x13473)));
evalcond[6]=(x13459+((r10*x13468))+((r11*x13458*x13465))+((r12*x13474))+((r11*x13464))+(((-1.0)*r10*x13460*x13470))+(((-1.0)*x13469)));
evalcond[7]=(x13459+((r21*x13460))+(((-1.0)*r22*sj3*x13472))+(((-1.0)*sj3*x13461*x13470))+((sj3*x13458*x13463))+(((-1.0)*x13469))+((cj3*x13462)));
evalcond[8]=(((r10*x13465))+((r11*x13460))+(((-1.0)*r11*x13468*x13470))+(((-1.0)*x13466))+(((-1.0)*sj2*x13467))+(((-1.0)*r12*sj3*x13472))+((r10*x13458*x13464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x13477 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13477.valid){
continue;
}
IkReal x13475=((1.0)*(x13477.value));
IkReal x13476=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13475)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13476);
rxp1_1=(px*r21);
rxp1_2=(r11*x13476);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13475)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13480 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13480.valid){
continue;
}
IkReal x13478=((1.0)*(x13480.value));
IkReal x13479=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13478)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13479);
rxp1_1=(px*r21);
rxp1_2=(r11*x13479);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13478)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
IkReal x13481=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=(((r10*r20*x13481))+((r11*r21*x13481)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13484 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13484.valid){
continue;
}
IkReal x13482=((1.0)*(x13484.value));
IkReal x13483=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13482)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13483);
rxp1_1=(px*r21);
rxp1_2=(r11*x13483);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13482)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13486=IKPowWithIntegerCheck(r02,-1);
if(!x13486.valid){
continue;
}
IkReal x13485=x13486.value;
CheckValue<IkReal> x13487=IKPowWithIntegerCheck(sj3,-1);
if(!x13487.valid){
continue;
}
if( IKabs((x13485*(x13487.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x13485)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13485*(x13487.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x13485))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13485*(x13487.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x13485));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13488=IKsin(j4);
IkReal x13489=IKcos(j4);
IkReal x13490=((1.0)*sj3);
IkReal x13491=(cj1*cj2);
IkReal x13492=(gconst16*r20);
IkReal x13493=(sj1*sj2);
IkReal x13494=((1.0)*gconst17);
IkReal x13495=(gconst17*sj3);
IkReal x13496=(gconst16*r11);
IkReal x13497=(cj3*r10);
IkReal x13498=(cj2*sj1);
IkReal x13499=(cj3*gconst17);
IkReal x13500=(cj1*sj2);
IkReal x13501=((1.0)*cj0);
IkReal x13502=(r02*x13488);
IkReal x13503=(r20*x13489);
IkReal x13504=(gconst16*r21*x13489);
evalcond[0]=(sj0+(((-1.0)*r02*x13489)));
evalcond[1]=((((-1.0)*r20*x13488*x13494))+((gconst16*r21*x13488)));
evalcond[2]=(((cj0*x13500))+((cj0*x13498))+(((-1.0)*x13490*x13502)));
evalcond[3]=(((cj0*x13491))+(((-1.0)*x13493*x13501))+((cj3*x13502)));
evalcond[4]=(((x13488*x13496))+(((-1.0)*r10*x13488*x13494))+(((-1.0)*x13501)));
evalcond[5]=(x13498+x13500+((sj3*x13492))+(((-1.0)*cj3*x13494*x13503))+((cj3*x13504))+((r21*x13495)));
evalcond[6]=(x13493+((x13495*x13503))+(((-1.0)*x13491))+((cj3*x13492))+(((-1.0)*x13490*x13504))+((r21*x13499)));
evalcond[7]=((((-1.0)*x13489*x13490*x13496))+((gconst16*x13497))+((sj0*x13500))+((sj0*x13498))+((r11*x13499))+((r10*x13489*x13495)));
evalcond[8]=(((cj3*x13489*x13496))+(((-1.0)*x13489*x13494*x13497))+(((-1.0)*sj0*x13493))+((sj0*x13491))+((r11*x13495))+((gconst16*r10*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13505=((1.0)*gconst17);
CheckValue<IkReal> x13506=IKPowWithIntegerCheck(((((-1.0)*r10*x13505))+((gconst16*r11))),-1);
if(!x13506.valid){
continue;
}
CheckValue<IkReal> x13507=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x13505))+((cj3*gconst16*r21))),-1);
if(!x13507.valid){
continue;
}
if( IKabs((cj0*(x13506.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13507.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x13505)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x13506.value)))+IKsqr(((x13507.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x13505))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x13506.value)), ((x13507.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x13505))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13508=IKsin(j4);
IkReal x13509=IKcos(j4);
IkReal x13510=((1.0)*sj3);
IkReal x13511=(cj1*cj2);
IkReal x13512=(gconst16*r20);
IkReal x13513=(sj1*sj2);
IkReal x13514=((1.0)*gconst17);
IkReal x13515=(gconst17*sj3);
IkReal x13516=(gconst16*r11);
IkReal x13517=(cj3*r10);
IkReal x13518=(cj2*sj1);
IkReal x13519=(cj3*gconst17);
IkReal x13520=(cj1*sj2);
IkReal x13521=((1.0)*cj0);
IkReal x13522=(r02*x13508);
IkReal x13523=(r20*x13509);
IkReal x13524=(gconst16*r21*x13509);
evalcond[0]=(sj0+(((-1.0)*r02*x13509)));
evalcond[1]=((((-1.0)*r20*x13508*x13514))+((gconst16*r21*x13508)));
evalcond[2]=(((cj0*x13518))+((cj0*x13520))+(((-1.0)*x13510*x13522)));
evalcond[3]=(((cj0*x13511))+((cj3*x13522))+(((-1.0)*x13513*x13521)));
evalcond[4]=(((x13508*x13516))+(((-1.0)*x13521))+(((-1.0)*r10*x13508*x13514)));
evalcond[5]=(((r21*x13515))+x13520+x13518+(((-1.0)*cj3*x13514*x13523))+((cj3*x13524))+((sj3*x13512)));
evalcond[6]=(((r21*x13519))+x13513+(((-1.0)*x13511))+((x13515*x13523))+((cj3*x13512))+(((-1.0)*x13510*x13524)));
evalcond[7]=(((r10*x13509*x13515))+((gconst16*x13517))+((r11*x13519))+((sj0*x13520))+((sj0*x13518))+(((-1.0)*x13509*x13510*x13516)));
evalcond[8]=((((-1.0)*x13509*x13514*x13517))+(((-1.0)*sj0*x13513))+((r11*x13515))+((sj0*x13511))+((cj3*x13509*x13516))+((gconst16*r10*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13525=IKPowWithIntegerCheck(((((-1.0)*gconst17*r10))+((gconst16*r11))),-1);
if(!x13525.valid){
continue;
}
CheckValue<IkReal> x13526=IKPowWithIntegerCheck(r02,-1);
if(!x13526.valid){
continue;
}
if( IKabs((cj0*(x13525.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x13526.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x13525.value)))+IKsqr((sj0*(x13526.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x13525.value)), (sj0*(x13526.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13527=IKsin(j4);
IkReal x13528=IKcos(j4);
IkReal x13529=((1.0)*sj3);
IkReal x13530=(cj1*cj2);
IkReal x13531=(gconst16*r20);
IkReal x13532=(sj1*sj2);
IkReal x13533=((1.0)*gconst17);
IkReal x13534=(gconst17*sj3);
IkReal x13535=(gconst16*r11);
IkReal x13536=(cj3*r10);
IkReal x13537=(cj2*sj1);
IkReal x13538=(cj3*gconst17);
IkReal x13539=(cj1*sj2);
IkReal x13540=((1.0)*cj0);
IkReal x13541=(r02*x13527);
IkReal x13542=(r20*x13528);
IkReal x13543=(gconst16*r21*x13528);
evalcond[0]=(sj0+(((-1.0)*r02*x13528)));
evalcond[1]=(((gconst16*r21*x13527))+(((-1.0)*r20*x13527*x13533)));
evalcond[2]=(((cj0*x13539))+((cj0*x13537))+(((-1.0)*x13529*x13541)));
evalcond[3]=(((cj0*x13530))+((cj3*x13541))+(((-1.0)*x13532*x13540)));
evalcond[4]=((((-1.0)*x13540))+((x13527*x13535))+(((-1.0)*r10*x13527*x13533)));
evalcond[5]=(x13537+x13539+((sj3*x13531))+((cj3*x13543))+(((-1.0)*cj3*x13533*x13542))+((r21*x13534)));
evalcond[6]=(x13532+((x13534*x13542))+(((-1.0)*x13530))+(((-1.0)*x13529*x13543))+((r21*x13538))+((cj3*x13531)));
evalcond[7]=(((gconst16*x13536))+((r10*x13528*x13534))+(((-1.0)*x13528*x13529*x13535))+((sj0*x13537))+((sj0*x13539))+((r11*x13538)));
evalcond[8]=((((-1.0)*sj0*x13532))+((sj0*x13530))+((r11*x13534))+((gconst16*r10*sj3))+((cj3*x13528*x13535))+(((-1.0)*x13528*x13533*x13536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13546 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13546.valid){
continue;
}
IkReal x13544=((1.0)*(x13546.value));
IkReal x13545=x13270;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13544)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13544)));
IkReal gconst16=((1.0)*r11*x13545);
IkReal gconst17=((-1.0)*r10*x13545);
IkReal x13547=r12*r12;
IkReal x13548=(cj0*r02);
IkReal x13549=x13270;
IkReal x13550=(sj0*x13549);
j4eval[0]=((IKabs((((x13547*x13550))+(((-1.0)*x13550))+((r12*x13548*x13549)))))+(IKabs((x13548+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13551=((1.0)*r02);
IkReal x13552=(sj1*sj2);
IkReal x13553=(cj1*cj2);
IkReal x13554=(gconst16*sj3);
IkReal x13555=(gconst17*r20);
IkReal x13556=((1.0)*sj3);
IkReal x13557=((1.0)*r21);
IkReal x13558=(gconst17*r21);
IkReal x13559=(cj3*gconst16*r20);
CheckValue<IkReal> x13560=IKPowWithIntegerCheck(((((-1.0)*gconst16*r01*x13554*x13557))+((r01*x13554*x13555))+((r00*x13554*x13558))+(((-1.0)*gconst17*r00*x13555*x13556))),-1);
if(!x13560.valid){
continue;
}
CheckValue<IkReal> x13561=IKPowWithIntegerCheck(((((-1.0)*x13554*x13557))+((sj3*x13555))),-1);
if(!x13561.valid){
continue;
}
if( IKabs(((x13560.value)*(((((-1.0)*x13551*x13559))+(((-1.0)*x13551*x13552))+(((-1.0)*cj3*x13551*x13558))+((r21*sj0*x13554))+((r02*x13553))+(((-1.0)*sj0*x13555*x13556)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13561.value)*((x13553+(((-1.0)*cj3*gconst17*x13557))+(((-1.0)*x13559))+(((-1.0)*x13552)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13560.value)*(((((-1.0)*x13551*x13559))+(((-1.0)*x13551*x13552))+(((-1.0)*cj3*x13551*x13558))+((r21*sj0*x13554))+((r02*x13553))+(((-1.0)*sj0*x13555*x13556))))))+IKsqr(((x13561.value)*((x13553+(((-1.0)*cj3*gconst17*x13557))+(((-1.0)*x13559))+(((-1.0)*x13552))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13560.value)*(((((-1.0)*x13551*x13559))+(((-1.0)*x13551*x13552))+(((-1.0)*cj3*x13551*x13558))+((r21*sj0*x13554))+((r02*x13553))+(((-1.0)*sj0*x13555*x13556))))), ((x13561.value)*((x13553+(((-1.0)*cj3*gconst17*x13557))+(((-1.0)*x13559))+(((-1.0)*x13552))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13562=IKsin(j4);
IkReal x13563=IKcos(j4);
IkReal x13564=((1.0)*gconst17);
IkReal x13565=(gconst17*sj3);
IkReal x13566=(gconst16*r21);
IkReal x13567=(cj3*gconst17);
IkReal x13568=(sj1*sj2);
IkReal x13569=(cj1*cj2);
IkReal x13570=(gconst16*sj3);
IkReal x13571=(cj3*gconst16);
IkReal x13572=(cj2*sj1);
IkReal x13573=(cj1*sj2);
IkReal x13574=((1.0)*sj3);
IkReal x13575=((1.0)*cj0);
IkReal x13576=(cj3*x13563);
IkReal x13577=(gconst16*x13562);
IkReal x13578=((1.0)*x13563);
IkReal x13579=(r02*x13562);
IkReal x13580=(r12*x13562);
evalcond[0]=((((-1.0)*r20*x13562*x13564))+((x13562*x13566)));
evalcond[1]=((((-1.0)*r02*x13578))+sj0+(((-1.0)*r00*x13562*x13564))+((r01*x13577)));
evalcond[2]=(((r11*x13577))+(((-1.0)*r12*x13578))+(((-1.0)*r10*x13562*x13564))+(((-1.0)*x13575)));
evalcond[3]=(x13573+x13572+((r20*x13570))+((x13566*x13576))+(((-1.0)*r20*x13564*x13576))+((r21*x13565)));
evalcond[4]=(x13568+(((-1.0)*x13563*x13566*x13574))+((r20*x13563*x13565))+((r20*x13571))+(((-1.0)*x13569))+((r21*x13567)));
evalcond[5]=(((r00*x13571))+((r00*x13563*x13565))+((r01*x13567))+((cj0*x13572))+((cj0*x13573))+(((-1.0)*r01*x13570*x13578))+(((-1.0)*x13574*x13579)));
evalcond[6]=(((r00*x13570))+(((-1.0)*r00*x13564*x13576))+(((-1.0)*x13568*x13575))+((r01*x13563*x13571))+((r01*x13565))+((cj0*x13569))+((cj3*x13579)));
evalcond[7]=(((r10*x13571))+(((-1.0)*x13574*x13580))+((r11*x13567))+((sj0*x13572))+((sj0*x13573))+((r10*x13563*x13565))+(((-1.0)*r11*x13570*x13578)));
evalcond[8]=(((r10*x13570))+(((-1.0)*sj0*x13568))+((r11*x13565))+((r11*x13563*x13571))+((cj3*x13580))+(((-1.0)*r10*x13564*x13576))+((sj0*x13569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13581=((1.0)*gconst17);
CheckValue<IkReal> x13582 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x13581))+(((-1.0)*cj0*r00*x13581))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13582.valid){
continue;
}
CheckValue<IkReal> x13583=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13581)))),-1);
if(!x13583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13582.value)+(((1.5707963267949)*(x13583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13584=IKsin(j4);
IkReal x13585=IKcos(j4);
IkReal x13586=((1.0)*gconst17);
IkReal x13587=(gconst17*sj3);
IkReal x13588=(gconst16*r21);
IkReal x13589=(cj3*gconst17);
IkReal x13590=(sj1*sj2);
IkReal x13591=(cj1*cj2);
IkReal x13592=(gconst16*sj3);
IkReal x13593=(cj3*gconst16);
IkReal x13594=(cj2*sj1);
IkReal x13595=(cj1*sj2);
IkReal x13596=((1.0)*sj3);
IkReal x13597=((1.0)*cj0);
IkReal x13598=(cj3*x13585);
IkReal x13599=(gconst16*x13584);
IkReal x13600=((1.0)*x13585);
IkReal x13601=(r02*x13584);
IkReal x13602=(r12*x13584);
evalcond[0]=((((-1.0)*r20*x13584*x13586))+((x13584*x13588)));
evalcond[1]=((((-1.0)*r00*x13584*x13586))+sj0+(((-1.0)*r02*x13600))+((r01*x13599)));
evalcond[2]=(((r11*x13599))+(((-1.0)*r10*x13584*x13586))+(((-1.0)*r12*x13600))+(((-1.0)*x13597)));
evalcond[3]=(x13595+x13594+((x13588*x13598))+((r21*x13587))+(((-1.0)*r20*x13586*x13598))+((r20*x13592)));
evalcond[4]=(x13590+(((-1.0)*x13591))+((r21*x13589))+((r20*x13593))+(((-1.0)*x13585*x13588*x13596))+((r20*x13585*x13587)));
evalcond[5]=((((-1.0)*x13596*x13601))+(((-1.0)*r01*x13592*x13600))+((r00*x13593))+((r00*x13585*x13587))+((r01*x13589))+((cj0*x13594))+((cj0*x13595)));
evalcond[6]=(((r00*x13592))+(((-1.0)*r00*x13586*x13598))+((r01*x13585*x13593))+((r01*x13587))+((cj3*x13601))+(((-1.0)*x13590*x13597))+((cj0*x13591)));
evalcond[7]=(((sj0*x13594))+((sj0*x13595))+((r10*x13593))+(((-1.0)*x13596*x13602))+(((-1.0)*r11*x13592*x13600))+((r11*x13589))+((r10*x13585*x13587)));
evalcond[8]=((((-1.0)*r10*x13586*x13598))+((sj0*x13591))+((r10*x13592))+((r11*x13585*x13593))+(((-1.0)*sj0*x13590))+((cj3*x13602))+((r11*x13587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13603=r21*r21;
IkReal x13604=gconst16*gconst16;
IkReal x13605=r20*r20;
IkReal x13606=gconst17*gconst17;
IkReal x13607=(gconst16*r21);
IkReal x13608=(cj1*sj2);
IkReal x13609=(cj2*sj1);
IkReal x13610=(gconst17*r20);
IkReal x13611=(gconst16*sj3);
IkReal x13612=(r21*sj3);
IkReal x13613=((1.0)*cj3);
CheckValue<IkReal> x13614=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13605*x13606*x13613))+(((2.0)*cj3*x13607*x13610))+(((-1.0)*x13613*(r22*r22)))+(((-1.0)*x13603*x13604*x13613)))),-1);
if(!x13614.valid){
continue;
}
CheckValue<IkReal> x13615 = IKatan2WithCheck(IkReal((((gconst17*r22*x13612))+((r22*x13609))+((r22*x13608))+((r20*r22*x13611)))),IkReal(((((-1.0)*x13609*x13610))+((r20*x13604*x13612))+((gconst17*x13603*x13611))+(((-1.0)*r20*x13606*x13612))+((x13607*x13609))+((x13607*x13608))+(((-1.0)*x13608*x13610))+(((-1.0)*gconst17*x13605*x13611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13614.value)))+(x13615.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13616=IKsin(j4);
IkReal x13617=IKcos(j4);
IkReal x13618=(cj3*gconst17);
IkReal x13619=(gconst16*r21);
IkReal x13620=(gconst17*sj3);
IkReal x13621=(gconst16*r20);
IkReal x13622=(sj1*sj2);
IkReal x13623=(cj1*cj2);
IkReal x13624=(gconst16*r10);
IkReal x13625=(cj2*sj1);
IkReal x13626=(gconst16*sj3);
IkReal x13627=(cj1*sj2);
IkReal x13628=((1.0)*cj0);
IkReal x13629=((1.0)*x13617);
IkReal x13630=(gconst16*x13616);
IkReal x13631=(cj3*x13617);
IkReal x13632=(cj3*x13616);
IkReal x13633=((1.0)*gconst17*x13616);
IkReal x13634=((1.0)*sj3*x13616);
evalcond[0]=((((-1.0)*r22*x13629))+((x13616*x13619))+(((-1.0)*r20*x13633)));
evalcond[1]=(sj0+(((-1.0)*r00*x13633))+(((-1.0)*r02*x13629))+((r01*x13630)));
evalcond[2]=(((r11*x13630))+(((-1.0)*r12*x13629))+(((-1.0)*x13628))+(((-1.0)*r10*x13633)));
evalcond[3]=((((-1.0)*r20*x13618*x13629))+x13627+x13625+((r22*x13632))+((r21*x13620))+((x13619*x13631))+((sj3*x13621)));
evalcond[4]=(((r21*x13618))+x13622+((r20*x13617*x13620))+(((-1.0)*sj3*x13619*x13629))+(((-1.0)*r22*x13634))+((cj3*x13621))+(((-1.0)*x13623)));
evalcond[5]=(((cj0*x13627))+((cj0*x13625))+(((-1.0)*r02*x13634))+(((-1.0)*r01*x13626*x13629))+((r00*x13617*x13620))+((r01*x13618))+((cj3*gconst16*r00)));
evalcond[6]=(((cj0*x13623))+(((-1.0)*x13622*x13628))+((r02*x13632))+((gconst16*r01*x13631))+((r01*x13620))+(((-1.0)*r00*x13618*x13629))+((r00*x13626)));
evalcond[7]=(((r10*x13617*x13620))+((sj0*x13627))+((sj0*x13625))+(((-1.0)*r12*x13634))+((r11*x13618))+(((-1.0)*r11*x13626*x13629))+((cj3*x13624)));
evalcond[8]=((((-1.0)*sj0*x13622))+((r11*x13620))+((r12*x13632))+((sj0*x13623))+((gconst16*r11*x13631))+(((-1.0)*r10*x13618*x13629))+((sj3*x13624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13635=((1.0)*gconst17);
CheckValue<IkReal> x13636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13635))+(((-1.0)*gconst16*r20)))),-1);
if(!x13636.valid){
continue;
}
CheckValue<IkReal> x13637 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*cj0*r00*x13635))+((cj0*gconst16*r01))+(((-1.0)*r10*sj0*x13635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13636.value)))+(x13637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13638=IKsin(j4);
IkReal x13639=IKcos(j4);
IkReal x13640=(cj3*gconst17);
IkReal x13641=(gconst16*r21);
IkReal x13642=(gconst17*sj3);
IkReal x13643=(gconst16*r20);
IkReal x13644=(sj1*sj2);
IkReal x13645=(cj1*cj2);
IkReal x13646=(gconst16*r10);
IkReal x13647=(cj2*sj1);
IkReal x13648=(gconst16*sj3);
IkReal x13649=(cj1*sj2);
IkReal x13650=((1.0)*cj0);
IkReal x13651=((1.0)*x13639);
IkReal x13652=(gconst16*x13638);
IkReal x13653=(cj3*x13639);
IkReal x13654=(cj3*x13638);
IkReal x13655=((1.0)*gconst17*x13638);
IkReal x13656=((1.0)*sj3*x13638);
evalcond[0]=((((-1.0)*r20*x13655))+(((-1.0)*r22*x13651))+((x13638*x13641)));
evalcond[1]=((((-1.0)*r00*x13655))+sj0+((r01*x13652))+(((-1.0)*r02*x13651)));
evalcond[2]=((((-1.0)*r12*x13651))+(((-1.0)*r10*x13655))+((r11*x13652))+(((-1.0)*x13650)));
evalcond[3]=(x13647+x13649+((x13641*x13653))+((sj3*x13643))+(((-1.0)*r20*x13640*x13651))+((r22*x13654))+((r21*x13642)));
evalcond[4]=(((r20*x13639*x13642))+x13644+(((-1.0)*r22*x13656))+(((-1.0)*x13645))+((r21*x13640))+(((-1.0)*sj3*x13641*x13651))+((cj3*x13643)));
evalcond[5]=(((r00*x13639*x13642))+(((-1.0)*r02*x13656))+((r01*x13640))+(((-1.0)*r01*x13648*x13651))+((cj3*gconst16*r00))+((cj0*x13647))+((cj0*x13649)));
evalcond[6]=((((-1.0)*x13644*x13650))+((r00*x13648))+((r02*x13654))+((r01*x13642))+((gconst16*r01*x13653))+(((-1.0)*r00*x13640*x13651))+((cj0*x13645)));
evalcond[7]=(((r10*x13639*x13642))+((r11*x13640))+(((-1.0)*r11*x13648*x13651))+(((-1.0)*r12*x13656))+((sj0*x13647))+((sj0*x13649))+((cj3*x13646)));
evalcond[8]=(((gconst16*r11*x13653))+((r12*x13654))+((r11*x13642))+((sj3*x13646))+(((-1.0)*sj0*x13644))+(((-1.0)*r10*x13640*x13651))+((sj0*x13645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13657=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13657.valid){
continue;
}
CheckValue<IkReal> x13658 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13657.value)))+(x13658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13659=IKsin(j4);
IkReal x13660=IKcos(j4);
IkReal x13661=(cj3*gconst17);
IkReal x13662=(gconst16*r21);
IkReal x13663=(gconst17*sj3);
IkReal x13664=(gconst16*r20);
IkReal x13665=(sj1*sj2);
IkReal x13666=(cj1*cj2);
IkReal x13667=(gconst16*r10);
IkReal x13668=(cj2*sj1);
IkReal x13669=(gconst16*sj3);
IkReal x13670=(cj1*sj2);
IkReal x13671=((1.0)*cj0);
IkReal x13672=((1.0)*x13660);
IkReal x13673=(gconst16*x13659);
IkReal x13674=(cj3*x13660);
IkReal x13675=(cj3*x13659);
IkReal x13676=((1.0)*gconst17*x13659);
IkReal x13677=((1.0)*sj3*x13659);
evalcond[0]=(((x13659*x13662))+(((-1.0)*r20*x13676))+(((-1.0)*r22*x13672)));
evalcond[1]=(sj0+((r01*x13673))+(((-1.0)*r00*x13676))+(((-1.0)*r02*x13672)));
evalcond[2]=((((-1.0)*r12*x13672))+(((-1.0)*x13671))+((r11*x13673))+(((-1.0)*r10*x13676)));
evalcond[3]=(x13668+x13670+((r22*x13675))+((sj3*x13664))+((r21*x13663))+(((-1.0)*r20*x13661*x13672))+((x13662*x13674)));
evalcond[4]=(((cj3*x13664))+x13665+(((-1.0)*sj3*x13662*x13672))+(((-1.0)*x13666))+((r21*x13661))+((r20*x13660*x13663))+(((-1.0)*r22*x13677)));
evalcond[5]=(((r00*x13660*x13663))+((r01*x13661))+(((-1.0)*r02*x13677))+(((-1.0)*r01*x13669*x13672))+((cj0*x13670))+((cj0*x13668))+((cj3*gconst16*r00)));
evalcond[6]=(((r02*x13675))+((gconst16*r01*x13674))+((r00*x13669))+((r01*x13663))+(((-1.0)*r00*x13661*x13672))+(((-1.0)*x13665*x13671))+((cj0*x13666)));
evalcond[7]=(((cj3*x13667))+(((-1.0)*r11*x13669*x13672))+(((-1.0)*r12*x13677))+((r11*x13661))+((r10*x13660*x13663))+((sj0*x13670))+((sj0*x13668)));
evalcond[8]=(((r12*x13675))+((gconst16*r11*x13674))+(((-1.0)*sj0*x13665))+(((-1.0)*r10*x13661*x13672))+((r11*x13663))+((sj3*x13667))+((sj0*x13666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13678=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13678;
j4eval[1]=IKsign(x13678);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13679=((1.0)*cj5);
IkReal x13680=((((-1.0)*r21*x13679))+(((-1.0)*r20*sj5)));
j4eval[0]=x13680;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13679))))));
j4eval[2]=IKsign(x13680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13681=cj5*cj5;
IkReal x13682=(cj3*r21);
IkReal x13683=(cj5*sj5);
IkReal x13684=((1.0)*cj3);
IkReal x13685=((((-1.0)*r11*x13682))+(((-1.0)*r12*r22*x13684))+((r11*x13681*x13682))+(((-1.0)*r10*r20*x13681*x13684))+((r10*x13682*x13683))+((cj3*r11*r20*x13683)));
j4eval[0]=x13685;
j4eval[1]=IKsign(x13685);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13686=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13686;
j4eval[1]=IKsign(x13686);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13687=((1.0)*cj5);
IkReal x13688=((((-1.0)*r21*x13687))+(((-1.0)*r20*sj5)));
j4eval[0]=x13688;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13687))))));
j4eval[2]=IKsign(x13688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13689=cj5*cj5;
IkReal x13690=r11*r11;
IkReal x13691=(cj5*r10);
IkReal x13692=(r11*sj5);
IkReal x13693=((((2.0)*x13691*x13692))+((x13689*x13690))+(((-1.0)*(r12*r12)))+(((-1.0)*x13689*(r10*r10)))+(((-1.0)*x13690)));
j4eval[0]=x13693;
j4eval[1]=((IKabs(r12))+(IKabs((x13691+(((-1.0)*x13692))))));
j4eval[2]=IKsign(x13693);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13694=cj5*cj5;
IkReal x13695=r11*r11;
IkReal x13696=(cj5*r10);
IkReal x13697=(r11*sj5);
CheckValue<IkReal> x13698 = IKatan2WithCheck(IkReal((x13696+(((-1.0)*x13697)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13698.valid){
continue;
}
CheckValue<IkReal> x13699=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*x13694*(r10*r10)))+(((2.0)*x13696*x13697))+(((-1.0)*x13695))+((x13694*x13695)))),-1);
if(!x13699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13698.value)+(((1.5707963267949)*(x13699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13700=IKsin(j4);
IkReal x13701=IKcos(j4);
IkReal x13702=(cj5*r10);
IkReal x13703=(r01*sj5);
IkReal x13704=(cj5*r00);
IkReal x13705=(cj5*r20);
IkReal x13706=((1.0)*x13701);
IkReal x13707=((1.0)*x13700);
IkReal x13708=(sj5*x13700);
evalcond[0]=((((-1.0)*r22*x13706))+((r21*x13708))+(((-1.0)*x13705*x13707)));
evalcond[1]=(((x13700*x13703))+(((-1.0)*r02*x13706))+(((-1.0)*x13704*x13707)));
evalcond[2]=((((-1.0)*r12*x13707))+(((-1.0)*r11*sj5*x13706))+((x13701*x13702)));
evalcond[3]=((-1.0)+(((-1.0)*x13702*x13707))+(((-1.0)*r12*x13706))+((r11*x13708)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13703*x13706))+((cj1*sj2))+(((-1.0)*r02*x13707))+((x13701*x13704)));
evalcond[5]=((((-1.0)*r22*x13707))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13706))+((x13701*x13705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13709=((1.0)*cj5);
CheckValue<IkReal> x13710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13709))+(((-1.0)*r20*sj5)))),-1);
if(!x13710.valid){
continue;
}
CheckValue<IkReal> x13711 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13710.value)))+(x13711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13712=IKsin(j4);
IkReal x13713=IKcos(j4);
IkReal x13714=(cj5*r10);
IkReal x13715=(r01*sj5);
IkReal x13716=(cj5*r00);
IkReal x13717=(cj5*r20);
IkReal x13718=((1.0)*x13713);
IkReal x13719=((1.0)*x13712);
IkReal x13720=(sj5*x13712);
evalcond[0]=((((-1.0)*r22*x13718))+((r21*x13720))+(((-1.0)*x13717*x13719)));
evalcond[1]=((((-1.0)*r02*x13718))+((x13712*x13715))+(((-1.0)*x13716*x13719)));
evalcond[2]=((((-1.0)*r12*x13719))+(((-1.0)*r11*sj5*x13718))+((x13713*x13714)));
evalcond[3]=((-1.0)+(((-1.0)*x13714*x13719))+((r11*x13720))+(((-1.0)*r12*x13718)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13719))+(((-1.0)*x13715*x13718))+((x13713*x13716)));
evalcond[5]=((((-1.0)*r22*x13719))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13718))+((x13713*x13717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13721 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13721.valid){
continue;
}
CheckValue<IkReal> x13722=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13721.value)+(((1.5707963267949)*(x13722.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13723=IKsin(j4);
IkReal x13724=IKcos(j4);
IkReal x13725=(cj5*r10);
IkReal x13726=(r01*sj5);
IkReal x13727=(cj5*r00);
IkReal x13728=(cj5*r20);
IkReal x13729=((1.0)*x13724);
IkReal x13730=((1.0)*x13723);
IkReal x13731=(sj5*x13723);
evalcond[0]=((((-1.0)*r22*x13729))+(((-1.0)*x13728*x13730))+((r21*x13731)));
evalcond[1]=((((-1.0)*x13727*x13730))+(((-1.0)*r02*x13729))+((x13723*x13726)));
evalcond[2]=((((-1.0)*r12*x13730))+((x13724*x13725))+(((-1.0)*r11*sj5*x13729)));
evalcond[3]=((-1.0)+(((-1.0)*x13725*x13730))+(((-1.0)*r12*x13729))+((r11*x13731)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13730))+((cj1*sj2))+((x13724*x13727))+(((-1.0)*x13726*x13729)));
evalcond[5]=((((-1.0)*r22*x13730))+((x13724*x13728))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13732=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13732;
j4eval[1]=IKsign(x13732);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13733=((1.0)*cj5);
IkReal x13734=((((-1.0)*r21*x13733))+(((-1.0)*r20*sj5)));
j4eval[0]=x13734;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13733))))));
j4eval[2]=IKsign(x13734);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13735=cj5*cj5;
IkReal x13736=r11*r11;
IkReal x13737=(r11*sj5);
IkReal x13738=(cj5*r10);
IkReal x13739=((r12*r12)+(((-2.0)*x13737*x13738))+x13736+((x13735*(r10*r10)))+(((-1.0)*x13735*x13736)));
j4eval[0]=x13739;
j4eval[1]=IKsign(x13739);
j4eval[2]=((IKabs((x13737+(((-1.0)*x13738)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13740=cj5*cj5;
IkReal x13741=r11*r11;
IkReal x13742=(cj5*r10);
IkReal x13743=(r11*sj5);
CheckValue<IkReal> x13744=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13740*x13741))+(r12*r12)+((x13740*(r10*r10)))+x13741+(((-2.0)*x13742*x13743)))),-1);
if(!x13744.valid){
continue;
}
CheckValue<IkReal> x13745 = IKatan2WithCheck(IkReal((x13743+(((-1.0)*x13742)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13744.value)))+(x13745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13746=IKcos(j4);
IkReal x13747=IKsin(j4);
IkReal x13748=(cj5*r00);
IkReal x13749=(cj5*r10);
IkReal x13750=(r21*sj5);
IkReal x13751=(cj5*r20);
IkReal x13752=((1.0)*x13746);
IkReal x13753=((1.0)*x13747);
IkReal x13754=(sj5*x13747);
IkReal x13755=(sj5*x13746);
evalcond[0]=(((r11*x13755))+((r12*x13747))+(((-1.0)*x13749*x13752)));
evalcond[1]=(((x13747*x13750))+(((-1.0)*r22*x13752))+(((-1.0)*x13751*x13753)));
evalcond[2]=((((-1.0)*x13748*x13753))+((r01*x13754))+(((-1.0)*r02*x13752)));
evalcond[3]=((-1.0)+((r11*x13754))+(((-1.0)*r12*x13752))+(((-1.0)*x13749*x13753)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13748*x13752))+((r02*x13747))+((r01*x13755)));
evalcond[5]=((((-1.0)*x13751*x13752))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13747))+((x13746*x13750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13756=((1.0)*cj5);
CheckValue<IkReal> x13757 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13757.valid){
continue;
}
CheckValue<IkReal> x13758=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13756))+(((-1.0)*r20*sj5)))),-1);
if(!x13758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13757.value)+(((1.5707963267949)*(x13758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13759=IKcos(j4);
IkReal x13760=IKsin(j4);
IkReal x13761=(cj5*r00);
IkReal x13762=(cj5*r10);
IkReal x13763=(r21*sj5);
IkReal x13764=(cj5*r20);
IkReal x13765=((1.0)*x13759);
IkReal x13766=((1.0)*x13760);
IkReal x13767=(sj5*x13760);
IkReal x13768=(sj5*x13759);
evalcond[0]=(((r11*x13768))+((r12*x13760))+(((-1.0)*x13762*x13765)));
evalcond[1]=(((x13760*x13763))+(((-1.0)*r22*x13765))+(((-1.0)*x13764*x13766)));
evalcond[2]=(((r01*x13767))+(((-1.0)*r02*x13765))+(((-1.0)*x13761*x13766)));
evalcond[3]=((-1.0)+((r11*x13767))+(((-1.0)*r12*x13765))+(((-1.0)*x13762*x13766)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x13768))+(((-1.0)*x13761*x13765))+((r02*x13760)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13764*x13765))+((r22*x13760))+((x13759*x13763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13769 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13769.valid){
continue;
}
CheckValue<IkReal> x13770=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13769.value)+(((1.5707963267949)*(x13770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13771=IKcos(j4);
IkReal x13772=IKsin(j4);
IkReal x13773=(cj5*r00);
IkReal x13774=(cj5*r10);
IkReal x13775=(r21*sj5);
IkReal x13776=(cj5*r20);
IkReal x13777=((1.0)*x13771);
IkReal x13778=((1.0)*x13772);
IkReal x13779=(sj5*x13772);
IkReal x13780=(sj5*x13771);
evalcond[0]=((((-1.0)*x13774*x13777))+((r11*x13780))+((r12*x13772)));
evalcond[1]=(((x13772*x13775))+(((-1.0)*r22*x13777))+(((-1.0)*x13776*x13778)));
evalcond[2]=((((-1.0)*x13773*x13778))+((r01*x13779))+(((-1.0)*r02*x13777)));
evalcond[3]=((-1.0)+((r11*x13779))+(((-1.0)*r12*x13777))+(((-1.0)*x13774*x13778)));
evalcond[4]=(((cj2*sj1))+((r01*x13780))+(((-1.0)*x13773*x13777))+((cj1*sj2))+((r02*x13772)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13776*x13777))+((r22*x13772))+((x13771*x13775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13781=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13781);
rxp1_1=(px*r21);
rxp1_2=(r11*x13781);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13782=(cj5*r10);
IkReal x13783=(r11*sj5);
j4eval[0]=(x13783+(((-1.0)*x13782)));
j4eval[1]=((((-1.0)*sj3*x13783))+((sj3*x13782)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13784=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13784);
rxp1_1=(px*r21);
rxp1_2=(r11*x13784);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13785=(r11*sj5);
IkReal x13786=((1.0)*cj5*r10);
j4eval[0]=(x13785+(((-1.0)*x13786)));
j4eval[1]=((((-1.0)*cj3*x13786))+((cj3*x13785)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13787=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13787);
rxp1_1=(px*r21);
rxp1_2=(r11*x13787);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13788=((1.0)*r11);
CheckValue<IkReal> x13789=IKPowWithIntegerCheck(r02,-1);
if(!x13789.valid){
continue;
}
CheckValue<IkReal> x13790=IKPowWithIntegerCheck(sj3,-1);
if(!x13790.valid){
continue;
}
CheckValue<IkReal> x13791=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13788))+((cj5*r10*sj3))),-1);
if(!x13791.valid){
continue;
}
if( IKabs(((x13789.value)*(x13790.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13791.value)*(((((-1.0)*cj3*cj5*x13788))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13789.value)*(x13790.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13791.value)*(((((-1.0)*cj3*cj5*x13788))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13789.value)*(x13790.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13791.value)*(((((-1.0)*cj3*cj5*x13788))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13792=IKsin(j4);
IkReal x13793=IKcos(j4);
IkReal x13794=(cj2*sj1);
IkReal x13795=(cj1*sj2);
IkReal x13796=(cj5*r10);
IkReal x13797=(sj1*sj2);
IkReal x13798=(cj5*sj3);
IkReal x13799=(r11*sj5);
IkReal x13800=(cj3*sj5);
IkReal x13801=(r21*sj5);
IkReal x13802=(cj1*cj2);
IkReal x13803=(cj3*cj5);
IkReal x13804=(sj3*sj5);
IkReal x13805=((1.0)*x13792);
IkReal x13806=(r20*x13793);
IkReal x13807=(cj3*x13793);
IkReal x13808=(sj3*x13793);
IkReal x13809=(x13795+x13794);
evalcond[0]=((-1.0)*r02*x13793);
evalcond[1]=(((x13792*x13801))+(((-1.0)*cj5*r20*x13805)));
evalcond[2]=(x13809+(((-1.0)*r02*sj3*x13805)));
evalcond[3]=(x13802+(((-1.0)*x13797))+((cj3*r02*x13792)));
evalcond[4]=((-1.0)+((x13792*x13799))+(((-1.0)*x13796*x13805)));
evalcond[5]=(((r11*x13803))+((x13796*x13808))+(((-1.0)*x13799*x13808))+((r10*x13800)));
evalcond[6]=(((x13799*x13807))+((r11*x13798))+(((-1.0)*x13796*x13807))+((r10*x13804)));
evalcond[7]=(((r21*x13793*x13800))+x13809+(((-1.0)*x13803*x13806))+((r21*x13798))+((r20*x13804)));
evalcond[8]=(((r21*x13803))+x13797+(((-1.0)*x13802))+((x13798*x13806))+(((-1.0)*x13801*x13808))+((r20*x13800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13810=((1.0)*r10);
IkReal x13811=(r11*sj5);
CheckValue<IkReal> x13812=IKPowWithIntegerCheck((x13811+(((-1.0)*cj5*x13810))),-1);
if(!x13812.valid){
continue;
}
CheckValue<IkReal> x13813=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13810))+((cj3*x13811))),-1);
if(!x13813.valid){
continue;
}
if( IKabs(x13812.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13813.value)*(((((-1.0)*sj3*sj5*x13810))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13812.value)+IKsqr(((x13813.value)*(((((-1.0)*sj3*sj5*x13810))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13812.value, ((x13813.value)*(((((-1.0)*sj3*sj5*x13810))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13814=IKsin(j4);
IkReal x13815=IKcos(j4);
IkReal x13816=(cj2*sj1);
IkReal x13817=(cj1*sj2);
IkReal x13818=(cj5*r10);
IkReal x13819=(sj1*sj2);
IkReal x13820=(cj5*sj3);
IkReal x13821=(r11*sj5);
IkReal x13822=(cj3*sj5);
IkReal x13823=(r21*sj5);
IkReal x13824=(cj1*cj2);
IkReal x13825=(cj3*cj5);
IkReal x13826=(sj3*sj5);
IkReal x13827=((1.0)*x13814);
IkReal x13828=(r20*x13815);
IkReal x13829=(cj3*x13815);
IkReal x13830=(sj3*x13815);
IkReal x13831=(x13816+x13817);
evalcond[0]=((-1.0)*r02*x13815);
evalcond[1]=(((x13814*x13823))+(((-1.0)*cj5*r20*x13827)));
evalcond[2]=(x13831+(((-1.0)*r02*sj3*x13827)));
evalcond[3]=(x13824+(((-1.0)*x13819))+((cj3*r02*x13814)));
evalcond[4]=((-1.0)+((x13814*x13821))+(((-1.0)*x13818*x13827)));
evalcond[5]=(((r10*x13822))+((r11*x13825))+((x13818*x13830))+(((-1.0)*x13821*x13830)));
evalcond[6]=(((r10*x13826))+((r11*x13820))+((x13821*x13829))+(((-1.0)*x13818*x13829)));
evalcond[7]=(((r21*x13820))+x13831+(((-1.0)*x13825*x13828))+((r20*x13826))+((r21*x13815*x13822)));
evalcond[8]=(((x13820*x13828))+((r21*x13825))+x13819+(((-1.0)*x13824))+((r20*x13822))+(((-1.0)*x13823*x13830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13832=(cj5*r10);
IkReal x13833=((1.0)*r11);
CheckValue<IkReal> x13834=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13832))),-1);
if(!x13834.valid){
continue;
}
CheckValue<IkReal> x13835=IKPowWithIntegerCheck((((sj3*x13832))+(((-1.0)*sj3*sj5*x13833))),-1);
if(!x13835.valid){
continue;
}
if( IKabs(x13834.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13835.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13833)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13834.value)+IKsqr(((x13835.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13833))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13834.value, ((x13835.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13833))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13836=IKsin(j4);
IkReal x13837=IKcos(j4);
IkReal x13838=(cj2*sj1);
IkReal x13839=(cj1*sj2);
IkReal x13840=(cj5*r10);
IkReal x13841=(sj1*sj2);
IkReal x13842=(cj5*sj3);
IkReal x13843=(r11*sj5);
IkReal x13844=(cj3*sj5);
IkReal x13845=(r21*sj5);
IkReal x13846=(cj1*cj2);
IkReal x13847=(cj3*cj5);
IkReal x13848=(sj3*sj5);
IkReal x13849=((1.0)*x13836);
IkReal x13850=(r20*x13837);
IkReal x13851=(cj3*x13837);
IkReal x13852=(sj3*x13837);
IkReal x13853=(x13838+x13839);
evalcond[0]=((-1.0)*r02*x13837);
evalcond[1]=(((x13836*x13845))+(((-1.0)*cj5*r20*x13849)));
evalcond[2]=(x13853+(((-1.0)*r02*sj3*x13849)));
evalcond[3]=(x13846+(((-1.0)*x13841))+((cj3*r02*x13836)));
evalcond[4]=((-1.0)+((x13836*x13843))+(((-1.0)*x13840*x13849)));
evalcond[5]=(((x13840*x13852))+((r11*x13847))+((r10*x13844))+(((-1.0)*x13843*x13852)));
evalcond[6]=(((r11*x13842))+(((-1.0)*x13840*x13851))+((x13843*x13851))+((r10*x13848)));
evalcond[7]=(x13853+((r21*x13842))+(((-1.0)*x13847*x13850))+((r20*x13848))+((r21*x13837*x13844)));
evalcond[8]=(x13841+((r21*x13847))+((x13842*x13850))+((r20*x13844))+(((-1.0)*x13845*x13852))+(((-1.0)*x13846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13854=cj5*cj5;
IkReal x13855=((1.0)*cj3);
IkReal x13856=(r10*r21);
IkReal x13857=(cj5*sj5);
IkReal x13858=(r11*r21);
IkReal x13859=(r11*r20);
IkReal x13860=(r22*sj3);
IkReal x13861=(r10*r20);
IkReal x13862=((1.0)*sj3*x13854);
CheckValue<IkReal> x13863=IKPowWithIntegerCheck(IKsign((((cj3*x13856*x13857))+((cj3*x13857*x13859))+(((-1.0)*r12*r22*x13855))+(((-1.0)*x13855*x13858))+((cj3*x13854*x13858))+(((-1.0)*x13854*x13855*x13861)))),-1);
if(!x13863.valid){
continue;
}
CheckValue<IkReal> x13864 = IKatan2WithCheck(IkReal((((cj5*r11*x13860))+((r10*sj5*x13860)))),IkReal(((((-1.0)*sj3*x13857*x13861))+((sj3*x13856))+(((-1.0)*x13856*x13862))+(((-1.0)*x13859*x13862))+((sj3*x13857*x13858)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13863.value)))+(x13864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13865=IKsin(j4);
IkReal x13866=IKcos(j4);
IkReal x13867=(cj2*sj1);
IkReal x13868=(cj1*sj2);
IkReal x13869=(cj5*sj3);
IkReal x13870=(cj5*r10);
IkReal x13871=(r00*sj5);
IkReal x13872=(sj1*sj2);
IkReal x13873=(r11*sj5);
IkReal x13874=(cj3*cj5);
IkReal x13875=(cj3*sj5);
IkReal x13876=(r21*sj5);
IkReal x13877=(cj1*cj2);
IkReal x13878=(sj3*sj5);
IkReal x13879=(r01*sj5);
IkReal x13880=((1.0)*x13866);
IkReal x13881=((1.0)*x13865);
IkReal x13882=(cj3*x13865);
IkReal x13883=(cj3*x13866);
IkReal x13884=(x13868+x13867);
evalcond[0]=(((x13865*x13876))+(((-1.0)*cj5*r20*x13881))+(((-1.0)*r22*x13880)));
evalcond[1]=((((-1.0)*r02*x13880))+((x13865*x13879))+(((-1.0)*cj5*r00*x13881)));
evalcond[2]=((-1.0)+(((-1.0)*x13870*x13881))+((x13865*x13873))+(((-1.0)*r12*x13880)));
evalcond[3]=(((r11*x13869))+(((-1.0)*cj3*x13870*x13880))+((r12*x13882))+((r10*x13878))+((x13873*x13883)));
evalcond[4]=(((r11*x13874))+((r10*x13866*x13869))+((r10*x13875))+(((-1.0)*r12*sj3*x13881))+(((-1.0)*sj3*x13873*x13880)));
evalcond[5]=(x13884+((r21*x13869))+((r20*x13878))+(((-1.0)*r20*x13874*x13880))+((r21*x13866*x13875))+((r22*x13882)));
evalcond[6]=(((cj3*x13871))+x13884+((r00*x13866*x13869))+((r01*x13874))+(((-1.0)*r01*x13878*x13880))+(((-1.0)*r02*sj3*x13881)));
evalcond[7]=(((sj3*x13871))+((r01*x13869))+(((-1.0)*r00*x13874*x13880))+x13877+(((-1.0)*x13872))+((r02*x13882))+((r01*x13866*x13875)));
evalcond[8]=(((r20*x13866*x13869))+(((-1.0)*r22*sj3*x13881))+x13872+(((-1.0)*x13877))+((r21*x13874))+((r20*x13875))+(((-1.0)*sj3*x13876*x13880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13885=((1.0)*cj5);
CheckValue<IkReal> x13886 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13885))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13886.valid){
continue;
}
CheckValue<IkReal> x13887=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13885))+(((-1.0)*r20*sj5)))),-1);
if(!x13887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13886.value)+(((1.5707963267949)*(x13887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13888=IKsin(j4);
IkReal x13889=IKcos(j4);
IkReal x13890=(cj2*sj1);
IkReal x13891=(cj1*sj2);
IkReal x13892=(cj5*sj3);
IkReal x13893=(cj5*r10);
IkReal x13894=(r00*sj5);
IkReal x13895=(sj1*sj2);
IkReal x13896=(r11*sj5);
IkReal x13897=(cj3*cj5);
IkReal x13898=(cj3*sj5);
IkReal x13899=(r21*sj5);
IkReal x13900=(cj1*cj2);
IkReal x13901=(sj3*sj5);
IkReal x13902=(r01*sj5);
IkReal x13903=((1.0)*x13889);
IkReal x13904=((1.0)*x13888);
IkReal x13905=(cj3*x13888);
IkReal x13906=(cj3*x13889);
IkReal x13907=(x13890+x13891);
evalcond[0]=((((-1.0)*cj5*r20*x13904))+(((-1.0)*r22*x13903))+((x13888*x13899)));
evalcond[1]=(((x13888*x13902))+(((-1.0)*cj5*r00*x13904))+(((-1.0)*r02*x13903)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13903))+(((-1.0)*x13893*x13904))+((x13888*x13896)));
evalcond[3]=(((r10*x13901))+(((-1.0)*cj3*x13893*x13903))+((r12*x13905))+((x13896*x13906))+((r11*x13892)));
evalcond[4]=((((-1.0)*r12*sj3*x13904))+((r10*x13898))+(((-1.0)*sj3*x13896*x13903))+((r11*x13897))+((r10*x13889*x13892)));
evalcond[5]=(((r22*x13905))+x13907+((r20*x13901))+((r21*x13892))+((r21*x13889*x13898))+(((-1.0)*r20*x13897*x13903)));
evalcond[6]=(((r00*x13889*x13892))+((cj3*x13894))+x13907+(((-1.0)*r01*x13901*x13903))+(((-1.0)*r02*sj3*x13904))+((r01*x13897)));
evalcond[7]=(((r02*x13905))+((sj3*x13894))+x13900+(((-1.0)*r00*x13897*x13903))+((r01*x13892))+(((-1.0)*x13895))+((r01*x13889*x13898)));
evalcond[8]=((((-1.0)*r22*sj3*x13904))+((r20*x13889*x13892))+x13895+(((-1.0)*sj3*x13899*x13903))+(((-1.0)*x13900))+((r20*x13898))+((r21*x13897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13908 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13908.valid){
continue;
}
CheckValue<IkReal> x13909=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13908.value)+(((1.5707963267949)*(x13909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13910=IKsin(j4);
IkReal x13911=IKcos(j4);
IkReal x13912=(cj2*sj1);
IkReal x13913=(cj1*sj2);
IkReal x13914=(cj5*sj3);
IkReal x13915=(cj5*r10);
IkReal x13916=(r00*sj5);
IkReal x13917=(sj1*sj2);
IkReal x13918=(r11*sj5);
IkReal x13919=(cj3*cj5);
IkReal x13920=(cj3*sj5);
IkReal x13921=(r21*sj5);
IkReal x13922=(cj1*cj2);
IkReal x13923=(sj3*sj5);
IkReal x13924=(r01*sj5);
IkReal x13925=((1.0)*x13911);
IkReal x13926=((1.0)*x13910);
IkReal x13927=(cj3*x13910);
IkReal x13928=(cj3*x13911);
IkReal x13929=(x13913+x13912);
evalcond[0]=((((-1.0)*r22*x13925))+(((-1.0)*cj5*r20*x13926))+((x13910*x13921)));
evalcond[1]=((((-1.0)*cj5*r00*x13926))+(((-1.0)*r02*x13925))+((x13910*x13924)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13925))+(((-1.0)*x13915*x13926))+((x13910*x13918)));
evalcond[3]=(((r10*x13923))+(((-1.0)*cj3*x13915*x13925))+((r11*x13914))+((x13918*x13928))+((r12*x13927)));
evalcond[4]=(((r10*x13920))+(((-1.0)*sj3*x13918*x13925))+(((-1.0)*r12*sj3*x13926))+((r11*x13919))+((r10*x13911*x13914)));
evalcond[5]=(((r20*x13923))+((r21*x13911*x13920))+(((-1.0)*r20*x13919*x13925))+x13929+((r22*x13927))+((r21*x13914)));
evalcond[6]=(x13929+((r00*x13911*x13914))+((cj3*x13916))+((r01*x13919))+(((-1.0)*r01*x13923*x13925))+(((-1.0)*r02*sj3*x13926)));
evalcond[7]=((((-1.0)*x13917))+x13922+((r01*x13911*x13920))+(((-1.0)*r00*x13919*x13925))+((sj3*x13916))+((r01*x13914))+((r02*x13927)));
evalcond[8]=(((r20*x13920))+(((-1.0)*x13922))+x13917+(((-1.0)*sj3*x13921*x13925))+((r20*x13911*x13914))+((r21*x13919))+(((-1.0)*r22*sj3*x13926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13930=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13930;
j4eval[1]=IKsign(x13930);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13931=((1.0)*cj5);
IkReal x13932=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13931)));
j4eval[0]=x13932;
j4eval[1]=((IKabs(((((-1.0)*r20*x13931))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13932);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13933=cj5*cj5;
IkReal x13934=(cj3*r21);
IkReal x13935=(cj5*sj5);
IkReal x13936=((1.0)*cj3);
IkReal x13937=((((-1.0)*r12*r22*x13936))+((r11*x13933*x13934))+(((-1.0)*r11*x13934))+((cj3*r11*r20*x13935))+(((-1.0)*r10*r20*x13933*x13936))+((r10*x13934*x13935)));
j4eval[0]=x13937;
j4eval[1]=IKsign(x13937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13938=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13938;
j4eval[1]=IKsign(x13938);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13939=((1.0)*cj5);
IkReal x13940=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13939)));
j4eval[0]=x13940;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x13939))+((r21*sj5))))));
j4eval[2]=IKsign(x13940);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13941=cj5*cj5;
IkReal x13942=r11*r11;
IkReal x13943=(r11*sj5);
IkReal x13944=(cj5*r10);
IkReal x13945=((r12*r12)+(((-1.0)*x13941*x13942))+x13942+(((-2.0)*x13943*x13944))+((x13941*(r10*r10))));
j4eval[0]=x13945;
j4eval[1]=IKsign(x13945);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x13943))+x13944))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13946=cj5*cj5;
IkReal x13947=r11*r11;
IkReal x13948=(cj5*r10);
IkReal x13949=(r11*sj5);
CheckValue<IkReal> x13950=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x13946*x13947))+x13947+(((-2.0)*x13948*x13949))+((x13946*(r10*r10))))),-1);
if(!x13950.valid){
continue;
}
CheckValue<IkReal> x13951 = IKatan2WithCheck(IkReal(((((-1.0)*x13949))+x13948)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13950.value)))+(x13951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13952=IKsin(j4);
IkReal x13953=IKcos(j4);
IkReal x13954=(cj5*r10);
IkReal x13955=(r01*sj5);
IkReal x13956=((1.0)*cj2);
IkReal x13957=(cj5*r00);
IkReal x13958=(cj5*r20);
IkReal x13959=((1.0)*x13953);
IkReal x13960=((1.0)*x13952);
IkReal x13961=(sj5*x13952);
evalcond[0]=((((-1.0)*r22*x13959))+((r21*x13961))+(((-1.0)*x13958*x13960)));
evalcond[1]=((((-1.0)*r02*x13959))+(((-1.0)*x13957*x13960))+((x13952*x13955)));
evalcond[2]=((((-1.0)*r11*sj5*x13959))+(((-1.0)*r12*x13960))+((x13953*x13954)));
evalcond[3]=((1.0)+(((-1.0)*x13954*x13960))+((r11*x13961))+(((-1.0)*r12*x13959)));
evalcond[4]=((((-1.0)*r21*sj5*x13959))+(((-1.0)*r22*x13960))+((sj1*sj2))+((x13953*x13958))+(((-1.0)*cj1*x13956)));
evalcond[5]=((((-1.0)*r02*x13960))+(((-1.0)*x13955*x13959))+(((-1.0)*cj1*sj2))+((x13953*x13957))+(((-1.0)*sj1*x13956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13962=((1.0)*cj5);
CheckValue<IkReal> x13963 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13962))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13963.valid){
continue;
}
CheckValue<IkReal> x13964=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13962)))),-1);
if(!x13964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13963.value)+(((1.5707963267949)*(x13964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13965=IKsin(j4);
IkReal x13966=IKcos(j4);
IkReal x13967=(cj5*r10);
IkReal x13968=(r01*sj5);
IkReal x13969=((1.0)*cj2);
IkReal x13970=(cj5*r00);
IkReal x13971=(cj5*r20);
IkReal x13972=((1.0)*x13966);
IkReal x13973=((1.0)*x13965);
IkReal x13974=(sj5*x13965);
evalcond[0]=((((-1.0)*x13971*x13973))+(((-1.0)*r22*x13972))+((r21*x13974)));
evalcond[1]=((((-1.0)*r02*x13972))+(((-1.0)*x13970*x13973))+((x13965*x13968)));
evalcond[2]=((((-1.0)*r12*x13973))+(((-1.0)*r11*sj5*x13972))+((x13966*x13967)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13972))+((r11*x13974))+(((-1.0)*x13967*x13973)));
evalcond[4]=((((-1.0)*cj1*x13969))+(((-1.0)*r22*x13973))+((sj1*sj2))+(((-1.0)*r21*sj5*x13972))+((x13966*x13971)));
evalcond[5]=((((-1.0)*r02*x13973))+(((-1.0)*x13968*x13972))+(((-1.0)*sj1*x13969))+(((-1.0)*cj1*sj2))+((x13966*x13970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13975=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13975.valid){
continue;
}
CheckValue<IkReal> x13976 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13975.value)))+(x13976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13977=IKsin(j4);
IkReal x13978=IKcos(j4);
IkReal x13979=(cj5*r10);
IkReal x13980=(r01*sj5);
IkReal x13981=((1.0)*cj2);
IkReal x13982=(cj5*r00);
IkReal x13983=(cj5*r20);
IkReal x13984=((1.0)*x13978);
IkReal x13985=((1.0)*x13977);
IkReal x13986=(sj5*x13977);
evalcond[0]=(((r21*x13986))+(((-1.0)*x13983*x13985))+(((-1.0)*r22*x13984)));
evalcond[1]=(((x13977*x13980))+(((-1.0)*x13982*x13985))+(((-1.0)*r02*x13984)));
evalcond[2]=(((x13978*x13979))+(((-1.0)*r11*sj5*x13984))+(((-1.0)*r12*x13985)));
evalcond[3]=((1.0)+(((-1.0)*x13979*x13985))+((r11*x13986))+(((-1.0)*r12*x13984)));
evalcond[4]=((((-1.0)*r21*sj5*x13984))+(((-1.0)*cj1*x13981))+((sj1*sj2))+(((-1.0)*r22*x13985))+((x13978*x13983)));
evalcond[5]=((((-1.0)*r02*x13985))+(((-1.0)*cj1*sj2))+(((-1.0)*x13980*x13984))+((x13978*x13982))+(((-1.0)*sj1*x13981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13987=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13987;
j4eval[1]=IKsign(x13987);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13988=((1.0)*cj5);
IkReal x13989=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13988)));
j4eval[0]=x13989;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13988)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13990=(sj1*sj2);
IkReal x13991=(cj5*r10);
IkReal x13992=(r11*sj5);
IkReal x13993=(cj1*cj2);
IkReal x13994=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x13994;
j4eval[1]=((IKabs(((((-1.0)*r12*x13990))+((r12*x13993)))))+(IKabs(((((-1.0)*x13990*x13991))+((x13990*x13992))+(((-1.0)*x13992*x13993))+((x13991*x13993))))));
j4eval[2]=IKsign(x13994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13995=(sj1*sj2);
IkReal x13996=(cj5*r10);
IkReal x13997=(r11*sj5);
IkReal x13998=(cj1*cj2);
CheckValue<IkReal> x13999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13999.valid){
continue;
}
CheckValue<IkReal> x14000 = IKatan2WithCheck(IkReal((((x13995*x13997))+(((-1.0)*x13997*x13998))+((x13996*x13998))+(((-1.0)*x13995*x13996)))),IkReal(((((-1.0)*r12*x13995))+((r12*x13998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13999.value)))+(x14000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14001=IKcos(j4);
IkReal x14002=IKsin(j4);
IkReal x14003=(cj5*r00);
IkReal x14004=(cj5*r10);
IkReal x14005=(r21*sj5);
IkReal x14006=((1.0)*cj2);
IkReal x14007=(cj5*r20);
IkReal x14008=((1.0)*x14001);
IkReal x14009=((1.0)*x14002);
IkReal x14010=(sj5*x14002);
IkReal x14011=(sj5*x14001);
evalcond[0]=(((r11*x14011))+((r12*x14002))+(((-1.0)*x14004*x14008)));
evalcond[1]=(((x14002*x14005))+(((-1.0)*x14007*x14009))+(((-1.0)*r22*x14008)));
evalcond[2]=((((-1.0)*r02*x14008))+(((-1.0)*x14003*x14009))+((r01*x14010)));
evalcond[3]=((1.0)+((r11*x14010))+(((-1.0)*r12*x14008))+(((-1.0)*x14004*x14009)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x14007*x14008))+((r22*x14002))+(((-1.0)*cj1*x14006))+((x14001*x14005)));
evalcond[5]=(((r02*x14002))+(((-1.0)*sj1*x14006))+(((-1.0)*cj1*sj2))+(((-1.0)*x14003*x14008))+((r01*x14011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14012=((1.0)*cj5);
CheckValue<IkReal> x14013 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14013.valid){
continue;
}
CheckValue<IkReal> x14014=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14012))+(((-1.0)*r00*sj5)))),-1);
if(!x14014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14013.value)+(((1.5707963267949)*(x14014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14015=IKcos(j4);
IkReal x14016=IKsin(j4);
IkReal x14017=(cj5*r00);
IkReal x14018=(cj5*r10);
IkReal x14019=(r21*sj5);
IkReal x14020=((1.0)*cj2);
IkReal x14021=(cj5*r20);
IkReal x14022=((1.0)*x14015);
IkReal x14023=((1.0)*x14016);
IkReal x14024=(sj5*x14016);
IkReal x14025=(sj5*x14015);
evalcond[0]=(((r11*x14025))+((r12*x14016))+(((-1.0)*x14018*x14022)));
evalcond[1]=((((-1.0)*x14021*x14023))+(((-1.0)*r22*x14022))+((x14016*x14019)));
evalcond[2]=(((r01*x14024))+(((-1.0)*r02*x14022))+(((-1.0)*x14017*x14023)));
evalcond[3]=((1.0)+((r11*x14024))+(((-1.0)*r12*x14022))+(((-1.0)*x14018*x14023)));
evalcond[4]=((((-1.0)*cj1*x14020))+((x14015*x14019))+((r22*x14016))+((sj1*sj2))+(((-1.0)*x14021*x14022)));
evalcond[5]=(((r01*x14025))+((r02*x14016))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14020))+(((-1.0)*x14017*x14022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14026=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14026.valid){
continue;
}
CheckValue<IkReal> x14027 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14026.value)))+(x14027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14028=IKcos(j4);
IkReal x14029=IKsin(j4);
IkReal x14030=(cj5*r00);
IkReal x14031=(cj5*r10);
IkReal x14032=(r21*sj5);
IkReal x14033=((1.0)*cj2);
IkReal x14034=(cj5*r20);
IkReal x14035=((1.0)*x14028);
IkReal x14036=((1.0)*x14029);
IkReal x14037=(sj5*x14029);
IkReal x14038=(sj5*x14028);
evalcond[0]=(((r11*x14038))+(((-1.0)*x14031*x14035))+((r12*x14029)));
evalcond[1]=((((-1.0)*x14034*x14036))+(((-1.0)*r22*x14035))+((x14029*x14032)));
evalcond[2]=(((r01*x14037))+(((-1.0)*x14030*x14036))+(((-1.0)*r02*x14035)));
evalcond[3]=((1.0)+((r11*x14037))+(((-1.0)*x14031*x14036))+(((-1.0)*r12*x14035)));
evalcond[4]=(((r22*x14029))+((sj1*sj2))+(((-1.0)*x14034*x14035))+((x14028*x14032))+(((-1.0)*cj1*x14033)));
evalcond[5]=(((r01*x14038))+(((-1.0)*x14030*x14035))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14033))+((r02*x14029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14039=((-1.0)*r00);
IkReal x14041 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14041)==0){
continue;
}
IkReal x14040=pow(x14041,-0.5);
CheckValue<IkReal> x14042 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14039),IKFAST_ATAN2_MAGTHRESH);
if(!x14042.valid){
continue;
}
IkReal gconst54=((-1.0)*(x14042.value));
IkReal gconst55=(r01*x14040);
IkReal gconst56=(x14039*x14040);
CheckValue<IkReal> x14043 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14043.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14043.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14044=((-1.0)*r00);
IkReal x14045=x14040;
CheckValue<IkReal> x14047 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14044),IKFAST_ATAN2_MAGTHRESH);
if(!x14047.valid){
continue;
}
IkReal x14046=((-1.0)*(x14047.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x14046;
IkReal gconst54=x14046;
IkReal gconst55=(r01*x14045);
IkReal gconst56=(x14044*x14045);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14048=((-1.0)*r00);
IkReal x14049=x14040;
CheckValue<IkReal> x14051 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14048),IKFAST_ATAN2_MAGTHRESH);
if(!x14051.valid){
continue;
}
IkReal x14050=((-1.0)*(x14051.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x14050;
IkReal gconst54=x14050;
IkReal gconst55=(r01*x14049);
IkReal gconst56=(x14048*x14049);
CheckValue<IkReal> x14059=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14059.valid){
continue;
}
IkReal x14052=x14059.value;
IkReal x14053=(sj3*x14052);
IkReal x14054=(r11*x14053);
IkReal x14055=(r21*x14053);
IkReal x14056=(r20*x14053);
IkReal x14057=(r10*x14053);
IkReal x14058=(r00*r01*x14053);
j4eval[0]=IKsign((((r21*x14054*(r01*r01)))+((r00*r01*r20*x14054))+((r00*r01*r10*x14055))+((r12*r22*sj3))+((r10*x14056*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14060=gconst56*gconst56;
IkReal x14061=gconst55*gconst55;
IkReal x14062=(r11*r21);
IkReal x14063=(gconst56*sj3);
IkReal x14064=((1.0)*cj3);
IkReal x14065=(r10*r20);
IkReal x14066=(r10*r21);
IkReal x14067=(r11*r20);
IkReal x14068=(cj3*gconst55*gconst56);
CheckValue<IkReal> x14069=IKPowWithIntegerCheck(IKsign((((x14067*x14068))+(((-1.0)*x14060*x14064*x14065))+((x14066*x14068))+(((-1.0)*r12*r22*x14064))+(((-1.0)*x14061*x14062*x14064)))),-1);
if(!x14069.valid){
continue;
}
CheckValue<IkReal> x14070 = IKatan2WithCheck(IkReal((((r11*r22*x14063))+((gconst55*r10*r22*sj3)))),IkReal((((sj3*x14061*x14066))+((gconst55*x14062*x14063))+(((-1.0)*gconst55*x14063*x14065))+(((-1.0)*sj3*x14060*x14067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14069.value)))+(x14070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14071=IKsin(j4);
IkReal x14072=IKcos(j4);
IkReal x14073=(sj1*sj2);
IkReal x14074=(gconst55*r21);
IkReal x14075=(gconst56*r00);
IkReal x14076=(cj3*gconst55);
IkReal x14077=(gconst56*sj3);
IkReal x14078=(gconst55*sj3);
IkReal x14079=((1.0)*cj1);
IkReal x14080=(cj3*gconst56);
IkReal x14081=(cj2*sj1);
IkReal x14082=(cj2*x14079);
IkReal x14083=((1.0)*x14072);
IkReal x14084=((1.0)*x14071);
IkReal x14085=(cj3*x14071);
IkReal x14086=(gconst55*x14071);
evalcond[0]=((((-1.0)*r22*x14083))+(((-1.0)*gconst56*r20*x14084))+((x14071*x14074)));
evalcond[1]=((((-1.0)*x14075*x14084))+((r01*x14086))+(((-1.0)*r02*x14083)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14083))+((r11*x14086))+(((-1.0)*gconst56*r10*x14084)));
evalcond[3]=((((-1.0)*r10*x14080*x14083))+((r11*x14072*x14076))+((r11*x14077))+((r10*x14078))+((r12*x14085)));
evalcond[4]=((((-1.0)*r11*x14078*x14083))+(((-1.0)*r12*sj3*x14084))+((r11*x14080))+((r10*x14076))+((r10*x14072*x14077)));
evalcond[5]=((((-1.0)*r20*x14080*x14083))+((cj1*sj2))+((r21*x14077))+((r22*x14085))+((r20*x14078))+x14081+((cj3*x14072*x14074)));
evalcond[6]=(((r01*x14072*x14076))+(((-1.0)*x14082))+((r02*x14085))+((r00*x14078))+(((-1.0)*cj3*x14075*x14083))+((r01*x14077))+x14073);
evalcond[7]=((((-1.0)*r22*sj3*x14084))+(((-1.0)*x14082))+(((-1.0)*sj3*x14074*x14083))+((r20*x14072*x14077))+((r20*x14076))+((r21*x14080))+x14073);
evalcond[8]=(((r01*x14080))+((sj3*x14072*x14075))+(((-1.0)*x14081))+((r00*x14076))+(((-1.0)*r02*sj3*x14084))+(((-1.0)*r01*x14078*x14083))+(((-1.0)*sj2*x14079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14087=gconst55*gconst55;
IkReal x14088=gconst56*gconst56;
IkReal x14089=(r11*r21);
IkReal x14090=(cj3*gconst56);
IkReal x14091=(gconst55*r10);
IkReal x14092=((1.0)*r20);
IkReal x14093=(gconst56*sj3);
CheckValue<IkReal> x14094=IKPowWithIntegerCheck(IKsign((((r12*r22*sj3))+((sj3*x14087*x14089))+(((-1.0)*r21*x14091*x14093))+(((-1.0)*gconst55*r11*x14092*x14093))+((r10*r20*sj3*x14088)))),-1);
if(!x14094.valid){
continue;
}
CheckValue<IkReal> x14095 = IKatan2WithCheck(IkReal((((r11*r22*x14090))+((cj3*r22*x14091)))),IkReal(((((-1.0)*cj3*r11*x14088*x14092))+(((-1.0)*x14090*x14091*x14092))+((cj3*r10*r21*x14087))+((gconst55*x14089*x14090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14094.value)))+(x14095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14096=IKsin(j4);
IkReal x14097=IKcos(j4);
IkReal x14098=(sj1*sj2);
IkReal x14099=(gconst55*r21);
IkReal x14100=(gconst56*r00);
IkReal x14101=(cj3*gconst55);
IkReal x14102=(gconst56*sj3);
IkReal x14103=(gconst55*sj3);
IkReal x14104=((1.0)*cj1);
IkReal x14105=(cj3*gconst56);
IkReal x14106=(cj2*sj1);
IkReal x14107=(cj2*x14104);
IkReal x14108=((1.0)*x14097);
IkReal x14109=((1.0)*x14096);
IkReal x14110=(cj3*x14096);
IkReal x14111=(gconst55*x14096);
evalcond[0]=(((x14096*x14099))+(((-1.0)*r22*x14108))+(((-1.0)*gconst56*r20*x14109)));
evalcond[1]=(((r01*x14111))+(((-1.0)*x14100*x14109))+(((-1.0)*r02*x14108)));
evalcond[2]=((1.0)+((r11*x14111))+(((-1.0)*gconst56*r10*x14109))+(((-1.0)*r12*x14108)));
evalcond[3]=((((-1.0)*r10*x14105*x14108))+((r11*x14097*x14101))+((r10*x14103))+((r12*x14110))+((r11*x14102)));
evalcond[4]=((((-1.0)*r11*x14103*x14108))+((r10*x14097*x14102))+((r10*x14101))+(((-1.0)*r12*sj3*x14109))+((r11*x14105)));
evalcond[5]=(((cj1*sj2))+((r22*x14110))+((cj3*x14097*x14099))+x14106+((r20*x14103))+(((-1.0)*r20*x14105*x14108))+((r21*x14102)));
evalcond[6]=(((r02*x14110))+((r00*x14103))+((r01*x14102))+(((-1.0)*x14107))+((r01*x14097*x14101))+x14098+(((-1.0)*cj3*x14100*x14108)));
evalcond[7]=((((-1.0)*r22*sj3*x14109))+(((-1.0)*sj3*x14099*x14108))+(((-1.0)*x14107))+((r20*x14097*x14102))+((r20*x14101))+x14098+((r21*x14105)));
evalcond[8]=((((-1.0)*r01*x14103*x14108))+((r00*x14101))+((r01*x14105))+(((-1.0)*r02*sj3*x14109))+(((-1.0)*x14106))+(((-1.0)*sj2*x14104))+((sj3*x14097*x14100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14112 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst56*r00))+((gconst55*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14112.valid){
continue;
}
CheckValue<IkReal> x14113=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x14113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14112.value)+(((1.5707963267949)*(x14113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14114=IKsin(j4);
IkReal x14115=IKcos(j4);
IkReal x14116=(sj1*sj2);
IkReal x14117=(gconst55*r21);
IkReal x14118=(gconst56*r00);
IkReal x14119=(cj3*gconst55);
IkReal x14120=(gconst56*sj3);
IkReal x14121=(gconst55*sj3);
IkReal x14122=((1.0)*cj1);
IkReal x14123=(cj3*gconst56);
IkReal x14124=(cj2*sj1);
IkReal x14125=(cj2*x14122);
IkReal x14126=((1.0)*x14115);
IkReal x14127=((1.0)*x14114);
IkReal x14128=(cj3*x14114);
IkReal x14129=(gconst55*x14114);
evalcond[0]=(((x14114*x14117))+(((-1.0)*r22*x14126))+(((-1.0)*gconst56*r20*x14127)));
evalcond[1]=(((r01*x14129))+(((-1.0)*x14118*x14127))+(((-1.0)*r02*x14126)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14126))+(((-1.0)*gconst56*r10*x14127))+((r11*x14129)));
evalcond[3]=(((r12*x14128))+((r10*x14121))+((r11*x14115*x14119))+(((-1.0)*r10*x14123*x14126))+((r11*x14120)));
evalcond[4]=((((-1.0)*r12*sj3*x14127))+(((-1.0)*r11*x14121*x14126))+((r10*x14119))+((r11*x14123))+((r10*x14115*x14120)));
evalcond[5]=(((r21*x14120))+((r22*x14128))+((cj1*sj2))+(((-1.0)*r20*x14123*x14126))+((r20*x14121))+x14124+((cj3*x14115*x14117)));
evalcond[6]=((((-1.0)*x14125))+((r00*x14121))+((r01*x14120))+(((-1.0)*cj3*x14118*x14126))+x14116+((r01*x14115*x14119))+((r02*x14128)));
evalcond[7]=(((r21*x14123))+(((-1.0)*r22*sj3*x14127))+((r20*x14115*x14120))+(((-1.0)*sj3*x14117*x14126))+(((-1.0)*x14125))+((r20*x14119))+x14116);
evalcond[8]=((((-1.0)*r01*x14121*x14126))+((r00*x14119))+(((-1.0)*sj2*x14122))+((r01*x14123))+(((-1.0)*r02*sj3*x14127))+(((-1.0)*x14124))+((sj3*x14115*x14118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14130=((-1.0)*r01);
IkReal x14132 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14132)==0){
continue;
}
IkReal x14131=pow(x14132,-0.5);
CheckValue<IkReal> x14133 = IKatan2WithCheck(IkReal(x14130),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14133.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x14133.value))));
IkReal gconst58=(x14130*x14131);
IkReal gconst59=((1.0)*r00*x14131);
CheckValue<IkReal> x14134 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14134.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14134.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14135=((-1.0)*r01);
CheckValue<IkReal> x14138 = IKatan2WithCheck(IkReal(x14135),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14138.valid){
continue;
}
IkReal x14136=((1.0)*(x14138.value));
IkReal x14137=x14131;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x14136)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14136)));
IkReal gconst58=(x14135*x14137);
IkReal gconst59=((1.0)*r00*x14137);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14139=((-1.0)*r01);
CheckValue<IkReal> x14142 = IKatan2WithCheck(IkReal(x14139),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14142.valid){
continue;
}
IkReal x14140=((1.0)*(x14142.value));
IkReal x14141=x14131;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x14140)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14140)));
IkReal gconst58=(x14139*x14141);
IkReal gconst59=((1.0)*r00*x14141);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14143=gconst59*gconst59;
IkReal x14144=gconst58*gconst58;
IkReal x14145=((1.0)*cj3);
IkReal x14146=(r11*r21);
IkReal x14147=((1.0)*r20);
IkReal x14148=(r11*sj3);
IkReal x14149=(gconst58*gconst59);
IkReal x14150=(r10*r21);
IkReal x14151=(gconst58*r10*sj3);
CheckValue<IkReal> x14152 = IKatan2WithCheck(IkReal((((gconst59*r22*x14148))+((r22*x14151)))),IkReal(((((-1.0)*r10*sj3*x14147*x14149))+((sj3*x14146*x14149))+(((-1.0)*x14143*x14147*x14148))+((sj3*x14144*x14150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14152.valid){
continue;
}
CheckValue<IkReal> x14153=IKPowWithIntegerCheck(IKsign((((cj3*r11*r20*x14149))+(((-1.0)*r10*r20*x14143*x14145))+(((-1.0)*x14144*x14145*x14146))+(((-1.0)*r12*r22*x14145))+((cj3*x14149*x14150)))),-1);
if(!x14153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14152.value)+(((1.5707963267949)*(x14153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14154=IKsin(j4);
IkReal x14155=IKcos(j4);
IkReal x14156=(sj1*sj2);
IkReal x14157=(cj3*gconst59);
IkReal x14158=(gconst58*r00);
IkReal x14159=((1.0)*cj1);
IkReal x14160=(gconst59*r20);
IkReal x14161=(gconst59*r00);
IkReal x14162=(cj2*sj1);
IkReal x14163=(gconst58*sj3);
IkReal x14164=(gconst59*sj3);
IkReal x14165=(gconst59*r10);
IkReal x14166=(cj3*gconst58);
IkReal x14167=(cj2*x14159);
IkReal x14168=((1.0)*x14155);
IkReal x14169=((1.0)*x14154);
IkReal x14170=(cj3*x14154);
IkReal x14171=(gconst58*x14154);
IkReal x14172=(sj3*x14155);
IkReal x14173=(x14155*x14166);
evalcond[0]=((((-1.0)*r22*x14168))+((r21*x14171))+(((-1.0)*x14160*x14169)));
evalcond[1]=((((-1.0)*r02*x14168))+((r01*x14171))+(((-1.0)*x14161*x14169)));
evalcond[2]=((1.0)+((r11*x14171))+(((-1.0)*x14165*x14169))+(((-1.0)*r12*x14168)));
evalcond[3]=(((r10*x14163))+((r11*x14173))+((r12*x14170))+((r11*x14164))+(((-1.0)*r10*x14157*x14168)));
evalcond[4]=(((r10*x14166))+(((-1.0)*r12*sj3*x14169))+((r11*x14157))+(((-1.0)*r11*x14163*x14168))+((r10*x14155*x14164)));
evalcond[5]=(((r22*x14170))+((r21*x14173))+((cj1*sj2))+(((-1.0)*r20*x14157*x14168))+x14162+((r21*x14164))+((r20*x14163)));
evalcond[6]=(((sj3*x14158))+((r01*x14173))+((r02*x14170))+(((-1.0)*x14167))+((r01*x14164))+x14156+(((-1.0)*r00*x14157*x14168)));
evalcond[7]=(((x14160*x14172))+(((-1.0)*r22*sj3*x14169))+(((-1.0)*x14167))+x14156+((r21*x14157))+((r20*x14166))+(((-1.0)*r21*x14163*x14168)));
evalcond[8]=(((cj3*x14158))+(((-1.0)*r02*sj3*x14169))+((x14161*x14172))+(((-1.0)*r01*x14163*x14168))+((r01*x14157))+(((-1.0)*sj2*x14159))+(((-1.0)*x14162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14174=((1.0)*gconst59);
CheckValue<IkReal> x14175=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst58*r00))+(((-1.0)*r01*x14174)))),-1);
if(!x14175.valid){
continue;
}
CheckValue<IkReal> x14176 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14174))+((gconst58*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14175.value)))+(x14176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14177=IKsin(j4);
IkReal x14178=IKcos(j4);
IkReal x14179=(sj1*sj2);
IkReal x14180=(cj3*gconst59);
IkReal x14181=(gconst58*r00);
IkReal x14182=((1.0)*cj1);
IkReal x14183=(gconst59*r20);
IkReal x14184=(gconst59*r00);
IkReal x14185=(cj2*sj1);
IkReal x14186=(gconst58*sj3);
IkReal x14187=(gconst59*sj3);
IkReal x14188=(gconst59*r10);
IkReal x14189=(cj3*gconst58);
IkReal x14190=(cj2*x14182);
IkReal x14191=((1.0)*x14178);
IkReal x14192=((1.0)*x14177);
IkReal x14193=(cj3*x14177);
IkReal x14194=(gconst58*x14177);
IkReal x14195=(sj3*x14178);
IkReal x14196=(x14178*x14189);
evalcond[0]=((((-1.0)*r22*x14191))+((r21*x14194))+(((-1.0)*x14183*x14192)));
evalcond[1]=((((-1.0)*x14184*x14192))+(((-1.0)*r02*x14191))+((r01*x14194)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14191))+((r11*x14194))+(((-1.0)*x14188*x14192)));
evalcond[3]=((((-1.0)*r10*x14180*x14191))+((r11*x14196))+((r12*x14193))+((r11*x14187))+((r10*x14186)));
evalcond[4]=((((-1.0)*r12*sj3*x14192))+(((-1.0)*r11*x14186*x14191))+((r10*x14178*x14187))+((r11*x14180))+((r10*x14189)));
evalcond[5]=(((r20*x14186))+((cj1*sj2))+((r22*x14193))+((r21*x14187))+x14185+((r21*x14196))+(((-1.0)*r20*x14180*x14191)));
evalcond[6]=(((r02*x14193))+((sj3*x14181))+((r01*x14187))+(((-1.0)*r00*x14180*x14191))+(((-1.0)*x14190))+((r01*x14196))+x14179);
evalcond[7]=((((-1.0)*r22*sj3*x14192))+((r20*x14189))+(((-1.0)*r21*x14186*x14191))+(((-1.0)*x14190))+((r21*x14180))+x14179+((x14183*x14195)));
evalcond[8]=(((cj3*x14181))+(((-1.0)*r01*x14186*x14191))+((r01*x14180))+((x14184*x14195))+(((-1.0)*r02*sj3*x14192))+(((-1.0)*sj2*x14182))+(((-1.0)*x14185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14197=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x14197.valid){
continue;
}
CheckValue<IkReal> x14198 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst58*r01))+(((-1.0)*gconst59*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14197.value)))+(x14198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14199=IKsin(j4);
IkReal x14200=IKcos(j4);
IkReal x14201=(sj1*sj2);
IkReal x14202=(cj3*gconst59);
IkReal x14203=(gconst58*r00);
IkReal x14204=((1.0)*cj1);
IkReal x14205=(gconst59*r20);
IkReal x14206=(gconst59*r00);
IkReal x14207=(cj2*sj1);
IkReal x14208=(gconst58*sj3);
IkReal x14209=(gconst59*sj3);
IkReal x14210=(gconst59*r10);
IkReal x14211=(cj3*gconst58);
IkReal x14212=(cj2*x14204);
IkReal x14213=((1.0)*x14200);
IkReal x14214=((1.0)*x14199);
IkReal x14215=(cj3*x14199);
IkReal x14216=(gconst58*x14199);
IkReal x14217=(sj3*x14200);
IkReal x14218=(x14200*x14211);
evalcond[0]=((((-1.0)*x14205*x14214))+(((-1.0)*r22*x14213))+((r21*x14216)));
evalcond[1]=((((-1.0)*x14206*x14214))+(((-1.0)*r02*x14213))+((r01*x14216)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14213))+((r11*x14216))+(((-1.0)*x14210*x14214)));
evalcond[3]=(((r11*x14218))+((r12*x14215))+((r10*x14208))+(((-1.0)*r10*x14202*x14213))+((r11*x14209)));
evalcond[4]=((((-1.0)*r11*x14208*x14213))+((r10*x14211))+((r10*x14200*x14209))+(((-1.0)*r12*sj3*x14214))+((r11*x14202)));
evalcond[5]=(((r22*x14215))+((r20*x14208))+((cj1*sj2))+((r21*x14209))+((r21*x14218))+(((-1.0)*r20*x14202*x14213))+x14207);
evalcond[6]=(((r01*x14218))+((r01*x14209))+(((-1.0)*r00*x14202*x14213))+((r02*x14215))+(((-1.0)*x14212))+((sj3*x14203))+x14201);
evalcond[7]=(((x14205*x14217))+(((-1.0)*r21*x14208*x14213))+((r21*x14202))+(((-1.0)*r22*sj3*x14214))+(((-1.0)*x14212))+((r20*x14211))+x14201);
evalcond[8]=((((-1.0)*r02*sj3*x14214))+((x14206*x14217))+(((-1.0)*sj2*x14204))+((cj3*x14203))+((r01*x14202))+(((-1.0)*x14207))+(((-1.0)*r01*x14208*x14213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14220 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14220)==0){
continue;
}
IkReal x14219=pow(x14220,-0.5);
CheckValue<IkReal> x14221 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14221.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14221.value));
IkReal gconst61=((-1.0)*r21*x14219);
IkReal gconst62=(r20*x14219);
CheckValue<IkReal> x14222 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14222.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14222.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14225 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14225.valid){
continue;
}
IkReal x14223=((-1.0)*(x14225.value));
IkReal x14224=x14219;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x14223;
IkReal gconst60=x14223;
IkReal gconst61=((-1.0)*r21*x14224);
IkReal gconst62=(r20*x14224);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14228 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14228.valid){
continue;
}
IkReal x14226=((-1.0)*(x14228.value));
IkReal x14227=x14219;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x14226;
IkReal gconst60=x14226;
IkReal gconst61=((-1.0)*r21*x14227);
IkReal gconst62=(r20*x14227);
CheckValue<IkReal> x14236=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14236.valid){
continue;
}
IkReal x14229=x14236.value;
IkReal x14230=(sj3*x14229);
IkReal x14231=(r11*x14230);
IkReal x14232=(r00*x14230);
IkReal x14233=(r01*x14230);
IkReal x14234=(r10*x14230);
IkReal x14235=(r20*r21*x14230);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x14231))+((r10*r20*r21*x14233))+((r10*x14232*(r20*r20)))+((r01*x14231*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14237=gconst61*gconst61;
IkReal x14238=gconst62*gconst62;
IkReal x14239=(r00*r11);
IkReal x14240=(r01*r10);
IkReal x14241=(r00*r10);
IkReal x14242=(r01*r11);
IkReal x14243=((1.0)*cj3);
IkReal x14244=(r02*sj3);
IkReal x14245=(cj3*gconst61*gconst62);
IkReal x14246=((1.0)*x14238);
IkReal x14247=(gconst61*gconst62*sj3);
CheckValue<IkReal> x14248 = IKatan2WithCheck(IkReal((((gconst61*r10*x14244))+((gconst62*r11*x14244)))),IkReal(((((-1.0)*x14241*x14247))+((sj3*x14237*x14240))+(((-1.0)*sj3*x14239*x14246))+((x14242*x14247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14248.valid){
continue;
}
CheckValue<IkReal> x14249=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14238*x14241*x14243))+((x14239*x14245))+(((-1.0)*r02*r12*x14243))+((x14240*x14245))+(((-1.0)*x14237*x14242*x14243)))),-1);
if(!x14249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14248.value)+(((1.5707963267949)*(x14249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14250=IKsin(j4);
IkReal x14251=IKcos(j4);
IkReal x14252=(sj1*sj2);
IkReal x14253=(gconst61*sj3);
IkReal x14254=(cj3*gconst61);
IkReal x14255=(cj3*gconst62);
IkReal x14256=((1.0)*cj2);
IkReal x14257=(gconst62*sj3);
IkReal x14258=(cj1*sj2);
IkReal x14259=(cj1*x14256);
IkReal x14260=((1.0)*x14251);
IkReal x14261=((1.0)*x14250);
IkReal x14262=(gconst61*x14250);
IkReal x14263=(cj3*x14250);
evalcond[0]=((((-1.0)*gconst62*r20*x14261))+((r21*x14262))+(((-1.0)*r22*x14260)));
evalcond[1]=((((-1.0)*r02*x14260))+(((-1.0)*gconst62*r00*x14261))+((r01*x14262)));
evalcond[2]=((1.0)+((r11*x14262))+(((-1.0)*r12*x14260))+(((-1.0)*gconst62*r10*x14261)));
evalcond[3]=((((-1.0)*r10*x14255*x14260))+((r12*x14263))+((r10*x14253))+((r11*x14257))+((r11*x14251*x14254)));
evalcond[4]=((((-1.0)*r12*sj3*x14261))+((r10*x14251*x14257))+((r10*x14254))+((r11*x14255))+(((-1.0)*r11*x14253*x14260)));
evalcond[5]=(((cj2*sj1))+((r21*x14257))+((r21*x14251*x14254))+(((-1.0)*r20*x14255*x14260))+((r20*x14253))+((r22*x14263))+x14258);
evalcond[6]=(((r01*x14251*x14254))+((r02*x14263))+(((-1.0)*r00*x14255*x14260))+(((-1.0)*x14259))+((r00*x14253))+x14252+((r01*x14257)));
evalcond[7]=(((r21*x14255))+(((-1.0)*r22*sj3*x14261))+(((-1.0)*r21*x14253*x14260))+(((-1.0)*x14259))+((r20*x14254))+((r20*x14251*x14257))+x14252);
evalcond[8]=((((-1.0)*r02*sj3*x14261))+(((-1.0)*r01*x14253*x14260))+(((-1.0)*sj1*x14256))+((r00*x14251*x14257))+((r00*x14254))+(((-1.0)*x14258))+((r01*x14255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14264=gconst61*gconst61;
IkReal x14265=gconst62*gconst62;
IkReal x14266=(r01*r10);
IkReal x14267=(r00*r11);
IkReal x14268=(cj3*gconst61);
IkReal x14269=(gconst62*r11);
IkReal x14270=(r00*r10);
IkReal x14271=((1.0)*gconst61*gconst62*sj3);
CheckValue<IkReal> x14272=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((sj3*x14265*x14270))+((r01*r11*sj3*x14264))+(((-1.0)*x14266*x14271))+(((-1.0)*x14267*x14271)))),-1);
if(!x14272.valid){
continue;
}
CheckValue<IkReal> x14273 = IKatan2WithCheck(IkReal((((cj3*r02*x14269))+((r02*r10*x14268)))),IkReal(((((-1.0)*gconst62*x14268*x14270))+(((-1.0)*cj3*x14265*x14267))+((r01*x14268*x14269))+((cj3*x14264*x14266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14272.value)))+(x14273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14274=IKsin(j4);
IkReal x14275=IKcos(j4);
IkReal x14276=(sj1*sj2);
IkReal x14277=(gconst61*sj3);
IkReal x14278=(cj3*gconst61);
IkReal x14279=(cj3*gconst62);
IkReal x14280=((1.0)*cj2);
IkReal x14281=(gconst62*sj3);
IkReal x14282=(cj1*sj2);
IkReal x14283=(cj1*x14280);
IkReal x14284=((1.0)*x14275);
IkReal x14285=((1.0)*x14274);
IkReal x14286=(gconst61*x14274);
IkReal x14287=(cj3*x14274);
evalcond[0]=((((-1.0)*r22*x14284))+((r21*x14286))+(((-1.0)*gconst62*r20*x14285)));
evalcond[1]=(((r01*x14286))+(((-1.0)*gconst62*r00*x14285))+(((-1.0)*r02*x14284)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r10*x14285))+(((-1.0)*r12*x14284))+((r11*x14286)));
evalcond[3]=((((-1.0)*r10*x14279*x14284))+((r11*x14275*x14278))+((r12*x14287))+((r11*x14281))+((r10*x14277)));
evalcond[4]=((((-1.0)*r12*sj3*x14285))+((r10*x14275*x14281))+(((-1.0)*r11*x14277*x14284))+((r11*x14279))+((r10*x14278)));
evalcond[5]=(((cj2*sj1))+((r21*x14281))+((r20*x14277))+(((-1.0)*r20*x14279*x14284))+((r22*x14287))+((r21*x14275*x14278))+x14282);
evalcond[6]=(((r01*x14281))+(((-1.0)*x14283))+(((-1.0)*r00*x14279*x14284))+((r01*x14275*x14278))+x14276+((r02*x14287))+((r00*x14277)));
evalcond[7]=(((r21*x14279))+((r20*x14278))+(((-1.0)*x14283))+(((-1.0)*r22*sj3*x14285))+(((-1.0)*r21*x14277*x14284))+((r20*x14275*x14281))+x14276);
evalcond[8]=(((r01*x14279))+(((-1.0)*r02*sj3*x14285))+((r00*x14275*x14281))+(((-1.0)*x14282))+(((-1.0)*sj1*x14280))+(((-1.0)*r01*x14277*x14284))+((r00*x14278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14288=((1.0)*gconst62);
CheckValue<IkReal> x14289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r00))+(((-1.0)*r01*x14288)))),-1);
if(!x14289.valid){
continue;
}
CheckValue<IkReal> x14290 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst61*r21))+(((-1.0)*r20*x14288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14289.value)))+(x14290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14291=IKsin(j4);
IkReal x14292=IKcos(j4);
IkReal x14293=(sj1*sj2);
IkReal x14294=(gconst61*sj3);
IkReal x14295=(cj3*gconst61);
IkReal x14296=(cj3*gconst62);
IkReal x14297=((1.0)*cj2);
IkReal x14298=(gconst62*sj3);
IkReal x14299=(cj1*sj2);
IkReal x14300=(cj1*x14297);
IkReal x14301=((1.0)*x14292);
IkReal x14302=((1.0)*x14291);
IkReal x14303=(gconst61*x14291);
IkReal x14304=(cj3*x14291);
evalcond[0]=((((-1.0)*r22*x14301))+(((-1.0)*gconst62*r20*x14302))+((r21*x14303)));
evalcond[1]=((((-1.0)*r02*x14301))+(((-1.0)*gconst62*r00*x14302))+((r01*x14303)));
evalcond[2]=((1.0)+((r11*x14303))+(((-1.0)*r12*x14301))+(((-1.0)*gconst62*r10*x14302)));
evalcond[3]=((((-1.0)*r10*x14296*x14301))+((r10*x14294))+((r11*x14292*x14295))+((r12*x14304))+((r11*x14298)));
evalcond[4]=(((r10*x14292*x14298))+((r10*x14295))+((r11*x14296))+(((-1.0)*r12*sj3*x14302))+(((-1.0)*r11*x14294*x14301)));
evalcond[5]=(((r20*x14294))+((cj2*sj1))+((r21*x14298))+(((-1.0)*r20*x14296*x14301))+((r22*x14304))+((r21*x14292*x14295))+x14299);
evalcond[6]=(((r02*x14304))+((r01*x14292*x14295))+((r00*x14294))+((r01*x14298))+(((-1.0)*r00*x14296*x14301))+x14293+(((-1.0)*x14300)));
evalcond[7]=(((r20*x14295))+(((-1.0)*r22*sj3*x14302))+((r21*x14296))+((r20*x14292*x14298))+(((-1.0)*r21*x14294*x14301))+x14293+(((-1.0)*x14300)));
evalcond[8]=((((-1.0)*r01*x14294*x14301))+(((-1.0)*r02*sj3*x14302))+((r00*x14295))+((r01*x14296))+(((-1.0)*x14299))+(((-1.0)*sj1*x14297))+((r00*x14292*x14298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14306 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14306)==0){
continue;
}
IkReal x14305=pow(x14306,-0.5);
CheckValue<IkReal> x14307 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14307.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14307.value))));
IkReal gconst64=((1.0)*r21*x14305);
IkReal gconst65=((-1.0)*r20*x14305);
CheckValue<IkReal> x14308 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14308.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14308.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14311 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14311.valid){
continue;
}
IkReal x14309=((1.0)*(x14311.value));
IkReal x14310=x14305;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14309)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14309)));
IkReal gconst64=((1.0)*r21*x14310);
IkReal gconst65=((-1.0)*r20*x14310);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14314 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14314.valid){
continue;
}
IkReal x14312=((1.0)*(x14314.value));
IkReal x14313=x14305;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14312)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14312)));
IkReal gconst64=((1.0)*r21*x14313);
IkReal gconst65=((-1.0)*r20*x14313);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14317 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14317.valid){
continue;
}
IkReal x14315=((1.0)*(x14317.value));
IkReal x14316=x14305;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14315)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14315)));
IkReal gconst64=((1.0)*r21*x14316);
IkReal gconst65=((-1.0)*r20*x14316);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14318=gconst64*gconst64;
IkReal x14319=gconst65*gconst65;
IkReal x14320=(gconst64*sj3);
IkReal x14321=(gconst65*r11);
IkReal x14322=((1.0)*cj3);
IkReal x14323=(gconst65*r10);
IkReal x14324=(cj3*gconst64);
IkReal x14325=(r20*x14319);
IkReal x14326=(r21*x14318);
CheckValue<IkReal> x14327=IKPowWithIntegerCheck(IKsign((((r21*x14323*x14324))+(((-1.0)*r11*x14322*x14326))+(((-1.0)*r10*x14322*x14325))+(((-1.0)*r12*r22*x14322))+((r20*x14321*x14324)))),-1);
if(!x14327.valid){
continue;
}
CheckValue<IkReal> x14328 = IKatan2WithCheck(IkReal((((r22*sj3*x14321))+((r10*r22*x14320)))),IkReal(((((-1.0)*r20*x14320*x14323))+(((-1.0)*r11*sj3*x14325))+((r10*sj3*x14326))+((r21*x14320*x14321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14327.value)))+(x14328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14329=IKsin(j4);
IkReal x14330=IKcos(j4);
IkReal x14331=(sj1*sj2);
IkReal x14332=(cj3*gconst64);
IkReal x14333=(gconst65*r21);
IkReal x14334=(gconst65*sj3);
IkReal x14335=(gconst64*sj3);
IkReal x14336=((1.0)*cj2);
IkReal x14337=(cj1*sj2);
IkReal x14338=(cj3*gconst65);
IkReal x14339=(cj1*x14336);
IkReal x14340=((1.0)*x14330);
IkReal x14341=((1.0)*x14329);
IkReal x14342=(cj3*x14329);
IkReal x14343=(gconst64*x14329);
evalcond[0]=((((-1.0)*gconst65*r20*x14341))+((r21*x14343))+(((-1.0)*r22*x14340)));
evalcond[1]=((((-1.0)*gconst65*r00*x14341))+((r01*x14343))+(((-1.0)*r02*x14340)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14340))+((r11*x14343))+(((-1.0)*gconst65*r10*x14341)));
evalcond[3]=(((r11*x14334))+((r11*x14330*x14332))+((r12*x14342))+((r10*x14335))+(((-1.0)*r10*x14338*x14340)));
evalcond[4]=(((r11*x14338))+(((-1.0)*r12*sj3*x14341))+((r10*x14332))+((r10*x14330*x14334))+(((-1.0)*r11*x14335*x14340)));
evalcond[5]=(((cj2*sj1))+((r20*x14335))+(((-1.0)*r20*x14338*x14340))+((r21*x14330*x14332))+((r22*x14342))+x14337+((sj3*x14333)));
evalcond[6]=((((-1.0)*x14339))+((r00*x14335))+((r01*x14334))+((r01*x14330*x14332))+(((-1.0)*r00*x14338*x14340))+((r02*x14342))+x14331);
evalcond[7]=((((-1.0)*x14339))+(((-1.0)*r21*x14335*x14340))+((r20*x14332))+((r20*x14330*x14334))+x14331+((cj3*x14333))+(((-1.0)*r22*sj3*x14341)));
evalcond[8]=((((-1.0)*sj1*x14336))+(((-1.0)*r02*sj3*x14341))+((r00*x14332))+(((-1.0)*x14337))+((r01*x14338))+(((-1.0)*r01*x14335*x14340))+((r00*x14330*x14334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14344=((1.0)*gconst65);
CheckValue<IkReal> x14345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14344))+(((-1.0)*gconst64*r00)))),-1);
if(!x14345.valid){
continue;
}
CheckValue<IkReal> x14346 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14344))+((gconst64*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14345.value)))+(x14346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14347=IKsin(j4);
IkReal x14348=IKcos(j4);
IkReal x14349=(sj1*sj2);
IkReal x14350=(cj3*gconst64);
IkReal x14351=(gconst65*r21);
IkReal x14352=(gconst65*sj3);
IkReal x14353=(gconst64*sj3);
IkReal x14354=((1.0)*cj2);
IkReal x14355=(cj1*sj2);
IkReal x14356=(cj3*gconst65);
IkReal x14357=(cj1*x14354);
IkReal x14358=((1.0)*x14348);
IkReal x14359=((1.0)*x14347);
IkReal x14360=(cj3*x14347);
IkReal x14361=(gconst64*x14347);
evalcond[0]=((((-1.0)*r22*x14358))+(((-1.0)*gconst65*r20*x14359))+((r21*x14361)));
evalcond[1]=((((-1.0)*r02*x14358))+(((-1.0)*gconst65*r00*x14359))+((r01*x14361)));
evalcond[2]=((1.0)+((r11*x14361))+(((-1.0)*r12*x14358))+(((-1.0)*gconst65*r10*x14359)));
evalcond[3]=((((-1.0)*r10*x14356*x14358))+((r11*x14352))+((r10*x14353))+((r11*x14348*x14350))+((r12*x14360)));
evalcond[4]=(((r11*x14356))+(((-1.0)*r11*x14353*x14358))+((r10*x14350))+(((-1.0)*r12*sj3*x14359))+((r10*x14348*x14352)));
evalcond[5]=(((sj3*x14351))+((cj2*sj1))+((r20*x14353))+((r21*x14348*x14350))+(((-1.0)*r20*x14356*x14358))+x14355+((r22*x14360)));
evalcond[6]=((((-1.0)*x14357))+((r02*x14360))+((r00*x14353))+((r01*x14352))+(((-1.0)*r00*x14356*x14358))+((r01*x14348*x14350))+x14349);
evalcond[7]=(((cj3*x14351))+(((-1.0)*r22*sj3*x14359))+((r20*x14348*x14352))+(((-1.0)*x14357))+((r20*x14350))+(((-1.0)*r21*x14353*x14358))+x14349);
evalcond[8]=((((-1.0)*r01*x14353*x14358))+(((-1.0)*sj1*x14354))+((r00*x14350))+((r00*x14348*x14352))+(((-1.0)*x14355))+((r01*x14356))+(((-1.0)*r02*sj3*x14359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14362 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst64*r01))+(((-1.0)*gconst65*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14362.valid){
continue;
}
CheckValue<IkReal> x14363=IKPowWithIntegerCheck(IKsign((((gconst64*r20))+((gconst65*r21)))),-1);
if(!x14363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14362.value)+(((1.5707963267949)*(x14363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14364=IKsin(j4);
IkReal x14365=IKcos(j4);
IkReal x14366=(sj1*sj2);
IkReal x14367=(cj3*gconst64);
IkReal x14368=(gconst65*r21);
IkReal x14369=(gconst65*sj3);
IkReal x14370=(gconst64*sj3);
IkReal x14371=((1.0)*cj2);
IkReal x14372=(cj1*sj2);
IkReal x14373=(cj3*gconst65);
IkReal x14374=(cj1*x14371);
IkReal x14375=((1.0)*x14365);
IkReal x14376=((1.0)*x14364);
IkReal x14377=(cj3*x14364);
IkReal x14378=(gconst64*x14364);
evalcond[0]=(((r21*x14378))+(((-1.0)*gconst65*r20*x14376))+(((-1.0)*r22*x14375)));
evalcond[1]=((((-1.0)*gconst65*r00*x14376))+((r01*x14378))+(((-1.0)*r02*x14375)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14375))+((r11*x14378))+(((-1.0)*gconst65*r10*x14376)));
evalcond[3]=(((r11*x14369))+((r10*x14370))+((r12*x14377))+((r11*x14365*x14367))+(((-1.0)*r10*x14373*x14375)));
evalcond[4]=(((r10*x14367))+(((-1.0)*r12*sj3*x14376))+(((-1.0)*r11*x14370*x14375))+((r11*x14373))+((r10*x14365*x14369)));
evalcond[5]=(((cj2*sj1))+((sj3*x14368))+(((-1.0)*r20*x14373*x14375))+((r22*x14377))+((r20*x14370))+x14372+((r21*x14365*x14367)));
evalcond[6]=((((-1.0)*r00*x14373*x14375))+((r00*x14370))+((r01*x14365*x14367))+((r01*x14369))+x14366+((r02*x14377))+(((-1.0)*x14374)));
evalcond[7]=(((cj3*x14368))+((r20*x14365*x14369))+(((-1.0)*r21*x14370*x14375))+((r20*x14367))+(((-1.0)*r22*sj3*x14376))+x14366+(((-1.0)*x14374)));
evalcond[8]=(((r01*x14373))+(((-1.0)*r01*x14370*x14375))+(((-1.0)*x14372))+(((-1.0)*r02*sj3*x14376))+((r00*x14365*x14369))+((r00*x14367))+(((-1.0)*sj1*x14371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14379=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14379);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14379);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14380=(cj5*r10);
IkReal x14381=(r11*sj5);
j4eval[0]=((((-1.0)*x14380))+x14381);
j4eval[1]=((((-1.0)*sj3*x14381))+((sj3*x14380)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14382=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14382);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14382);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14383=(r11*sj5);
IkReal x14384=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14384))+x14383);
j4eval[1]=(((cj3*x14383))+(((-1.0)*cj3*x14384)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14385=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14385);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14385);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14386=((1.0)*r11);
CheckValue<IkReal> x14387=IKPowWithIntegerCheck(cj3,-1);
if(!x14387.valid){
continue;
}
CheckValue<IkReal> x14388=IKPowWithIntegerCheck(r22,-1);
if(!x14388.valid){
continue;
}
CheckValue<IkReal> x14389=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14386))+((cj5*r10*sj3))),-1);
if(!x14389.valid){
continue;
}
if( IKabs(((x14387.value)*(x14388.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14389.value)*(((((-1.0)*cj3*cj5*x14386))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14387.value)*(x14388.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14389.value)*(((((-1.0)*cj3*cj5*x14386))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14387.value)*(x14388.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14389.value)*(((((-1.0)*cj3*cj5*x14386))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14390=IKsin(j4);
IkReal x14391=IKcos(j4);
IkReal x14392=(sj1*sj2);
IkReal x14393=(r11*sj5);
IkReal x14394=(r00*sj3);
IkReal x14395=(cj5*r01);
IkReal x14396=((1.0)*cj1);
IkReal x14397=(cj3*sj5);
IkReal x14398=(cj5*r11);
IkReal x14399=(r10*sj3);
IkReal x14400=(cj2*sj1);
IkReal x14401=((1.0)*cj5);
IkReal x14402=((1.0)*sj3);
IkReal x14403=(r01*sj5);
IkReal x14404=(cj2*x14396);
IkReal x14405=(cj3*x14391);
IkReal x14406=(r22*x14390);
IkReal x14407=(cj5*x14391);
IkReal x14408=(x14390*x14401);
evalcond[0]=((-1.0)*r22*x14391);
evalcond[1]=(((cj1*sj2))+((cj3*x14406))+x14400);
evalcond[2]=((((-1.0)*r00*x14408))+((x14390*x14403)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14408))+((x14390*x14393)));
evalcond[4]=((((-1.0)*x14404))+(((-1.0)*x14402*x14406))+x14392);
evalcond[5]=((((-1.0)*x14391*x14393*x14402))+((x14399*x14407))+((r10*x14397))+((cj3*x14398)));
evalcond[6]=((((-1.0)*r10*x14401*x14405))+((sj5*x14399))+((x14393*x14405))+((sj3*x14398)));
evalcond[7]=((((-1.0)*x14404))+(((-1.0)*r00*x14401*x14405))+((sj5*x14394))+((r01*x14391*x14397))+x14392+((sj3*x14395)));
evalcond[8]=(((x14394*x14407))+(((-1.0)*x14400))+((r00*x14397))+((cj3*x14395))+(((-1.0)*sj2*x14396))+(((-1.0)*x14391*x14402*x14403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14409=((1.0)*sj3);
IkReal x14410=(r11*sj5);
IkReal x14411=((1.0)*cj5*r10);
CheckValue<IkReal> x14412=IKPowWithIntegerCheck(((((-1.0)*x14411))+x14410),-1);
if(!x14412.valid){
continue;
}
CheckValue<IkReal> x14413=IKPowWithIntegerCheck((((cj3*x14410))+(((-1.0)*cj3*x14411))),-1);
if(!x14413.valid){
continue;
}
if( IKabs(((-1.0)*(x14412.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14413.value)*(((((-1.0)*cj5*r11*x14409))+(((-1.0)*r10*sj5*x14409)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14412.value)))+IKsqr(((x14413.value)*(((((-1.0)*cj5*r11*x14409))+(((-1.0)*r10*sj5*x14409))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14412.value)), ((x14413.value)*(((((-1.0)*cj5*r11*x14409))+(((-1.0)*r10*sj5*x14409))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14414=IKsin(j4);
IkReal x14415=IKcos(j4);
IkReal x14416=(sj1*sj2);
IkReal x14417=(r11*sj5);
IkReal x14418=(r00*sj3);
IkReal x14419=(cj5*r01);
IkReal x14420=((1.0)*cj1);
IkReal x14421=(cj3*sj5);
IkReal x14422=(cj5*r11);
IkReal x14423=(r10*sj3);
IkReal x14424=(cj2*sj1);
IkReal x14425=((1.0)*cj5);
IkReal x14426=((1.0)*sj3);
IkReal x14427=(r01*sj5);
IkReal x14428=(cj2*x14420);
IkReal x14429=(cj3*x14415);
IkReal x14430=(r22*x14414);
IkReal x14431=(cj5*x14415);
IkReal x14432=(x14414*x14425);
evalcond[0]=((-1.0)*r22*x14415);
evalcond[1]=(((cj1*sj2))+x14424+((cj3*x14430)));
evalcond[2]=(((x14414*x14427))+(((-1.0)*r00*x14432)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14432))+((x14414*x14417)));
evalcond[4]=((((-1.0)*x14426*x14430))+x14416+(((-1.0)*x14428)));
evalcond[5]=(((x14423*x14431))+(((-1.0)*x14415*x14417*x14426))+((r10*x14421))+((cj3*x14422)));
evalcond[6]=(((sj3*x14422))+((sj5*x14423))+(((-1.0)*r10*x14425*x14429))+((x14417*x14429)));
evalcond[7]=(((sj5*x14418))+((sj3*x14419))+x14416+(((-1.0)*r00*x14425*x14429))+((r01*x14415*x14421))+(((-1.0)*x14428)));
evalcond[8]=(((x14418*x14431))+(((-1.0)*sj2*x14420))+((r00*x14421))+((cj3*x14419))+(((-1.0)*x14415*x14426*x14427))+(((-1.0)*x14424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14433=(cj5*r10);
IkReal x14434=((1.0)*r11);
CheckValue<IkReal> x14435=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14433))),-1);
if(!x14435.valid){
continue;
}
CheckValue<IkReal> x14436=IKPowWithIntegerCheck((((sj3*x14433))+(((-1.0)*sj3*sj5*x14434))),-1);
if(!x14436.valid){
continue;
}
if( IKabs(((-1.0)*(x14435.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14436.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14434)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14435.value)))+IKsqr(((x14436.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14434))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14435.value)), ((x14436.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14434))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14437=IKsin(j4);
IkReal x14438=IKcos(j4);
IkReal x14439=(sj1*sj2);
IkReal x14440=(r11*sj5);
IkReal x14441=(r00*sj3);
IkReal x14442=(cj5*r01);
IkReal x14443=((1.0)*cj1);
IkReal x14444=(cj3*sj5);
IkReal x14445=(cj5*r11);
IkReal x14446=(r10*sj3);
IkReal x14447=(cj2*sj1);
IkReal x14448=((1.0)*cj5);
IkReal x14449=((1.0)*sj3);
IkReal x14450=(r01*sj5);
IkReal x14451=(cj2*x14443);
IkReal x14452=(cj3*x14438);
IkReal x14453=(r22*x14437);
IkReal x14454=(cj5*x14438);
IkReal x14455=(x14437*x14448);
evalcond[0]=((-1.0)*r22*x14438);
evalcond[1]=(((cj1*sj2))+x14447+((cj3*x14453)));
evalcond[2]=(((x14437*x14450))+(((-1.0)*r00*x14455)));
evalcond[3]=((1.0)+((x14437*x14440))+(((-1.0)*r10*x14455)));
evalcond[4]=((((-1.0)*x14451))+(((-1.0)*x14449*x14453))+x14439);
evalcond[5]=(((r10*x14444))+((x14446*x14454))+(((-1.0)*x14438*x14440*x14449))+((cj3*x14445)));
evalcond[6]=((((-1.0)*r10*x14448*x14452))+((x14440*x14452))+((sj5*x14446))+((sj3*x14445)));
evalcond[7]=((((-1.0)*r00*x14448*x14452))+(((-1.0)*x14451))+((r01*x14438*x14444))+((sj5*x14441))+x14439+((sj3*x14442)));
evalcond[8]=(((r00*x14444))+(((-1.0)*sj2*x14443))+((x14441*x14454))+(((-1.0)*x14447))+(((-1.0)*x14438*x14449*x14450))+((cj3*x14442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14456=cj5*cj5;
IkReal x14457=((1.0)*cj3);
IkReal x14458=(r10*r21);
IkReal x14459=(cj5*sj5);
IkReal x14460=(r11*r21);
IkReal x14461=(r11*r20);
IkReal x14462=(r22*sj3);
IkReal x14463=(r10*r20);
IkReal x14464=((1.0)*sj3*x14456);
CheckValue<IkReal> x14465 = IKatan2WithCheck(IkReal((((cj5*r11*x14462))+((r10*sj5*x14462)))),IkReal((((sj3*x14459*x14460))+((sj3*x14458))+(((-1.0)*x14458*x14464))+(((-1.0)*sj3*x14459*x14463))+(((-1.0)*x14461*x14464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14465.valid){
continue;
}
CheckValue<IkReal> x14466=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14457*x14460))+(((-1.0)*x14456*x14457*x14463))+((cj3*x14459*x14461))+((cj3*x14458*x14459))+(((-1.0)*r12*r22*x14457))+((cj3*x14456*x14460)))),-1);
if(!x14466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14465.value)+(((1.5707963267949)*(x14466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14467=IKsin(j4);
IkReal x14468=IKcos(j4);
IkReal x14469=(sj1*sj2);
IkReal x14470=(cj5*sj3);
IkReal x14471=(cj5*r10);
IkReal x14472=(r00*sj5);
IkReal x14473=(r11*sj5);
IkReal x14474=(cj3*cj5);
IkReal x14475=((1.0)*cj1);
IkReal x14476=(cj3*sj5);
IkReal x14477=(r21*sj5);
IkReal x14478=(cj2*sj1);
IkReal x14479=(sj3*sj5);
IkReal x14480=(r01*sj5);
IkReal x14481=(cj2*x14475);
IkReal x14482=((1.0)*x14468);
IkReal x14483=((1.0)*x14467);
IkReal x14484=(cj3*x14467);
IkReal x14485=(cj3*x14468);
evalcond[0]=((((-1.0)*r22*x14482))+((x14467*x14477))+(((-1.0)*cj5*r20*x14483)));
evalcond[1]=((((-1.0)*cj5*r00*x14483))+(((-1.0)*r02*x14482))+((x14467*x14480)));
evalcond[2]=((1.0)+(((-1.0)*x14471*x14483))+(((-1.0)*r12*x14482))+((x14467*x14473)));
evalcond[3]=(((r10*x14479))+((r12*x14484))+((r11*x14470))+(((-1.0)*cj3*x14471*x14482))+((x14473*x14485)));
evalcond[4]=((((-1.0)*sj3*x14473*x14482))+((r10*x14476))+((r10*x14468*x14470))+((r11*x14474))+(((-1.0)*r12*sj3*x14483)));
evalcond[5]=(((r21*x14468*x14476))+((cj1*sj2))+((r21*x14470))+((r22*x14484))+(((-1.0)*r20*x14474*x14482))+x14478+((r20*x14479)));
evalcond[6]=(((r02*x14484))+((r01*x14470))+(((-1.0)*r00*x14474*x14482))+((sj3*x14472))+((r01*x14468*x14476))+x14469+(((-1.0)*x14481)));
evalcond[7]=(((r21*x14474))+(((-1.0)*r22*sj3*x14483))+((r20*x14468*x14470))+x14469+(((-1.0)*sj3*x14477*x14482))+((r20*x14476))+(((-1.0)*x14481)));
evalcond[8]=((((-1.0)*r02*sj3*x14483))+((r01*x14474))+(((-1.0)*x14478))+(((-1.0)*r01*x14479*x14482))+((cj3*x14472))+(((-1.0)*sj2*x14475))+((r00*x14468*x14470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14486=((1.0)*cj5);
CheckValue<IkReal> x14487=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x14486)))),-1);
if(!x14487.valid){
continue;
}
CheckValue<IkReal> x14488 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14486))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14487.value)))+(x14488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14489=IKsin(j4);
IkReal x14490=IKcos(j4);
IkReal x14491=(sj1*sj2);
IkReal x14492=(cj5*sj3);
IkReal x14493=(cj5*r10);
IkReal x14494=(r00*sj5);
IkReal x14495=(r11*sj5);
IkReal x14496=(cj3*cj5);
IkReal x14497=((1.0)*cj1);
IkReal x14498=(cj3*sj5);
IkReal x14499=(r21*sj5);
IkReal x14500=(cj2*sj1);
IkReal x14501=(sj3*sj5);
IkReal x14502=(r01*sj5);
IkReal x14503=(cj2*x14497);
IkReal x14504=((1.0)*x14490);
IkReal x14505=((1.0)*x14489);
IkReal x14506=(cj3*x14489);
IkReal x14507=(cj3*x14490);
evalcond[0]=((((-1.0)*r22*x14504))+((x14489*x14499))+(((-1.0)*cj5*r20*x14505)));
evalcond[1]=((((-1.0)*r02*x14504))+((x14489*x14502))+(((-1.0)*cj5*r00*x14505)));
evalcond[2]=((1.0)+(((-1.0)*x14493*x14505))+(((-1.0)*r12*x14504))+((x14489*x14495)));
evalcond[3]=((((-1.0)*cj3*x14493*x14504))+((r11*x14492))+((r10*x14501))+((x14495*x14507))+((r12*x14506)));
evalcond[4]=(((r10*x14498))+((r11*x14496))+((r10*x14490*x14492))+(((-1.0)*sj3*x14495*x14504))+(((-1.0)*r12*sj3*x14505)));
evalcond[5]=(((r21*x14492))+((r20*x14501))+((cj1*sj2))+(((-1.0)*r20*x14496*x14504))+((r22*x14506))+((r21*x14490*x14498))+x14500);
evalcond[6]=(((r01*x14490*x14498))+((r02*x14506))+(((-1.0)*x14503))+((sj3*x14494))+x14491+((r01*x14492))+(((-1.0)*r00*x14496*x14504)));
evalcond[7]=(((r21*x14496))+((r20*x14490*x14492))+(((-1.0)*x14503))+(((-1.0)*sj3*x14499*x14504))+x14491+(((-1.0)*r22*sj3*x14505))+((r20*x14498)));
evalcond[8]=((((-1.0)*x14500))+(((-1.0)*r01*x14501*x14504))+((cj3*x14494))+((r01*x14496))+(((-1.0)*r02*sj3*x14505))+((r00*x14490*x14492))+(((-1.0)*sj2*x14497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14508=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14508.valid){
continue;
}
CheckValue<IkReal> x14509 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14508.value)))+(x14509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14510=IKsin(j4);
IkReal x14511=IKcos(j4);
IkReal x14512=(sj1*sj2);
IkReal x14513=(cj5*sj3);
IkReal x14514=(cj5*r10);
IkReal x14515=(r00*sj5);
IkReal x14516=(r11*sj5);
IkReal x14517=(cj3*cj5);
IkReal x14518=((1.0)*cj1);
IkReal x14519=(cj3*sj5);
IkReal x14520=(r21*sj5);
IkReal x14521=(cj2*sj1);
IkReal x14522=(sj3*sj5);
IkReal x14523=(r01*sj5);
IkReal x14524=(cj2*x14518);
IkReal x14525=((1.0)*x14511);
IkReal x14526=((1.0)*x14510);
IkReal x14527=(cj3*x14510);
IkReal x14528=(cj3*x14511);
evalcond[0]=((((-1.0)*r22*x14525))+(((-1.0)*cj5*r20*x14526))+((x14510*x14520)));
evalcond[1]=((((-1.0)*r02*x14525))+((x14510*x14523))+(((-1.0)*cj5*r00*x14526)));
evalcond[2]=((1.0)+(((-1.0)*x14514*x14526))+(((-1.0)*r12*x14525))+((x14510*x14516)));
evalcond[3]=(((r11*x14513))+((r12*x14527))+(((-1.0)*cj3*x14514*x14525))+((x14516*x14528))+((r10*x14522)));
evalcond[4]=((((-1.0)*sj3*x14516*x14525))+(((-1.0)*r12*sj3*x14526))+((r11*x14517))+((r10*x14511*x14513))+((r10*x14519)));
evalcond[5]=(((r22*x14527))+((cj1*sj2))+((r20*x14522))+x14521+(((-1.0)*r20*x14517*x14525))+((r21*x14511*x14519))+((r21*x14513)));
evalcond[6]=(((sj3*x14515))+((r01*x14513))+(((-1.0)*x14524))+x14512+((r02*x14527))+(((-1.0)*r00*x14517*x14525))+((r01*x14511*x14519)));
evalcond[7]=((((-1.0)*sj3*x14520*x14525))+((r20*x14519))+(((-1.0)*x14524))+x14512+((r20*x14511*x14513))+(((-1.0)*r22*sj3*x14526))+((r21*x14517)));
evalcond[8]=((((-1.0)*x14521))+((r00*x14511*x14513))+((r01*x14517))+((cj3*x14515))+(((-1.0)*r01*x14522*x14525))+(((-1.0)*r02*sj3*x14526))+(((-1.0)*sj2*x14518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14529=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14529);
rxp0_2=(py*r00);
rxp1_0=(r21*x14529);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14530=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14530);
rxp0_2=(py*r00);
rxp1_0=(r21*x14530);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14531=((1.0)*cj5);
j4eval[0]=((((-1.0)*r00*x14531))+((r01*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x14531)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14532=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14532);
rxp0_2=(py*r00);
rxp1_0=(r21*x14532);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14533=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14533);
rxp0_2=(py*r00);
rxp1_0=(r21*x14533);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14534=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14534);
rxp0_2=(py*r00);
rxp1_0=(r21*x14534);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14535=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14535);
rxp0_2=(py*r00);
rxp1_0=(r21*x14535);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14538=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14538.valid){
continue;
}
IkReal x14536=x14538.value;
IkReal x14537=(cj0*x14536);
cj4array[0]=(((sj1*sj2*x14537))+(((-1.0)*cj1*cj2*x14537)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14539=IKsin(j4);
IkReal x14540=IKcos(j4);
IkReal x14541=(r21*sj5);
IkReal x14542=((1.0)*x14540);
IkReal x14543=((1.0)*cj5*x14539);
evalcond[0]=(r12*x14539);
evalcond[1]=((((-1.0)*r12*x14542))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14543))+((x14539*x14541)));
evalcond[3]=((((-1.0)*r00*x14543))+((r01*sj5*x14539)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x14540*x14541))+(((-1.0)*cj5*r20*x14542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14546=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14546.valid){
continue;
}
IkReal x14544=x14546.value;
IkReal x14545=((1.0)*x14544);
cj4array[0]=((((-1.0)*cj2*sj1*x14545))+(((-1.0)*cj1*sj2*x14545)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14547=IKsin(j4);
IkReal x14548=IKcos(j4);
IkReal x14549=((1.0)*cj0);
IkReal x14550=(r01*sj5);
IkReal x14551=((1.0)*cj5*r00);
evalcond[0]=(r12*x14547);
evalcond[1]=((((-1.0)*r12*x14548))+(((-1.0)*x14549)));
evalcond[2]=(((r21*sj5*x14547))+(((-1.0)*cj5*r20*x14547)));
evalcond[3]=((((-1.0)*x14547*x14551))+((x14547*x14550)));
evalcond[4]=(((cj0*cj1*cj2))+(((-1.0)*x14548*x14551))+((x14548*x14550))+(((-1.0)*sj1*sj2*x14549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14552=IKPowWithIntegerCheck(r12,-1);
if(!x14552.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14552.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14553=IKsin(j4);
IkReal x14554=IKcos(j4);
IkReal x14555=((1.0)*cj5*r00);
IkReal x14556=(sj5*x14554);
IkReal x14557=(sj5*x14553);
IkReal x14558=((1.0)*cj5*r20);
evalcond[0]=(r12*x14553);
evalcond[1]=((((-1.0)*x14553*x14558))+((r21*x14557)));
evalcond[2]=((((-1.0)*x14553*x14555))+((r01*x14557)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x14554*x14558))+((cj1*sj2))+((r21*x14556)));
evalcond[4]=((((-1.0)*x14554*x14555))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+((r01*x14556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14559=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14559);
rxp0_2=(py*r00);
rxp1_0=(r21*x14559);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14560=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14560);
rxp0_2=(py*r00);
rxp1_0=(r21*x14560);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14561=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14561);
rxp0_2=(py*r00);
rxp1_0=(r21*x14561);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14564=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14564.valid){
continue;
}
IkReal x14562=x14564.value;
IkReal x14563=(cj0*x14562);
cj4array[0]=((((-1.0)*cj1*cj2*x14563))+((sj1*sj2*x14563)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14565=IKsin(j4);
IkReal x14566=IKcos(j4);
IkReal x14567=(r21*sj5);
IkReal x14568=((1.0)*x14566);
IkReal x14569=((1.0)*cj5*x14565);
evalcond[0]=((-1.0)*r12*x14565);
evalcond[1]=((((-1.0)*r12*x14568))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14569))+((x14565*x14567)));
evalcond[3]=((((-1.0)*r00*x14569))+((r01*sj5*x14565)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((cj5*r20*x14566))+(((-1.0)*x14567*x14568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14572=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14572.valid){
continue;
}
IkReal x14570=x14572.value;
IkReal x14571=((1.0)*x14570);
cj4array[0]=((((-1.0)*cj1*sj2*x14571))+(((-1.0)*cj2*sj1*x14571)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14573=IKsin(j4);
IkReal x14574=IKcos(j4);
IkReal x14575=(cj5*r00);
IkReal x14576=((1.0)*cj0);
IkReal x14577=((1.0)*x14573);
IkReal x14578=(sj5*x14573);
IkReal x14579=((1.0)*x14574);
evalcond[0]=((-1.0)*r12*x14573);
evalcond[1]=((((-1.0)*x14576))+(((-1.0)*r12*x14579)));
evalcond[2]=(((r21*x14578))+(((-1.0)*cj5*r20*x14577)));
evalcond[3]=((((-1.0)*x14575*x14577))+((r01*x14578)));
evalcond[4]=((((-1.0)*r01*sj5*x14579))+((cj0*cj1*cj2))+((x14574*x14575))+(((-1.0)*sj1*sj2*x14576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14580=IKPowWithIntegerCheck(r12,-1);
if(!x14580.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14580.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14581=IKsin(j4);
IkReal x14582=IKcos(j4);
IkReal x14583=(cj5*r00);
IkReal x14584=(r21*sj5);
IkReal x14585=(cj5*r20);
IkReal x14586=(r01*sj5);
IkReal x14587=((1.0)*x14581);
IkReal x14588=((1.0)*x14582);
evalcond[0]=((-1.0)*r12*x14581);
evalcond[1]=(((x14581*x14584))+(((-1.0)*x14585*x14587)));
evalcond[2]=((((-1.0)*x14583*x14587))+((x14581*x14586)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x14584*x14588))+((cj1*sj2))+((x14582*x14585)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((x14582*x14583))+((cj0*cj1*cj2))+(((-1.0)*x14586*x14588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x14589 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14589.valid){
continue;
}
IkReal gconst66=((-1.0)*(x14589.value));
IkReal gconst67=r00;
IkReal gconst68=r01;
CheckValue<IkReal> x14590 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14590.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14590.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14591=((-1.0)*py);
CheckValue<IkReal> x14593 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14593.valid){
continue;
}
IkReal x14592=((-1.0)*(x14593.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14591);
rxp0_2=(py*r00);
rxp1_0=(r21*x14591);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14592;
IkReal gconst66=x14592;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14594=((-1.0)*py);
CheckValue<IkReal> x14596 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14596.valid){
continue;
}
IkReal x14595=((-1.0)*(x14596.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14594);
rxp0_2=(py*r00);
rxp1_0=(r21*x14594);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14595;
IkReal gconst66=x14595;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14597=((-1.0)*py);
CheckValue<IkReal> x14599 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14599.valid){
continue;
}
IkReal x14598=((-1.0)*(x14599.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14597);
rxp0_2=(py*r00);
rxp1_0=(r21*x14597);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14598;
IkReal gconst66=x14598;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*cj3*r01*r20))+((cj3*r00*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14600=(cj2*sj1);
IkReal x14601=(cj1*sj2);
IkReal x14602=((1.0)*gconst68);
CheckValue<IkReal> x14603=IKPowWithIntegerCheck(r12,-1);
if(!x14603.valid){
continue;
}
CheckValue<IkReal> x14604=IKPowWithIntegerCheck(sj3,-1);
if(!x14604.valid){
continue;
}
CheckValue<IkReal> x14605=IKPowWithIntegerCheck((((cj3*gconst67*r21))+(((-1.0)*cj3*r20*x14602))),-1);
if(!x14605.valid){
continue;
}
if( IKabs(((x14603.value)*(x14604.value)*((((sj0*x14601))+((sj0*x14600)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14605.value)*(((((-1.0)*gconst67*r20*sj3))+(((-1.0)*x14600))+(((-1.0)*x14601))+(((-1.0)*r21*sj3*x14602)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14603.value)*(x14604.value)*((((sj0*x14601))+((sj0*x14600))))))+IKsqr(((x14605.value)*(((((-1.0)*gconst67*r20*sj3))+(((-1.0)*x14600))+(((-1.0)*x14601))+(((-1.0)*r21*sj3*x14602))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14603.value)*(x14604.value)*((((sj0*x14601))+((sj0*x14600))))), ((x14605.value)*(((((-1.0)*gconst67*r20*sj3))+(((-1.0)*x14600))+(((-1.0)*x14601))+(((-1.0)*r21*sj3*x14602))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14606=IKsin(j4);
IkReal x14607=IKcos(j4);
IkReal x14608=((1.0)*sj3);
IkReal x14609=(cj2*sj0);
IkReal x14610=(gconst68*sj3);
IkReal x14611=(sj1*sj2);
IkReal x14612=(cj1*cj2);
IkReal x14613=(cj3*r20);
IkReal x14614=(gconst67*r00);
IkReal x14615=(cj2*sj1);
IkReal x14616=(cj3*gconst68);
IkReal x14617=(cj1*sj2);
IkReal x14618=((1.0)*cj0);
IkReal x14619=(r12*x14606);
IkReal x14620=(gconst67*x14607);
IkReal x14621=((1.0)*x14607);
IkReal x14622=(gconst67*x14606);
IkReal x14623=((1.0)*gconst68*x14606);
evalcond[0]=((((-1.0)*r12*x14621))+(((-1.0)*x14618)));
evalcond[1]=(((r21*x14622))+(((-1.0)*r20*x14623)));
evalcond[2]=(sj0+(((-1.0)*r00*x14623))+((r01*x14622)));
evalcond[3]=(((sj0*x14617))+((sj1*x14609))+(((-1.0)*x14608*x14619)));
evalcond[4]=(((cj1*x14609))+((cj3*x14619))+(((-1.0)*sj0*x14611)));
evalcond[5]=(((r21*x14610))+(((-1.0)*gconst68*x14613*x14621))+((gconst67*r20*sj3))+x14617+x14615+((cj3*r21*x14620)));
evalcond[6]=(((r20*x14607*x14610))+((gconst67*x14613))+((r21*x14616))+(((-1.0)*x14612))+x14611+(((-1.0)*r21*x14608*x14620)));
evalcond[7]=(((r00*x14607*x14610))+((cj0*x14615))+((cj0*x14617))+(((-1.0)*r01*x14608*x14620))+((r01*x14616))+((cj3*x14614)));
evalcond[8]=(((cj0*x14612))+((cj3*r01*x14620))+((r01*x14610))+(((-1.0)*r00*x14616*x14621))+((sj3*x14614))+(((-1.0)*x14611*x14618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14625=IKPowWithIntegerCheck(r12,-1);
if(!x14625.valid){
continue;
}
IkReal x14624=x14625.value;
CheckValue<IkReal> x14626=IKPowWithIntegerCheck(cj3,-1);
if(!x14626.valid){
continue;
}
if( IKabs((x14624*(x14626.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14624)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14624*(x14626.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14624))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14624*(x14626.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x14624));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14627=IKsin(j4);
IkReal x14628=IKcos(j4);
IkReal x14629=((1.0)*sj3);
IkReal x14630=(cj2*sj0);
IkReal x14631=(gconst68*sj3);
IkReal x14632=(sj1*sj2);
IkReal x14633=(cj1*cj2);
IkReal x14634=(cj3*r20);
IkReal x14635=(gconst67*r00);
IkReal x14636=(cj2*sj1);
IkReal x14637=(cj3*gconst68);
IkReal x14638=(cj1*sj2);
IkReal x14639=((1.0)*cj0);
IkReal x14640=(r12*x14627);
IkReal x14641=(gconst67*x14628);
IkReal x14642=((1.0)*x14628);
IkReal x14643=(gconst67*x14627);
IkReal x14644=((1.0)*gconst68*x14627);
evalcond[0]=((((-1.0)*r12*x14642))+(((-1.0)*x14639)));
evalcond[1]=(((r21*x14643))+(((-1.0)*r20*x14644)));
evalcond[2]=(sj0+((r01*x14643))+(((-1.0)*r00*x14644)));
evalcond[3]=((((-1.0)*x14629*x14640))+((sj0*x14638))+((sj1*x14630)));
evalcond[4]=((((-1.0)*sj0*x14632))+((cj1*x14630))+((cj3*x14640)));
evalcond[5]=(((cj3*r21*x14641))+(((-1.0)*gconst68*x14634*x14642))+((gconst67*r20*sj3))+x14638+x14636+((r21*x14631)));
evalcond[6]=(((gconst67*x14634))+x14632+(((-1.0)*x14633))+(((-1.0)*r21*x14629*x14641))+((r21*x14637))+((r20*x14628*x14631)));
evalcond[7]=((((-1.0)*r01*x14629*x14641))+((r00*x14628*x14631))+((cj3*x14635))+((cj0*x14638))+((cj0*x14636))+((r01*x14637)));
evalcond[8]=((((-1.0)*r00*x14637*x14642))+((sj3*x14635))+((cj0*x14633))+((r01*x14631))+(((-1.0)*x14632*x14639))+((cj3*r01*x14641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14646=IKPowWithIntegerCheck(r12,-1);
if(!x14646.valid){
continue;
}
IkReal x14645=x14646.value;
CheckValue<IkReal> x14647=IKPowWithIntegerCheck(sj3,-1);
if(!x14647.valid){
continue;
}
if( IKabs((x14645*(x14647.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14645)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14645*(x14647.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14645))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14645*(x14647.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14645));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14648=IKsin(j4);
IkReal x14649=IKcos(j4);
IkReal x14650=((1.0)*sj3);
IkReal x14651=(cj2*sj0);
IkReal x14652=(gconst68*sj3);
IkReal x14653=(sj1*sj2);
IkReal x14654=(cj1*cj2);
IkReal x14655=(cj3*r20);
IkReal x14656=(gconst67*r00);
IkReal x14657=(cj2*sj1);
IkReal x14658=(cj3*gconst68);
IkReal x14659=(cj1*sj2);
IkReal x14660=((1.0)*cj0);
IkReal x14661=(r12*x14648);
IkReal x14662=(gconst67*x14649);
IkReal x14663=((1.0)*x14649);
IkReal x14664=(gconst67*x14648);
IkReal x14665=((1.0)*gconst68*x14648);
evalcond[0]=((((-1.0)*r12*x14663))+(((-1.0)*x14660)));
evalcond[1]=(((r21*x14664))+(((-1.0)*r20*x14665)));
evalcond[2]=(sj0+((r01*x14664))+(((-1.0)*r00*x14665)));
evalcond[3]=(((sj1*x14651))+((sj0*x14659))+(((-1.0)*x14650*x14661)));
evalcond[4]=(((cj3*x14661))+(((-1.0)*sj0*x14653))+((cj1*x14651)));
evalcond[5]=((((-1.0)*gconst68*x14655*x14663))+((cj3*r21*x14662))+((gconst67*r20*sj3))+x14657+x14659+((r21*x14652)));
evalcond[6]=(((gconst67*x14655))+(((-1.0)*x14654))+(((-1.0)*r21*x14650*x14662))+((r20*x14649*x14652))+x14653+((r21*x14658)));
evalcond[7]=(((cj0*x14657))+((cj0*x14659))+((r01*x14658))+((r00*x14649*x14652))+(((-1.0)*r01*x14650*x14662))+((cj3*x14656)));
evalcond[8]=((((-1.0)*r00*x14658*x14663))+((cj0*x14654))+((r01*x14652))+((sj3*x14656))+(((-1.0)*x14653*x14660))+((cj3*r01*x14662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14666=((-1.0)*r00);
CheckValue<IkReal> x14667 = IKatan2WithCheck(IkReal(x14666),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14667.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x14667.value))));
IkReal gconst70=x14666;
IkReal gconst71=((-1.0)*r01);
CheckValue<IkReal> x14668 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14668.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14668.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14669=((-1.0)*r00);
IkReal x14670=((-1.0)*py);
CheckValue<IkReal> x14672 = IKatan2WithCheck(IkReal(x14669),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14672.valid){
continue;
}
IkReal x14671=((1.0)*(x14672.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14670);
rxp0_2=(py*r00);
rxp1_0=(r21*x14670);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14671)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14671)));
IkReal gconst70=x14669;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14673=((-1.0)*r00);
IkReal x14674=((-1.0)*py);
CheckValue<IkReal> x14676 = IKatan2WithCheck(IkReal(x14673),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14676.valid){
continue;
}
IkReal x14675=((1.0)*(x14676.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14674);
rxp0_2=(py*r00);
rxp1_0=(r21*x14674);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14675)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14675)));
IkReal gconst70=x14673;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14677=((-1.0)*r00);
IkReal x14678=((-1.0)*py);
CheckValue<IkReal> x14680 = IKatan2WithCheck(IkReal(x14677),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14680.valid){
continue;
}
IkReal x14679=((1.0)*(x14680.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14678);
rxp0_2=(py*r00);
rxp1_0=(r21*x14678);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14679)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14679)));
IkReal gconst70=x14677;
IkReal gconst71=((-1.0)*r01);
IkReal x14681=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r21*x14681))+((r01*r20*x14681)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14682=(cj2*sj1);
IkReal x14683=(cj1*sj2);
IkReal x14684=((1.0)*gconst71);
CheckValue<IkReal> x14685=IKPowWithIntegerCheck(r12,-1);
if(!x14685.valid){
continue;
}
CheckValue<IkReal> x14686=IKPowWithIntegerCheck(sj3,-1);
if(!x14686.valid){
continue;
}
CheckValue<IkReal> x14687=IKPowWithIntegerCheck((((cj3*gconst70*r21))+(((-1.0)*cj3*r20*x14684))),-1);
if(!x14687.valid){
continue;
}
if( IKabs(((x14685.value)*(x14686.value)*((((sj0*x14682))+((sj0*x14683)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14687.value)*(((((-1.0)*r21*sj3*x14684))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14683))+(((-1.0)*x14682)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14685.value)*(x14686.value)*((((sj0*x14682))+((sj0*x14683))))))+IKsqr(((x14687.value)*(((((-1.0)*r21*sj3*x14684))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14683))+(((-1.0)*x14682))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14685.value)*(x14686.value)*((((sj0*x14682))+((sj0*x14683))))), ((x14687.value)*(((((-1.0)*r21*sj3*x14684))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14683))+(((-1.0)*x14682))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14688=IKsin(j4);
IkReal x14689=IKcos(j4);
IkReal x14690=(cj1*sj0);
IkReal x14691=(cj3*r21);
IkReal x14692=(sj1*sj2);
IkReal x14693=(gconst71*r20);
IkReal x14694=(cj3*r00);
IkReal x14695=(r21*sj3);
IkReal x14696=(cj1*cj2);
IkReal x14697=(gconst70*r20);
IkReal x14698=(cj2*sj1);
IkReal x14699=(cj3*r01);
IkReal x14700=(gconst71*r00);
IkReal x14701=(r01*sj3);
IkReal x14702=(cj1*sj2);
IkReal x14703=((1.0)*cj0);
IkReal x14704=((1.0)*x14688);
IkReal x14705=(gconst70*x14688);
IkReal x14706=(gconst70*x14689);
IkReal x14707=((1.0)*x14689);
IkReal x14708=(sj3*x14689);
evalcond[0]=((((-1.0)*x14703))+(((-1.0)*r12*x14707)));
evalcond[1]=((((-1.0)*x14693*x14704))+((r21*x14705)));
evalcond[2]=(sj0+((r01*x14705))+(((-1.0)*x14700*x14704)));
evalcond[3]=((((-1.0)*r12*sj3*x14704))+((sj2*x14690))+((sj0*x14698)));
evalcond[4]=((((-1.0)*sj0*x14692))+((cj2*x14690))+((cj3*r12*x14688)));
evalcond[5]=(((sj3*x14697))+((x14691*x14706))+(((-1.0)*cj3*x14693*x14707))+x14698+x14702+((gconst71*x14695)));
evalcond[6]=(((cj3*x14697))+((x14693*x14708))+(((-1.0)*x14695*x14706))+x14692+((gconst71*x14691))+(((-1.0)*x14696)));
evalcond[7]=(((cj0*x14698))+((cj0*x14702))+(((-1.0)*x14701*x14706))+((gconst70*x14694))+((x14700*x14708))+((gconst71*x14699)));
evalcond[8]=(((cj0*x14696))+((gconst71*x14701))+(((-1.0)*gconst71*x14694*x14707))+(((-1.0)*x14692*x14703))+((gconst70*r00*sj3))+((x14699*x14706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14710=IKPowWithIntegerCheck(r12,-1);
if(!x14710.valid){
continue;
}
IkReal x14709=x14710.value;
CheckValue<IkReal> x14711=IKPowWithIntegerCheck(cj3,-1);
if(!x14711.valid){
continue;
}
if( IKabs((x14709*(x14711.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14709)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14709*(x14711.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14709))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14709*(x14711.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x14709));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14712=IKsin(j4);
IkReal x14713=IKcos(j4);
IkReal x14714=(cj1*sj0);
IkReal x14715=(cj3*r21);
IkReal x14716=(sj1*sj2);
IkReal x14717=(gconst71*r20);
IkReal x14718=(cj3*r00);
IkReal x14719=(r21*sj3);
IkReal x14720=(cj1*cj2);
IkReal x14721=(gconst70*r20);
IkReal x14722=(cj2*sj1);
IkReal x14723=(cj3*r01);
IkReal x14724=(gconst71*r00);
IkReal x14725=(r01*sj3);
IkReal x14726=(cj1*sj2);
IkReal x14727=((1.0)*cj0);
IkReal x14728=((1.0)*x14712);
IkReal x14729=(gconst70*x14712);
IkReal x14730=(gconst70*x14713);
IkReal x14731=((1.0)*x14713);
IkReal x14732=(sj3*x14713);
evalcond[0]=((((-1.0)*r12*x14731))+(((-1.0)*x14727)));
evalcond[1]=(((r21*x14729))+(((-1.0)*x14717*x14728)));
evalcond[2]=(sj0+((r01*x14729))+(((-1.0)*x14724*x14728)));
evalcond[3]=(((sj0*x14722))+(((-1.0)*r12*sj3*x14728))+((sj2*x14714)));
evalcond[4]=(((cj2*x14714))+(((-1.0)*sj0*x14716))+((cj3*r12*x14712)));
evalcond[5]=(((x14715*x14730))+((sj3*x14721))+x14722+x14726+((gconst71*x14719))+(((-1.0)*cj3*x14717*x14731)));
evalcond[6]=((((-1.0)*x14720))+(((-1.0)*x14719*x14730))+((cj3*x14721))+x14716+((x14717*x14732))+((gconst71*x14715)));
evalcond[7]=(((gconst70*x14718))+((cj0*x14722))+((cj0*x14726))+((x14724*x14732))+((gconst71*x14723))+(((-1.0)*x14725*x14730)));
evalcond[8]=(((cj0*x14720))+((x14723*x14730))+(((-1.0)*gconst71*x14718*x14731))+(((-1.0)*x14716*x14727))+((gconst70*r00*sj3))+((gconst71*x14725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14734=IKPowWithIntegerCheck(r12,-1);
if(!x14734.valid){
continue;
}
IkReal x14733=x14734.value;
CheckValue<IkReal> x14735=IKPowWithIntegerCheck(sj3,-1);
if(!x14735.valid){
continue;
}
if( IKabs((x14733*(x14735.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14733)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14733*(x14735.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14733))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14733*(x14735.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14733));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14736=IKsin(j4);
IkReal x14737=IKcos(j4);
IkReal x14738=(cj1*sj0);
IkReal x14739=(cj3*r21);
IkReal x14740=(sj1*sj2);
IkReal x14741=(gconst71*r20);
IkReal x14742=(cj3*r00);
IkReal x14743=(r21*sj3);
IkReal x14744=(cj1*cj2);
IkReal x14745=(gconst70*r20);
IkReal x14746=(cj2*sj1);
IkReal x14747=(cj3*r01);
IkReal x14748=(gconst71*r00);
IkReal x14749=(r01*sj3);
IkReal x14750=(cj1*sj2);
IkReal x14751=((1.0)*cj0);
IkReal x14752=((1.0)*x14736);
IkReal x14753=(gconst70*x14736);
IkReal x14754=(gconst70*x14737);
IkReal x14755=((1.0)*x14737);
IkReal x14756=(sj3*x14737);
evalcond[0]=((((-1.0)*r12*x14755))+(((-1.0)*x14751)));
evalcond[1]=((((-1.0)*x14741*x14752))+((r21*x14753)));
evalcond[2]=(sj0+((r01*x14753))+(((-1.0)*x14748*x14752)));
evalcond[3]=((((-1.0)*r12*sj3*x14752))+((sj2*x14738))+((sj0*x14746)));
evalcond[4]=(((cj3*r12*x14736))+(((-1.0)*sj0*x14740))+((cj2*x14738)));
evalcond[5]=(((sj3*x14745))+((x14739*x14754))+((gconst71*x14743))+(((-1.0)*cj3*x14741*x14755))+x14750+x14746);
evalcond[6]=((((-1.0)*x14743*x14754))+((cj3*x14745))+(((-1.0)*x14744))+x14740+((gconst71*x14739))+((x14741*x14756)));
evalcond[7]=(((cj0*x14746))+((gconst71*x14747))+((x14748*x14756))+(((-1.0)*x14749*x14754))+((cj0*x14750))+((gconst70*x14742)));
evalcond[8]=(((cj0*x14744))+((gconst71*x14749))+((x14747*x14754))+(((-1.0)*x14740*x14751))+(((-1.0)*gconst71*x14742*x14755))+((gconst70*r00*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14757=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14757);
rxp0_2=(py*r00);
rxp1_0=(r21*x14757);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14758=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14758);
rxp0_2=(py*r00);
rxp1_0=(r21*x14758);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14759=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14759);
rxp0_2=(py*r00);
rxp1_0=(r21*x14759);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14762=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14762.valid){
continue;
}
IkReal x14760=x14762.value;
IkReal x14761=((1.0)*cj0*x14760);
cj4array[0]=((((-1.0)*cj1*sj2*x14761))+(((-1.0)*cj2*sj1*x14761)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14763=IKsin(j4);
IkReal x14764=IKcos(j4);
IkReal x14765=(r21*sj5);
IkReal x14766=((1.0)*x14764);
IkReal x14767=((1.0)*cj5*x14763);
evalcond[0]=((-1.0)*r12*x14763);
evalcond[1]=((((-1.0)*r12*x14766))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14767))+((x14763*x14765)));
evalcond[3]=((((-1.0)*r00*x14767))+((r01*sj5*x14763)));
evalcond[4]=(((cj5*r20*x14764))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14765*x14766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14769=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14769.valid){
continue;
}
IkReal x14768=x14769.value;
cj4array[0]=(((cj1*cj2*x14768))+(((-1.0)*sj1*sj2*x14768)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14770=IKsin(j4);
IkReal x14771=IKcos(j4);
IkReal x14772=(cj5*r00);
IkReal x14773=((1.0)*x14770);
IkReal x14774=(sj5*x14770);
IkReal x14775=((1.0)*x14771);
evalcond[0]=((-1.0)*r12*x14770);
evalcond[1]=((((-1.0)*r12*x14775))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x14773))+((r21*x14774)));
evalcond[3]=((((-1.0)*x14772*x14773))+((r01*x14774)));
evalcond[4]=(((x14771*x14772))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*r01*sj5*x14775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14776=IKPowWithIntegerCheck(r12,-1);
if(!x14776.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14776.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14777=IKsin(j4);
IkReal x14778=IKcos(j4);
IkReal x14779=(cj5*r00);
IkReal x14780=(cj5*r20);
IkReal x14781=(r21*sj5);
IkReal x14782=(r01*sj5);
IkReal x14783=((1.0)*x14777);
IkReal x14784=((1.0)*x14778);
evalcond[0]=((-1.0)*r12*x14777);
evalcond[1]=((((-1.0)*x14780*x14783))+((x14777*x14781)));
evalcond[2]=((((-1.0)*x14779*x14783))+((x14777*x14782)));
evalcond[3]=(((x14778*x14780))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14781*x14784)));
evalcond[4]=(((x14778*x14779))+(((-1.0)*x14782*x14784))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14785=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14785);
rxp0_2=(py*r00);
rxp1_0=(r21*x14785);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14786=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14786);
rxp0_2=(py*r00);
rxp1_0=(r21*x14786);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14787=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14787);
rxp0_2=(py*r00);
rxp1_0=(r21*x14787);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14790=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14790.valid){
continue;
}
IkReal x14788=x14790.value;
IkReal x14789=((1.0)*cj0*x14788);
cj4array[0]=((((-1.0)*cj1*sj2*x14789))+(((-1.0)*cj2*sj1*x14789)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14791=IKsin(j4);
IkReal x14792=IKcos(j4);
IkReal x14793=(r21*sj5);
IkReal x14794=((1.0)*x14792);
IkReal x14795=((1.0)*cj5*x14791);
evalcond[0]=(r12*x14791);
evalcond[1]=((((-1.0)*r12*x14794))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14795))+((x14791*x14793)));
evalcond[3]=((((-1.0)*r00*x14795))+((r01*sj5*x14791)));
evalcond[4]=(((x14792*x14793))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x14794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14797=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14797.valid){
continue;
}
IkReal x14796=x14797.value;
cj4array[0]=(((cj1*cj2*x14796))+(((-1.0)*sj1*sj2*x14796)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14798=IKsin(j4);
IkReal x14799=IKcos(j4);
IkReal x14800=(r01*sj5);
IkReal x14801=((1.0)*cj5*r00);
evalcond[0]=(r12*x14798);
evalcond[1]=((((-1.0)*r12*x14799))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x14798))+((r21*sj5*x14798)));
evalcond[3]=(((x14798*x14800))+(((-1.0)*x14798*x14801)));
evalcond[4]=((((-1.0)*x14799*x14801))+((x14799*x14800))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14802=IKPowWithIntegerCheck(r12,-1);
if(!x14802.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14802.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14803=IKsin(j4);
IkReal x14804=IKcos(j4);
IkReal x14805=(sj5*x14804);
IkReal x14806=(sj5*x14803);
IkReal x14807=((1.0)*cj5*x14803);
IkReal x14808=((1.0)*cj5*x14804);
evalcond[0]=(r12*x14803);
evalcond[1]=((((-1.0)*r20*x14807))+((r21*x14806)));
evalcond[2]=((((-1.0)*r00*x14807))+((r01*x14806)));
evalcond[3]=((((-1.0)*r20*x14808))+((r21*x14805))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r00*x14808))+((r01*x14805))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14810=IKPowWithIntegerCheck(r12,-1);
if(!x14810.valid){
continue;
}
IkReal x14809=x14810.value;
CheckValue<IkReal> x14811=IKPowWithIntegerCheck(sj3,-1);
if(!x14811.valid){
continue;
}
if( IKabs((x14809*(x14811.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14809)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14809*(x14811.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14809))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14809*(x14811.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14809));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14812=IKsin(j4);
IkReal x14813=IKcos(j4);
IkReal x14814=(cj2*sj0);
IkReal x14815=(sj1*sj2);
IkReal x14816=(cj5*sj3);
IkReal x14817=(cj3*cj5);
IkReal x14818=(cj1*cj2);
IkReal x14819=(r21*sj5);
IkReal x14820=(r00*sj5);
IkReal x14821=(cj2*sj1);
IkReal x14822=(r01*sj5);
IkReal x14823=(r20*sj5);
IkReal x14824=(cj1*sj2);
IkReal x14825=((1.0)*cj0);
IkReal x14826=((1.0)*x14812);
IkReal x14827=(r20*x14813);
IkReal x14828=(r00*x14813);
IkReal x14829=(cj3*x14813);
IkReal x14830=((1.0)*x14813);
evalcond[0]=((((-1.0)*r12*x14830))+(((-1.0)*x14825)));
evalcond[1]=((((-1.0)*cj5*r20*x14826))+((x14812*x14819)));
evalcond[2]=(sj0+((x14812*x14822))+(((-1.0)*cj5*r00*x14826)));
evalcond[3]=(((sj0*x14824))+(((-1.0)*r12*sj3*x14826))+((sj1*x14814)));
evalcond[4]=(((cj1*x14814))+(((-1.0)*sj0*x14815))+((cj3*r12*x14812)));
evalcond[5]=(((sj3*x14823))+x14821+x14824+(((-1.0)*x14817*x14827))+((r21*x14816))+((x14819*x14829)));
evalcond[6]=(((cj3*x14823))+x14815+((r21*x14817))+((x14816*x14827))+(((-1.0)*x14818))+(((-1.0)*sj3*x14819*x14830)));
evalcond[7]=(((cj3*x14820))+((r01*x14817))+((cj0*x14824))+((cj0*x14821))+((x14816*x14828))+(((-1.0)*sj3*x14822*x14830)));
evalcond[8]=((((-1.0)*x14815*x14825))+((x14822*x14829))+((sj3*x14820))+(((-1.0)*x14817*x14828))+((r01*x14816))+((cj0*x14818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14831=((1.0)*sj3);
IkReal x14832=((1.0)*cj5);
CheckValue<IkReal> x14833=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x14832))),-1);
if(!x14833.valid){
continue;
}
CheckValue<IkReal> x14834=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x14832))),-1);
if(!x14834.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14833.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14834.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x14831))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14831)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14833.value)))+IKsqr(((x14834.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x14831))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14831))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14833.value)), ((x14834.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x14831))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14831))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14835=IKsin(j4);
IkReal x14836=IKcos(j4);
IkReal x14837=(cj2*sj0);
IkReal x14838=(sj1*sj2);
IkReal x14839=(cj5*sj3);
IkReal x14840=(cj3*cj5);
IkReal x14841=(cj1*cj2);
IkReal x14842=(r21*sj5);
IkReal x14843=(r00*sj5);
IkReal x14844=(cj2*sj1);
IkReal x14845=(r01*sj5);
IkReal x14846=(r20*sj5);
IkReal x14847=(cj1*sj2);
IkReal x14848=((1.0)*cj0);
IkReal x14849=((1.0)*x14835);
IkReal x14850=(r20*x14836);
IkReal x14851=(r00*x14836);
IkReal x14852=(cj3*x14836);
IkReal x14853=((1.0)*x14836);
evalcond[0]=((((-1.0)*x14848))+(((-1.0)*r12*x14853)));
evalcond[1]=((((-1.0)*cj5*r20*x14849))+((x14835*x14842)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x14849))+((x14835*x14845)));
evalcond[3]=(((sj0*x14847))+(((-1.0)*r12*sj3*x14849))+((sj1*x14837)));
evalcond[4]=((((-1.0)*sj0*x14838))+((cj3*r12*x14835))+((cj1*x14837)));
evalcond[5]=(x14847+x14844+(((-1.0)*x14840*x14850))+((sj3*x14846))+((r21*x14839))+((x14842*x14852)));
evalcond[6]=((((-1.0)*x14841))+(((-1.0)*sj3*x14842*x14853))+x14838+((x14839*x14850))+((cj3*x14846))+((r21*x14840)));
evalcond[7]=(((cj0*x14847))+((cj0*x14844))+(((-1.0)*sj3*x14845*x14853))+((x14839*x14851))+((cj3*x14843))+((r01*x14840)));
evalcond[8]=(((x14845*x14852))+((cj0*x14841))+(((-1.0)*x14840*x14851))+((sj3*x14843))+(((-1.0)*x14838*x14848))+((r01*x14839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14854=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14854.valid){
continue;
}
CheckValue<IkReal> x14855=IKPowWithIntegerCheck(r12,-1);
if(!x14855.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14854.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x14855.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14854.value)))+IKsqr(((-1.0)*cj0*(x14855.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14854.value)), ((-1.0)*cj0*(x14855.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14856=IKsin(j4);
IkReal x14857=IKcos(j4);
IkReal x14858=(cj2*sj0);
IkReal x14859=(sj1*sj2);
IkReal x14860=(cj5*sj3);
IkReal x14861=(cj3*cj5);
IkReal x14862=(cj1*cj2);
IkReal x14863=(r21*sj5);
IkReal x14864=(r00*sj5);
IkReal x14865=(cj2*sj1);
IkReal x14866=(r01*sj5);
IkReal x14867=(r20*sj5);
IkReal x14868=(cj1*sj2);
IkReal x14869=((1.0)*cj0);
IkReal x14870=((1.0)*x14856);
IkReal x14871=(r20*x14857);
IkReal x14872=(r00*x14857);
IkReal x14873=(cj3*x14857);
IkReal x14874=((1.0)*x14857);
evalcond[0]=((((-1.0)*r12*x14874))+(((-1.0)*x14869)));
evalcond[1]=(((x14856*x14863))+(((-1.0)*cj5*r20*x14870)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x14870))+((x14856*x14866)));
evalcond[3]=(((sj0*x14868))+((sj1*x14858))+(((-1.0)*r12*sj3*x14870)));
evalcond[4]=((((-1.0)*sj0*x14859))+((cj1*x14858))+((cj3*r12*x14856)));
evalcond[5]=((((-1.0)*x14861*x14871))+x14865+x14868+((x14863*x14873))+((sj3*x14867))+((r21*x14860)));
evalcond[6]=(x14859+((r21*x14861))+((cj3*x14867))+(((-1.0)*x14862))+((x14860*x14871))+(((-1.0)*sj3*x14863*x14874)));
evalcond[7]=(((r01*x14861))+((cj3*x14864))+((cj0*x14868))+((cj0*x14865))+(((-1.0)*sj3*x14866*x14874))+((x14860*x14872)));
evalcond[8]=((((-1.0)*x14861*x14872))+((x14866*x14873))+(((-1.0)*x14859*x14869))+((sj3*x14864))+((r01*x14860))+((cj0*x14862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14875=((1.0)*cj5);
CheckValue<IkReal> x14876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14875))+(((-1.0)*r20*sj5)))),-1);
if(!x14876.valid){
continue;
}
CheckValue<IkReal> x14877 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x14875))+(((-1.0)*cj0*r00*x14875))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14876.value)))+(x14877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14878=IKsin(j4);
IkReal x14879=IKcos(j4);
IkReal x14880=(r11*sj5);
IkReal x14881=(cj2*sj0);
IkReal x14882=(cj5*r10);
IkReal x14883=(sj1*sj2);
IkReal x14884=(cj5*r01);
IkReal x14885=(cj5*r00);
IkReal x14886=(cj1*cj2);
IkReal x14887=(cj3*sj5);
IkReal x14888=(r21*sj5);
IkReal x14889=(cj5*sj3);
IkReal x14890=(sj3*sj5);
IkReal x14891=(cj2*sj1);
IkReal x14892=(r01*sj5);
IkReal x14893=(cj3*cj5);
IkReal x14894=(cj1*sj2);
IkReal x14895=((1.0)*cj0);
IkReal x14896=(cj5*r20);
IkReal x14897=((1.0)*x14879);
IkReal x14898=((1.0)*x14878);
IkReal x14899=(cj3*x14879);
IkReal x14900=(sj3*x14879);
IkReal x14901=(cj3*x14878);
evalcond[0]=((((-1.0)*r22*x14897))+((x14878*x14888))+(((-1.0)*x14896*x14898)));
evalcond[1]=(sj0+(((-1.0)*x14885*x14898))+((x14878*x14892))+(((-1.0)*r02*x14897)));
evalcond[2]=(((x14878*x14880))+(((-1.0)*x14882*x14898))+(((-1.0)*x14895))+(((-1.0)*r12*x14897)));
evalcond[3]=(((r22*x14901))+((r21*x14879*x14887))+x14894+x14891+((r21*x14889))+(((-1.0)*r20*x14893*x14897))+((r20*x14890)));
evalcond[4]=(x14883+((r21*x14893))+((r20*x14887))+(((-1.0)*x14886))+(((-1.0)*sj3*x14888*x14897))+((r20*x14879*x14889))+(((-1.0)*r22*sj3*x14898)));
evalcond[5]=((((-1.0)*r01*x14890*x14897))+((r00*x14887))+((cj3*x14884))+(((-1.0)*r02*sj3*x14898))+((x14885*x14900))+((cj0*x14894))+((cj0*x14891)));
evalcond[6]=(((cj0*x14886))+((r01*x14879*x14887))+((r00*x14890))+((r02*x14901))+(((-1.0)*x14883*x14895))+((sj3*x14884))+(((-1.0)*cj3*x14885*x14897)));
evalcond[7]=(((r10*x14887))+((x14882*x14900))+(((-1.0)*r12*sj3*x14898))+(((-1.0)*sj3*x14880*x14897))+((r11*x14893))+((sj0*x14894))+((sj1*x14881)));
evalcond[8]=(((r10*x14890))+((r11*x14889))+(((-1.0)*cj3*x14882*x14897))+((r12*x14901))+((x14880*x14899))+((cj1*x14881))+(((-1.0)*sj0*x14883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14902=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14902.valid){
continue;
}
CheckValue<IkReal> x14903 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14902.value)))+(x14903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14904=IKsin(j4);
IkReal x14905=IKcos(j4);
IkReal x14906=(r11*sj5);
IkReal x14907=(cj2*sj0);
IkReal x14908=(cj5*r10);
IkReal x14909=(sj1*sj2);
IkReal x14910=(cj5*r01);
IkReal x14911=(cj5*r00);
IkReal x14912=(cj1*cj2);
IkReal x14913=(cj3*sj5);
IkReal x14914=(r21*sj5);
IkReal x14915=(cj5*sj3);
IkReal x14916=(sj3*sj5);
IkReal x14917=(cj2*sj1);
IkReal x14918=(r01*sj5);
IkReal x14919=(cj3*cj5);
IkReal x14920=(cj1*sj2);
IkReal x14921=((1.0)*cj0);
IkReal x14922=(cj5*r20);
IkReal x14923=((1.0)*x14905);
IkReal x14924=((1.0)*x14904);
IkReal x14925=(cj3*x14905);
IkReal x14926=(sj3*x14905);
IkReal x14927=(cj3*x14904);
evalcond[0]=((((-1.0)*x14922*x14924))+(((-1.0)*r22*x14923))+((x14904*x14914)));
evalcond[1]=(sj0+(((-1.0)*r02*x14923))+(((-1.0)*x14911*x14924))+((x14904*x14918)));
evalcond[2]=((((-1.0)*x14908*x14924))+(((-1.0)*x14921))+(((-1.0)*r12*x14923))+((x14904*x14906)));
evalcond[3]=(((r21*x14915))+x14920+x14917+(((-1.0)*r20*x14919*x14923))+((r20*x14916))+((r22*x14927))+((r21*x14905*x14913)));
evalcond[4]=(((r21*x14919))+((r20*x14905*x14915))+x14909+(((-1.0)*r22*sj3*x14924))+(((-1.0)*x14912))+(((-1.0)*sj3*x14914*x14923))+((r20*x14913)));
evalcond[5]=((((-1.0)*r01*x14916*x14923))+((cj3*x14910))+((r00*x14913))+(((-1.0)*r02*sj3*x14924))+((cj0*x14920))+((x14911*x14926))+((cj0*x14917)));
evalcond[6]=(((r00*x14916))+(((-1.0)*cj3*x14911*x14923))+((sj3*x14910))+(((-1.0)*x14909*x14921))+((r01*x14905*x14913))+((r02*x14927))+((cj0*x14912)));
evalcond[7]=(((r10*x14913))+((sj0*x14920))+(((-1.0)*r12*sj3*x14924))+((x14908*x14926))+((r11*x14919))+((sj1*x14907))+(((-1.0)*sj3*x14906*x14923)));
evalcond[8]=(((r10*x14916))+(((-1.0)*sj0*x14909))+(((-1.0)*cj3*x14908*x14923))+((cj1*x14907))+((r11*x14915))+((x14906*x14925))+((r12*x14927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14928=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14928.valid){
continue;
}
CheckValue<IkReal> x14929 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14928.value)))+(x14929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14930=IKsin(j4);
IkReal x14931=IKcos(j4);
IkReal x14932=(r11*sj5);
IkReal x14933=(cj2*sj0);
IkReal x14934=(cj5*r10);
IkReal x14935=(sj1*sj2);
IkReal x14936=(cj5*r01);
IkReal x14937=(cj5*r00);
IkReal x14938=(cj1*cj2);
IkReal x14939=(cj3*sj5);
IkReal x14940=(r21*sj5);
IkReal x14941=(cj5*sj3);
IkReal x14942=(sj3*sj5);
IkReal x14943=(cj2*sj1);
IkReal x14944=(r01*sj5);
IkReal x14945=(cj3*cj5);
IkReal x14946=(cj1*sj2);
IkReal x14947=((1.0)*cj0);
IkReal x14948=(cj5*r20);
IkReal x14949=((1.0)*x14931);
IkReal x14950=((1.0)*x14930);
IkReal x14951=(cj3*x14931);
IkReal x14952=(sj3*x14931);
IkReal x14953=(cj3*x14930);
evalcond[0]=((((-1.0)*x14948*x14950))+((x14930*x14940))+(((-1.0)*r22*x14949)));
evalcond[1]=(sj0+(((-1.0)*x14937*x14950))+(((-1.0)*r02*x14949))+((x14930*x14944)));
evalcond[2]=(((x14930*x14932))+(((-1.0)*r12*x14949))+(((-1.0)*x14947))+(((-1.0)*x14934*x14950)));
evalcond[3]=(x14946+x14943+((r22*x14953))+((r21*x14931*x14939))+((r21*x14941))+(((-1.0)*r20*x14945*x14949))+((r20*x14942)));
evalcond[4]=((((-1.0)*x14938))+x14935+((r20*x14931*x14941))+(((-1.0)*r22*sj3*x14950))+((r21*x14945))+(((-1.0)*sj3*x14940*x14949))+((r20*x14939)));
evalcond[5]=((((-1.0)*r02*sj3*x14950))+((cj0*x14946))+((cj0*x14943))+((cj3*x14936))+((r00*x14939))+((x14937*x14952))+(((-1.0)*r01*x14942*x14949)));
evalcond[6]=(((cj0*x14938))+((r00*x14942))+((r02*x14953))+(((-1.0)*cj3*x14937*x14949))+(((-1.0)*x14935*x14947))+((r01*x14931*x14939))+((sj3*x14936)));
evalcond[7]=(((sj1*x14933))+((x14934*x14952))+((r10*x14939))+(((-1.0)*r12*sj3*x14950))+((sj0*x14946))+(((-1.0)*sj3*x14932*x14949))+((r11*x14945)));
evalcond[8]=((((-1.0)*sj0*x14935))+((r12*x14953))+((r10*x14942))+((x14932*x14951))+(((-1.0)*cj3*x14934*x14949))+((r11*x14941))+((cj1*x14933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14954=cj5*cj5;
IkReal x14955=r21*r21;
IkReal x14956=r20*r20;
IkReal x14957=(r20*r21);
IkReal x14958=((1.0)*cj3);
IkReal x14959=((1.0)*cj5);
IkReal x14960=(cj1*sj2);
IkReal x14961=(cj5*sj5);
IkReal x14962=(sj3*sj5);
IkReal x14963=(cj2*sj1);
IkReal x14964=(r21*sj5);
CheckValue<IkReal> x14965=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x14957*x14961))+(((-1.0)*x14955*x14958))+(((-1.0)*x14954*x14956*x14958))+((cj3*x14954*x14955))+(((-1.0)*x14958*(r22*r22))))),-1);
if(!x14965.valid){
continue;
}
CheckValue<IkReal> x14966 = IKatan2WithCheck(IkReal((((r22*x14960))+((r22*x14963))+((cj5*r21*r22*sj3))+((r20*r22*x14962)))),IkReal(((((-2.0)*sj3*x14954*x14957))+(((-1.0)*r20*x14959*x14960))+(((-1.0)*r20*x14959*x14963))+(((-1.0)*x14956*x14959*x14962))+((x14963*x14964))+((sj3*x14957))+((sj3*x14955*x14961))+((x14960*x14964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14965.value)))+(x14966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x14967=IKsin(j4);
IkReal x14968=IKcos(j4);
IkReal x14969=(cj3*r21);
IkReal x14970=(r21*sj5);
IkReal x14971=(r20*sj5);
IkReal x14972=(cj5*r20);
IkReal x14973=((1.0)*x14968);
IkReal x14974=((1.0)*x14967);
evalcond[0]=((((-1.0)*r22*x14973))+((x14967*x14970))+(((-1.0)*x14972*x14974)));
evalcond[1]=(((sj5*x14968*x14969))+((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x14967))+((sj3*x14971))+(((-1.0)*cj3*x14972*x14973)));
evalcond[2]=((((-1.0)*r22*sj3*x14974))+((cj3*x14971))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x14970*x14973))+((sj3*x14968*x14972))+((cj5*x14969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14975=(cj5*sj4);
IkReal x14976=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x14976))+((r00*x14975))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x14976))+(((-1.0)*r10*x14975))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x14976))+((r00*x14975))+((cj4*r02))))+IKsqr((((r11*x14976))+(((-1.0)*r10*x14975))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x14976))+((r00*x14975))+((cj4*r02))), (((r11*x14976))+(((-1.0)*r10*x14975))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14977=IKsin(j0);
IkReal x14978=IKcos(j0);
IkReal x14979=(r02*sj4);
IkReal x14980=((1.0)*sj3);
IkReal x14981=(r12*sj4);
IkReal x14982=(cj3*cj4);
IkReal x14983=((1.0)*cj5);
IkReal x14984=(r11*sj5);
IkReal x14985=(cj5*r01);
IkReal x14986=(r01*sj5);
IkReal x14987=(r00*sj5);
IkReal x14988=((0.39225)*cj2);
IkReal x14989=(cj5*r11);
IkReal x14990=((1.0)*sj2);
IkReal x14991=(r10*sj5);
IkReal x14992=((1.0)*cj4);
IkReal x14993=((0.39225)*sj1*sj2);
IkReal x14994=(cj1*x14977);
IkReal x14995=(cj4*cj5*sj3);
IkReal x14996=(cj1*x14978);
IkReal x14997=(sj1*x14978);
IkReal x14998=(sj1*x14977);
evalcond[0]=((((-1.0)*r00*sj4*x14983))+x14977+((sj4*x14986))+(((-1.0)*r02*x14992)));
evalcond[1]=((((-1.0)*r10*sj4*x14983))+(((-1.0)*r12*x14992))+(((-1.0)*x14978))+((sj4*x14984)));
evalcond[2]=(((x14978*x14993))+(((-0.425)*x14996))+(((-1.0)*x14988*x14996))+(((-1.0)*px))+(((-0.09465)*x14987))+(((-0.09465)*x14985))+(((0.10915)*x14977)));
evalcond[3]=((((-0.425)*x14994))+(((-0.10915)*x14978))+(((-1.0)*x14988*x14994))+(((-1.0)*py))+(((-0.09465)*x14989))+(((-0.09465)*x14991))+((x14977*x14993)));
evalcond[4]=(((sj2*x14996))+(((-1.0)*cj4*x14980*x14986))+((cj2*x14997))+((cj3*x14987))+((cj3*x14985))+((r00*x14995))+(((-1.0)*x14979*x14980)));
evalcond[5]=((((-1.0)*r00*x14982*x14983))+((cj3*x14979))+((cj2*x14996))+(((-1.0)*x14990*x14997))+((sj3*x14985))+((sj3*x14987))+((x14982*x14986)));
evalcond[6]=(((sj2*x14994))+((cj3*x14991))+(((-1.0)*cj4*x14980*x14984))+((cj2*x14998))+((cj3*x14989))+((r10*x14995))+(((-1.0)*x14980*x14981)));
evalcond[7]=((((-1.0)*r10*x14982*x14983))+((sj3*x14991))+((cj2*x14994))+((cj3*x14981))+(((-1.0)*x14990*x14998))+((sj3*x14989))+((x14982*x14984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14999=cj5*cj5;
IkReal x15000=r21*r21;
IkReal x15001=r20*r20;
IkReal x15002=(r20*r21);
IkReal x15003=(sj1*sj2);
IkReal x15004=(r21*sj5);
IkReal x15005=(cj1*cj2);
IkReal x15006=(cj5*r20);
IkReal x15007=(cj5*sj5);
IkReal x15008=(cj3*r22);
IkReal x15009=(sj3*x15000);
CheckValue<IkReal> x15010 = IKatan2WithCheck(IkReal((((r20*sj5*x15008))+(((-1.0)*r22*x15005))+((cj5*r21*x15008))+((r22*x15003)))),IkReal(((((-1.0)*cj3*x15001*x15007))+(((-1.0)*x15004*x15005))+((cj3*x15000*x15007))+(((-2.0)*cj3*x14999*x15002))+((x15003*x15004))+((cj3*x15002))+((x15005*x15006))+(((-1.0)*x15003*x15006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15010.valid){
continue;
}
CheckValue<IkReal> x15011=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x14999*x15009))+x15009+((sj3*x14999*x15001))+(((-2.0)*sj3*x15002*x15007)))),-1);
if(!x15011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15010.value)+(((1.5707963267949)*(x15011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15012=IKsin(j4);
IkReal x15013=IKcos(j4);
IkReal x15014=(cj3*r21);
IkReal x15015=(r21*sj5);
IkReal x15016=(r20*sj5);
IkReal x15017=(cj5*r20);
IkReal x15018=((1.0)*x15013);
IkReal x15019=((1.0)*x15012);
evalcond[0]=((((-1.0)*r22*x15018))+((x15012*x15015))+(((-1.0)*x15017*x15019)));
evalcond[1]=(((cj2*sj1))+((cj3*r22*x15012))+((sj5*x15013*x15014))+((cj5*r21*sj3))+((cj1*sj2))+(((-1.0)*cj3*x15017*x15018))+((sj3*x15016)));
evalcond[2]=(((sj3*x15013*x15017))+((cj3*x15016))+(((-1.0)*sj3*x15015*x15018))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x15014))+(((-1.0)*r22*sj3*x15019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15020=(cj5*sj4);
IkReal x15021=(sj4*sj5);
if( IKabs((((r00*x15020))+(((-1.0)*r01*x15021))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x15020))+((r11*x15021))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x15020))+(((-1.0)*r01*x15021))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x15020))+((r11*x15021))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x15020))+(((-1.0)*r01*x15021))+((cj4*r02))), ((((-1.0)*r10*x15020))+((r11*x15021))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15022=IKsin(j0);
IkReal x15023=IKcos(j0);
IkReal x15024=(r02*sj4);
IkReal x15025=((1.0)*sj3);
IkReal x15026=(r12*sj4);
IkReal x15027=(cj3*cj4);
IkReal x15028=((1.0)*cj5);
IkReal x15029=(r11*sj5);
IkReal x15030=(cj5*r01);
IkReal x15031=(r01*sj5);
IkReal x15032=(r00*sj5);
IkReal x15033=((0.39225)*cj2);
IkReal x15034=(cj5*r11);
IkReal x15035=((1.0)*sj2);
IkReal x15036=(r10*sj5);
IkReal x15037=((1.0)*cj4);
IkReal x15038=((0.39225)*sj1*sj2);
IkReal x15039=(cj1*x15022);
IkReal x15040=(cj4*cj5*sj3);
IkReal x15041=(cj1*x15023);
IkReal x15042=(sj1*x15023);
IkReal x15043=(sj1*x15022);
evalcond[0]=((((-1.0)*r00*sj4*x15028))+(((-1.0)*r02*x15037))+x15022+((sj4*x15031)));
evalcond[1]=((((-1.0)*x15023))+((sj4*x15029))+(((-1.0)*r10*sj4*x15028))+(((-1.0)*r12*x15037)));
evalcond[2]=((((0.10915)*x15022))+((x15023*x15038))+(((-1.0)*px))+(((-1.0)*x15033*x15041))+(((-0.09465)*x15032))+(((-0.09465)*x15030))+(((-0.425)*x15041)));
evalcond[3]=((((-0.10915)*x15023))+(((-0.425)*x15039))+(((-1.0)*py))+(((-0.09465)*x15034))+(((-0.09465)*x15036))+(((-1.0)*x15033*x15039))+((x15022*x15038)));
evalcond[4]=((((-1.0)*x15024*x15025))+((cj2*x15042))+((r00*x15040))+((sj2*x15041))+(((-1.0)*cj4*x15025*x15031))+((cj3*x15030))+((cj3*x15032)));
evalcond[5]=((((-1.0)*x15035*x15042))+((sj3*x15032))+((sj3*x15030))+((cj2*x15041))+(((-1.0)*r00*x15027*x15028))+((x15027*x15031))+((cj3*x15024)));
evalcond[6]=((((-1.0)*cj4*x15025*x15029))+((cj2*x15043))+(((-1.0)*x15025*x15026))+((sj2*x15039))+((cj3*x15034))+((cj3*x15036))+((r10*x15040)));
evalcond[7]=((((-1.0)*x15035*x15043))+((sj3*x15034))+((sj3*x15036))+((cj2*x15039))+((x15027*x15029))+((cj3*x15026))+(((-1.0)*r10*x15027*x15028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (00278502ff22d208f516e0c94be6cb47)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
